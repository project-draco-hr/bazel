{
  if (ruleContext.getConfiguration().enforceConstraints()) {
    checkConstraints();
  }
  if (ruleContext.hasErrors()) {
    return null;
  }
  FilesToRunProvider filesToRunProvider=new FilesToRunProvider(ruleContext.getLabel(),getFilesToRun(runfilesSupport,filesToBuild),runfilesSupport,executable);
  add(FileProvider.class,new FileProvider(ruleContext.getLabel(),filesToBuild));
  add(FilesToRunProvider.class,filesToRunProvider);
  addSkylarkTransitiveInfo(FilesToRunProvider.SKYLARK_NAME,filesToRunProvider);
  if (runfilesSupport != null) {
    addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,runfilesSupport.getRunfilesMiddleman());
  }
 else   if (providers.get(RunfilesProvider.class) != null) {
    addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,((RunfilesProvider)providers.get(RunfilesProvider.class)).getDefaultRunfiles().getAllArtifacts());
  }
  if (TargetUtils.isTestRule(ruleContext.getTarget())) {
    Preconditions.checkState(runfilesSupport != null);
    add(TestProvider.class,initializeTestProvider(filesToRunProvider));
  }
  ExtraActionArtifactsProvider extraActionsProvider=createExtraActionProvider(actionsWithoutExtraAction,ruleContext);
  add(ExtraActionArtifactsProvider.class,extraActionsProvider);
  if (!outputGroupBuilders.isEmpty()) {
    ImmutableMap.Builder<String,NestedSet<Artifact>> outputGroups=ImmutableMap.builder();
    for (    Map.Entry<String,NestedSetBuilder<Artifact>> entry : outputGroupBuilders.entrySet()) {
      outputGroups.put(entry.getKey(),entry.getValue().build());
    }
    add(OutputGroupProvider.class,new OutputGroupProvider(outputGroups.build()));
  }
  return new RuleConfiguredTarget(ruleContext,skylarkProviders.build(),providers);
}
