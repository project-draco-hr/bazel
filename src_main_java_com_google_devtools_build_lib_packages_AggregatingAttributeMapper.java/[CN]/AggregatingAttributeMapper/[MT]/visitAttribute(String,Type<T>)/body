{
  Type.SelectorList<T> selectorList=getSelectorList(attributeName,type);
  if (selectorList != null) {
    ImmutableList.Builder<T> builder=ImmutableList.builder();
    visitConfigurableAttribute(selectorList.getSelectors(),new BoundSelectorPaths(),type,null,builder);
    return builder.build();
  }
  Attribute.ComputedDefault computedDefault=getComputedDefault(attributeName,type);
  if (computedDefault != null) {
    List<Map<String,Object>> depMaps=new LinkedList<>();
    mapDepsForComputedDefault(computedDefault.dependencies(),depMaps,ImmutableMap.<String,Object>of());
    List<T> possibleValues=new ArrayList<>();
    for (    Map<String,Object> depMap : depMaps) {
      possibleValues.add(type.cast(computedDefault.getDefault(mapBackedAttributeMap(depMap))));
    }
    return possibleValues;
  }
  T value=get(attributeName,type);
  return value == null ? ImmutableList.<T>of() : ImmutableList.of(value);
}
