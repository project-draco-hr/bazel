{
  Type<?> type=attribute.getType();
  SelectorList<?> selectorList=getSelectorList(attribute.getName(),type);
  if (selectorList == null) {
    if (getComputedDefault(attribute.getName(),attribute.getType()) != null) {
      for (      Object value : visitAttribute(attribute.getName(),attribute.getType())) {
        if (value != null) {
          type.visitLabels(new Type.LabelVisitor(){
            @Override public void visit(            @Nullable Object label) throws InterruptedException {
              if (label != null) {
                observer.acceptLabelAttribute(getLabel().resolveRepositoryRelative((Label)label),attribute);
              }
            }
          }
,value);
        }
      }
    }
 else {
      super.visitLabels(attribute,observer);
    }
  }
 else {
    for (    Selector<?> selector : selectorList.getSelectors()) {
      for (      Map.Entry<Label,?> selectorEntry : selector.getEntries().entrySet()) {
        if (includeSelectKeys && !BuildType.Selector.isReservedLabel(selectorEntry.getKey())) {
          observer.acceptLabelAttribute(getLabel().resolveRepositoryRelative(selectorEntry.getKey()),attribute);
        }
        Object value=selector.isValueSet(selectorEntry.getKey()) ? selectorEntry.getValue() : attribute.getDefaultValue(null);
        type.visitLabels(new Type.LabelVisitor(){
          @Override public void visit(          @Nullable Object label) throws InterruptedException {
            if (label != null) {
              observer.acceptLabelAttribute(getLabel().resolveRepositoryRelative((Label)label),attribute);
            }
          }
        }
,value);
      }
    }
  }
}
