{
  PathFragment directory=new PathFragment(pathPrefix);
  if (directory.containsUplevelReferences()) {
    throw new TargetParsingException("up-level references are not permitted: '" + pathPrefix + "'");
  }
  if (!pathPrefix.isEmpty() && (LabelValidator.validatePackageName(pathPrefix) != null)) {
    return handleParsingError(eventHandler,pathPrefix,new TargetParsingException("'" + pathPrefix + "' is not a valid package name"),keepGoing);
  }
  final ResolvedTargets.Builder<Target> builder=ResolvedTargets.concurrentBuilder();
  try {
    packageProvider.visitPackageNamesRecursively(eventHandler,directory,useTopLevelExcludes,packageVisitorPool,new PathPackageLocator.AcceptsPathFragment(){
      @Override public void accept(      PathFragment packageName){
        String pkgName=packageName.getPathString();
        try {
          builder.merge(getTargetsInPackage(originalPattern,pkgName,FilteringPolicies.NO_FILTER));
        }
 catch (        InterruptedException e) {
          throw new RuntimeParsingException(new TargetParsingException("interrupted"));
        }
catch (        TargetParsingException e) {
          throw new RuntimeParsingException(e);
        }
      }
    }
);
  }
 catch (  RuntimeParsingException e) {
    throw e.unwrap();
  }
catch (  UnsupportedOperationException e) {
    throw new TargetParsingException("recursive target patterns are not permitted: '" + originalPattern + "'");
  }
  if (builder.isEmpty()) {
    return handleParsingError(eventHandler,originalPattern,new TargetParsingException("no targets found beneath '" + directory + "'"),keepGoing);
  }
  ResolvedTargets<Target> intermediateResult=builder.build();
  ResolvedTargets.Builder<Target> filteredBuilder=ResolvedTargets.builder();
  if (intermediateResult.hasError()) {
    filteredBuilder.setError();
  }
  for (  Target target : intermediateResult.getTargets()) {
    if (policy.shouldRetain(target,false)) {
      filteredBuilder.add(target);
    }
  }
  return filteredBuilder.build();
}
