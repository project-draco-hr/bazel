{
  for (  ConfiguredTarget topLevelTarget : topLevelTargets) {
    BuildConfiguration config=topLevelTarget.getConfiguration();
    if (config == null) {
      continue;
    }
 else     if (!config.enforceConstraints() || config.getTargetEnvironments().isEmpty()) {
      continue;
    }
    EnvironmentCollection.Builder builder=new EnvironmentCollection.Builder();
    for (    Label envLabel : config.getTargetEnvironments()) {
      try {
        Target env=packageManager.getLoadedTarget(envLabel);
        builder.put(ConstraintSemantics.getEnvironmentGroup(env),envLabel);
      }
 catch (      NoSuchPackageException|NoSuchTargetException|ConstraintSemantics.EnvironmentLookupException e) {
        throw new ViewCreationFailedException("invalid target environment",e);
      }
    }
    EnvironmentCollection expectedEnvironments=builder.build();
    SupportedEnvironmentsProvider provider=Verify.verifyNotNull(topLevelTarget.getProvider(SupportedEnvironmentsProvider.class));
    Collection<Label> missingEnvironments=ConstraintSemantics.getUnsupportedEnvironments(provider.getEnvironments(),expectedEnvironments);
    if (!missingEnvironments.isEmpty()) {
      throw new ViewCreationFailedException(String.format("This is a restricted-environment build. %s does not support" + " required environment%s %s",topLevelTarget.getLabel(),missingEnvironments.size() == 1 ? "" : "s",Joiner.on(", ").join(missingEnvironments)));
    }
  }
}
