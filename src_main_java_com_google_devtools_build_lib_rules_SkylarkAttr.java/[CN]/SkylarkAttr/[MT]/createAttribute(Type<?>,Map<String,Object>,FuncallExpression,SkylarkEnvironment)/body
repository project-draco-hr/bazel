{
  final Location loc=ast.getLocation();
  Attribute.Builder<?> builder=Attribute.attr("",type);
  Object defaultValue=arguments.get("default");
  if (defaultValue != null) {
    if (defaultValue instanceof UserDefinedFunction) {
      builder.value(new SkylarkLateBound(new SkylarkCallbackFunction((UserDefinedFunction)defaultValue,ast,env)));
    }
 else {
      builder.defaultValue(defaultValue);
    }
  }
  for (  String flag : castList(arguments.get("flags"),String.class)) {
    builder.setPropertyFlag(flag);
  }
  if (arguments.containsKey("mandatory") && (Boolean)arguments.get("mandatory")) {
    builder.setPropertyFlag("MANDATORY");
  }
  if (arguments.containsKey("executable") && (Boolean)arguments.get("executable")) {
    builder.setPropertyFlag("EXECUTABLE");
  }
  if (arguments.containsKey("single_file") && (Boolean)arguments.get("single_file")) {
    builder.setPropertyFlag("SINGLE_ARTIFACT");
  }
  if (arguments.containsKey("allow_files")) {
    Object fileTypesObj=arguments.get("allow_files");
    if (fileTypesObj == Boolean.TRUE) {
      builder.allowedFileTypes(FileTypeSet.ANY_FILE);
    }
 else     if (fileTypesObj == Boolean.FALSE) {
      builder.allowedFileTypes(FileTypeSet.NO_FILE);
    }
 else     if (fileTypesObj instanceof SkylarkFileType) {
      builder.allowedFileTypes(((SkylarkFileType)fileTypesObj).getFileTypeSet());
    }
 else {
      throw new EvalException(loc,"allow_files should be a boolean or a filetype object.");
    }
  }
 else   if (type.equals(Type.LABEL) || type.equals(Type.LABEL_LIST)) {
    builder.allowedFileTypes(FileTypeSet.NO_FILE);
  }
  Object ruleClassesObj=arguments.get("allow_rules");
  if (ruleClassesObj != null) {
    builder.allowedRuleClasses(castList(ruleClassesObj,String.class,"allowed rule classes for attribute definition"));
  }
  if (arguments.containsKey("providers")) {
    builder.mandatoryProviders(castList(arguments.get("providers"),String.class));
  }
  if (arguments.containsKey("cfg")) {
    builder.cfg((ConfigurationTransition)arguments.get("cfg"));
  }
  return builder;
}
