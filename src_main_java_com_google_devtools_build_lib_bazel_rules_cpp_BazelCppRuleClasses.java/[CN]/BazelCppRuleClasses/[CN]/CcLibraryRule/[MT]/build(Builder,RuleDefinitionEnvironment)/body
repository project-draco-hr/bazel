{
  SafeImplicitOutputsFunction implicitOutputsFunction=new SafeImplicitOutputsFunction(){
    @Override public Iterable<String> getImplicitOutputs(    AttributeMap rule){
      boolean alwaysLink=rule.get("alwayslink",Type.BOOLEAN);
      boolean linkstatic=rule.get("linkstatic",Type.BOOLEAN);
      SafeImplicitOutputsFunction staticLib=fromTemplates(alwaysLink ? "%{dirname}lib%{basename}.lo" : "%{dirname}lib%{basename}.a");
      SafeImplicitOutputsFunction allLibs=linkstatic || CcLibrary.appearsToHaveNoObjectFiles(rule) ? staticLib : fromFunctions(staticLib,CC_LIBRARY_DYNAMIC_LIB);
      return allLibs.getImplicitOutputs(rule);
    }
  }
;
  return builder.setImplicitOutputsFunction(implicitOutputsFunction).add(attr("alwayslink",BOOLEAN).nonconfigurable("value is referenced in an ImplicitOutputsFunction")).add(attr("implements",LABEL_LIST).allowedFileTypes().allowedRuleClasses("cc_public_library$headers")).override(attr("linkstatic",BOOLEAN).value(false).nonconfigurable("value is referenced in an ImplicitOutputsFunction")).build();
}
