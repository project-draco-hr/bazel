{
  Location location=Location.fromFile(externalPackage.getFilename());
  for (  Target target : externalPackage.getTargets()) {
    if (target.getTargetKind().startsWith("maven_jar ")) {
      RepositoryName repositoryName;
      try {
        repositoryName=RepositoryName.create("@" + target.getName());
      }
 catch (      LabelSyntaxException e) {
        handler.handle(Event.error(location,"Invalid repository name for " + target + ": "+ e.getMessage()));
        return;
      }
      com.google.devtools.build.lib.packages.Rule workspaceRule=externalPackage.getRule(repositoryName.strippedName());
      DefaultModelResolver modelResolver=resolver.getModelResolver();
      AttributeMap attributeMap=AggregatingAttributeMapper.of(workspaceRule);
      Rule rule;
      try {
        rule=new Rule(attributeMap.get("artifact",Type.STRING));
      }
 catch (      Rule.InvalidRuleException e) {
        handler.handle(Event.error(location,"Couldn't get attribute: " + e.getMessage()));
        return;
      }
      if (attributeMap.isAttributeValueExplicitlySpecified("repository")) {
        modelResolver.addUserRepository(attributeMap.get("repository",Type.STRING));
        rule.setRepository(attributeMap.get("repository",Type.STRING),handler);
      }
      ModelSource modelSource;
      try {
        modelSource=modelResolver.resolveModel(rule.groupId(),rule.artifactId(),rule.version());
      }
 catch (      UnresolvableModelException e) {
        handler.handle(Event.error("Could not resolve model for " + target + ": "+ e.getMessage()));
        continue;
      }
      resolver.addRootDependency(rule);
      resolver.resolveEffectiveModel(modelSource,Sets.<String>newHashSet(),rule);
    }
 else     if (!target.getTargetKind().startsWith("bind") && !target.getTargetKind().startsWith("source ")) {
      handler.handle(Event.warn(location,"Cannot fetch transitive dependencies for " + target + " yet, skipping"));
    }
  }
}
