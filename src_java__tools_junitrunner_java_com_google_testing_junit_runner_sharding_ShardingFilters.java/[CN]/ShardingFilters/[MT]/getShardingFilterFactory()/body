{
  String strategy=shardingEnvironment.getTestShardingStrategy();
  if (strategy == null) {
    return defaultShardingStrategy;
  }
  ShardingFilterFactory shardingFilterFactory;
  try {
    shardingFilterFactory=ShardingStrategy.valueOf(strategy.toUpperCase());
  }
 catch (  IllegalArgumentException e) {
    try {
      ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
      Class<? extends ShardingFilterFactory> strategyClass=classLoader.loadClass(strategy).asSubclass(ShardingFilterFactory.class);
      shardingFilterFactory=strategyClass.getConstructor().newInstance();
    }
 catch (    ReflectiveOperationException|IllegalArgumentException e2) {
      throw new RuntimeException("Could not create custom sharding strategy class " + strategy,e2);
    }
  }
  return shardingFilterFactory;
}
