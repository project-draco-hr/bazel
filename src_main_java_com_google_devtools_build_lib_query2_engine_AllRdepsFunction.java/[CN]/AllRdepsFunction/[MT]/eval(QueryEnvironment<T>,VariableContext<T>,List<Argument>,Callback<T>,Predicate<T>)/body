{
  final int depth=args.size() > 1 ? args.get(1).getInteger() : Integer.MAX_VALUE;
  if (env instanceof StreamableQueryEnvironment<?>) {
    ((StreamableQueryEnvironment<T>)env).getAllRdeps(args.get(0).getExpression(),universe,context,callback,depth);
  }
 else {
    final Uniquifier<T> uniquifier=env.createUniquifier();
    env.eval(args.get(0).getExpression(),context,new Callback<T>(){
      @Override public void process(      Iterable<T> partialResult) throws QueryException, InterruptedException {
        Iterable<T> current=partialResult;
        for (int i=0; i <= depth; i++) {
          List<T> next=new ArrayList<>();
          Iterable<T> currentInUniverse=Iterables.filter(current,universe);
          next.addAll(env.getReverseDeps(uniquifier.unique(currentInUniverse)));
          callback.process(currentInUniverse);
          if (next.isEmpty()) {
            break;
          }
          current=next;
        }
      }
    }
);
  }
}
