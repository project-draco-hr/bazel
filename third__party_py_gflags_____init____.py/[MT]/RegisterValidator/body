def RegisterValidator(flag_name, checker, message='Flag validation failed', flag_values=FLAGS):
    "Adds a constraint, which will be enforced during program execution.\n\n  The constraint is validated when flags are initially parsed, and after each\n  change of the corresponding flag's value.\n  Args:\n    flag_name: string, name of the flag to be checked.\n    checker: method to validate the flag.\n      input  - value of the corresponding flag (string, boolean, etc.\n        This value will be passed to checker by the library). See file's\n        docstring for examples.\n      output - Boolean.\n        Must return True if validator constraint is satisfied.\n        If constraint is not satisfied, it should either return False or\n          raise gflags_validators.Error(desired_error_message).\n    message: error text to be shown to the user if checker returns False.\n      If checker raises gflags_validators.Error, message from the raised\n        Error will be shown.\n    flag_values: FlagValues\n  Raises:\n    AttributeError: if flag_name is not registered as a valid flag name.\n  "
    flag_values.AddValidator(gflags_validators.SimpleValidator(flag_name, checker, message))
