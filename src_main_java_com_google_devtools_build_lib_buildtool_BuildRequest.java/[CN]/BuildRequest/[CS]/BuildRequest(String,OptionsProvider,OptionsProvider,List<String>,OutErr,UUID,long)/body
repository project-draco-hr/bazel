{
  this.commandName=commandName;
  this.optionsDescription=OptionsUtils.asShellEscapedString(options);
  this.outErr=outErr;
  this.targets=targets;
  this.id=id;
  this.startTimeMillis=startTimeMillis;
  this.optionsCache=CacheBuilder.newBuilder().build(new CacheLoader<Class<? extends OptionsBase>,Optional<OptionsBase>>(){
    @Override public Optional<OptionsBase> load(    Class<? extends OptionsBase> key) throws Exception {
      OptionsBase result=options.getOptions(key);
      if (result == null && startupOptions != null) {
        result=startupOptions.getOptions(key);
      }
      return Optional.fromNullable(result);
    }
  }
);
  for (  Class<? extends OptionsBase> optionsClass : MANDATORY_OPTIONS) {
    Preconditions.checkNotNull(getOptions(optionsClass));
  }
}
