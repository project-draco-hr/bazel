{
  if (base.getProvider(JackLibraryProvider.class) != null) {
    return new ConfiguredAspect.Builder(NAME,ruleContext).build();
  }
  JavaSourceInfoProvider sourceProvider=base.getProvider(JavaSourceInfoProvider.class);
  PathFragment rulePath=ruleContext.getLabel().toPathFragment();
  PathFragment jackLibraryPath=rulePath.replaceName("lib" + rulePath.getBaseName() + ".jack");
  Artifact jackLibraryOutput=ruleContext.getAnalysisEnvironment().getDerivedArtifact(jackLibraryPath,ruleContext.getBinOrGenfilesDirectory());
  if (!AndroidSdkProvider.verifyPresence(ruleContext)) {
    return null;
  }
  AndroidSdkProvider androidSdk=AndroidSdkProvider.fromRuleContext(ruleContext);
  JackCompilationHelper jackHelper=new JackCompilationHelper.Builder().setRuleContext(ruleContext).setOutputArtifact(jackLibraryOutput).setJackBinary(androidSdk.getJack()).setJillBinary(androidSdk.getJill()).setResourceExtractorBinary(androidSdk.getResourceExtractor()).setJackBaseClasspath(androidSdk.getJavaBaseClasspathForJack()).addJavaSources(sourceProvider.getSourceFiles()).addSourceJars(sourceProvider.getSourceJars()).addCompiledJars(sourceProvider.getJarFiles()).addResources(sourceProvider.getResources()).addProcessorNames(sourceProvider.getProcessorNames()).addProcessorClasspathJars(sourceProvider.getProcessorPath()).addExports(getPotentialDependency(ruleContext,"exports")).addDeps(getPotentialDependency(ruleContext,"deps")).addRuntimeDeps(getPotentialDependency(ruleContext,"runtime_deps")).build();
  JackLibraryProvider result=JavaCommon.isNeverLink(ruleContext) ? jackHelper.compileAsNeverlinkLibrary() : jackHelper.compileAsLibrary();
  return new ConfiguredAspect.Builder(NAME,ruleContext).addProvider(result).build();
}
