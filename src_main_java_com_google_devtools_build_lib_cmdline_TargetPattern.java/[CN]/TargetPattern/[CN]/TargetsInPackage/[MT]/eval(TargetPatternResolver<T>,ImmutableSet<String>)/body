{
  Preconditions.checkArgument(excludedSubdirectories.isEmpty(),"Target pattern \"%s\" of type %s cannot be evaluated with excluded subdirectories: %s.",getOriginalPattern(),getType(),excludedSubdirectories);
  if (checkWildcardConflict) {
    ResolvedTargets<T> targets=getWildcardConflict(resolver);
    if (targets != null) {
      return targets;
    }
  }
  String packageName=removeSuffix(pattern,suffix);
  try {
    PackageIdentifier.parse(packageName);
  }
 catch (  LabelSyntaxException e) {
    throw new TargetParsingException("Invalid package name '" + packageName + "': "+ e.getMessage());
  }
  return resolver.getTargetsInPackage(getOriginalPattern(),PackageIdentifier.createInDefaultRepo(packageName),rulesOnly);
}
