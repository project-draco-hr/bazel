{
  return builder.requiresConfigurationFragments(ObjcConfiguration.class,AppleConfiguration.class).override(attr("deps",LABEL_LIST).allowedRuleClasses("proto_library","filegroup").legacyAllowAnyFileType()).add(attr(OPTIONS_FILE_ATTR,LABEL).legacyAllowAnyFileType().singleArtifact().cfg(HOST)).add(attr(OUTPUT_CPP_ATTR,BOOLEAN).value(false)).add(attr(PER_PROTO_INCLUDES,BOOLEAN).value(false)).add(attr(COMPILE_PROTOS_ATTR,LABEL).allowedFileTypes(FileType.of(".py")).cfg(HOST).singleArtifact().value(env.getToolsLabel("//tools/objc:compile_protos"))).add(attr(PROTO_SUPPORT_ATTR,LABEL).legacyAllowAnyFileType().cfg(HOST).value(env.getToolsLabel("//tools/objc:proto_support"))).add(attr(USE_OBJC_HEADER_NAMES_ATTR,BOOLEAN).value(false)).add(attr(LIBPROTOBUF_ATTR,LABEL).allowedRuleClasses("objc_library").value(new ComputedDefault(OUTPUT_CPP_ATTR){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.get(OUTPUT_CPP_ATTR,Type.BOOLEAN) ? env.getLabel("//external:objc_proto_cpp_lib") : env.getLabel("//external:objc_proto_lib");
    }
  }
)).add(attr("$xcodegen",LABEL).cfg(HOST).exec().value(env.getToolsLabel("//tools/objc:xcodegen"))).build();
}
