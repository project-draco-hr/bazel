def testRepeatedScalars(self):
    proto = unittest_pb2.TestAllTypes()
    self.assertTrue((not proto.repeated_int32))
    self.assertEqual(0, len(proto.repeated_int32))
    proto.repeated_int32.append(5)
    proto.repeated_int32.append(10)
    proto.repeated_int32.append(15)
    self.assertTrue(proto.repeated_int32)
    self.assertEqual(3, len(proto.repeated_int32))
    self.assertEqual([5, 10, 15], proto.repeated_int32)
    self.assertEqual(5, proto.repeated_int32[0])
    self.assertEqual(15, proto.repeated_int32[(-1)])
    self.assertRaises(IndexError, proto.repeated_int32.__getitem__, 1234)
    self.assertRaises(IndexError, proto.repeated_int32.__getitem__, (-1234))
    self.assertRaises(TypeError, proto.repeated_int32.__getitem__, 'foo')
    self.assertRaises(TypeError, proto.repeated_int32.__getitem__, None)
    proto.repeated_int32[1] = 20
    self.assertEqual([5, 20, 15], proto.repeated_int32)
    proto.repeated_int32.insert(1, 25)
    self.assertEqual([5, 25, 20, 15], proto.repeated_int32)
    proto.repeated_int32.append(30)
    self.assertEqual([25, 20, 15], proto.repeated_int32[1:4])
    self.assertEqual([5, 25, 20, 15, 30], proto.repeated_int32[:])
    proto.repeated_int32[1:4] = (i for i in range(3))
    self.assertEqual([5, 0, 1, 2, 30], proto.repeated_int32)
    proto.repeated_int32[1:4] = [35, 40, 45]
    self.assertEqual([5, 35, 40, 45, 30], proto.repeated_int32)
    result = []
    for i in proto.repeated_int32:
        result.append(i)
    self.assertEqual([5, 35, 40, 45, 30], result)
    del proto.repeated_int32[2]
    self.assertEqual([5, 35, 45, 30], proto.repeated_int32)
    del proto.repeated_int32[2:]
    self.assertEqual([5, 35], proto.repeated_int32)
    proto.repeated_int32.extend([3, 13])
    self.assertEqual([5, 35, 3, 13], proto.repeated_int32)
    proto.ClearField('repeated_int32')
    self.assertTrue((not proto.repeated_int32))
    self.assertEqual(0, len(proto.repeated_int32))
    proto.repeated_int32.append(1)
    self.assertEqual(1, proto.repeated_int32[(-1)])
    proto.repeated_int32[(-1)] = 2
    self.assertEqual(2, proto.repeated_int32[(-1)])
    proto.repeated_int32[:] = [0, 1, 2, 3]
    del proto.repeated_int32[(-1)]
    self.assertEqual([0, 1, 2], proto.repeated_int32)
    del proto.repeated_int32[(-2)]
    self.assertEqual([0, 2], proto.repeated_int32)
    self.assertRaises(IndexError, proto.repeated_int32.__delitem__, (-3))
    self.assertRaises(IndexError, proto.repeated_int32.__delitem__, 300)
    del proto.repeated_int32[(-2):(-1)]
    self.assertEqual([2], proto.repeated_int32)
    del proto.repeated_int32[100:10000]
    self.assertEqual([2], proto.repeated_int32)
