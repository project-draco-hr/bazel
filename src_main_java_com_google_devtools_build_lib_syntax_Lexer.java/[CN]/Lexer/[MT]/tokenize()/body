{
  while (pos < buffer.length) {
    if (tokenizeTwoChars()) {
      pos+=2;
      continue;
    }
    char c=buffer[pos];
    pos++;
switch (c) {
case '{':
{
        addToken(new Token(TokenKind.LBRACE,pos - 1,pos));
        openParenStackDepth++;
        break;
      }
case '}':
{
      addToken(new Token(TokenKind.RBRACE,pos - 1,pos));
      popParen();
      break;
    }
case '(':
{
    addToken(new Token(TokenKind.LPAREN,pos - 1,pos));
    openParenStackDepth++;
    break;
  }
case ')':
{
  addToken(new Token(TokenKind.RPAREN,pos - 1,pos));
  popParen();
  break;
}
case '[':
{
addToken(new Token(TokenKind.LBRACKET,pos - 1,pos));
openParenStackDepth++;
break;
}
case ']':
{
addToken(new Token(TokenKind.RBRACKET,pos - 1,pos));
popParen();
break;
}
case '>':
{
addToken(new Token(TokenKind.GREATER,pos - 1,pos));
break;
}
case '<':
{
addToken(new Token(TokenKind.LESS,pos - 1,pos));
break;
}
case ':':
{
addToken(new Token(TokenKind.COLON,pos - 1,pos));
break;
}
case ',':
{
addToken(new Token(TokenKind.COMMA,pos - 1,pos));
break;
}
case '+':
{
addToken(new Token(TokenKind.PLUS,pos - 1,pos));
break;
}
case '-':
{
addToken(new Token(TokenKind.MINUS,pos - 1,pos));
break;
}
case '=':
{
addToken(new Token(TokenKind.EQUALS,pos - 1,pos));
break;
}
case '%':
{
addToken(new Token(TokenKind.PERCENT,pos - 1,pos));
break;
}
case ';':
{
addToken(new Token(TokenKind.SEMI,pos - 1,pos));
break;
}
case '.':
{
addToken(new Token(TokenKind.DOT,pos - 1,pos));
break;
}
case '*':
{
addToken(new Token(TokenKind.STAR,pos - 1,pos));
break;
}
case ' ':
case '\t':
case '\r':
{
break;
}
case '\\':
{
if (pos + 1 < buffer.length && buffer[pos] == '\n') {
pos++;
}
 else {
addToken(new Token(TokenKind.ILLEGAL,pos - 1,pos,Character.toString(c)));
}
break;
}
case '\n':
{
newline();
break;
}
case '#':
{
int oldPos=pos - 1;
while (pos < buffer.length) {
c=buffer[pos];
if (c == '\n') {
break;
}
 else {
pos++;
}
}
addToken(new Token(TokenKind.COMMENT,oldPos,pos,bufferSlice(oldPos,pos)));
break;
}
case '\'':
case '\"':
{
addToken(stringLiteral(c,false));
break;
}
default :
{
if (c == 'r' && pos < buffer.length && (buffer[pos] == '\'' || buffer[pos] == '\"')) {
c=buffer[pos];
pos++;
addToken(stringLiteral(c,true));
break;
}
if (Character.isDigit(c)) {
addToken(integer());
}
 else if (Character.isJavaIdentifierStart(c) && c != '$') {
addToken(identifierOrKeyword());
}
 else {
if (parsePython) {
addToken(new Token(TokenKind.ILLEGAL,pos - 1,pos,Character.toString(c)));
}
 else {
error("invalid character: '" + c + "'");
}
}
break;
}
}
}
if (indentStack.size() > 1) {
addToken(new Token(TokenKind.NEWLINE,pos - 1,pos));
while (indentStack.size() > 1) {
indentStack.pop();
addToken(new Token(TokenKind.OUTDENT,pos - 1,pos));
}
}
if (tokens.isEmpty() || tokens.get(tokens.size() - 1).kind != TokenKind.NEWLINE) {
addToken(new Token(TokenKind.NEWLINE,pos - 1,pos));
}
addToken(new Token(TokenKind.EOF,pos,pos));
}
