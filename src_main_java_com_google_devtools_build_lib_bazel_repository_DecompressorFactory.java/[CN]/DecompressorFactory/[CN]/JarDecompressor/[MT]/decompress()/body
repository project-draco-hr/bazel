{
  String baseName=archiveFile.getBaseName();
  try {
    FileSystemUtils.createDirectoryAndParents(repositoryDir);
    Path workspaceFile=repositoryDir.getRelative("WORKSPACE");
    FileSystemUtils.writeContent(workspaceFile,Charset.forName("UTF-8"),String.format("# DO NOT EDIT: automatically generated WORKSPACE file for %s rule %s\n",targetKind,targetName));
    Path jarDirectory=repositoryDir.getRelative("jar");
    FileSystemUtils.createDirectoryAndParents(jarDirectory);
    Path jarSymlink=jarDirectory.getRelative(baseName);
    if (!jarSymlink.exists()) {
      jarSymlink.createSymbolicLink(archiveFile);
    }
    Path buildFile=jarDirectory.getRelative("BUILD");
    FileSystemUtils.writeLinesAs(buildFile,Charset.forName("UTF-8"),"# DO NOT EDIT: automatically generated BUILD file for " + targetKind + " rule "+ targetName,"java_import(","    name = 'jar',","    jars = ['" + baseName + "'],","    visibility = ['//visibility:public']",")");
  }
 catch (  IOException e) {
    throw new DecompressorException("Error auto-creating jar repo structure: " + e.getMessage());
  }
  return repositoryDir;
}
