{
  if (invocationPolicy == null || invocationPolicy.getFlagPoliciesCount() == 0) {
    return;
  }
  ImmutableSet<String> commandAndParentCommands=command == null ? ImmutableSet.<String>of() : CommandNameCache.CommandNameCacheInstance.INSTANCE.get(command);
  for (  FlagPolicy flagPolicy : invocationPolicy.getFlagPoliciesList()) {
    String flagName=flagPolicy.getFlagName();
    if (!flagPolicy.getCommandsList().isEmpty() && !commandAndParentCommands.isEmpty()) {
      boolean flagApplies=false;
      for (      String policyCommand : flagPolicy.getCommandsList()) {
        if (commandAndParentCommands.contains(policyCommand)) {
          flagApplies=true;
          break;
        }
      }
      if (!flagApplies) {
        continue;
      }
    }
    OptionValueDescription valueDescription;
    try {
      valueDescription=parser.getOptionValueDescription(flagName);
    }
 catch (    IllegalArgumentException e) {
      log.info(String.format("Flag '%s' specified by invocation policy does not exist",flagName));
      continue;
    }
    OptionDescription optionDescription=parser.getOptionDescription(flagName);
    Verify.verifyNotNull(optionDescription);
switch (flagPolicy.getOperationCase()) {
case SET_VALUE:
      applySetValueOperation(parser,flagPolicy,flagName,valueDescription,optionDescription);
    break;
case USE_DEFAULT:
  applyUseDefaultOperation(parser,flagName);
break;
case ALLOW_VALUES:
AllowValues allowValues=flagPolicy.getAllowValues();
FilterValueOperation.ALLOW_VALUE_OPERATION.apply(parser,allowValues.getAllowedValuesList(),allowValues.hasNewDefaultValue() ? allowValues.getNewDefaultValue() : null,flagName,valueDescription,optionDescription);
break;
case DISALLOW_VALUES:
DisallowValues disallowValues=flagPolicy.getDisallowValues();
FilterValueOperation.DISALLOW_VALUE_OPERATION.apply(parser,disallowValues.getDisallowedValuesList(),disallowValues.hasNewDefaultValue() ? disallowValues.getNewDefaultValue() : null,flagName,valueDescription,optionDescription);
break;
case OPERATION_NOT_SET:
throw new OptionsParsingException(String.format("Flag policy for flag '%s' does not " + "have an operation",flagName));
default :
log.warning(String.format("Unknown operation '%s' from invocation policy for flag '%s'",flagPolicy.getOperationCase(),flagName));
break;
}
}
}
