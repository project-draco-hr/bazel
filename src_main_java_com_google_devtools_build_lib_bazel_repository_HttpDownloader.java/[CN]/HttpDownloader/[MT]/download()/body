{
  URL url=new URL(urlString);
  String filename=new PathFragment(url.getPath()).getBaseName();
  if (filename.isEmpty()) {
    filename="temp";
  }
  if (!type.isEmpty()) {
    filename+="." + type;
  }
  Path destination=outputDirectory.getRelative(filename);
  try {
    String currentSha256=getHash(Hashing.sha256().newHasher(),destination);
    if (currentSha256.equals(sha256)) {
      return destination;
    }
  }
 catch (  IOException e) {
  }
  AtomicInteger totalBytes=new AtomicInteger(0);
  final ScheduledFuture<?> loggerHandle=getLoggerHandle(totalBytes);
  try (OutputStream out=destination.getOutputStream();InputStream in=getInputStream(url)){
    int read;
    byte[] buf=new byte[BUFFER_SIZE];
    while ((read=in.read(buf)) > 0) {
      totalBytes.addAndGet(read);
      out.write(buf,0,read);
    }
  }
 catch (  IOException e) {
    throw new IOException("Error downloading " + url + " to "+ destination+ ": "+ e.getMessage());
  }
 finally {
    scheduler.schedule(new Runnable(){
      @Override public void run(){
        loggerHandle.cancel(true);
      }
    }
,0,TimeUnit.SECONDS);
  }
  String downloadedSha256;
  try {
    downloadedSha256=getHash(Hashing.sha256().newHasher(),destination);
  }
 catch (  IOException e) {
    throw new IOException("Could not hash file " + destination + ": "+ e.getMessage()+ ", expected SHA-256 of "+ sha256+ ")");
  }
  if (!downloadedSha256.equals(sha256)) {
    throw new IOException("Downloaded file at " + destination + " has SHA-256 of "+ downloadedSha256+ ", does not match expected SHA-256 ("+ sha256+ ")");
  }
  return destination;
}
