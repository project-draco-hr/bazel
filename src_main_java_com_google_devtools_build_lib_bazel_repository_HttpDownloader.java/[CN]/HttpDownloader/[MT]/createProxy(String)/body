{
  if (Strings.isNullOrEmpty(proxyAddress)) {
    return Proxy.NO_PROXY;
  }
  Pattern urlPattern=Pattern.compile("^(https?)://(?:([^:@]+?)(?::([^@]+?))?@)?(?:[^:]+)(?::(\\d+))?$");
  Matcher matcher=urlPattern.matcher(proxyAddress);
  if (!matcher.matches()) {
    throw new IOException("Proxy address " + proxyAddress + " is not a valid URL");
  }
  String protocol=matcher.group(1);
  final String username=matcher.group(2);
  final String password=matcher.group(3);
  String port=matcher.group(4);
  boolean https;
switch (protocol) {
case "https":
    https=true;
  break;
case "http":
https=false;
break;
default :
throw new IOException("Invalid proxy protocol for " + proxyAddress);
}
if (username != null) {
if (password == null) {
throw new IOException("No password given for proxy " + proxyAddress);
}
System.setProperty(protocol + ".proxyUser",username);
System.setProperty(protocol + ".proxyPassword",password);
Authenticator.setDefault(new Authenticator(){
public PasswordAuthentication getPasswordAuthentication(){
return new PasswordAuthentication(username,password.toCharArray());
}
}
);
}
if (port == null) {
return new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyAddress,https ? 443 : 80));
}
try {
return new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyAddress.substring(0,proxyAddress.lastIndexOf(':')),Integer.parseInt(port)));
}
 catch (NumberFormatException e) {
throw new IOException("Error parsing proxy port: " + proxyAddress);
}
}
