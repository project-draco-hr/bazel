{
  String expectFailure=ruleContext.attributes().get("expect_failure",Type.STRING);
  try (Mutability mutability=Mutability.create("configured target")){
    SkylarkRuleContext skylarkRuleContext=new SkylarkRuleContext(ruleContext,Kind.RULE);
    Environment env=Environment.builder(mutability).setSkylark().setCallerLabel(ruleContext.getLabel()).setGlobals(ruleContext.getRule().getRuleClassObject().getRuleDefinitionEnvironment().getGlobals()).setEventHandler(ruleContext.getAnalysisEnvironment().getEventHandler()).build();
    Object target=ruleImplementation.call(ImmutableList.<Object>of(skylarkRuleContext),ImmutableMap.<String,Object>of(),null,env);
    if (ruleContext.hasErrors()) {
      return null;
    }
 else     if (!(target instanceof SkylarkClassObject) && target != Runtime.NONE && !(target instanceof Iterable)) {
      ruleContext.ruleError(String.format("Rule should return a return a struct or a list, but got %s",SkylarkType.typeOf(target)));
      return null;
    }
 else     if (!expectFailure.isEmpty()) {
      ruleContext.ruleError("Expected failure not found: " + expectFailure);
      return null;
    }
    ConfiguredTarget configuredTarget=createTarget(ruleContext,target,registeredProviderTypes);
    SkylarkProviderValidationUtil.checkOrphanArtifacts(ruleContext);
    return configuredTarget;
  }
 catch (  EvalException e) {
    addRuleToStackTrace(e,ruleContext.getRule(),ruleImplementation);
    if (!expectFailure.isEmpty() && getMessageWithoutStackTrace(e).matches(expectFailure)) {
      return new com.google.devtools.build.lib.analysis.RuleConfiguredTargetBuilder(ruleContext).add(RunfilesProvider.class,RunfilesProvider.EMPTY).build();
    }
    ruleContext.ruleError("\n" + e.print());
    return null;
  }
}
