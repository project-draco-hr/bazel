{
  Map<String,SkylarkValue> outputGroups=SkylarkType.castMap(value,String.class,SkylarkValue.class,"output_groups");
  for (  String outputGroup : outputGroups.keySet()) {
    SkylarkValue objects=outputGroups.get(outputGroup);
    NestedSet<Artifact> artifacts;
    String typeErrorMessage="Output group '%s' is of unexpected type. " + "Should be list or set of Files, but got '%s' instead.";
    if (objects instanceof SkylarkList) {
      NestedSetBuilder<Artifact> nestedSetBuilder=NestedSetBuilder.stableOrder();
      for (      Object o : (SkylarkList)objects) {
        if (o instanceof Artifact) {
          nestedSetBuilder.add((Artifact)o);
        }
 else {
          throw new EvalException(loc,String.format(typeErrorMessage,outputGroup,"list with an element of " + EvalUtils.getDataTypeNameFromClass(o.getClass())));
        }
      }
      artifacts=nestedSetBuilder.build();
    }
 else {
      artifacts=SkylarkType.cast(objects,SkylarkNestedSet.class,Artifact.class,loc,typeErrorMessage,outputGroup,EvalUtils.getDataTypeName(objects,true)).getSet(Artifact.class);
    }
    builder.addOutputGroup(outputGroup,artifacts);
  }
}
