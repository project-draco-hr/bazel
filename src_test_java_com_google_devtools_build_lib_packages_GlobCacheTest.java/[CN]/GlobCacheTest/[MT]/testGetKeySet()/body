{
  assertThat(cache.getKeySet()).isEmpty();
  cache.getGlobUnsorted("*.java");
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false));
  cache.getGlobUnsorted("*.java");
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false));
  cache.getGlobUnsorted("*.js");
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false),Pair.of("*.js",false));
  cache.getGlobUnsorted("*.java",true);
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false),Pair.of("*.js",false),Pair.of("*.java",true));
  try {
    cache.getGlobUnsorted("invalid?");
    fail("Expected an invalid regex exception");
  }
 catch (  BadGlobException expected) {
  }
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false),Pair.of("*.js",false),Pair.of("*.java",true));
  cache.getGlobUnsorted("foo/first.*");
  assertThat(cache.getKeySet()).containsExactly(Pair.of("*.java",false),Pair.of("*.java",true),Pair.of("*.js",false),Pair.of("foo/first.*",false));
}
