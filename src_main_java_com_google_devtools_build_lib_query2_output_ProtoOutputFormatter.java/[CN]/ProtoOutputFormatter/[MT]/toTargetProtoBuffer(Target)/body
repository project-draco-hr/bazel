{
  Build.Target.Builder targetPb=Build.Target.newBuilder();
  String location=getLocation(target,relativeLocations);
  if (target instanceof Rule) {
    Rule rule=(Rule)target;
    Build.Rule.Builder rulePb=Build.Rule.newBuilder().setName(rule.getLabel().toString()).setRuleClass(rule.getRuleClass());
    if (includeLocation()) {
      rulePb.setLocation(location);
    }
    Map<Attribute,Build.Attribute> serializedAttributes=Maps.newHashMap();
    for (    Attribute attr : rule.getAttributes()) {
      if (!includeDefaultValues && !rule.isAttributeValueExplicitlySpecified(attr) || !includeAttribute(rule,attr)) {
        continue;
      }
      Iterable<Object> possibleAttributeValues=AggregatingAttributeMapper.of(rule).getPossibleAttributeValues(rule,attr);
      Object flattenedAttributeValue=AggregatingAttributeMapper.flattenAttributeValues(attr.getType(),possibleAttributeValues);
      Build.Attribute serializedAttribute=AttributeFormatter.getAttributeProto(attr,flattenedAttributeValue,rule.isAttributeValueExplicitlySpecified(attr),false,true);
      rulePb.addAttribute(serializedAttribute);
      serializedAttributes.put(attr,serializedAttribute);
    }
    postProcess(rule,rulePb,serializedAttributes);
    Environment env=rule.getRuleClassObject().getRuleDefinitionEnvironment();
    if (env != null && includeRuleDefinitionEnvironment()) {
      rulePb.addAttribute(Build.Attribute.newBuilder().setName(RULE_IMPLEMENTATION_HASH_ATTR_NAME).setType(ProtoUtils.getDiscriminatorFromType(com.google.devtools.build.lib.syntax.Type.STRING)).setStringValue(env.getTransitiveContentHashCode()));
    }
    ImmutableMultimap<Attribute,Label> aspectsDependencies=aspectResolver.computeAspectDependencies(target,dependencyFilter);
    for (    Entry<Attribute,Collection<Label>> entry : aspectsDependencies.asMap().entrySet()) {
      Attribute attribute=entry.getKey();
      Collection<Label> labels=entry.getValue();
      if (!includeAspectAttribute(attribute,labels)) {
        continue;
      }
      Object attributeValue=getAspectAttributeValue(attribute,labels);
      Build.Attribute serializedAttribute=AttributeFormatter.getAttributeProto(attribute,attributeValue,false,false,true);
      rulePb.addAttribute(serializedAttribute);
    }
    if (includeRuleInputsAndOutputs()) {
      for (      Label label : aspectsDependencies.values()) {
        rulePb.addRuleInput(label.toString());
      }
      for (      Label label : rule.getLabels(dependencyFilter)) {
        rulePb.addRuleInput(label.toString());
      }
      for (      OutputFile outputFile : rule.getOutputFiles()) {
        Label fileLabel=outputFile.getLabel();
        rulePb.addRuleOutput(fileLabel.toString());
      }
    }
    for (    String feature : rule.getFeatures()) {
      rulePb.addDefaultSetting(feature);
    }
    targetPb.setType(RULE);
    targetPb.setRule(rulePb);
  }
 else   if (target instanceof OutputFile) {
    OutputFile outputFile=(OutputFile)target;
    Label label=outputFile.getLabel();
    Rule generatingRule=outputFile.getGeneratingRule();
    GeneratedFile.Builder output=GeneratedFile.newBuilder().setGeneratingRule(generatingRule.getLabel().toString()).setName(label.toString());
    if (includeLocation()) {
      output.setLocation(location);
    }
    targetPb.setType(GENERATED_FILE);
    targetPb.setGeneratedFile(output.build());
  }
 else   if (target instanceof InputFile) {
    InputFile inputFile=(InputFile)target;
    Label label=inputFile.getLabel();
    Build.SourceFile.Builder input=Build.SourceFile.newBuilder().setName(label.toString());
    if (includeLocation()) {
      input.setLocation(location);
    }
    if (inputFile.getName().equals("BUILD")) {
      Set<Label> subincludeLabels=new LinkedHashSet<>();
      subincludeLabels.addAll(aspectResolver == null ? inputFile.getPackage().getSubincludeLabels() : aspectResolver.computeBuildFileDependencies(inputFile.getPackage(),BuildFileDependencyMode.SUBINCLUDE));
      subincludeLabels.addAll(aspectResolver == null ? inputFile.getPackage().getSkylarkFileDependencies() : aspectResolver.computeBuildFileDependencies(inputFile.getPackage(),BuildFileDependencyMode.SKYLARK));
      for (      Label skylarkFileDep : subincludeLabels) {
        input.addSubinclude(skylarkFileDep.toString());
      }
      for (      String feature : inputFile.getPackage().getFeatures()) {
        input.addFeature(feature);
      }
      input.setPackageContainsErrors(inputFile.getPackage().containsErrors());
    }
    for (    Label visibilityDependency : target.getVisibility().getDependencyLabels()) {
      input.addPackageGroup(visibilityDependency.toString());
    }
    for (    Label visibilityDeclaration : target.getVisibility().getDeclaredLabels()) {
      input.addVisibilityLabel(visibilityDeclaration.toString());
    }
    targetPb.setType(SOURCE_FILE);
    targetPb.setSourceFile(input);
  }
 else   if (target instanceof FakeSubincludeTarget) {
    Label label=target.getLabel();
    SourceFile.Builder input=SourceFile.newBuilder().setName(label.toString());
    if (includeLocation()) {
      input.setLocation(location);
    }
    targetPb.setType(SOURCE_FILE);
    targetPb.setSourceFile(input.build());
  }
 else   if (target instanceof PackageGroup) {
    PackageGroup packageGroup=(PackageGroup)target;
    Build.PackageGroup.Builder packageGroupPb=Build.PackageGroup.newBuilder().setName(packageGroup.getLabel().toString());
    for (    String containedPackage : packageGroup.getContainedPackages()) {
      packageGroupPb.addContainedPackage(containedPackage);
    }
    for (    Label include : packageGroup.getIncludes()) {
      packageGroupPb.addIncludedPackageGroup(include.toString());
    }
    targetPb.setType(PACKAGE_GROUP);
    targetPb.setPackageGroup(packageGroupPb);
  }
 else   if (target instanceof EnvironmentGroup) {
    EnvironmentGroup envGroup=(EnvironmentGroup)target;
    Build.EnvironmentGroup.Builder envGroupPb=Build.EnvironmentGroup.newBuilder().setName(envGroup.getLabel().toString());
    for (    Label env : envGroup.getEnvironments()) {
      envGroupPb.addEnvironment(env.toString());
    }
    for (    Label defaultEnv : envGroup.getDefaults()) {
      envGroupPb.addDefault(defaultEnv.toString());
    }
    targetPb.setType(ENVIRONMENT_GROUP);
    targetPb.setEnvironmentGroup(envGroupPb);
  }
 else {
    throw new IllegalArgumentException(target.toString());
  }
  return targetPb.build();
}
