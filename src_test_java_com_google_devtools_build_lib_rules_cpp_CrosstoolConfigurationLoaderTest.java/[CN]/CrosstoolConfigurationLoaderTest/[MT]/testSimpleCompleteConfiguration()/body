{
  CppConfigurationLoader loader=loaderWithOptionalTool("");
  CppConfiguration toolchain=create(loader,"--cpu=cpu");
  assertEquals("toolchain-identifier",toolchain.getToolchainIdentifier());
  assertEquals("host-system-name",toolchain.getHostSystemName());
  assertEquals("compiler",toolchain.getCompiler());
  assertEquals("target-libc",toolchain.getTargetLibc());
  assertEquals("piii",toolchain.getTargetCpu());
  assertEquals("target-system-name",toolchain.getTargetGnuSystemName());
  assertEquals(getToolPath("/path-to-ar"),toolchain.getToolPathFragment(Tool.AR));
  assertEquals("abi-version",toolchain.getAbi());
  assertEquals("abi-libc-version",toolchain.getAbiGlibcVersion());
  assertTrue(toolchain.supportsGoldLinker());
  assertFalse(toolchain.supportsStartEndLib());
  assertFalse(toolchain.supportsInterfaceSharedObjects());
  assertFalse(toolchain.supportsEmbeddedRuntimes());
  assertFalse(toolchain.toolchainNeedsPic());
  assertTrue(toolchain.supportsFission());
  assertEquals(ImmutableList.of(getToolPath("/system-include-dir")),toolchain.getBuiltInIncludeDirectories());
  assertNull(toolchain.getSysroot());
  assertEquals(Arrays.asList("c","fastbuild"),toolchain.getCompilerOptions(NO_FEATURES));
  assertEquals(Arrays.<String>asList(),toolchain.getCOptions());
  assertEquals(Arrays.asList("cxx","cxx-fastbuild"),toolchain.getCxxOptions(NO_FEATURES));
  assertEquals(Arrays.asList("unfiltered"),toolchain.getUnfilteredCompilerOptions(NO_FEATURES));
  assertEquals(Arrays.<String>asList(),toolchain.getLinkOptions());
  assertEquals(Arrays.asList("linker","-Wl,-S","linker-fastbuild","fully static"),toolchain.getFullyStaticLinkOptions(NO_FEATURES,false));
  assertEquals(Arrays.asList("linker","-Wl,-S","linker-fastbuild","dynamic"),toolchain.getDynamicLinkOptions(NO_FEATURES,false));
  assertEquals(Arrays.asList("linker","-Wl,-S","linker-fastbuild","mostly static","solinker"),toolchain.getFullyStaticLinkOptions(NO_FEATURES,true));
  assertEquals(Arrays.asList("linker","-Wl,-S","linker-fastbuild","dynamic","solinker"),toolchain.getDynamicLinkOptions(NO_FEATURES,true));
  assertEquals(Arrays.asList("objcopy"),toolchain.getObjCopyOptionsForEmbedding());
  assertEquals(Arrays.<String>asList(),toolchain.getLdOptionsForEmbedding());
  assertEquals(Arrays.asList("rcsD"),toolchain.getArFlags());
  assertThat(toolchain.getAdditionalMakeVariables().entrySet()).containsExactlyElementsIn(ImmutableMap.of("SOME_MAKE_VARIABLE","make-variable-value","STACK_FRAME_UNLIMITED","","CC_FLAGS","").entrySet());
  assertEquals(getToolPath("/path-to-ld"),toolchain.getLdExecutable());
  assertEquals(getToolPath("/path-to-dwp"),toolchain.getToolPathFragment(Tool.DWP));
}
