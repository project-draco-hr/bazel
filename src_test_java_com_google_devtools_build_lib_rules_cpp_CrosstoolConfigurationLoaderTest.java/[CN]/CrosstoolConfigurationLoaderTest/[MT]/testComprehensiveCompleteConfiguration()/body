{
  CppConfigurationLoader loader=loader("major_version: \"12\"\n" + "minor_version: \"0\"\n" + "default_target_cpu: \"piii\"\n"+ "default_toolchain {\n"+ "  cpu: \"piii\"\n"+ "  toolchain_identifier: \"toolchain-identifier-A\"\n"+ "}\n"+ "default_toolchain {\n"+ "  cpu: \"k8\"\n"+ "  toolchain_identifier: \"toolchain-identifier-B\"\n"+ "}\n"+ "toolchain {\n"+ "  toolchain_identifier: \"toolchain-identifier-A\"\n"+ "  host_system_name: \"host-system-name-A\"\n"+ "  target_system_name: \"target-system-name-A\"\n"+ "  target_cpu: \"piii\"\n"+ "  target_libc: \"target-libc-A\"\n"+ "  compiler: \"compiler-A\"\n"+ "  abi_version: \"abi-version-A\"\n"+ "  abi_libc_version: \"abi-libc-version-A\"\n"+ "  tool_path { name: \"ar\" path: \"path/to/ar-A\" }\n"+ "  tool_path { name: \"cpp\" path: \"path/to/cpp-A\" }\n"+ "  tool_path { name: \"gcc\" path: \"path/to/gcc-A\" }\n"+ "  tool_path { name: \"gcov\" path: \"path/to/gcov-A\" }\n"+ "  tool_path { name: \"gcov-tool\" path: \"path-to-gcov-tool-A\" }"+ "  tool_path { name: \"ld\" path: \"path/to/ld-A\" }\n"+ "  tool_path { name: \"nm\" path: \"path/to/nm-A\" }\n"+ "  tool_path { name: \"objcopy\" path: \"path/to/objcopy-A\" }\n"+ "  tool_path { name: \"objdump\" path: \"path/to/objdump-A\" }\n"+ "  tool_path { name: \"strip\" path: \"path/to/strip-A\" }\n"+ "  tool_path { name: \"dwp\" path: \"path/to/dwp\" }\n"+ "  supports_gold_linker: true\n"+ "  supports_start_end_lib: true\n"+ "  supports_normalizing_ar: true\n"+ "  supports_embedded_runtimes: true\n"+ "  needsPic: true\n"+ "  compiler_flag: \"compiler-flag-A-1\"\n"+ "  compiler_flag: \"compiler-flag-A-2\"\n"+ "  cxx_flag: \"cxx-flag-A-1\"\n"+ "  cxx_flag: \"cxx-flag-A-2\"\n"+ "  unfiltered_cxx_flag: \"unfiltered-flag-A-1\"\n"+ "  unfiltered_cxx_flag: \"unfiltered-flag-A-2\"\n"+ "  linker_flag: \"linker-flag-A-1\"\n"+ "  linker_flag: \"linker-flag-A-2\"\n"+ "  dynamic_library_linker_flag: \"solinker-flag-A-1\"\n"+ "  dynamic_library_linker_flag: \"solinker-flag-A-2\"\n"+ "  objcopy_embed_flag: \"objcopy-embed-flag-A-1\"\n"+ "  objcopy_embed_flag: \"objcopy-embed-flag-A-2\"\n"+ "  ld_embed_flag: \"ld-embed-flag-A-1\"\n"+ "  ld_embed_flag: \"ld-embed-flag-A-2\"\n"+ "  ar_flag : \"ar-flag-A\"\n"+ "  compilation_mode_flags {\n"+ "    mode: FASTBUILD\n"+ "    compiler_flag: \"fastbuild-flag-A-1\"\n"+ "    compiler_flag: \"fastbuild-flag-A-2\"\n"+ "    cxx_flag: \"cxx-fastbuild-flag-A-1\"\n"+ "    cxx_flag: \"cxx-fastbuild-flag-A-2\"\n"+ "    linker_flag: \"linker-fastbuild-flag-A-1\"\n"+ "    linker_flag: \"linker-fastbuild-flag-A-2\"\n"+ "  }\n"+ "  compilation_mode_flags {\n"+ "    mode: DBG\n"+ "    compiler_flag: \"dbg-flag-A-1\"\n"+ "    compiler_flag: \"dbg-flag-A-2\"\n"+ "    cxx_flag: \"cxx-dbg-flag-A-1\"\n"+ "    cxx_flag: \"cxx-dbg-flag-A-2\"\n"+ "    linker_flag: \"linker-dbg-flag-A-1\"\n"+ "    linker_flag: \"linker-dbg-flag-A-2\"\n"+ "  }\n"+ "  compilation_mode_flags {\n"+ "    mode: COVERAGE\n"+ "  }\n"+ "  # skip mode OPT to test handling its absence\n"+ "  linking_mode_flags {\n"+ "    mode: FULLY_STATIC\n"+ "    linker_flag: \"fully-static-flag-A-1\"\n"+ "    linker_flag: \"fully-static-flag-A-2\"\n"+ "  }\n"+ "  linking_mode_flags {\n"+ "    mode: MOSTLY_STATIC\n"+ "  }\n"+ "  # skip linking mode DYNAMIC to test handling its absence\n"+ "  make_variable {\n"+ "    name: \"SOME_MAKE_VARIABLE-A-1\"\n"+ "    value: \"make-variable-value-A-1\"\n"+ "  }\n"+ "  make_variable {\n"+ "    name: \"SOME_MAKE_VARIABLE-A-2\"\n"+ "    value: \"make-variable-value-A-2 with spaces in\"\n"+ "  }\n"+ "  cxx_builtin_include_directory: \"system-include-dir-A-1\"\n"+ "  cxx_builtin_include_directory: \"system-include-dir-A-2\"\n"+ "  builtin_sysroot: \"builtin-sysroot-A\"\n"+ "  default_python_top: \"python-top-A\"\n"+ "  default_python_version: \"python-version-A\"\n"+ "  default_grte_top: \"//some:labelA\""+ "  debian_extra_requires: \"a\""+ "  debian_extra_requires: \"b\""+ "}\n"+ "toolchain {\n"+ "  toolchain_identifier: \"toolchain-identifier-B\"\n"+ "  host_system_name: \"host-system-name-B\"\n"+ "  target_system_name: \"target-system-name-B\"\n"+ "  target_cpu: \"piii\"\n"+ "  target_libc: \"target-libc-B\"\n"+ "  compiler: \"compiler-B\"\n"+ "  abi_version: \"abi-version-B\"\n"+ "  abi_libc_version: \"abi-libc-version-B\"\n"+ "  tool_path { name: \"ar\" path: \"path/to/ar-B\" }\n"+ "  tool_path { name: \"cpp\" path: \"path/to/cpp-B\" }\n"+ "  tool_path { name: \"gcc\" path: \"path/to/gcc-B\" }\n"+ "  tool_path { name: \"gcov\" path: \"path/to/gcov-B\" }\n"+ "  tool_path { name: \"gcov-tool\" path: \"path/to/gcov-tool-B\" }\n"+ "  tool_path { name: \"ld\" path: \"path/to/ld-B\" }\n"+ "  tool_path { name: \"nm\" path: \"path/to/nm-B\" }\n"+ "  tool_path { name: \"objcopy\" path: \"path/to/objcopy-B\" }\n"+ "  tool_path { name: \"objdump\" path: \"path/to/objdump-B\" }\n"+ "  tool_path { name: \"strip\" path: \"path/to/strip-B\" }\n"+ "  tool_path { name: \"dwp\" path: \"path/to/dwp\" }\n"+ "  supports_gold_linker: true\n"+ "  supports_start_end_lib: true\n"+ "  supports_normalizing_ar: true\n"+ "  supports_embedded_runtimes: true\n"+ "  needsPic: true\n"+ "  compiler_flag: \"compiler-flag-B-1\"\n"+ "  compiler_flag: \"compiler-flag-B-2\"\n"+ "  optional_compiler_flag {\n"+ "    default_setting_name: \"crosstool_fig\"\n"+ "    flag: \"-Wfig\"\n"+ "  }\n"+ "  cxx_flag: \"cxx-flag-B-1\"\n"+ "  cxx_flag: \"cxx-flag-B-2\"\n"+ "  unfiltered_cxx_flag: \"unfiltered-flag-B-1\"\n"+ "  unfiltered_cxx_flag: \"unfiltered-flag-B-2\"\n"+ "  linker_flag: \"linker-flag-B-1\"\n"+ "  linker_flag: \"linker-flag-B-2\"\n"+ "  dynamic_library_linker_flag: \"solinker-flag-B-1\"\n"+ "  dynamic_library_linker_flag: \"solinker-flag-B-2\"\n"+ "  objcopy_embed_flag: \"objcopy-embed-flag-B-1\"\n"+ "  objcopy_embed_flag: \"objcopy-embed-flag-B-2\"\n"+ "  ld_embed_flag: \"ld-embed-flag-B-1\"\n"+ "  ld_embed_flag: \"ld-embed-flag-B-2\"\n"+ "  ar_flag : \"ar-flag-B\"\n"+ "  compilation_mode_flags {\n"+ "    mode: FASTBUILD\n"+ "    compiler_flag: \"fastbuild-flag-B-1\"\n"+ "    compiler_flag: \"fastbuild-flag-B-2\"\n"+ "    cxx_flag: \"cxx-fastbuild-flag-B-1\"\n"+ "    cxx_flag: \"cxx-fastbuild-flag-B-2\"\n"+ "    linker_flag: \"linker-fastbuild-flag-B-1\"\n"+ "    linker_flag: \"linker-fastbuild-flag-B-2\"\n"+ "  }\n"+ "  compilation_mode_flags {\n"+ "    mode: DBG\n"+ "    compiler_flag: \"dbg-flag-B-1\"\n"+ "    compiler_flag: \"dbg-flag-B-2\"\n"+ "    cxx_flag: \"cxx-dbg-flag-B-1\"\n"+ "    cxx_flag: \"cxx-dbg-flag-B-2\"\n"+ "    linker_flag: \"linker-dbg-flag-B-1\"\n"+ "    linker_flag: \"linker-dbg-flag-B-2\"\n"+ "  }\n"+ "  compilation_mode_flags {\n"+ "    mode: COVERAGE\n"+ "  }\n"+ "  # skip mode OPT to test handling its absence\n"+ "  lipo_mode_flags {"+ "    mode: OFF"+ "    compiler_flag: \"lipo_off\""+ "    cxx_flag: \"cxx-lipo_off\""+ "    linker_flag: \"linker-lipo_off\""+ "  }"+ "  lipo_mode_flags {"+ "    mode: BINARY"+ "    compiler_flag: \"lipo_binary\""+ "    cxx_flag: \"cxx-lipo_binary\""+ "    linker_flag: \"linker-lipo_binary\""+ "  }"+ "  linking_mode_flags {\n"+ "    mode: FULLY_STATIC\n"+ "    linker_flag: \"fully-static-flag-B-1\"\n"+ "    linker_flag: \"fully-static-flag-B-2\"\n"+ "  }\n"+ "  linking_mode_flags {\n"+ "    mode: MOSTLY_STATIC\n"+ "  }\n"+ "  # skip linking mode DYNAMIC to test handling its absence\n"+ "  make_variable {\n"+ "    name: \"SOME_MAKE_VARIABLE-B-1\"\n"+ "    value: \"make-variable-value-B-1\"\n"+ "  }\n"+ "  make_variable {\n"+ "    name: \"SOME_MAKE_VARIABLE-B-2\"\n"+ "    value: \"make-variable-value-B-2 with spaces in\"\n"+ "  }\n"+ "  cxx_builtin_include_directory: \"system-include-dir-B-1\"\n"+ "  cxx_builtin_include_directory: \"system-include-dir-B-2\"\n"+ "  builtin_sysroot: \"builtin-sysroot-B\"\n"+ "  default_python_top: \"python-top-B\"\n"+ "  default_python_version: \"python-version-B\"\n"+ "  default_grte_top: \"//some:labelB\"\n"+ "  debian_extra_requires: \"c\""+ "  debian_extra_requires: \"d\""+ "}\n"+ "default_setting {\n"+ "  name: \"crosstool_fig\"\n"+ "  default_value: false\n"+ "}\n"+ "toolchain {\n"+ "  toolchain_identifier: \"toolchain-identifier-C\"\n"+ "  host_system_name: \"host-system-name-C\"\n"+ "  target_system_name: \"target-system-name-C\"\n"+ "  target_cpu: \"piii\"\n"+ "  target_libc: \"target-libc-C\"\n"+ "  compiler: \"compiler-C\"\n"+ "  abi_version: \"abi-version-C\"\n"+ "  abi_libc_version: \"abi-libc-version-C\"\n"+ "  tool_path { name: \"ar\" path: \"path/to/ar-C\" }"+ "  tool_path { name: \"cpp\" path: \"path/to/cpp-C\" }"+ "  tool_path { name: \"gcc\" path: \"path/to/gcc-C\" }"+ "  tool_path { name: \"gcov\" path: \"path/to/gcov-C\" }"+ "  tool_path { name: \"gcov-tool\" path: \"path/to/gcov-tool-C\" }"+ "  tool_path { name: \"ld\" path: \"path/to/ld-C\" }"+ "  tool_path { name: \"nm\" path: \"path/to/nm-C\" }"+ "  tool_path { name: \"objcopy\" path: \"path/to/objcopy-C\" }"+ "  tool_path { name: \"objdump\" path: \"path/to/objdump-C\" }"+ "  tool_path { name: \"strip\" path: \"path/to/strip-C\" }"+ "  tool_path { name: \"dwp\" path: \"path/to/dwp\" }\n"+ "}");
  CppConfiguration toolchainA=create(loader,"--cpu=piii");
  assertEquals("toolchain-identifier-A",toolchainA.getToolchainIdentifier());
  assertEquals("host-system-name-A",toolchainA.getHostSystemName());
  assertEquals("target-system-name-A",toolchainA.getTargetGnuSystemName());
  assertEquals("piii",toolchainA.getTargetCpu());
  assertEquals("target-libc-A",toolchainA.getTargetLibc());
  assertEquals("compiler-A",toolchainA.getCompiler());
  assertEquals("abi-version-A",toolchainA.getAbi());
  assertEquals("abi-libc-version-A",toolchainA.getAbiGlibcVersion());
  assertEquals(getToolPath("path/to/ar-A"),toolchainA.getToolPathFragment(Tool.AR));
  assertEquals(getToolPath("path/to/cpp-A"),toolchainA.getToolPathFragment(Tool.CPP));
  assertEquals(getToolPath("path/to/gcc-A"),toolchainA.getToolPathFragment(Tool.GCC));
  assertEquals(getToolPath("path/to/gcov-A"),toolchainA.getToolPathFragment(Tool.GCOV));
  assertEquals(getToolPath("path/to/ld-A"),toolchainA.getToolPathFragment(Tool.LD));
  assertEquals(getToolPath("path/to/nm-A"),toolchainA.getToolPathFragment(Tool.NM));
  assertEquals(getToolPath("path/to/objcopy-A"),toolchainA.getToolPathFragment(Tool.OBJCOPY));
  assertEquals(getToolPath("path/to/objdump-A"),toolchainA.getToolPathFragment(Tool.OBJDUMP));
  assertEquals(getToolPath("path/to/strip-A"),toolchainA.getToolPathFragment(Tool.STRIP));
  assertTrue(toolchainA.supportsGoldLinker());
  assertTrue(toolchainA.supportsStartEndLib());
  assertTrue(toolchainA.supportsEmbeddedRuntimes());
  assertTrue(toolchainA.toolchainNeedsPic());
  assertEquals(Arrays.asList("compiler-flag-A-1","compiler-flag-A-2","fastbuild-flag-A-1","fastbuild-flag-A-2"),toolchainA.getCompilerOptions(NO_FEATURES));
  assertEquals(Arrays.asList("cxx-flag-A-1","cxx-flag-A-2","cxx-fastbuild-flag-A-1","cxx-fastbuild-flag-A-2"),toolchainA.getCxxOptions(NO_FEATURES));
  assertEquals(Arrays.asList("--sysroot=some","unfiltered-flag-A-1","unfiltered-flag-A-2"),toolchainA.getUnfilteredCompilerOptions(NO_FEATURES));
  assertEquals(Arrays.asList("linker-flag-A-1","linker-flag-A-2","-Wl,-S","linker-fastbuild-flag-A-1","linker-fastbuild-flag-A-2","solinker-flag-A-1","solinker-flag-A-2"),toolchainA.getDynamicLinkOptions(NO_FEATURES,true));
  assertEquals(Arrays.asList("linker-flag-A-1","linker-flag-A-2","-Wl,-S","linker-fastbuild-flag-A-1","linker-fastbuild-flag-A-2","fully-static-flag-A-1","fully-static-flag-A-2"),toolchainA.configureLinkerOptions(CompilationMode.FASTBUILD,LipoMode.OFF,LinkingMode.FULLY_STATIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("linker-flag-A-1","linker-flag-A-2","-Wl,-S","linker-dbg-flag-A-1","linker-dbg-flag-A-2"),toolchainA.configureLinkerOptions(CompilationMode.DBG,LipoMode.OFF,LinkingMode.DYNAMIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("linker-flag-A-1","linker-flag-A-2","-Wl,-S","fully-static-flag-A-1","fully-static-flag-A-2"),toolchainA.configureLinkerOptions(CompilationMode.OPT,LipoMode.OFF,LinkingMode.FULLY_STATIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("linker-flag-A-1","linker-flag-A-2","-Wl,-S","fully-static-flag-A-1","fully-static-flag-A-2"),toolchainA.configureLinkerOptions(CompilationMode.OPT,LipoMode.BINARY,LinkingMode.FULLY_STATIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("objcopy-embed-flag-A-1","objcopy-embed-flag-A-2"),toolchainA.getObjCopyOptionsForEmbedding());
  assertEquals(Arrays.asList("ld-embed-flag-A-1","ld-embed-flag-A-2"),toolchainA.getLdOptionsForEmbedding());
  assertEquals(Arrays.asList("ar-flag-A"),toolchainA.getArFlags());
  assertThat(toolchainA.getAdditionalMakeVariables().entrySet()).containsExactlyElementsIn(ImmutableMap.<String,String>builder().put("SOME_MAKE_VARIABLE-A-1","make-variable-value-A-1").put("SOME_MAKE_VARIABLE-A-2","make-variable-value-A-2 with spaces in").put("CC_FLAGS","--sysroot=some").put("STACK_FRAME_UNLIMITED","").build().entrySet());
  assertEquals(Arrays.asList(getToolPath("/system-include-dir-A-1"),getToolPath("/system-include-dir-A-2")),toolchainA.getBuiltInIncludeDirectories());
  assertEquals(new PathFragment("some"),toolchainA.getSysroot());
  checkToolchainB(loader,LipoMode.OFF,"--cpu=k8","--lipo=off");
  checkToolchainB(loader,LipoMode.BINARY,"--cpu=k8","--lipo=binary");
  CppConfiguration toolchainC=create(loader,"--compiler=compiler-C","--glibc=target-libc-C","--cpu=piii");
  assertEquals("toolchain-identifier-C",toolchainC.getToolchainIdentifier());
  assertEquals("host-system-name-C",toolchainC.getHostSystemName());
  assertEquals("target-system-name-C",toolchainC.getTargetGnuSystemName());
  assertEquals("piii",toolchainC.getTargetCpu());
  assertEquals("target-libc-C",toolchainC.getTargetLibc());
  assertEquals("compiler-C",toolchainC.getCompiler());
  assertEquals("abi-version-C",toolchainC.getAbi());
  assertEquals("abi-libc-version-C",toolchainC.getAbiGlibcVersion());
  assertFalse(toolchainC.supportsGoldLinker());
  assertFalse(toolchainC.supportsStartEndLib());
  assertFalse(toolchainC.supportsInterfaceSharedObjects());
  assertFalse(toolchainC.supportsEmbeddedRuntimes());
  assertFalse(toolchainC.toolchainNeedsPic());
  assertFalse(toolchainC.supportsFission());
  assertThat(toolchainC.getCompilerOptions(NO_FEATURES)).isEmpty();
  assertThat(toolchainC.getCOptions()).isEmpty();
  assertThat(toolchainC.getCxxOptions(NO_FEATURES)).isEmpty();
  assertThat(toolchainC.getUnfilteredCompilerOptions(NO_FEATURES)).isEmpty();
  assertEquals(Arrays.asList("-Wl,-S"),toolchainC.getDynamicLinkOptions(NO_FEATURES,true));
  assertEquals(Arrays.asList("-Wl,-S"),toolchainC.configureLinkerOptions(CompilationMode.FASTBUILD,LipoMode.OFF,LinkingMode.FULLY_STATIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("-Wl,-S"),toolchainC.configureLinkerOptions(CompilationMode.DBG,LipoMode.OFF,LinkingMode.DYNAMIC,new PathFragment("hello-world/ld"),true));
  assertEquals(Arrays.asList("-Wl,-S"),toolchainC.configureLinkerOptions(CompilationMode.OPT,LipoMode.OFF,LinkingMode.FULLY_STATIC,new PathFragment("hello-world/ld"),true));
  assertThat(toolchainC.getObjCopyOptionsForEmbedding()).isEmpty();
  assertThat(toolchainC.getLdOptionsForEmbedding()).isEmpty();
  assertThat(toolchainC.getAdditionalMakeVariables().entrySet()).containsExactlyElementsIn(ImmutableMap.<String,String>builder().put("CC_FLAGS","").put("STACK_FRAME_UNLIMITED","").build().entrySet());
  assertThat(toolchainC.getBuiltInIncludeDirectories()).isEmpty();
  assertNull(toolchainC.getSysroot());
}
