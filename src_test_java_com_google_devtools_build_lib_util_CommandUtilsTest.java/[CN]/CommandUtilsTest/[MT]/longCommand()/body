{
  String[] args=new String[40];
  args[0]="this_command_will_not_be_found";
  for (int i=1; i < args.length; i++) {
    args[i]="arg" + i;
  }
  Map<String,String> env=Maps.newTreeMap();
  env.put("PATH","/usr/bin:/bin:/sbin");
  env.put("FOO","foo");
  File directory=new File("/tmp");
  try {
    new Command(args,env,directory).execute();
    fail();
  }
 catch (  CommandException exception) {
    String message=CommandUtils.describeCommandError(false,exception.getCommand());
    String verboseMessage=CommandUtils.describeCommandError(true,exception.getCommand());
    assertEquals("error executing command this_command_will_not_be_found arg1 " + "arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 " + "arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 "+ "arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 "+ "arg27 arg28 arg29 arg30 "+ "... (remaining 9 argument(s) skipped)",message);
    assertEquals("error executing command \n" + "  (cd /tmp && \\\n" + "  exec env - \\\n"+ "    FOO=foo \\\n"+ "    PATH=/usr/bin:/bin:/sbin \\\n"+ "  this_command_will_not_be_found arg1 "+ "arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 "+ "arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 "+ "arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 "+ "arg27 arg28 arg29 arg30 arg31 arg32 arg33 arg34 "+ "arg35 arg36 arg37 arg38 arg39)",verboseMessage);
  }
}
