{
  FilteringPolicy actualPolicy=rulesOnly ? FilteringPolicies.and(FilteringPolicies.RULES_ONLY,policy) : policy;
  PathFragment pathFragment=getPathFragment(directory);
  ImmutableSet.Builder<PathFragment> excludedPathFragmentsBuilder=ImmutableSet.builder();
  for (  String excludedDirectory : excludedSubdirectories) {
    excludedPathFragmentsBuilder.add(getPathFragment(excludedDirectory));
  }
  ImmutableSet<PathFragment> excludedPathFragments=excludedPathFragmentsBuilder.build();
  ResolvedTargets.Builder<Target> targetBuilder=ResolvedTargets.builder();
  for (  Path root : pkgPath.getPathEntries()) {
    RootedPath rootedPath=RootedPath.toRootedPath(root,pathFragment);
    Iterable<PathFragment> packagesUnderDirectory=recursivePackageProvider.getPackagesUnderDirectory(rootedPath,excludedPathFragments);
    for (    PathFragment pkg : packagesUnderDirectory) {
      targetBuilder.merge(getTargetsInPackage(originalPattern,pkg,FilteringPolicies.NO_FILTER));
    }
  }
  if (targetBuilder.isEmpty()) {
    throw new TargetParsingException("no targets found beneath '" + pathFragment + "'");
  }
  ResolvedTargets<Target> prefilteredTargets=targetBuilder.build();
  ResolvedTargets.Builder<Target> filteredBuilder=ResolvedTargets.builder();
  if (prefilteredTargets.hasError()) {
    filteredBuilder.setError();
  }
  for (  Target target : prefilteredTargets.getTargets()) {
    if (actualPolicy.shouldRetain(target,false)) {
      filteredBuilder.add(target);
    }
  }
  return filteredBuilder.build();
}
