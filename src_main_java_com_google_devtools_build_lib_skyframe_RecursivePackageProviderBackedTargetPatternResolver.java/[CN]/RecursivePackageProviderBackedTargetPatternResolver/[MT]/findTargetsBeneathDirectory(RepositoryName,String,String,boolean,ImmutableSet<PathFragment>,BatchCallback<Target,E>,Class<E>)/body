{
  final FilteringPolicy actualPolicy=rulesOnly ? FilteringPolicies.and(FilteringPolicies.RULES_ONLY,policy) : policy;
  PathFragment pathFragment=TargetPatternResolverUtil.getPathFragment(directory);
  Iterable<PathFragment> packagesUnderDirectory=recursivePackageProvider.getPackagesUnderDirectory(repository,pathFragment,excludedSubdirectories);
  Iterable<PackageIdentifier> pkgIds=Iterables.transform(packagesUnderDirectory,new Function<PathFragment,PackageIdentifier>(){
    @Override public PackageIdentifier apply(    PathFragment path){
      return PackageIdentifier.create(repository,path);
    }
  }
);
  final AtomicBoolean foundTarget=new AtomicBoolean(false);
  final Object callbackLock=new Object();
  List<List<PackageIdentifier>> partitions=ImmutableList.copyOf(Iterables.partition(pkgIds,MAX_PACKAGES_BULK_GET));
  ArrayList<Callable<Void>> callables=new ArrayList<>(partitions.size());
  for (  final Iterable<PackageIdentifier> pkgIdBatch : partitions) {
    callables.add(new Callable<Void>(){
      @Override public Void call() throws E, TargetParsingException, InterruptedException {
        Iterable<ResolvedTargets<Target>> resolvedTargets=bulkGetTargetsInPackage(originalPattern,pkgIdBatch,NO_FILTER).values();
        List<Target> filteredTargets=new ArrayList<>(calculateSize(resolvedTargets));
        for (        ResolvedTargets<Target> targets : resolvedTargets) {
          for (          Target target : targets.getTargets()) {
            foundTarget.set(true);
            if (actualPolicy.shouldRetain(target,false)) {
              filteredTargets.add(target);
            }
          }
        }
synchronized (callbackLock) {
          callback.process(filteredTargets);
        }
        return null;
      }
    }
);
  }
  List<Future<Void>> futures=executor.invokeAll(callables);
  for (  Future<Void> future : futures) {
    try {
      future.get();
    }
 catch (    ExecutionException e) {
      Throwables.propagateIfPossible(e.getCause(),exceptionClass);
      Throwables.propagateIfPossible(e.getCause(),TargetParsingException.class,InterruptedException.class);
      throw new IllegalStateException(e);
    }
  }
  if (!foundTarget.get()) {
    throw new TargetParsingException("no targets found beneath '" + pathFragment + "'");
  }
}
