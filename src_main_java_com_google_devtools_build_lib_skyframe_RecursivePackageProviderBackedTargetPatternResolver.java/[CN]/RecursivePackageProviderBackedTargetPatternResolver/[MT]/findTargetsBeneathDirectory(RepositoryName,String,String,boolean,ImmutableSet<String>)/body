{
  FilteringPolicy actualPolicy=rulesOnly ? FilteringPolicies.and(FilteringPolicies.RULES_ONLY,policy) : policy;
  ImmutableSet<PathFragment> excludedPathFragments=TargetPatternResolverUtil.getPathFragments(excludedSubdirectories);
  PathFragment pathFragment=TargetPatternResolverUtil.getPathFragment(directory);
  ResolvedTargets.Builder<Target> targetBuilder=ResolvedTargets.builder();
  Iterable<PathFragment> packagesUnderDirectory=recursivePackageProvider.getPackagesUnderDirectory(repository,pathFragment,excludedPathFragments);
  Iterable<PackageIdentifier> pkgIds=Iterables.transform(packagesUnderDirectory,new Function<PathFragment,PackageIdentifier>(){
    @Override public PackageIdentifier apply(    PathFragment path){
      return PackageIdentifier.create(repository,path);
    }
  }
);
  for (  ResolvedTargets<Target> targets : bulkGetTargetsInPackage(originalPattern,pkgIds,FilteringPolicies.NO_FILTER).values()) {
    targetBuilder.merge(targets);
  }
  if (targetBuilder.isEmpty()) {
    throw new TargetParsingException("no targets found beneath '" + pathFragment + "'");
  }
  ResolvedTargets<Target> prefilteredTargets=targetBuilder.build();
  ResolvedTargets.Builder<Target> filteredBuilder=ResolvedTargets.builder();
  if (prefilteredTargets.hasError()) {
    filteredBuilder.setError();
  }
  for (  Target target : prefilteredTargets.getTargets()) {
    if (actualPolicy.shouldRetain(target,false)) {
      filteredBuilder.add(target);
    }
  }
  return filteredBuilder.build();
}
