def main(platforms):
    crypto_c_files = FindCFiles(os.path.join('src', 'crypto'), NoTests)
    ssl_c_files = FindCFiles(os.path.join('src', 'ssl'), NoTests)
    tool_cc_files = FindCFiles(os.path.join('src', 'tool'), NoTests)
    with open('err_data.c', 'w+') as err_data:
        subprocess.check_call(['go', 'run', 'err_data_generate.go'], cwd=os.path.join('src', 'crypto', 'err'), stdout=err_data)
    crypto_c_files.append('err_data.c')
    test_support_cc_files = FindCFiles(os.path.join('src', 'crypto', 'test'), AllFiles)
    test_c_files = FindCFiles(os.path.join('src', 'crypto'), OnlyTests)
    test_c_files += FindCFiles(os.path.join('src', 'ssl'), OnlyTests)
    ssl_h_files = FindHeaderFiles(os.path.join('src', 'include', 'openssl'), SSLHeaderFiles)

    def NotSSLHeaderFiles(filename, is_dir):
        return (not SSLHeaderFiles(filename, is_dir))
    crypto_h_files = FindHeaderFiles(os.path.join('src', 'include', 'openssl'), NotSSLHeaderFiles)
    ssl_internal_h_files = FindHeaderFiles(os.path.join('src', 'ssl'), NoTests)
    crypto_internal_h_files = FindHeaderFiles(os.path.join('src', 'crypto'), NoTests)
    with open('src/util/all_tests.json', 'r') as f:
        tests = json.load(f)
    test_binaries = set([test[0] for test in tests])
    test_sources = set([test.replace('.cc', '').replace('.c', '').replace('src/', '') for test in test_c_files])
    if (test_binaries != test_sources):
        print 'Test sources and configured tests do not match'
        a = test_binaries.difference(test_sources)
        if (len(a) > 0):
            print ('These tests are configured without sources: ' + str(a))
        b = test_sources.difference(test_binaries)
        if (len(b) > 0):
            print ('These test sources are not configured: ' + str(b))
    files = {'crypto': crypto_c_files, 'crypto_headers': crypto_h_files, 'crypto_internal_headers': crypto_internal_h_files, 'ssl': ssl_c_files, 'ssl_headers': ssl_h_files, 'ssl_internal_headers': ssl_internal_h_files, 'tool': tool_cc_files, 'test': test_c_files, 'test_support': test_support_cc_files, 'tests': tests, }
    asm_outputs = sorted(WriteAsmFiles(ReadPerlAsmOperations()).iteritems())
    for platform in platforms:
        platform.WriteFiles(files, asm_outputs)
    return 0
