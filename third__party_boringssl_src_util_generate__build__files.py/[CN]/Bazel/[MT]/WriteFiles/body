def WriteFiles(self, files, asm_outputs):
    with open('BUILD.generated.bzl', 'w+') as out:
        out.write(self.header)
        self.PrintVariableSection(out, 'ssl_headers', files['ssl_headers'])
        self.PrintVariableSection(out, 'ssl_internal_headers', files['ssl_internal_headers'])
        self.PrintVariableSection(out, 'ssl_sources', files['ssl'])
        self.PrintVariableSection(out, 'crypto_headers', files['crypto_headers'])
        self.PrintVariableSection(out, 'crypto_internal_headers', files['crypto_internal_headers'])
        self.PrintVariableSection(out, 'crypto_sources', files['crypto'])
        self.PrintVariableSection(out, 'tool_sources', files['tool'])
        for ((osname, arch), asm_files) in asm_outputs:
            if (osname is not 'linux'):
                continue
            self.PrintVariableSection(out, ('crypto_sources_%s' % arch), asm_files)
    with open('BUILD.generated_tests.bzl', 'w+') as out:
        out.write(self.header)
        out.write('test_support_sources = [\n')
        for filename in files['test_support']:
            if (os.path.basename(filename) == 'malloc.cc'):
                continue
            out.write(('    "%s",\n' % filename))
        out.write(']\n\n')
        out.write('def create_tests(copts):\n')
        out.write('  test_support_sources_complete = test_support_sources + \\\n')
        out.write('      native.glob(["src/crypto/test/*.h"])\n')
        name_counts = {}
        for test in files['tests']:
            name = os.path.basename(test[0])
            name_counts[name] = (name_counts.get(name, 0) + 1)
        first = True
        for test in files['tests']:
            name = os.path.basename(test[0])
            if (name_counts[name] > 1):
                if ('/' in test[1]):
                    name += ('_' + os.path.splitext(os.path.basename(test[1]))[0])
                else:
                    name += ('_' + test[1].replace('-', '_'))
            if (not first):
                out.write('\n')
            first = False
            src_prefix = ('src/' + test[0])
            for src in files['test']:
                if src.startswith(src_prefix):
                    src = src
                    break
            else:
                raise ValueError(("Can't find source for %s" % test[0]))
            out.write('  native.cc_test(\n')
            out.write(('      name = "%s",\n' % name))
            out.write('      size = "small",\n')
            out.write(('      srcs = ["%s"] + test_support_sources_complete,\n' % src))
            data_files = []
            if (len(test) > 1):
                out.write('      args = [\n')
                for arg in test[1:]:
                    if ('/' in arg):
                        out.write(('          "$(location src/%s)",\n' % arg))
                        data_files.append(('src/%s' % arg))
                    else:
                        out.write(('          "%s",\n' % arg))
                out.write('      ],\n')
            out.write('      copts = copts,\n')
            if (len(data_files) > 0):
                out.write('      data = [\n')
                for filename in data_files:
                    out.write(('          "%s",\n' % filename))
                out.write('      ],\n')
            if ('ssl/' in test[0]):
                out.write('      deps = [\n')
                out.write('          ":crypto",\n')
                out.write('          ":ssl",\n')
                out.write('      ],\n')
            else:
                out.write('      deps = [":crypto"],\n')
            out.write('  )\n')
