'Enumerates the BoringSSL source in src/ and either generates two gypi files\n  (boringssl.gypi and boringssl_tests.gypi) for Chromium, or generates\n  source-list files for Android.'
import os
import subprocess
import sys
import json
OS_ARCH_COMBOS = [('linux', 'arm', 'linux32', [], 'S'), ('linux', 'aarch64', 'linux64', [], 'S'), ('linux', 'x86', 'elf', ['-fPIC', '-DOPENSSL_IA32_SSE2'], 'S'), ('linux', 'x86_64', 'elf', [], 'S'), ('mac', 'x86', 'macosx', ['-fPIC', '-DOPENSSL_IA32_SSE2'], 'S'), ('mac', 'x86_64', 'macosx', [], 'S'), ('win', 'x86', 'win32n', ['-DOPENSSL_IA32_SSE2'], 'asm'), ('win', 'x86_64', 'nasm', [], 'asm')]
NON_PERL_FILES = {('linux', 'arm'): ['src/crypto/poly1305/poly1305_arm_asm.S', 'src/crypto/chacha/chacha_vec_arm.S', 'src/crypto/cpu-arm-asm.S'], }
if (__name__ == '__main__'):
    if (len(sys.argv) < 2):
        Usage()
    platforms = []
    for s in sys.argv[1:]:
        if ((s == 'chromium') or (s == 'gyp')):
            platforms.append(Chromium())
        elif (s == 'android'):
            platforms.append(Android())
        elif (s == 'android-standalone'):
            platforms.append(AndroidStandalone())
        elif (s == 'bazel'):
            platforms.append(Bazel())
        else:
            Usage()
    sys.exit(main(platforms))
