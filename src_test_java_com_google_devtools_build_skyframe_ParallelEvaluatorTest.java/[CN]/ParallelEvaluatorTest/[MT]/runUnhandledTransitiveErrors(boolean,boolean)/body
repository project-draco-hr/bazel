{
  graph=new DeterministicHelper.DeterministicProcessableGraph(new InMemoryGraphImpl());
  tester=new GraphTester();
  SkyKey grandparentKey=GraphTester.toSkyKey("grandparent");
  final SkyKey parentKey=GraphTester.toSkyKey("parent");
  final SkyKey childKey=GraphTester.toSkyKey("child");
  final AtomicBoolean errorPropagated=new AtomicBoolean(false);
  tester.getOrCreate(grandparentKey).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException, InterruptedException {
      try {
        return env.getValueOrThrow(parentKey,SomeErrorException.class);
      }
 catch (      SomeErrorException e) {
        errorPropagated.set(true);
        throw new GenericFunctionException(e,Transience.PERSISTENT);
      }
    }
    @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  tester.getOrCreate(parentKey).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException, InterruptedException {
      if (explicitlyPropagateError) {
        try {
          return env.getValueOrThrow(childKey,SomeErrorException.class);
        }
 catch (        SomeErrorException e) {
          throw new GenericFunctionException(e,childKey);
        }
      }
 else {
        return env.getValue(childKey);
      }
    }
    @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  tester.getOrCreate(childKey).setHasError(true);
  EvaluationResult<StringValue> result=eval(keepGoing,ImmutableList.of(grandparentKey));
  assertTrue(result.hasError());
  assertTrue(errorPropagated.get());
  assertEquals(grandparentKey,result.getError().getRootCauseOfException());
}
