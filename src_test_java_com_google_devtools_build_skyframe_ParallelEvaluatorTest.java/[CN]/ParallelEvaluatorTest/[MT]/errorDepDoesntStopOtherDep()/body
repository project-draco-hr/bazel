{
  graph=new InMemoryGraphImpl();
  final SkyKey errorKey=GraphTester.toSkyKey("error");
  tester.getOrCreate(errorKey).setHasError(true);
  EvaluationResult<StringValue> result1=eval(true,ImmutableList.of(errorKey));
  assertThatEvaluationResult(result1).hasError();
  assertThatEvaluationResult(result1).hasErrorEntryForKeyThat(errorKey).hasExceptionThat().isNotNull();
  final SkyKey otherKey=GraphTester.toSkyKey("other");
  tester.getOrCreate(otherKey).setConstantValue(new StringValue("other"));
  SkyKey topKey=GraphTester.toSkyKey("top");
  final Exception topException=new SomeErrorException("top exception");
  final AtomicInteger numComputes=new AtomicInteger(0);
  tester.getOrCreate(topKey).setBuilder(new SkyFunction(){
    @Nullable @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException {
      Map<SkyKey,ValueOrException<SomeErrorException>> values=env.getValuesOrThrow(ImmutableList.of(errorKey,otherKey),SomeErrorException.class);
      if (numComputes.incrementAndGet() == 1) {
        assertThat(env.valuesMissing()).isTrue();
      }
 else {
        assertThat(numComputes.get()).isEqualTo(2);
        assertThat(env.valuesMissing()).isFalse();
      }
      try {
        values.get(errorKey).get();
        throw new AssertionError("Should have thrown");
      }
 catch (      SomeErrorException e) {
        throw new SkyFunctionException(topException,Transience.PERSISTENT){
        }
;
      }
    }
    @Nullable @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  EvaluationResult<StringValue> result2=eval(true,ImmutableList.of(topKey));
  assertThatEvaluationResult(result2).hasError();
  assertThatEvaluationResult(result2).hasErrorEntryForKeyThat(topKey).hasExceptionThat().isSameAs(topException);
  assertThat(numComputes.get()).isEqualTo(2);
}
