{
  if (System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0) {
    return;
  }
  final CountDownLatch errorCommitted=new CountDownLatch(1);
  final TrackingAwaiter trackingAwaiterForError=new TrackingAwaiter();
  final CountDownLatch otherDone=new CountDownLatch(1);
  final TrackingAwaiter trackingAwaiterForOther=new TrackingAwaiter();
  final SkyKey errorKey=GraphTester.toSkyKey("errorKey");
  final SkyKey otherKey=GraphTester.toSkyKey("otherKey");
  tester.getOrCreate(errorKey).setHasError(true);
  final AtomicInteger numOtherInvocations=new AtomicInteger(0);
  final AtomicReference<String> bogusInvocationCount=new AtomicReference<>(null);
  final AtomicReference<String> nonNullValue=new AtomicReference<>(null);
  tester.getOrCreate(otherKey).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException {
      int invocations=numOtherInvocations.incrementAndGet();
      if (invocations == 1) {
        trackingAwaiterForError.awaitLatchAndTrackExceptions(errorCommitted,"error didn't get committed to the graph in time");
      }
      try {
        SkyValue value=env.getValueOrThrow(errorKey,SomeErrorException.class);
        if (value != null) {
          nonNullValue.set("bogus non-null value " + value);
        }
        if (invocations != 1) {
          bogusInvocationCount.set("bogus invocation count: " + invocations);
        }
        otherDone.countDown();
        throw new GenericFunctionException(new SomeErrorException("other"),Transience.PERSISTENT);
      }
 catch (      SomeErrorException e) {
        assertEquals(2,invocations);
        return null;
      }
    }
    @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  graph=new NotifyingInMemoryGraph(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (key.equals(errorKey) && type == EventType.SET_VALUE && order == Order.AFTER) {
        errorCommitted.countDown();
        trackingAwaiterForOther.awaitLatchAndTrackExceptions(otherDone,"otherKey's SkyFunction didn't finish in time");
      }
    }
  }
);
  EvaluationResult<StringValue> result=eval(false,ImmutableList.of(errorKey,otherKey));
  assertTrue(nonNullValue.get(),nonNullValue.get() == null);
  assertTrue(bogusInvocationCount.get(),bogusInvocationCount.get() == null);
  assertEquals(null,graph.get(otherKey));
  assertTrue(result.hasError());
  assertEquals(errorKey,result.getError().getRootCauseOfException());
}
