{
  reporter.removeHandler(failFastHandler);
  setUpCacheWithTwoRootLocator();
  createBuildFile(rootDir1,"c","d/x");
  assertEquals(rootDir2.getRelative("c/d/BUILD"),getPackage("c/d").getFilename());
  assertLabelValidity(true,"//c/d:foo.txt");
  assertLabelValidity(false,"//c:d/x");
  assertPackageLoadingFails("c","Label '//c:d/x' crosses boundary of subpackage 'c/d' (have you deleted c/d/BUILD? " + "If so, use the --deleted_packages=c/d option)");
  assertTrue(getPackageManager().isPackage(reporter,PackageIdentifier.createInMainRepo("c/d")));
  setOptions("--deleted_packages=c/d");
  invalidatePackages();
  assertFalse(getPackageManager().isPackage(reporter,PackageIdentifier.createInMainRepo("c/d")));
  try {
    getPackage("c/d");
    fail();
  }
 catch (  NoSuchPackageException e) {
    assertThat(e).hasMessage("no such package 'c/d': Package is considered deleted due to --deleted_packages");
  }
  assertLabelValidity(false,"//c/d:x");
  assertLabelValidity(true,"//c:d/x");
}
