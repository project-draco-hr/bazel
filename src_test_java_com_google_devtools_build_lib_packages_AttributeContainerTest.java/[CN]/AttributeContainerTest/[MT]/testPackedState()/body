{
  Random rng=new Random();
  final int N=17;
  Attribute[] attributes=new Attribute[N];
  for (int i=0; i < N; ++i) {
    attributes[i]=ruleClass.getAttribute(i);
  }
  Object someValue=new Object();
  Location[] locations=new Location[N];
  for (int i=0; i < N; ++i) {
    locations[i]=newLocation();
  }
  assertTrue(locations[0] != locations[1]);
  for (int explicitCount=0; explicitCount <= N; ++explicitCount) {
    for (int locationCount=0; locationCount <= N; ++locationCount) {
      AttributeContainer container=new AttributeContainer(ruleClass);
      Collections.shuffle(Arrays.asList(attributes));
      int valuePassKey=rng.nextInt(1 << N);
      int locationPassKey=rng.nextInt(1 << N);
      for (int pass=0; pass <= 1; ++pass) {
        for (int i=0; i < explicitCount; ++i) {
          if (pass == ((valuePassKey >> i) & 1)) {
            container.setAttributeValue(attributes[i],someValue,true);
          }
        }
        for (int i=0; i < locationCount; ++i) {
          if (pass == ((locationPassKey >> i) & 1)) {
            container.setAttributeLocation(attributes[i],locations[i]);
          }
        }
      }
      for (int i=0; i < N; ++i) {
        boolean expected=i < explicitCount;
        assertEquals(expected,container.isAttributeValueExplicitlySpecified(attributes[i]));
      }
      for (int i=0; i < N; ++i) {
        Location expected=i < locationCount ? locations[i] : null;
        assertSame(expected,container.getAttributeLocation(attributes[i].getName()));
      }
    }
  }
}
