{
  if (o == null) {
    throw new NullPointerException();
  }
 else   if (o instanceof String || o instanceof Integer || o instanceof Double) {
    buffer.append(o.toString());
  }
 else   if (o == Environment.NONE) {
    buffer.append("None");
  }
 else   if (o == Boolean.TRUE) {
    buffer.append("True");
  }
 else   if (o == Boolean.FALSE) {
    buffer.append("False");
  }
 else   if (o instanceof List<?>) {
    List<?> seq=(List<?>)o;
    boolean isTuple=isImmutable(seq);
    String sep="";
    buffer.append(isTuple ? '(' : '[');
    for (int ii=0, len=seq.size(); ii < len; ++ii) {
      buffer.append(sep);
      prettyPrintValue(seq.get(ii),buffer);
      sep=", ";
    }
    buffer.append(isTuple ? ')' : ']');
  }
 else   if (o instanceof Map<?,?>) {
    Map<?,?> dict=(Map<?,?>)o;
    buffer.append('{');
    String sep="";
    for (    Map.Entry<?,?> entry : dict.entrySet()) {
      buffer.append(sep);
      prettyPrintValue(entry.getKey(),buffer);
      buffer.append(": ");
      prettyPrintValue(entry.getValue(),buffer);
      sep=", ";
    }
    buffer.append('}');
  }
 else   if (o instanceof Function) {
    Function func=(Function)o;
    buffer.append("<function " + func.getName() + ">");
  }
 else   if (o instanceof FilesetEntry) {
    FilesetEntry entry=(FilesetEntry)o;
    buffer.append("FilesetEntry(srcdir = ");
    prettyPrintValue(entry.getSrcLabel().toString(),buffer);
    buffer.append(", files = ");
    prettyPrintValue(makeStringList(entry.getFiles()),buffer);
    buffer.append(", excludes = ");
    prettyPrintValue(makeList(entry.getExcludes()),buffer);
    buffer.append(", destdir = ");
    prettyPrintValue(entry.getDestDir().getPathString(),buffer);
    buffer.append(", strip_prefix = ");
    prettyPrintValue(entry.getStripPrefix(),buffer);
    buffer.append(", symlinks = \"");
    buffer.append(entry.getSymlinkBehavior().toString());
    buffer.append("\")");
  }
 else   if (o instanceof PathFragment) {
    buffer.append(((PathFragment)o).getPathString());
  }
 else {
    buffer.append(o.toString());
  }
}
