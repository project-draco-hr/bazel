{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=RepositoryFunction.getRule(repositoryName,LocalRepositoryRule.NAME,env);
  if (rule == null) {
    return null;
  }
  if (rule.getName().contains("/")) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),"In " + rule + " the 'name' attribute must not contain slashes"),Transience.PERSISTENT);
  }
  AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
  String path=mapper.get("path",Type.STRING);
  PathFragment pathFragment=new PathFragment(path);
  if (!pathFragment.isAbsolute()) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),"In " + rule + " the 'path' attribute must specify an absolute path"),Transience.PERSISTENT);
  }
  Path repositoryPath=getExternalRepositoryDirectory().getRelative(rule.getName());
  try {
    FileSystemUtils.createDirectoryAndParents(repositoryPath.getParentDirectory());
    if (repositoryPath.exists(Symlinks.NOFOLLOW)) {
      repositoryPath.delete();
    }
    repositoryPath.createSymbolicLink(pathFragment);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(new IOException("Could not create symlink to repository " + pathFragment + ": "+ e.getMessage()),Transience.TRANSIENT);
  }
  FileValue repositoryValue=getRepositoryDirectory(repositoryPath,env);
  if (repositoryValue == null) {
    return null;
  }
  if (!repositoryValue.isDirectory()) {
    throw new RepositoryFunctionException(new IOException(rule + " must specify an existing directory"),Transience.TRANSIENT);
  }
  return RepositoryValue.create(repositoryPath,repositoryValue);
}
