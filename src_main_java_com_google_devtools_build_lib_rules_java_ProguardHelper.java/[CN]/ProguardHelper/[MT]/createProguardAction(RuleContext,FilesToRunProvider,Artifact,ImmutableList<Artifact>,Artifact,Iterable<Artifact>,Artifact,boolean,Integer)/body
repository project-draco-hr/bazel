{
  JavaOptimizationMode optMode=getJavaOptimizationMode(ruleContext);
  Preconditions.checkArgument(optMode != JavaOptimizationMode.NOOP);
  Preconditions.checkArgument(optMode != JavaOptimizationMode.LEGACY || !proguardSpecs.isEmpty());
  Artifact proguardOutputMap;
  if (mappingRequested || optMode.alwaysGenerateOutputMapping()) {
    proguardOutputMap=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_PROGUARD_MAP);
  }
 else {
    proguardOutputMap=null;
  }
  if (optimizationPasses == null) {
    Builder builder=makeBuilder(proguard,programJar,proguardSpecs,proguardMapping,libraryJars,proguardOutputJar,proguardOutputMap).setProgressMessage("Trimming binary with Proguard").addOutput(proguardOutputJar);
    ruleContext.registerAction(builder.build(ruleContext));
  }
 else {
    Artifact lastStageOutput=getProguardTempArtifact(ruleContext,optMode.name().toLowerCase(),"proguard_preoptimization.jar");
    ruleContext.registerAction(makeBuilder(proguard,programJar,proguardSpecs,proguardMapping,libraryJars,proguardOutputJar,null).setProgressMessage("Trimming binary with Proguard: Verification/Shrinking Pass").addArgument("-runtype INITIAL").addArgument("-nextstageoutput").addOutputArgument(lastStageOutput).build(ruleContext));
    for (int i=0; i < optimizationPasses; i++) {
      Artifact optimizationOutput=getProguardTempArtifact(ruleContext,optMode.name().toLowerCase(),"proguard_optimization_" + (i + 1) + ".jar");
      ruleContext.registerAction(makeBuilder(proguard,programJar,proguardSpecs,proguardMapping,libraryJars,proguardOutputJar,null).setProgressMessage("Trimming binary with Proguard: Optimization Pass " + (i + 1)).addArgument("-runtype OPTIMIZATION").addArgument("-laststageoutput").addInputArgument(lastStageOutput).addArgument("-nextstageoutput").addOutputArgument(optimizationOutput).build(ruleContext));
      lastStageOutput=optimizationOutput;
    }
    Builder builder=makeBuilder(proguard,programJar,proguardSpecs,proguardMapping,libraryJars,proguardOutputJar,proguardOutputMap).setProgressMessage("Trimming binary with Proguard: Obfuscation and Final Ouput Pass").addArgument("-runtype FINAL").addArgument("-laststageoutput").addInputArgument(lastStageOutput).addOutput(proguardOutputJar);
    ruleContext.registerAction(builder.build(ruleContext));
  }
  return new ProguardOutput(proguardOutputJar,proguardOutputMap);
}
