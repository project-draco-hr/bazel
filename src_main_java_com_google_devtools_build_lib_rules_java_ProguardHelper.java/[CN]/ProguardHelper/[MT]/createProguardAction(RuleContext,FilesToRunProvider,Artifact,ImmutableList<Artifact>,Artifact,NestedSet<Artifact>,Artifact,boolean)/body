{
  JavaOptimizationMode optMode=getJavaOptimizationMode(ruleContext);
  Preconditions.checkArgument(optMode != JavaOptimizationMode.NOOP);
  Preconditions.checkArgument(optMode != JavaOptimizationMode.LEGACY || !proguardSpecs.isEmpty());
  Builder builder=new SpawnAction.Builder().addInput(programJar).addInputs(libraryJars).addInputs(proguardSpecs).addOutput(proguardOutputJar).setExecutable(proguard).setProgressMessage("Trimming binary with Proguard").setMnemonic("Proguard").addArgument("-injars").addArgument(programJar.getExecPathString());
  for (  Artifact libraryJar : libraryJars) {
    builder.addArgument("-libraryjars").addArgument(libraryJar.getExecPathString());
  }
  if (proguardMapping != null) {
    builder.addInput(proguardMapping).addArgument("-applymapping").addArgument(proguardMapping.getExecPathString());
  }
  builder.addArgument("-outjars").addArgument(proguardOutputJar.getExecPathString());
  for (  Artifact proguardSpec : proguardSpecs) {
    builder.addArgument("@" + proguardSpec.getExecPathString());
  }
  Artifact proguardOutputMap=null;
  if (mappingRequested || optMode.alwaysGenerateOutputMapping()) {
    proguardOutputMap=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_PROGUARD_MAP);
    builder.addOutput(proguardOutputMap).addArgument("-printmapping").addArgument(proguardOutputMap.getExecPathString());
  }
  ruleContext.registerAction(builder.build(ruleContext));
  return new ProguardOutput(proguardOutputJar,proguardOutputMap);
}
