{
  Collection<Artifact> extraActionOutputs=new LinkedHashSet<>();
  Collection<Artifact> protoOutputs=new ArrayList<>();
  NestedSetBuilder<Artifact> extraActionInputs=NestedSetBuilder.stableOrder();
  ActionOwner owner=actionToShadow.getOwner();
  Label ownerLabel=owner.getLabel();
  if (requiresActionOutput) {
    extraActionInputs.addAll(actionToShadow.getOutputs());
  }
  extraActionInputs.addAll(resolvedTools);
  extraActionInputs.addAll(resolvedData);
  boolean createDummyOutput=false;
  for (  String outputTemplate : outputTemplates) {
    extraActionOutputs.add(getExtraActionOutputArtifact(owningRule,actionToShadow,owner,outputTemplate));
  }
  if (extraActionOutputs.isEmpty()) {
    createDummyOutput=true;
    extraActionOutputs.add(getExtraActionOutputArtifact(owningRule,actionToShadow,owner,"$(ACTION_ID).dummy"));
  }
  Artifact extraActionInfoFile=getExtraActionOutputArtifact(owningRule,actionToShadow,owner,"$(ACTION_ID).xa");
  owningRule.registerAction(new ExtraActionInfoFileWriteAction(actionToShadow.getOwner(),extraActionInfoFile,actionToShadow));
  extraActionInputs.add(extraActionInfoFile);
  protoOutputs.add(extraActionInfoFile);
  String command=createExpandedCommand(owningRule,actionToShadow,owner,extraActionInfoFile);
  Map<String,String> env=owningRule.getConfiguration().getDefaultShellEnvironment();
  CommandHelper commandHelper=new CommandHelper(owningRule,ImmutableList.<FilesToRunProvider>of(),ImmutableMap.<Label,Iterable<Artifact>>of());
  String actionUniquifier=actionToShadow.getPrimaryOutput().getExecPath().getBaseName() + "." + actionToShadow.getKey();
  List<String> argv=commandHelper.buildCommandLine(command,extraActionInputs,"." + actionUniquifier + ".extra_action_script.sh",executionInfo);
  String commandMessage=String.format("Executing extra_action %s on %s",label,ownerLabel);
  owningRule.registerAction(new ExtraAction(actionToShadow.getOwner(),ImmutableSet.copyOf(extraActionInputs.build()),manifests,extraActionOutputs,actionToShadow,createDummyOutput,CommandLine.of(argv,false),env,executionInfo,commandMessage,label.getName()));
  return ImmutableSet.<Artifact>builder().addAll(extraActionOutputs).addAll(protoOutputs).build();
}
