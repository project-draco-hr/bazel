{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=getRule(repositoryName,NewHttpArchiveRule.NAME,env);
  if (rule == null) {
    return null;
  }
  Path outputDirectory=getExternalRepositoryDirectory().getRelative(rule.getName());
  try {
    FileSystemUtils.createDirectoryAndParents(outputDirectory);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(new IOException("Could not create directory for " + rule.getName() + ": "+ e.getMessage()),Transience.TRANSIENT);
  }
  FileValue repositoryDirectory=getRepositoryDirectory(outputDirectory,env);
  if (repositoryDirectory == null) {
    return null;
  }
  HttpDownloadValue downloadedFileValue;
  try {
    downloadedFileValue=(HttpDownloadValue)env.getValueOrThrow(HttpDownloadFunction.key(rule,outputDirectory),IOException.class);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.PERSISTENT);
  }
  if (downloadedFileValue == null) {
    return null;
  }
  DecompressorValue decompressed;
  try {
    AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
    String prefix=null;
    if (mapper.has("rm_path_prefix",Type.STRING) && !mapper.get("rm_path_prefix",Type.STRING).isEmpty()) {
      prefix=mapper.get("rm_path_prefix",Type.STRING);
    }
    decompressed=(DecompressorValue)env.getValueOrThrow(DecompressorValue.key(rule.getTargetKind(),rule.getName(),downloadedFileValue.getPath(),outputDirectory,prefix),IOException.class);
    if (decompressed == null) {
      return null;
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(new IOException(e.getMessage()),Transience.TRANSIENT);
  }
  createWorkspaceFile(decompressed.getDirectory(),rule);
  return symlinkBuildFile(rule,getWorkspace(),repositoryDirectory,env);
}
