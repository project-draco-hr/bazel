{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=RepositoryFunction.getRule(repositoryName,NewHttpArchiveRule.NAME,env);
  if (rule == null) {
    return null;
  }
  Path outputDirectory=getExternalRepositoryDirectory().getRelative(rule.getName());
  try {
    FileSystemUtils.createDirectoryAndParents(outputDirectory);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(new IOException("Could not create directory for " + rule.getName() + ": "+ e.getMessage()),Transience.TRANSIENT);
  }
  FileValue repositoryDirectory=getRepositoryDirectory(outputDirectory,env);
  if (repositoryDirectory == null) {
    return null;
  }
  HttpDownloadValue downloadedFileValue;
  try {
    downloadedFileValue=(HttpDownloadValue)env.getValueOrThrow(HttpDownloadFunction.key(rule,outputDirectory),IOException.class);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.PERSISTENT);
  }
  if (downloadedFileValue == null) {
    return null;
  }
  Path decompressedDirectory;
  try {
    decompressedDirectory=DecompressorFactory.create(rule.getTargetKind(),rule.getName(),downloadedFileValue.getPath(),outputDirectory).decompress();
  }
 catch (  DecompressorFactory.DecompressorException e) {
    throw new RepositoryFunctionException(new IOException(e.getMessage()),Transience.TRANSIENT);
  }
  NewLocalRepositoryFunction.createWorkspaceFile(decompressedDirectory,rule);
  FileValue buildFile=NewLocalRepositoryFunction.createBuildFile(rule,getWorkspace(),outputDirectory,env);
  if (buildFile == null) {
    return null;
  }
  return RepositoryValue.createNew(repositoryDirectory,buildFile);
}
