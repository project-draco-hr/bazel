{
  this.commandLineJavacFlags=ImmutableList.copyOf(JavaHelper.tokenizeJavaOptions(javaOptions.javacOpts));
  this.javaLauncherLabel=javaOptions.javaLauncher;
  this.javaBuilderTop=javaOptions.javaBuilderTop;
  this.defaultJavaBuilderJvmOpts=defaultJavaBuilderJvmOpts;
  this.javaLangtoolsJar=javaOptions.javaLangtoolsJar;
  this.useIjars=javaOptions.useIjars;
  this.generateJavaDeps=generateJavaDeps;
  this.experimentalJavaClasspath=javaOptions.experimentalJavaClasspath;
  this.javaWarns=ImmutableList.copyOf(javaOptions.javaWarns);
  this.defaultJvmFlags=ImmutableList.copyOf(defaultJvmFlags);
  this.checkedConstraints=ImmutableList.copyOf(javaOptions.checkedConstraints);
  this.strictJavaDeps=javaOptions.strictJavaDeps;
  this.javacBootclasspath=javaOptions.javacBootclasspath;
  this.javacExtdir=javaOptions.javacExtdir;
  this.javacOpts=ImmutableList.copyOf(javaOptions.javacOpts);
  this.extraProguardSpecs=ImmutableList.copyOf(javaOptions.extraProguardSpecs);
  this.bundleTranslations=javaOptions.bundleTranslations;
  this.javaCpu=javaCpu;
  this.javaToolchain=javaToolchain;
  this.allowPrecompiledJarsInSrcs=javaOptions.allowPrecompiledJarsInSrcs;
  this.javaOptimizationMode=javaOptions.javaOptimizationMode;
  ImmutableList.Builder<Label> translationsBuilder=ImmutableList.builder();
  for (  String s : javaOptions.translationTargets) {
    try {
      Label label=Label.parseAbsolute(s);
      translationsBuilder.add(label);
    }
 catch (    LabelSyntaxException e) {
      throw new InvalidConfigurationException("Invalid translations target '" + s + "', make "+ "sure it uses correct absolute path syntax.",e);
    }
  }
  this.translationTargets=translationsBuilder.build();
}
