{
  pkgLocator=new AtomicReference<>(new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory)));
  AtomicReference<ImmutableSet<PackageIdentifier>> deletedPackages=new AtomicReference<>(ImmutableSet.<PackageIdentifier>of());
  ExternalFilesHelper externalFilesHelper=new ExternalFilesHelper(pkgLocator,false);
  Map<SkyFunctionName,SkyFunction> skyFunctions=new HashMap<>();
  skyFunctions.put(SkyFunctions.FILE_STATE,new FileStateFunction(tsgm,externalFilesHelper));
  skyFunctions.put(SkyFunctions.FILE,new FileFunction(pkgLocator));
  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING,new DirectoryListingFunction());
  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING_STATE,new DirectoryListingStateFunction(externalFilesHelper));
  skyFunctions.put(SkyFunctions.RECURSIVE_FILESYSTEM_TRAVERSAL,new RecursiveFilesystemTraversalFunction());
  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages));
  skyFunctions.put(SkyFunctions.BLACKLISTED_PACKAGE_PREFIXES,new BlacklistedPackagePrefixesFunction());
  skyFunctions.put(SkyFunctions.PACKAGE,new PackageFunction(null,null,null,null,null,null,null));
  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages));
  skyFunctions.put(SkyFunctions.WORKSPACE_AST,new WorkspaceASTFunction(TestRuleClassProvider.getRuleClassProvider()));
  skyFunctions.put(SkyFunctions.WORKSPACE_FILE,new WorkspaceFileFunction(TestRuleClassProvider.getRuleClassProvider(),new PackageFactory(TestRuleClassProvider.getRuleClassProvider()),new BlazeDirectories(rootDirectory,outputBase,rootDirectory)));
  progressReceiver=new RecordingEvaluationProgressReceiver();
  differencer=new RecordingDifferencer();
  evaluator=new InMemoryMemoizingEvaluator(skyFunctions,differencer,progressReceiver);
  driver=new SequentialBuildDriver(evaluator);
  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());
  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());
  PrecomputedValue.BLACKLISTED_PACKAGE_PREFIXES_FILE.set(differencer,PathFragment.EMPTY_FRAGMENT);
}
