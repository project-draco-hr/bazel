{
  RootedPath file1=createFile(childOf(directoryArtifact,"bar.txt"));
  RootedPath file2=createFile(childOf(directoryArtifact,"baz/qux.txt"));
  TraversalRequest traversalRoot=fileLikeRoot(directoryArtifact,DONT_CROSS);
  ResolvedFile expected1=regularFileForTesting(file1);
  ResolvedFile expected2=regularFileForTesting(file2);
  RecursiveFilesystemTraversalValue v1=traverseAndAssertFiles(traversalRoot,expected1,expected2);
  assertThat(progressReceiver.invalidations).isEmpty();
  assertThat(progressReceiver.evaluations).contains(v1);
  progressReceiver.clear();
  RootedPath file3=createFile(childOf(directoryArtifact,"foo.txt"));
  invalidateDirectory(directoryArtifact);
  ResolvedFile expected3=regularFileForTesting(file3);
  RecursiveFilesystemTraversalValue v2=traverseAndAssertFiles(traversalRoot,expected1,expected2,expected3);
  assertThat(progressReceiver.invalidations).contains(rftvSkyKey(traversalRoot));
  assertThat(progressReceiver.evaluations).contains(v2);
  assertThat(v2).isNotEqualTo(v1);
  progressReceiver.clear();
  appendToFile(file1,"bar");
  RecursiveFilesystemTraversalValue v3=traverseAndAssertFiles(traversalRoot,expected1,expected2,expected3);
  assertThat(progressReceiver.invalidations).contains(rftvSkyKey(traversalRoot));
  assertThat(progressReceiver.evaluations).contains(v3);
  assertThat(v3).isNotEqualTo(v2);
  progressReceiver.clear();
  Artifact someFile=sourceArtifact("somewhere/else/a.file");
  createFile(someFile,"new file");
  appendToFile(someFile,"not all changes are treated equal");
  RecursiveFilesystemTraversalValue v4=traverseAndAssertFiles(traversalRoot,expected1,expected2,expected3);
  assertThat(v4).isEqualTo(v3);
  assertThat(progressReceiver.invalidations).doesNotContain(rftvSkyKey(traversalRoot));
}
