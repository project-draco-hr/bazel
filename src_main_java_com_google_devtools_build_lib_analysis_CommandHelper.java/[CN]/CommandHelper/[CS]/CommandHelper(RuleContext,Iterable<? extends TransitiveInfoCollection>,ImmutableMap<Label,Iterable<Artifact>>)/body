{
  this.ruleContext=ruleContext;
  ImmutableList.Builder<Artifact> resolvedToolsBuilder=ImmutableList.builder();
  ImmutableMap.Builder<PathFragment,Artifact> remoteRunfileManifestBuilder=ImmutableMap.builder();
  Map<Label,Collection<Artifact>> tempLabelMap=new HashMap<>();
  for (  Map.Entry<Label,Iterable<Artifact>> entry : labelMap.entrySet()) {
    Iterables.addAll(mapGet(tempLabelMap,entry.getKey()),entry.getValue());
  }
  for (  TransitiveInfoCollection dep : tools) {
    Label label=AliasProvider.getDependencyLabel(dep);
    FilesToRunProvider tool=dep.getProvider(FilesToRunProvider.class);
    if (tool == null) {
      continue;
    }
    Collection<Artifact> files=tool.getFilesToRun();
    resolvedToolsBuilder.addAll(files);
    Artifact executableArtifact=tool.getExecutable();
    if (executableArtifact != null) {
      mapGet(tempLabelMap,label).add(executableArtifact);
      Artifact runfilesManifest=tool.getRunfilesManifest();
      if (runfilesManifest != null) {
        remoteRunfileManifestBuilder.put(BaseSpawn.runfilesForFragment(executableArtifact.getExecPath()),runfilesManifest);
      }
    }
 else {
      mapGet(tempLabelMap,label).addAll(files);
    }
  }
  this.resolvedTools=new MutableList<>(resolvedToolsBuilder.build());
  this.remoteRunfileManifestMap=SkylarkDict.copyOf(null,remoteRunfileManifestBuilder.build());
  ImmutableMap.Builder<Label,ImmutableCollection<Artifact>> labelMapBuilder=ImmutableMap.builder();
  for (  Entry<Label,Collection<Artifact>> entry : tempLabelMap.entrySet()) {
    labelMapBuilder.put(entry.getKey(),ImmutableList.copyOf(entry.getValue()));
  }
  this.labelMap=SkylarkDict.copyOf(null,labelMapBuilder.build());
}
