{
  workspace=rootDirectory;
  analysisMock=getAnalysisMock();
  ConfiguredRuleClassProvider ruleClassProvider=analysisMock.createRuleClassProvider();
  PathPackageLocator pkgLocator=new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory));
  final PackageFactory pkgFactory;
  BlazeDirectories directories=new BlazeDirectories(outputBase,outputBase,rootDirectory,analysisMock.getProductName());
  pkgFactory=analysisMock.getPackageFactoryForTesting().create(ruleClassProvider,scratch.getFileSystem());
  AnalysisTestUtil.DummyWorkspaceStatusActionFactory workspaceStatusActionFactory=new AnalysisTestUtil.DummyWorkspaceStatusActionFactory(directories);
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,directories,BinTools.forUnitTesting(directories,analysisMock.getEmbeddedTools()),workspaceStatusActionFactory,ruleClassProvider.getBuildInfoFactories(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),Preprocessor.Factory.Supplier.NullSupplier.INSTANCE,analysisMock.getSkyFunctions(),ImmutableList.<PrecomputedValue.Injected>of(),ImmutableList.<SkyValueDirtinessChecker>of(),analysisMock.getProductName());
  skyframeExecutor.preparePackageLoading(pkgLocator,Options.getDefaults(PackageCacheOptions.class).defaultVisibility,true,7,ruleClassProvider.getDefaultsPackageContent(analysisMock.getInvocationPolicyEnforcer().getInvocationPolicy()),UUID.randomUUID(),new TimestampGranularityMonitor(BlazeClock.instance()));
  mockToolsConfig=new MockToolsConfig(rootDirectory);
  analysisMock.setupMockClient(mockToolsConfig);
  analysisMock.setupMockWorkspaceFiles(directories.getEmbeddedBinariesRoot());
  configurationFactory=analysisMock.createConfigurationFactory();
  buildOptionClasses=ruleClassProvider.getConfigurationOptions();
}
