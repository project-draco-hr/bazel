{
  String buildFilePath=label.getPackageFragment().getSafePathString() + "/BUILD";
  NestedSet<String> userHeaderSearchPaths=NestedSetBuilder.<String>linkOrder().addTransitive(propagatedUserHeaderSearchPaths).addTransitive(nonPropagatedUserHeaderSearchPaths).build();
  NestedSet<String> headerSearchPaths=NestedSetBuilder.<String>linkOrder().addTransitive(propagatedHeaderSearchPaths).addTransitive(nonPropagatedHeaderSearchPaths).build();
  TargetControl.Builder targetControl=TargetControl.newBuilder().setName(label.getName()).setLabel(xcodeTargetName(label)).setProductType(productType.getIdentifier()).addSupportFile(buildFilePath).addAllImportedLibrary(Artifact.toExecPaths(objcProvider.get(IMPORTED_LIBRARY))).addAllUserHeaderSearchPath(userHeaderSearchPaths).addAllHeaderSearchPath(headerSearchPaths).addAllSupportFile(Artifact.toExecPaths(headers)).addAllCopt(compilationModeCopts).addAllCopt(CompilationSupport.DEFAULT_COMPILER_FLAGS).addAllCopt(Interspersing.prependEach("-D",objcProvider.get(DEFINE))).addAllCopt(copts).addAllLinkopt(Interspersing.beforeEach("-force_load",objcProvider.get(FORCE_LOAD_FOR_XCODEGEN))).addAllLinkopt(CompilationSupport.DEFAULT_LINKER_FLAGS).addAllLinkopt(Interspersing.beforeEach("-weak_framework",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK)))).addAllBuildSetting(xcodeprojBuildSettings).addAllBuildSetting(AppleToolchain.defaultWarningsForXcode()).addAllSdkFramework(SdkFramework.names(objcProvider.get(SDK_FRAMEWORK))).addAllFramework(PathFragment.safePathStrings(objcProvider.get(FRAMEWORK_DIR))).addAllXcassetsDir(PathFragment.safePathStrings(objcProvider.get(XCASSETS_DIR))).addAllXcdatamodel(PathFragment.safePathStrings(Xcdatamodels.datamodelDirs(objcProvider.get(XCDATAMODEL)))).addAllBundleImport(PathFragment.safePathStrings(objcProvider.get(BUNDLE_IMPORT_DIR))).addAllSdkDylib(objcProvider.get(SDK_DYLIB)).addAllGeneralResourceFile(Artifact.toExecPaths(objcProvider.get(GENERAL_RESOURCE_FILE))).addAllGeneralResourceFile(PathFragment.safePathStrings(objcProvider.get(GENERAL_RESOURCE_DIR)));
  if (CAN_LINK_PRODUCT_TYPES.contains(productType)) {
    Set<DependencyControl> dependencySet=new LinkedHashSet<>();
    for (    XcodeProvider dependency : propagatedDependencies) {
      boolean hasSources=dependency.compilationArtifacts.isPresent() && dependency.compilationArtifacts.get().getArchive().isPresent();
      if (hasSources || (dependency.productType == XcodeProductType.BUNDLE || (dependency.productType == XcodeProductType.WATCH_OS1_APPLICATION))) {
        String dependencyXcodeTargetName=dependency.dependencyXcodeTargetName();
        dependencySet.add(DependencyControl.newBuilder().setTargetLabel(dependencyXcodeTargetName).build());
      }
    }
    for (    DependencyControl dependencyControl : dependencySet) {
      targetControl.addDependency(dependencyControl);
    }
  }
  for (  XcodeProvider justTestHost : testHost.asSet()) {
    targetControl.addDependency(DependencyControl.newBuilder().setTargetLabel(xcodeTargetName(justTestHost.label)).setTestHost(true).build());
  }
  for (  XcodeProvider extension : extensions) {
    targetControl.addDependency(DependencyControl.newBuilder().setTargetLabel(xcodeTargetName(extension.label)).build());
  }
  if (bundleInfoplist.isPresent()) {
    targetControl.setInfoplist(bundleInfoplist.get().getExecPathString());
  }
  for (  CompilationArtifacts artifacts : compilationArtifacts.asSet()) {
    targetControl.addAllSourceFile(Artifact.toExecPaths(artifacts.getSrcs())).addAllSupportFile(Artifact.toExecPaths(artifacts.getAdditionalHdrs())).addAllSupportFile(Artifact.toExecPaths(artifacts.getPrivateHdrs())).addAllNonArcSourceFile(Artifact.toExecPaths(artifacts.getNonArcSrcs()));
    for (    Artifact pchFile : artifacts.getPchFile().asSet()) {
      targetControl.setPchPath(pchFile.getExecPathString()).addSupportFile(pchFile.getExecPathString());
    }
  }
  for (  Artifact artifact : additionalSources) {
    targetControl.addSourceFile(artifact.getExecPathString());
  }
  if (objcProvider.is(Flag.USES_CPP)) {
    targetControl.addSdkDylib("libc++");
  }
  return targetControl.build();
}
