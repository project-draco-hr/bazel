{
  Path fromPath=from.asPath();
  try {
    if (fromPath.exists()) {
      fromPath.delete();
    }
    FileSystemUtils.ensureSymbolicLink(fromPath,to);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(new IOException(String.format("Error creating symbolic link from %s to %s: %s",from,to,e.getMessage())),Transience.TRANSIENT);
  }
  try {
    return (FileValue)env.getValueOrThrow(FileValue.key(from),IOException.class,FileSymlinkException.class,InconsistentFilesystemException.class);
  }
 catch (  IOException|FileSymlinkException|InconsistentFilesystemException e) {
    throw new RepositoryFunctionException(new IOException(String.format("Could not access %s: %s",from,e.getMessage())),Transience.PERSISTENT);
  }
}
