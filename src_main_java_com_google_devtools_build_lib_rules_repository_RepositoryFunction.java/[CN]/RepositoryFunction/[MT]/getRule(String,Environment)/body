{
  SkyKey packageLookupKey=PackageLookupValue.key(Label.EXTERNAL_PACKAGE_IDENTIFIER);
  PackageLookupValue packageLookupValue=(PackageLookupValue)env.getValue(packageLookupKey);
  if (packageLookupValue == null) {
    return null;
  }
  RootedPath workspacePath=packageLookupValue.getRootedPath(Label.EXTERNAL_PACKAGE_IDENTIFIER);
  SkyKey workspaceKey=WorkspaceFileValue.key(workspacePath);
  do {
    WorkspaceFileValue value=(WorkspaceFileValue)env.getValue(workspaceKey);
    if (value == null) {
      return null;
    }
    Package externalPackage=value.getPackage();
    if (externalPackage.containsErrors()) {
      Event.replayEventsOn(env.getListener(),externalPackage.getEvents());
      throw new RepositoryFunctionException(new BuildFileContainsErrorsException(Label.EXTERNAL_PACKAGE_IDENTIFIER,"Could not load //external package"),Transience.PERSISTENT);
    }
    Rule rule=externalPackage.getRule(repository);
    if (rule != null) {
      return rule;
    }
    workspaceKey=value.next();
  }
 while (workspaceKey != null);
  throw new RepositoryNotFoundException(repository);
}
