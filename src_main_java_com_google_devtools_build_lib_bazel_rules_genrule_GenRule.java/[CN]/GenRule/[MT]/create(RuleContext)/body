{
  final List<Artifact> resolvedSrcs=Lists.newArrayList();
  final NestedSet<Artifact> filesToBuild=NestedSetBuilder.wrap(Order.STABLE_ORDER,ruleContext.getOutputArtifacts());
  if (filesToBuild.isEmpty()) {
    ruleContext.attributeError("outs","Genrules without outputs don't make sense");
  }
  if (ruleContext.attributes().get("executable",Type.BOOLEAN) && Iterables.size(filesToBuild) > 1) {
    ruleContext.attributeError("executable","if genrules produce executables, they are allowed only one output. " + "If you need the executable=1 argument, then you should split this genrule into " + "genrules producing single outputs");
  }
  ImmutableMap.Builder<Label,Iterable<Artifact>> labelMap=ImmutableMap.builder();
  for (  TransitiveInfoCollection dep : ruleContext.getPrerequisites("srcs",Mode.TARGET)) {
    Iterable<Artifact> files=dep.getProvider(FileProvider.class).getFilesToBuild();
    Iterables.addAll(resolvedSrcs,files);
    labelMap.put(dep.getLabel(),files);
  }
  CommandHelper commandHelper=new CommandHelper(ruleContext,ruleContext.getPrerequisites("tools",Mode.HOST,FilesToRunProvider.class),labelMap.build());
  if (ruleContext.hasErrors()) {
    return null;
  }
  String baseCommand=commandHelper.resolveCommandAndExpandLabels(ruleContext.attributes().get("heuristic_label_expansion",Type.BOOLEAN),false);
  String command=GENRULE_SETUP_CMD + baseCommand;
  command=resolveCommand(ruleContext,command,resolvedSrcs,filesToBuild);
  String message=ruleContext.attributes().get("message",Type.STRING);
  if (message.isEmpty()) {
    message="Executing genrule";
  }
  ImmutableMap<String,String> env=ruleContext.getConfiguration().getDefaultShellEnvironment();
  Map<String,String> executionInfo=Maps.newLinkedHashMap();
  executionInfo.putAll(TargetUtils.getExecutionInfo(ruleContext.getRule()));
  if (ruleContext.attributes().get("local",Type.BOOLEAN)) {
    executionInfo.put("local","");
  }
  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.stableOrder();
  inputs.addAll(resolvedSrcs);
  inputs.addAll(commandHelper.getResolvedTools());
  FilesToRunProvider genruleSetup=ruleContext.getPrerequisite("$genrule_setup",Mode.HOST,FilesToRunProvider.class);
  inputs.addAll(genruleSetup.getFilesToRun());
  List<String> argv=commandHelper.buildCommandLine(command,inputs,".genrule_script.sh");
  if (ruleContext.attributes().get("stamp",Type.BOOLEAN)) {
    inputs.add(ruleContext.getAnalysisEnvironment().getStableWorkspaceStatusArtifact());
    inputs.add(ruleContext.getAnalysisEnvironment().getVolatileWorkspaceStatusArtifact());
  }
  ruleContext.registerAction(new GenRuleAction(ruleContext.getActionOwner(),inputs.build(),filesToBuild,argv,env,ImmutableMap.copyOf(executionInfo),commandHelper.getRemoteRunfileManifestMap(),message + ' ' + ruleContext.getLabel()));
  RunfilesProvider runfilesProvider=withData(Runfiles.EMPTY,new Runfiles.Builder().addTransitiveArtifacts(filesToBuild).build());
  return new RuleConfiguredTargetBuilder(ruleContext).setFilesToBuild(filesToBuild).setRunfilesSupport(null,getExecutable(ruleContext,filesToBuild)).addProvider(RunfilesProvider.class,runfilesProvider).build();
}
