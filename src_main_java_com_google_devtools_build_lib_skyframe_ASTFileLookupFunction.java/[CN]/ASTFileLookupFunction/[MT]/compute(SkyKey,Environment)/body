{
  PackageIdentifier key=(PackageIdentifier)skyKey.argument();
  PathFragment astFilePathFragment=key.getPackageFragment();
  FileLookupResult lookupResult=getASTFile(env,key);
  if (lookupResult == null) {
    return null;
  }
  if (!lookupResult.lookupSuccessful()) {
    return ASTFileLookupValue.noFile();
  }
  BuildFileAST ast=null;
  Path path=lookupResult.rootedPath().asPath();
  boolean parseAsSkylark=astFilePathFragment.getPathString().endsWith(".bzl");
  try {
    if (parseAsSkylark) {
      try (Mutability mutability=Mutability.create("validate")){
        ast=BuildFileAST.parseSkylarkFile(path,env.getListener(),packageManager,new ValidationEnvironment(ruleClassProvider.createSkylarkRuleClassEnvironment(mutability,env.getListener(),null,null).setupDynamic(Runtime.PKG_NAME,Runtime.NONE)));
      }
     }
 else {
      ast=BuildFileAST.parseBuildFile(path,env.getListener(),packageManager,false);
    }
  }
 catch (  IOException e) {
    throw new ASTLookupFunctionException(new ErrorReadingSkylarkExtensionException(e.getMessage()),Transience.TRANSIENT);
  }
  return ASTFileLookupValue.withFile(ast);
}
