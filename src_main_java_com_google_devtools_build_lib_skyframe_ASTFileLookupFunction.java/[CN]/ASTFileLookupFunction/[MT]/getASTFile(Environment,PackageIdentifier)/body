{
  List<Path> candidateRoots;
  if (!key.getRepository().isDefault()) {
    RepositoryValue repository=(RepositoryValue)env.getValue(RepositoryValue.key(key.getRepository()));
    if (repository == null) {
      return null;
    }
    candidateRoots=ImmutableList.of(repository.getPath());
  }
 else {
    candidateRoots=pkgLocator.get().getPathEntries();
  }
  for (  Path root : candidateRoots) {
    RootedPath rootedPath=RootedPath.toRootedPath(root,key.getPackageFragment());
    FileValue fileValue;
    try {
      fileValue=(FileValue)env.getValueOrThrow(FileValue.key(rootedPath),IOException.class,FileSymlinkException.class,InconsistentFilesystemException.class);
    }
 catch (    IOException|FileSymlinkException e) {
      throw new ASTLookupFunctionException(new ErrorReadingSkylarkExtensionException(e.getMessage()),Transience.PERSISTENT);
    }
catch (    InconsistentFilesystemException e) {
      throw new ASTLookupFunctionException(e,Transience.PERSISTENT);
    }
    if (fileValue == null) {
      return null;
    }
    if (fileValue.isFile()) {
      return FileLookupResult.file(rootedPath);
    }
  }
  return FileLookupResult.noFile();
}
