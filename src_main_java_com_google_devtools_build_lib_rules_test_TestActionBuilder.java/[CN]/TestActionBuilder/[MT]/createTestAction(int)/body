{
  PathFragment targetName=new PathFragment(ruleContext.getLabel().getName());
  BuildConfiguration config=ruleContext.getConfiguration();
  AnalysisEnvironment env=ruleContext.getAnalysisEnvironment();
  Root root=config.getTestLogsDirectory(ruleContext.getRule().getRepository());
  NestedSetBuilder<Artifact> inputsBuilder=NestedSetBuilder.stableOrder();
  inputsBuilder.addTransitive(NestedSetBuilder.create(Order.STABLE_ORDER,runfilesSupport.getRunfilesMiddleman()));
  NestedSet<Artifact> testRuntime=PrerequisiteArtifacts.nestedSet(ruleContext,"$test_runtime",Mode.HOST);
  inputsBuilder.addTransitive(testRuntime);
  TestTargetProperties testProperties=new TestTargetProperties(ruleContext,executionRequirements);
  final boolean collectCodeCoverage=config.isCodeCoverageEnabled() && instrumentedFiles != null;
  TreeMap<String,String> testEnv=new TreeMap<>();
  TestTargetExecutionSettings executionSettings;
  if (collectCodeCoverage) {
    inputsBuilder.addTransitive(instrumentedFiles.getCoverageSupportFiles());
    NestedSet<Artifact> metadataFiles=instrumentedFiles.getInstrumentationMetadataFiles();
    inputsBuilder.addTransitive(metadataFiles);
    inputsBuilder.addTransitive(PrerequisiteArtifacts.nestedSet(ruleContext,"$coverage_support",Mode.HOST));
    Artifact instrumentedFileManifest=InstrumentedFileManifestAction.getInstrumentedFileManifest(ruleContext,instrumentedFiles.getInstrumentedFiles(),metadataFiles);
    executionSettings=new TestTargetExecutionSettings(ruleContext,runfilesSupport,executable,instrumentedFileManifest,shards);
    inputsBuilder.add(instrumentedFileManifest);
    for (    Pair<String,String> coverageEnvEntry : instrumentedFiles.getCoverageEnvironment()) {
      testEnv.put(coverageEnvEntry.getFirst(),coverageEnvEntry.getSecond());
    }
  }
 else {
    executionSettings=new TestTargetExecutionSettings(ruleContext,runfilesSupport,executable,null,shards);
  }
  testEnv.putAll(extraEnv);
  if (config.getRunUnder() != null) {
    Artifact runUnderExecutable=executionSettings.getRunUnderExecutable();
    if (runUnderExecutable != null) {
      inputsBuilder.add(runUnderExecutable);
    }
  }
  int runsPerTest=config.getRunsPerTestForLabel(ruleContext.getLabel());
  Iterable<Artifact> inputs=inputsBuilder.build();
  int shardRuns=(shards > 0 ? shards : 1);
  List<Artifact> results=Lists.newArrayListWithCapacity(runsPerTest * shardRuns);
  ImmutableList.Builder<Artifact> coverageArtifacts=ImmutableList.builder();
  for (int run=0; run < runsPerTest; run++) {
    String testRunDir=runsPerTest > 1 ? String.format("run_%d_of_%d",run + 1,runsPerTest) : "";
    for (int shard=0; shard < shardRuns; shard++) {
      String shardRunDir=(shardRuns > 1 ? String.format("shard_%d_of_%d",shard + 1,shards) : "");
      if (testRunDir.isEmpty()) {
        shardRunDir=shardRunDir.isEmpty() ? "" : shardRunDir + PathFragment.SEPARATOR_CHAR;
      }
 else {
        testRunDir+=PathFragment.SEPARATOR_CHAR;
        shardRunDir=shardRunDir.isEmpty() ? testRunDir : shardRunDir + "_" + testRunDir;
      }
      Artifact testLog=ruleContext.getPackageRelativeArtifact(targetName.getRelative(shardRunDir + "test.log"),root);
      Artifact cacheStatus=ruleContext.getPackageRelativeArtifact(targetName.getRelative(shardRunDir + "test.cache_status"),root);
      Artifact coverageArtifact=null;
      if (collectCodeCoverage) {
        coverageArtifact=ruleContext.getPackageRelativeArtifact(targetName.getRelative(shardRunDir + "coverage.dat"),root);
        coverageArtifacts.add(coverageArtifact);
      }
      Artifact microCoverageArtifact=null;
      if (collectCodeCoverage && config.isMicroCoverageEnabled()) {
        microCoverageArtifact=ruleContext.getPackageRelativeArtifact(targetName.getRelative(shardRunDir + "coverage.micro.dat"),root);
      }
      env.registerAction(new TestRunnerAction(ruleContext.getActionOwner(),inputs,testRuntime,testLog,cacheStatus,coverageArtifact,microCoverageArtifact,testProperties,testEnv,executionSettings,shard,run,config,ruleContext.getWorkspaceName()));
      results.add(cacheStatus);
    }
  }
  Artifact reportGenerator=null;
  if (collectCodeCoverage) {
    reportGenerator=ruleContext.getPrerequisiteArtifact("$coverage_report_generator",Mode.HOST);
  }
  return new TestParams(runsPerTest,shards,TestTimeout.getTestTimeout(ruleContext.getRule()),ruleContext.getRule().getRuleClass(),ImmutableList.copyOf(results),coverageArtifacts.build(),reportGenerator);
}
