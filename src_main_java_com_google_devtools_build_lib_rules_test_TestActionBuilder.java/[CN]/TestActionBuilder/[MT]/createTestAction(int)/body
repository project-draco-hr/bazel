{
  PathFragment targetName=new PathFragment(ruleContext.getLabel().getName());
  BuildConfiguration config=ruleContext.getConfiguration();
  AnalysisEnvironment env=ruleContext.getAnalysisEnvironment();
  Root root=config.getTestLogsDirectory();
  NestedSetBuilder<Artifact> inputsBuilder=NestedSetBuilder.stableOrder();
  inputsBuilder.addTransitive(NestedSetBuilder.create(Order.STABLE_ORDER,runfilesSupport.getRunfilesMiddleman()));
  NestedSet<Artifact> testRuntime=PrerequisiteArtifacts.nestedSet(ruleContext,"$test_runtime",Mode.HOST);
  inputsBuilder.addTransitive(testRuntime);
  TestTargetProperties testProperties=new TestTargetProperties(ruleContext,executionRequirements);
  final boolean collectCodeCoverage=config.isCodeCoverageEnabled() && instrumentedFiles != null;
  TestTargetExecutionSettings executionSettings;
  if (collectCodeCoverage) {
    NestedSet<Artifact> metadataFiles=instrumentedFiles.getInstrumentationMetadataFiles();
    inputsBuilder.addTransitive(metadataFiles);
    for (    TransitiveInfoCollection dep : ruleContext.getPrerequisites(":coverage_support",Mode.HOST)) {
      inputsBuilder.addTransitive(dep.getProvider(FileProvider.class).getFilesToBuild());
    }
    for (    TransitiveInfoCollection dep : ruleContext.getPrerequisites(":gcov",Mode.HOST)) {
      inputsBuilder.addTransitive(dep.getProvider(FileProvider.class).getFilesToBuild());
    }
    Artifact instrumentedFileManifest=InstrumentedFileManifestAction.getInstrumentedFileManifest(ruleContext,instrumentedFiles.getInstrumentedFiles(),metadataFiles);
    executionSettings=new TestTargetExecutionSettings(ruleContext,runfilesSupport,executable,instrumentedFileManifest,shards);
    inputsBuilder.add(instrumentedFileManifest);
  }
 else {
    executionSettings=new TestTargetExecutionSettings(ruleContext,runfilesSupport,executable,null,shards);
  }
  if (config.getRunUnder() != null) {
    Artifact runUnderExecutable=executionSettings.getRunUnderExecutable();
    if (runUnderExecutable != null) {
      inputsBuilder.add(runUnderExecutable);
    }
  }
  int runsPerTest=config.getRunsPerTestForLabel(ruleContext.getLabel());
  Iterable<Artifact> inputs=inputsBuilder.build();
  int shardRuns=(shards > 0 ? shards : 1);
  List<Artifact> results=Lists.newArrayListWithCapacity(runsPerTest * shardRuns);
  ImmutableList.Builder<Artifact> coverageArtifacts=ImmutableList.builder();
  for (int run=0; run < runsPerTest; run++) {
    String runSuffix=runsPerTest > 1 ? String.format("_run_%d_of_%d",run + 1,runsPerTest) : "";
    for (int shard=0; shard < shardRuns; shard++) {
      String suffix=(shardRuns > 1 ? String.format("_shard_%d_of_%d",shard + 1,shards) : "") + runSuffix;
      Artifact testLog=ruleContext.getPackageRelativeArtifact(targetName.getRelative("test" + suffix + ".log"),root);
      Artifact cacheStatus=ruleContext.getPackageRelativeArtifact(targetName.getRelative("test" + suffix + ".cache_status"),root);
      Artifact coverageArtifact=null;
      if (collectCodeCoverage) {
        coverageArtifact=ruleContext.getPackageRelativeArtifact(targetName.getRelative("coverage" + suffix + ".dat"),root);
        coverageArtifacts.add(coverageArtifact);
      }
      Artifact microCoverageArtifact=null;
      if (collectCodeCoverage && config.isMicroCoverageEnabled()) {
        microCoverageArtifact=ruleContext.getPackageRelativeArtifact(targetName.getRelative("coverage" + suffix + ".micro.dat"),root);
      }
      env.registerAction(new TestRunnerAction(ruleContext.getActionOwner(),inputs,testRuntime,testLog,cacheStatus,coverageArtifact,microCoverageArtifact,testProperties,extraEnv,executionSettings,shard,run,config,ruleContext.getWorkspaceName()));
      results.add(cacheStatus);
    }
  }
  Artifact reportGenerator=collectCodeCoverage ? ruleContext.getPrerequisiteArtifact(":coverage_report_generator",Mode.HOST) : null;
  return new TestParams(runsPerTest,shards,TestTimeout.getTestTimeout(ruleContext.getRule()),ruleContext.getRule().getRuleClass(),ImmutableList.copyOf(results),coverageArtifacts.build(),reportGenerator);
}
