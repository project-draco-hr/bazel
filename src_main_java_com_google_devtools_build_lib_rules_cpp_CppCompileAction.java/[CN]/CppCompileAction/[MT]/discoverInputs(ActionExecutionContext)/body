{
  Executor executor=actionExecutionContext.getExecutor();
  Collection<Artifact> initialResult;
  try {
    initialResult=executor.getContext(actionContext).findAdditionalInputs(this,actionExecutionContext);
  }
 catch (  ExecException e) {
    throw e.toActionExecutionException("Include scanning of rule '" + getOwner().getLabel() + "'",executor.getVerboseFailures(),this);
  }
  if (initialResult == null) {
    this.additionalInputs=ImmutableList.of();
    return null;
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.PRUNE_HEADER_MODULES)) {
    Set<Artifact> initialResultSet=Sets.newLinkedHashSet(initialResult);
    List<String> usedModulePaths=Lists.newArrayList();
    for (    Artifact usedModule : context.getUsedModules(usePic,initialResultSet)) {
      initialResultSet.add(usedModule);
      usedModulePaths.add(usedModule.getExecPathString());
    }
    CcToolchainFeatures.Variables.Builder variableBuilder=new CcToolchainFeatures.Variables.Builder();
    variableBuilder.addSequenceVariable("module_files",usedModulePaths);
    this.overwrittenVariables=variableBuilder.build();
    initialResult=initialResultSet;
  }
  this.additionalInputs=initialResult;
  Collection<Artifact> result=new HashSet<>();
  ArtifactResolver artifactResolver=executor.getContext(IncludeScanningContext.class).getArtifactResolver();
  for (  Artifact artifact : initialResult) {
    result.addAll(specialInputsHandler.getInputsForIncludedFile(artifact,artifactResolver));
  }
  for (  Artifact artifact : getInputs()) {
    result.addAll(specialInputsHandler.getInputsForIncludedFile(artifact,artifactResolver));
  }
  resolvedInputs=ImmutableList.copyOf(result);
  if (result.isEmpty()) {
    result=initialResult;
  }
 else {
    result.addAll(initialResult);
  }
  return result;
}
