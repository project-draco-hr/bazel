{
  try {
    CacheManager cacheManager=new CacheManager(execRoot.getRelative(BlazeDirectories.getRelativeOutputPath(productName)),XCRUN_CACHE_FILENAME);
    String sdkString=appleSdkPlatform.toLowerCase() + sdkVersion;
    String cacheResult=cacheManager.getValue(developerDir,sdkString);
    if (cacheResult != null) {
      return cacheResult;
    }
 else {
      Map<String,String> env=Strings.isNullOrEmpty(developerDir) ? ImmutableMap.<String,String>of() : ImmutableMap.of("DEVELOPER_DIR",developerDir);
      CommandResult xcrunResult=new Command(new String[]{"/usr/bin/xcrun","--sdk",sdkString,"--show-sdk-path"},env,null).execute();
      String sdkRoot=new String(xcrunResult.getStdout(),StandardCharsets.UTF_8).trim();
      cacheManager.writeEntry(ImmutableList.of(developerDir,sdkString),sdkRoot);
      return sdkRoot;
    }
  }
 catch (  AbnormalTerminationException e) {
    TerminationStatus terminationStatus=e.getResult().getTerminationStatus();
    if (terminationStatus.exited()) {
      throw new UserExecException(String.format("xcrun failed with code %s.\n" + "This most likely indicates that SDK version [%s] for platform [%s] is " + "unsupported for the target version of xcode.\n"+ "%s\n"+ "Stderr: %s",terminationStatus.getExitCode(),sdkVersion,appleSdkPlatform,terminationStatus.toString(),new String(e.getResult().getStderr(),StandardCharsets.UTF_8)));
    }
    String message=String.format("xcrun failed.\n%s\n%s",e.getResult().getTerminationStatus(),new String(e.getResult().getStderr(),StandardCharsets.UTF_8));
    throw new UserExecException(message,e);
  }
catch (  CommandException|IOException e) {
    throw new UserExecException(e);
  }
}
