{
  try {
    CacheManager cacheManager=new CacheManager(execRoot.getRelative(BlazeDirectories.RELATIVE_OUTPUT_PATH),XCODE_LOCATOR_CACHE_FILENAME);
    String cacheResult=cacheManager.getValue(version.toString());
    if (cacheResult != null) {
      return cacheResult;
    }
 else {
      CommandResult xcodeLocatorResult=new Command(new String[]{execRoot.getRelative("_bin/xcode-locator").getPathString(),version.toString()}).execute();
      String developerDir=new String(xcodeLocatorResult.getStdout(),StandardCharsets.UTF_8).trim();
      cacheManager.writeEntry(ImmutableList.of(version.toString()),developerDir);
      return developerDir;
    }
  }
 catch (  AbnormalTerminationException e) {
    TerminationStatus terminationStatus=e.getResult().getTerminationStatus();
    String message;
    if (e.getResult().getTerminationStatus().exited()) {
      message=String.format("xcode-locator failed with code %s.\n" + "This most likely indicates that xcode version %s is not available on the host " + "machine.\n"+ "%s\n"+ "stderr: %s",terminationStatus.getExitCode(),version,terminationStatus.toString(),new String(e.getResult().getStderr(),StandardCharsets.UTF_8));
    }
 else {
      message=String.format("xcode-locator failed. %s\nstderr: %s",e.getResult().getTerminationStatus(),new String(e.getResult().getStderr(),StandardCharsets.UTF_8));
    }
    throw new UserExecException(message,e);
  }
catch (  CommandException|IOException e) {
    throw new UserExecException(e);
  }
}
