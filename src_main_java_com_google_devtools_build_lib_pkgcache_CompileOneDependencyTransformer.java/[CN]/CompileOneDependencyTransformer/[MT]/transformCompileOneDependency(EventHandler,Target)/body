{
  if (!(target instanceof FileTarget)) {
    throw new TargetParsingException("--compile_one_dependency target '" + target.getLabel() + "' must be a file");
  }
  Rule result=null;
  Iterable<Rule> orderedRuleList=getOrderedRuleList(target.getPackage());
  for (  Rule rule : orderedRuleList) {
    Set<Label> labels=getInputLabels(rule);
    if (listContainsFile(eventHandler,labels,target.getLabel(),Sets.<Label>newHashSet())) {
      if (rule.getRuleClassObject().isPreferredDependency(target.getName())) {
        result=rule;
        break;
      }
      if (result == null) {
        result=rule;
      }
    }
  }
  if (result == null) {
    throw new TargetParsingException("Couldn't find dependency on target '" + target.getLabel() + "'");
  }
  if (!RawAttributeMapper.of(result).getMergedValues("srcs",BuildType.LABEL_LIST).isEmpty()) {
    return result;
  }
  for (  Rule rule : orderedRuleList) {
    RawAttributeMapper attributes=RawAttributeMapper.of(rule);
    if (attributes.isConfigurable("deps",BuildType.LABEL_LIST) || attributes.isConfigurable("srcs",BuildType.LABEL_LIST)) {
      continue;
    }
    RuleClass ruleClass=rule.getRuleClassObject();
    if (ruleClass.hasAttr("deps",BuildType.LABEL_LIST) && ruleClass.hasAttr("srcs",BuildType.LABEL_LIST)) {
      for (      Label dep : attributes.get("deps",BuildType.LABEL_LIST)) {
        if (dep.equals(result.getLabel())) {
          if (!attributes.get("srcs",BuildType.LABEL_LIST).isEmpty()) {
            return rule;
          }
        }
      }
    }
  }
  throw new TargetParsingException("Couldn't find dependency on target '" + target.getLabel() + "'");
}
