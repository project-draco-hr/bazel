{
  URL url=new URL(urlString);
  Path destination;
  if (type == null) {
    destination=outputDirectory;
  }
 else {
    String filename=new PathFragment(url.getPath()).getBaseName();
    if (filename.isEmpty()) {
      filename="temp";
    }
 else     if (!type.isEmpty()) {
      filename+="." + type;
    }
    destination=outputDirectory.getRelative(filename);
  }
  if (!sha256.isEmpty()) {
    try {
      String currentSha256=getHash(Hashing.sha256().newHasher(),destination);
      if (currentSha256.equals(sha256)) {
        return destination;
      }
    }
 catch (    IOException e) {
    }
  }
  AtomicInteger totalBytes=new AtomicInteger(0);
  final ScheduledFuture<?> loggerHandle=getLoggerHandle(totalBytes);
  try (OutputStream out=destination.getOutputStream();HttpConnection connection=HttpConnection.createAndConnect(url)){
    InputStream inputStream=connection.getInputStream();
    int read;
    byte[] buf=new byte[BUFFER_SIZE];
    while ((read=inputStream.read(buf)) > 0) {
      totalBytes.addAndGet(read);
      out.write(buf,0,read);
    }
    if (connection.getContentLength() != -1 && totalBytes.get() != connection.getContentLength()) {
      throw new IOException("Expected " + formatSize(connection.getContentLength()) + ", got "+ formatSize(totalBytes.get()));
    }
  }
 catch (  IOException e) {
    throw new IOException("Error downloading " + url + " to "+ destination+ ": "+ e.getMessage());
  }
 finally {
    scheduler.schedule(new Runnable(){
      @Override public void run(){
        loggerHandle.cancel(true);
      }
    }
,0,TimeUnit.SECONDS);
  }
  compareHashes(destination);
  return destination;
}
