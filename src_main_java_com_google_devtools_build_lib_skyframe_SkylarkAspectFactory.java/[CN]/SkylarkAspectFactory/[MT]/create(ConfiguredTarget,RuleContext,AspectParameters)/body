{
  try (Mutability mutability=Mutability.create("aspect")){
    SkylarkRuleContext skylarkRuleContext;
    try {
      skylarkRuleContext=new SkylarkRuleContext(ruleContext);
    }
 catch (    EvalException e) {
      ruleContext.ruleError(e.getMessage());
      return null;
    }
    Environment env=Environment.builder(mutability).setSkylark().setGlobals(skylarkAspect.getFuncallEnv().getGlobals()).setEventHandler(ruleContext.getAnalysisEnvironment().getEventHandler()).build();
    Object aspectSkylarkObject;
    try {
      aspectSkylarkObject=skylarkAspect.getImplementation().call(ImmutableList.<Object>of(base,skylarkRuleContext),ImmutableMap.<String,Object>of(),null,env);
      if (ruleContext.hasErrors()) {
        return null;
      }
 else       if (!(aspectSkylarkObject instanceof SkylarkClassObject)) {
        ruleContext.ruleError("Aspect implementation doesn't return a struct");
        return null;
      }
      ConfiguredAspect.Builder builder=new ConfiguredAspect.Builder(name,ruleContext);
      SkylarkClassObject struct=(SkylarkClassObject)aspectSkylarkObject;
      Location loc=struct.getCreationLoc();
      for (      String key : struct.getKeys()) {
        builder.addSkylarkTransitiveInfo(key,struct.getValue(key),loc);
      }
      ConfiguredAspect configuredAspect=builder.build();
      SkylarkProviderValidationUtil.checkOrphanArtifacts(ruleContext);
      return configuredAspect;
    }
 catch (    EvalException e) {
      addAspectToStackTrace(base,e);
      ruleContext.ruleError("\n" + e.print());
      return null;
    }
  }
 }
