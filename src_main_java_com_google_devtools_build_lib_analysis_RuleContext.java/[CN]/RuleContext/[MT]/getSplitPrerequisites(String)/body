{
  checkAttribute(attributeName,Mode.SPLIT);
  Attribute attributeDefinition=getAttribute(attributeName);
  @SuppressWarnings("unchecked") SplitTransition<BuildOptions> transition=(SplitTransition<BuildOptions>)attributeDefinition.getSplitTransition(rule);
  List<ConfiguredTarget> deps=targetMap.get(attributeName);
  List<BuildOptions> splitOptions=transition.split(getConfiguration().getOptions());
  if (splitOptions.isEmpty()) {
    return ImmutableMap.of(Optional.<String>absent(),deps);
  }
  Set<String> cpus=new HashSet<>();
  for (  BuildOptions options : splitOptions) {
    cpus.add(options.get(BuildConfiguration.Options.class).cpu);
  }
  ImmutableListMultimap.Builder<Optional<String>,TransitiveInfoCollection> result=ImmutableListMultimap.builder();
  for (  TransitiveInfoCollection t : deps) {
    if (t.getConfiguration() != null) {
      result.put(Optional.of(t.getConfiguration().getCpu()),t);
    }
 else {
      for (      String cpu : cpus) {
        result.put(Optional.of(cpu),t);
      }
    }
  }
  return Multimaps.asMap(result.build());
}
