{
  return new JavaCompiler(){
    @Override public CompilationTask getTask(    Writer out,    JavaFileManager fileManager,    DiagnosticListener<? super JavaFileObject> diagnosticListener,    Iterable<String> options,    Iterable<String> classes,    Iterable<? extends JavaFileObject> compilationUnits){
      ImmutableList.Builder<String> fullOptions=ImmutableList.builder();
      fullOptions.addAll(getDefaultJavacopts());
      if (options != null) {
        fullOptions.addAll(options);
      }
      return delegate.getTask(out,fileManager,diagnosticListener,fullOptions.build(),classes,compilationUnits);
    }
    @Override public StandardJavaFileManager getStandardFileManager(    DiagnosticListener<? super JavaFileObject> diagnosticListener,    Locale locale,    Charset charset){
      StandardJavaFileManager fileManager=delegate.getStandardFileManager(diagnosticListener,locale,charset);
      try {
        fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH,JavacBootclasspath.asFiles());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return fileManager;
    }
    @Override public int run(    InputStream in,    OutputStream out,    OutputStream err,    String... arguments){
      List<String> args=getDefaultJavacopts();
      Collections.addAll(args,arguments);
      return delegate.run(in,out,err,args.toArray(new String[0]));
    }
    @Override public Set<SourceVersion> getSourceVersions(){
      return delegate.getSourceVersions();
    }
    @Override public int isSupportedOption(    String option){
      return delegate.isSupportedOption(option);
    }
  }
;
}
