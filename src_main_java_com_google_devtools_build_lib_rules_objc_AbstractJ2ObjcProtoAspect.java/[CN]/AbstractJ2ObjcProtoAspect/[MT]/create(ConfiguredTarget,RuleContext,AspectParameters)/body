{
  if (!checkShouldCreateAspect(ruleContext)) {
    return new ConfiguredAspect.Builder(NAME).build();
  }
  ProtoSourcesProvider protoSourcesProvider=base.getProvider(ProtoSourcesProvider.class);
  ImmutableList<Artifact> protoSources=protoSourcesProvider.getDirectProtoSources();
  NestedSet<Artifact> transitiveImports=protoSourcesProvider.getTransitiveImports();
  J2ObjcSrcsProvider.Builder srcsBuilder=new J2ObjcSrcsProvider.Builder();
  Iterable<Artifact> headerMappingFiles;
  Iterable<Artifact> classMappingFiles;
  if (protoSources.isEmpty()) {
    headerMappingFiles=ImmutableList.of();
    classMappingFiles=ImmutableList.of();
  }
 else {
    J2ObjcSource j2ObjcSource=j2ObjcSource(ruleContext,protoSources);
    headerMappingFiles=headerMappingFiles(ruleContext,protoSources);
    classMappingFiles=classMappingFiles(ruleContext,protoSources);
    srcsBuilder.addSource(j2ObjcSource);
    createActions(base,ruleContext,protoSources,transitiveImports,headerMappingFiles,classMappingFiles,j2ObjcSource);
  }
  J2ObjcSrcsProvider j2objcSrcsProvider=srcsBuilder.addTransitiveJ2ObjcSrcs(ruleContext,"deps").build();
  NestedSet<Artifact> j2ObjcTransitiveHeaderMappingFiles=j2ObjcTransitiveHeaderMappingFiles(ruleContext,headerMappingFiles);
  NestedSet<Artifact> j2ObjcTransitiveClassMappingFiles=j2ObjcTransitiveClassMappingFiles(ruleContext,classMappingFiles);
  return new ConfiguredAspect.Builder(NAME).addProvider(J2ObjcSrcsProvider.class,j2objcSrcsProvider).addProvider(J2ObjcMappingFileProvider.class,new J2ObjcMappingFileProvider(j2ObjcTransitiveHeaderMappingFiles,j2ObjcTransitiveClassMappingFiles,NestedSetBuilder.<Artifact>stableOrder().build())).build();
}
