{
  if (!checkShouldCreateAspect(ruleContext)) {
    return new ConfiguredAspect.Builder(getName(),ruleContext).build();
  }
  ProtoSourcesProvider protoSourcesProvider=base.getProvider(ProtoSourcesProvider.class);
  ImmutableList<Artifact> protoSources=protoSourcesProvider.getDirectProtoSources();
  NestedSet<Artifact> transitiveImports=protoSourcesProvider.getTransitiveImports();
  ProtoSourceFileBlacklist protoBlacklist=new ProtoSourceFileBlacklist(ruleContext,PROTO_SOURCE_FILE_BLACKLIST_ATTR);
  ImmutableList<Artifact> filteredProtoSources=ImmutableList.copyOf(protoBlacklist.filter(protoSources));
  XcodeProvider xcodeProvider;
  Iterable<Artifact> headerMappingFiles;
  Iterable<Artifact> classMappingFiles;
  ObjcCommon common;
  if (filteredProtoSources.isEmpty()) {
    headerMappingFiles=ImmutableList.of();
    classMappingFiles=ImmutableList.of();
    common=J2ObjcAspect.common(ruleContext,ImmutableList.<Artifact>of(),ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),DEPENDENT_ATTRIBUTES);
    xcodeProvider=J2ObjcAspect.xcodeProvider(ruleContext,common,ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),DEPENDENT_ATTRIBUTES);
  }
 else {
    J2ObjcSource j2ObjcSource=j2ObjcSource(ruleContext,filteredProtoSources);
    headerMappingFiles=headerMappingFiles(ruleContext,filteredProtoSources);
    classMappingFiles=classMappingFiles(ruleContext,filteredProtoSources);
    createActions(base,ruleContext,filteredProtoSources,transitiveImports,headerMappingFiles,classMappingFiles,j2ObjcSource);
    common=J2ObjcAspect.common(ruleContext,j2ObjcSource.getObjcSrcs(),j2ObjcSource.getObjcHdrs(),j2ObjcSource.getHeaderSearchPaths(),DEPENDENT_ATTRIBUTES);
    xcodeProvider=J2ObjcAspect.xcodeProvider(ruleContext,common,j2ObjcSource.getObjcHdrs(),j2ObjcSource.getHeaderSearchPaths(),DEPENDENT_ATTRIBUTES);
    new CompilationSupport(ruleContext).registerCompileAndArchiveActions(common).registerFullyLinkAction(common.getObjcProvider());
  }
  NestedSet<Artifact> j2ObjcTransitiveHeaderMappingFiles=j2ObjcTransitiveHeaderMappingFiles(ruleContext,headerMappingFiles);
  NestedSet<Artifact> j2ObjcTransitiveClassMappingFiles=j2ObjcTransitiveClassMappingFiles(ruleContext,classMappingFiles);
  return new ConfiguredAspect.Builder(getName(),ruleContext).addProviders(new J2ObjcMappingFileProvider(j2ObjcTransitiveHeaderMappingFiles,j2ObjcTransitiveClassMappingFiles,NestedSetBuilder.<Artifact>stableOrder().build(),NestedSetBuilder.<Artifact>stableOrder().build()),common.getObjcProvider(),xcodeProvider).build();
}
