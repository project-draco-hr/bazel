def ParseEnum(field, value):
    'Parse an enum value.\n\n  The value can be specified by a number (the enum value), or by\n  a string literal (the enum name).\n\n  Args:\n    field: Enum field descriptor.\n    value: String value.\n\n  Returns:\n    Enum value number.\n\n  Raises:\n    ValueError: If the enum value could not be parsed.\n  '
    enum_descriptor = field.enum_type
    try:
        number = int(value, 0)
    except ValueError:
        enum_value = enum_descriptor.values_by_name.get(value, None)
        if (enum_value is None):
            raise ValueError(('Enum type "%s" has no value named %s.' % (enum_descriptor.full_name, value)))
    else:
        enum_value = enum_descriptor.values_by_number.get(number, None)
        if (enum_value is None):
            raise ValueError(('Enum type "%s" has no value with number %d.' % (enum_descriptor.full_name, number)))
    return enum_value.number
