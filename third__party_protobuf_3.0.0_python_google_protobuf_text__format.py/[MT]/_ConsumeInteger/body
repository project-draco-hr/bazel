def _ConsumeInteger(tokenizer, is_signed=False, is_long=False):
    "Consumes an integer number from tokenizer.\n\n  Args:\n    tokenizer: A tokenizer used to parse the number.\n    is_signed: True if a signed integer must be parsed.\n    is_long: True if a long integer must be parsed.\n\n  Returns:\n    The integer parsed.\n\n  Raises:\n    ParseError: If an integer with given characteristics couldn't be consumed.\n  "
    try:
        result = ParseInteger(tokenizer.token, is_signed=is_signed, is_long=is_long)
    except ValueError as e:
        raise tokenizer.ParseError(str(e))
    tokenizer.NextToken()
    return result
