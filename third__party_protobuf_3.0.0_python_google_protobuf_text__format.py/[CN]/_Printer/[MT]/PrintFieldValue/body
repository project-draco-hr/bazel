def PrintFieldValue(self, field, value):
    'Print a single field value (not including name).\n\n    For repeated fields, the value should be a single element.\n\n    Args:\n      field: The descriptor of the field to be printed.\n      value: The value of the field.\n    '
    out = self.out
    if (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE):
        self._PrintMessageFieldValue(value)
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_ENUM):
        enum_value = field.enum_type.values_by_number.get(value, None)
        if (enum_value is not None):
            out.write(enum_value.name)
        else:
            out.write(str(value))
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_STRING):
        out.write('"')
        if isinstance(value, six.text_type):
            out_value = value.encode('utf-8')
        else:
            out_value = value
        if (field.type == descriptor.FieldDescriptor.TYPE_BYTES):
            out_as_utf8 = False
        else:
            out_as_utf8 = self.as_utf8
        out.write(text_encoding.CEscape(out_value, out_as_utf8))
        out.write('"')
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_BOOL):
        if value:
            out.write('true')
        else:
            out.write('false')
    elif ((field.cpp_type in _FLOAT_TYPES) and (self.float_format is not None)):
        out.write('{1:{0}}'.format(self.float_format, value))
    else:
        out.write(str(value))
