{
  PathFragment filePath=fileLabel.toPathFragment();
  boolean loadingFromDefaultlRepo=fileLabel.getPackageIdentifier().getRepository().isDefault();
  if (inWorkspace && !loadingFromDefaultlRepo) {
    throw SkylarkImportFailedException.noExternalLoadsFromWorkspace(fileLabel);
  }
  ASTFileLookupValue astLookupValue;
  try {
    SkyKey astLookupKey=ASTFileLookupValue.key(fileLabel);
    astLookupValue=(ASTFileLookupValue)env.getValueOrThrow(astLookupKey,ErrorReadingSkylarkExtensionException.class,InconsistentFilesystemException.class);
  }
 catch (  ErrorReadingSkylarkExtensionException e) {
    throw SkylarkImportFailedException.errorReadingFile(filePath,e.getMessage());
  }
  if (astLookupValue == null) {
    return null;
  }
  if (!astLookupValue.lookupSuccessful()) {
    throw SkylarkImportFailedException.noFile(astLookupValue.getErrorMsg());
  }
  BuildFileAST ast=astLookupValue.getAST();
  if (ast.containsErrors()) {
    throw SkylarkImportFailedException.skylarkErrors(filePath);
  }
  ImmutableList<SkylarkImport> imports=ast.getImports();
  Map<String,Extension> extensionsForImports=Maps.newHashMapWithExpectedSize(imports.size());
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  ImmutableMap<String,Label> labelsForImports;
  labelsForImports=findLabelsForLoadStatements(imports,fileLabel,env);
  if (labelsForImports == null) {
    return null;
  }
  ImmutableCollection<Label> importLabels=labelsForImports.values();
  List<SkyKey> importLookupKeys=Lists.newArrayListWithExpectedSize(importLabels.size());
  for (  Label importLabel : importLabels) {
    importLookupKeys.add(SkylarkImportLookupValue.key(importLabel,inWorkspace));
  }
  Map<SkyKey,SkyValue> skylarkImportMap;
  boolean valuesMissing=false;
  if (visited == null) {
    skylarkImportMap=env.getValues(importLookupKeys);
    valuesMissing=env.valuesMissing();
  }
 else {
    if (!visited.add(fileLabel)) {
      ImmutableList<Label> cycle=CycleUtils.splitIntoPathAndChain(Predicates.equalTo(fileLabel),visited).second;
      if (env.getValue(SkylarkImportUniqueCycleFunction.key(cycle)) == null) {
        return null;
      }
      throw new SkylarkImportFailedException("Skylark import cycle");
    }
    skylarkImportMap=Maps.newHashMapWithExpectedSize(imports.size());
    for (    SkyKey importLookupKey : importLookupKeys) {
      SkyValue skyValue=this.computeWithInlineCallsInternal(importLookupKey,env,visited);
      if (skyValue == null) {
        Preconditions.checkState(env.valuesMissing(),"no skylark import value for %s",importLookupKey);
        valuesMissing=true;
      }
 else {
        skylarkImportMap.put(importLookupKey,skyValue);
      }
    }
    visited.remove(fileLabel);
  }
  if (valuesMissing) {
    return null;
  }
  for (  Entry<String,Label> importEntry : labelsForImports.entrySet()) {
    String importString=importEntry.getKey();
    Label importLabel=importEntry.getValue();
    SkyKey keyForLabel=SkylarkImportLookupValue.key(importLabel,inWorkspace);
    SkylarkImportLookupValue importLookupValue=(SkylarkImportLookupValue)skylarkImportMap.get(keyForLabel);
    extensionsForImports.put(importString,importLookupValue.getEnvironmentExtension());
    fileDependencies.add(importLookupValue.getDependency());
  }
  Extension extension=createExtension(ast,fileLabel,extensionsForImports,env,inWorkspace);
  return new SkylarkImportLookupValue(extension,new SkylarkFileDependency(fileLabel,fileDependencies.build()));
}
