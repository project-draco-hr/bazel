{
  PackageIdentifier arg=(PackageIdentifier)skyKey.argument();
  PathFragment file=arg.getPackageFragment();
  ASTFileLookupValue astLookupValue=null;
  try {
    SkyKey astLookupKey=ASTFileLookupValue.key(arg);
    astLookupValue=(ASTFileLookupValue)env.getValueOrThrow(astLookupKey,ErrorReadingSkylarkExtensionException.class,InconsistentFilesystemException.class);
  }
 catch (  ErrorReadingSkylarkExtensionException e) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.errorReadingFile(file,e.getMessage()));
  }
catch (  InconsistentFilesystemException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
  if (astLookupValue == null) {
    return null;
  }
  if (astLookupValue.getAST() == null) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.noFile(file));
  }
  BuildFileAST ast=astLookupValue.getAST();
  if (ast.containsErrors()) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.skylarkErrors(file));
  }
  Map<Location,PathFragment> astImports=ast.getImports();
  Map<PathFragment,Extension> importMap=Maps.newHashMapWithExpectedSize(astImports.size());
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  Map<SkyKey,PathFragment> skylarkImports=Maps.newHashMapWithExpectedSize(astImports.size());
  for (  Map.Entry<Location,PathFragment> entry : ast.getImports().entrySet()) {
    try {
      skylarkImports.put(PackageFunction.getImportKey(entry,ruleClassProvider.getPreludePath(),file,arg),entry.getValue());
    }
 catch (    ASTLookupInputException e) {
      throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
    }
  }
  Map<SkyKey,SkyValue> skylarkImportMap=env.getValues(skylarkImports.keySet());
  if (env.valuesMissing()) {
    return null;
  }
  for (  Map.Entry<SkyKey,SkyValue> entry : skylarkImportMap.entrySet()) {
    SkylarkImportLookupValue importLookupValue=(SkylarkImportLookupValue)entry.getValue();
    importMap.put(skylarkImports.get(entry.getKey()),importLookupValue.getEnvironmentExtension());
    fileDependencies.add(importLookupValue.getDependency());
  }
  Label label=pathFragmentToLabel(arg.getRepository(),file,env);
  if (label == null) {
    Preconditions.checkState(env.valuesMissing(),"label null but no missing for %s",file);
    return null;
  }
  Extension extension=createExtension(ast,file,importMap,env);
  return new SkylarkImportLookupValue(extension,new SkylarkFileDependency(label,fileDependencies.build()));
}
