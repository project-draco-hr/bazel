{
  Label fileLabel=(Label)skyKey.argument();
  PathFragment importPath=fileLabel.toPathFragment();
  ASTFileLookupValue astLookupValue=null;
  try {
    SkyKey astLookupKey=ASTFileLookupValue.key(fileLabel);
    astLookupValue=(ASTFileLookupValue)env.getValueOrThrow(astLookupKey,ErrorReadingSkylarkExtensionException.class,InconsistentFilesystemException.class);
  }
 catch (  ErrorReadingSkylarkExtensionException e) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.errorReadingFile(importPath,e.getMessage()));
  }
catch (  InconsistentFilesystemException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
  if (astLookupValue == null) {
    return null;
  }
  if (!astLookupValue.lookupSuccessful()) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.noFile(astLookupValue.getErrorMsg()));
  }
  Map<PathFragment,Extension> importMap=new HashMap<>();
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  BuildFileAST ast=astLookupValue.getAST();
  for (  LoadStatement loadStmt : ast.getImports()) {
    try {
      Label importLabel=findLabelForLoadStatement(loadStmt,fileLabel,env);
      if (importLabel == null) {
        return null;
      }
      SkyKey importsLookupKey=SkylarkImportLookupValue.key(importLabel);
      SkylarkImportLookupValue importsLookupValue;
      importsLookupValue=(SkylarkImportLookupValue)env.getValue(importsLookupKey);
      if (importsLookupValue != null) {
        importMap.put(loadStmt.getImportPath(),importsLookupValue.getEnvironmentExtension());
        fileDependencies.add(importsLookupValue.getDependency());
      }
    }
 catch (    SkylarkImportFailedException e) {
      throw new SkylarkImportLookupFunctionException(e);
    }
  }
  if (env.valuesMissing()) {
    return null;
  }
  if (ast.containsErrors()) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.skylarkErrors(importPath));
  }
  Extension extension=createExtension(ast,importPath,importMap,env);
  return new SkylarkImportLookupValue(extension,new SkylarkFileDependency(fileLabel,fileDependencies.build()));
}
