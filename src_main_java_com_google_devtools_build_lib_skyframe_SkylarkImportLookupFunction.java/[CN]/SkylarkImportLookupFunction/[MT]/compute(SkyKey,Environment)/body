{
  PackageIdentifier arg=(PackageIdentifier)skyKey.argument();
  PathFragment file=arg.getPackageFragment();
  ASTFileLookupValue astLookupValue=null;
  try {
    SkyKey astLookupKey=ASTFileLookupValue.key(file);
    astLookupValue=(ASTFileLookupValue)env.getValueOrThrow(astLookupKey,ErrorReadingSkylarkExtensionException.class,InconsistentFilesystemException.class);
  }
 catch (  ErrorReadingSkylarkExtensionException e) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.errorReadingFile(file,e.getMessage()));
  }
catch (  InconsistentFilesystemException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
catch (  ASTLookupInputException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
  if (astLookupValue == null) {
    return null;
  }
  if (astLookupValue.getAST() == null) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.noFile(file));
  }
  Map<PathFragment,SkylarkEnvironment> importMap=new HashMap<>();
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  BuildFileAST ast=astLookupValue.getAST();
  for (  PathFragment importFile : ast.getImports()) {
    try {
      SkyKey importsLookupKey=SkylarkImportLookupValue.key(arg.getRepository(),file,importFile);
      SkylarkImportLookupValue importsLookupValue;
      importsLookupValue=(SkylarkImportLookupValue)env.getValueOrThrow(importsLookupKey,ASTLookupInputException.class);
      if (importsLookupValue != null) {
        importMap.put(importFile,importsLookupValue.getImportedEnvironment());
        fileDependencies.add(importsLookupValue.getDependency());
      }
    }
 catch (    ASTLookupInputException e) {
      throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
    }
  }
  Label label=pathFragmentToLabel(arg.getRepository(),file,env);
  if (env.valuesMissing()) {
    return null;
  }
  if (ast.containsErrors()) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.skylarkErrors(file));
  }
  SkylarkEnvironment extensionEnv=createEnv(ast,file,importMap,env);
  return new SkylarkImportLookupValue(extensionEnv,new SkylarkFileDependency(label,fileDependencies.build()));
}
