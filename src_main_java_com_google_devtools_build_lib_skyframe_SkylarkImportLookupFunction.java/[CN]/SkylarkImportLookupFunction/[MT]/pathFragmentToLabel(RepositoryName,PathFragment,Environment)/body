{
  ContainingPackageLookupValue containingPackageLookupValue=null;
  try {
    PackageIdentifier newPkgId=new PackageIdentifier(repo,file.getParentDirectory());
    containingPackageLookupValue=(ContainingPackageLookupValue)env.getValueOrThrow(ContainingPackageLookupValue.key(newPkgId),BuildFileNotFoundException.class,InconsistentFilesystemException.class);
  }
 catch (  BuildFileNotFoundException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
catch (  InconsistentFilesystemException e) {
    throw new SkylarkImportLookupFunctionException(e,Transience.PERSISTENT);
  }
  if (containingPackageLookupValue == null) {
    return null;
  }
  if (!containingPackageLookupValue.hasContainingPackage()) {
    throw new SkylarkImportLookupFunctionException(SkylarkImportFailedException.noBuildFile(file));
  }
  PathFragment pkgName=containingPackageLookupValue.getContainingPackageName().getPackageFragment();
  PathFragment fileInPkg=file.relativeTo(pkgName);
  try {
    return Label.parseAbsolute(repo + "//" + pkgName.getPathString()+ ":"+ fileInPkg);
  }
 catch (  LabelSyntaxException e) {
    throw new IllegalStateException(e);
  }
}
