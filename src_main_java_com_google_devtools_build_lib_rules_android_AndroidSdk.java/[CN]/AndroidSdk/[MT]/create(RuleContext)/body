{
  FilesToRunProvider proguard=ruleContext.getFragment(JavaConfiguration.class).getProguardBinary() == null ? ruleContext.getExecutablePrerequisite("proguard",Mode.HOST) : ruleContext.getExecutablePrerequisite(":proguard",Mode.HOST);
  String buildToolsVersion=AggregatingAttributeMapper.of(ruleContext.getRule()).get("build_tools_version",Type.STRING);
  FullRevision parsedBuildToolsVersion=null;
  try {
    parsedBuildToolsVersion=Strings.isNullOrEmpty(buildToolsVersion) ? null : FullRevision.parseRevision(buildToolsVersion);
  }
 catch (  NumberFormatException nfe) {
    ruleContext.attributeError("build_tools_version","Invalid version: " + buildToolsVersion);
  }
  boolean aaptSupportsMainDexGeneration=parsedBuildToolsVersion == null || parsedBuildToolsVersion.compareTo(new FullRevision(24)) >= 0;
  FilesToRunProvider aidl=ruleContext.getExecutablePrerequisite("aidl",Mode.HOST);
  FilesToRunProvider aapt=ruleContext.getExecutablePrerequisite("aapt",Mode.HOST);
  FilesToRunProvider apkBuilder=ruleContext.getExecutablePrerequisite("apkbuilder",Mode.HOST);
  FilesToRunProvider apkSigner=ruleContext.getExecutablePrerequisite("apksigner",Mode.HOST);
  ApkSigningMethod apkSigningMethod=ruleContext.getFragment(AndroidConfiguration.class).getApkSigningMethod();
  if (apkSigner == null && !apkSigningMethod.signLegacy()) {
    ruleContext.throwWithRuleError("android_sdk attribute apksigner must be set to use signing method " + apkSigningMethod);
  }
  FilesToRunProvider adb=ruleContext.getExecutablePrerequisite("adb",Mode.HOST);
  FilesToRunProvider dx=ruleContext.getExecutablePrerequisite("dx",Mode.HOST);
  FilesToRunProvider mainDexListCreator=ruleContext.getExecutablePrerequisite("main_dex_list_creator",Mode.HOST);
  FilesToRunProvider zipalign=ruleContext.getExecutablePrerequisite("zipalign",Mode.HOST);
  FilesToRunProvider jack=ruleContext.getExecutablePrerequisite("jack",Mode.HOST);
  FilesToRunProvider jill=ruleContext.getExecutablePrerequisite("jill",Mode.HOST);
  FilesToRunProvider resourceExtractor=ruleContext.getExecutablePrerequisite("resource_extractor",Mode.HOST);
  Artifact frameworkAidl=ruleContext.getPrerequisiteArtifact("framework_aidl",Mode.HOST);
  Artifact androidJar=ruleContext.getPrerequisiteArtifact("android_jar",Mode.HOST);
  Artifact shrinkedAndroidJar=ruleContext.getPrerequisiteArtifact("shrinked_android_jar",Mode.HOST);
  NestedSet<Artifact> androidBaseClasspathForJack=convertClasspathJarsToJack(ruleContext,jack,jill,resourceExtractor,ImmutableList.of(androidJar));
  NestedSet<Artifact> javaBaseClasspathForJack=convertClasspathJarsToJack(ruleContext,jack,jill,resourceExtractor,BaseJavaCompilationHelper.getBootClasspath(ruleContext,JavaToolchainProvider.fromRuleContext(ruleContext),""));
  Artifact annotationsJar=ruleContext.getPrerequisiteArtifact("annotations_jar",Mode.HOST);
  Artifact mainDexClasses=ruleContext.getPrerequisiteArtifact("main_dex_classes",Mode.HOST);
  if (ruleContext.hasErrors()) {
    return null;
  }
  return new RuleConfiguredTargetBuilder(ruleContext).add(AndroidSdkProvider.class,AndroidSdkProvider.create(buildToolsVersion,aaptSupportsMainDexGeneration,frameworkAidl,androidJar,shrinkedAndroidJar,androidBaseClasspathForJack,javaBaseClasspathForJack,annotationsJar,mainDexClasses,adb,dx,mainDexListCreator,aidl,aapt,apkBuilder,apkSigner,proguard,zipalign,jack,jill,resourceExtractor)).add(RunfilesProvider.class,RunfilesProvider.EMPTY).setFilesToBuild(NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER)).build();
}
