{
  @Nullable SkylarkType officialType=null;
  @Nullable SkylarkType enforcedType=null;
  if (star && param == null) {
    return new Parameter.Star<>(null);
  }
  if (param.type() != Object.class) {
    if (param.type() == HackHackEitherList.class) {
      officialType=SkylarkType.of(SkylarkList.class,param.generic1());
      enforcedType=SkylarkType.Union.of(SkylarkType.of(List.class),SkylarkType.of(SkylarkList.class,param.generic1()));
      Preconditions.checkArgument(enforcedType instanceof SkylarkType.Union);
    }
 else     if (param.generic1() != Object.class) {
      officialType=SkylarkType.of(param.type(),param.generic1());
      enforcedType=officialType;
    }
 else {
      officialType=SkylarkType.of(param.type());
      enforcedType=officialType;
    }
    if (param.callbackEnabled()) {
      officialType=SkylarkType.Union.of(officialType,SkylarkType.SkylarkFunctionType.of(name,officialType));
      enforcedType=SkylarkType.Union.of(enforcedType,SkylarkType.SkylarkFunctionType.of(name,enforcedType));
    }
    if (param.noneable()) {
      officialType=SkylarkType.Union.of(officialType,SkylarkType.NONE);
      enforcedType=SkylarkType.Union.of(enforcedType,SkylarkType.NONE);
    }
  }
  if (enforcedTypes != null) {
    enforcedTypes.put(param.name(),enforcedType);
  }
  if (param.doc().isEmpty() && documented) {
    throw new RuntimeException(String.format("parameter %s is undocumented",name));
  }
  if (paramDoc != null) {
    paramDoc.put(param.name(),param.doc());
  }
  if (starStar) {
    return new Parameter.StarStar<>(param.name(),officialType);
  }
 else   if (star) {
    return new Parameter.Star<>(param.name(),officialType);
  }
 else   if (mandatory) {
    return new Parameter.Mandatory<>(param.name(),officialType);
  }
 else   if (defaultValue != null && enforcedType != null) {
    Preconditions.checkArgument(enforcedType.contains(defaultValue),"In function '%s', parameter '%s' has default value %s that isn't of enforced type %s",name,param.name(),Printer.repr(defaultValue),enforcedType);
  }
  return new Parameter.Optional<>(param.name(),officialType,defaultValue);
}
