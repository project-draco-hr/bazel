{
  Artifact out1=createTreeArtifact("one");
  ArtifactFile file11=artifactFile(out1,"fizz");
  FileSystemUtils.createDirectoryAndParents(out1.getPath());
  FileSystemUtils.writeContentAsLatin1(file11.getPath(),"buzz");
  Artifact out2=createTreeArtifact("two");
  FileSystemUtils.createDirectoryAndParents(out2.getPath().getChild("subdir"));
  ArtifactFile file21=artifactFile(out2,"moony");
  ArtifactFile file22=artifactFile(out2,"subdir/wormtail");
  FileSystemUtils.writeContentAsLatin1(file21.getPath(),"padfoot");
  FileSystemUtils.writeContentAsLatin1(file22.getPath(),"prongs");
  Artifact outEmpty=createTreeArtifact("empty");
  FileSystemUtils.createDirectoryAndParents(outEmpty.getPath());
  Artifact outUnchanging=createTreeArtifact("untouched");
  FileSystemUtils.createDirectoryAndParents(outUnchanging.getPath());
  Action action1=new TestAction(Runnables.doNothing(),ImmutableSet.<Artifact>of(),ImmutableSet.of(out1));
  Action action2=new TestAction(Runnables.doNothing(),ImmutableSet.<Artifact>of(),ImmutableSet.of(out2));
  Action actionEmpty=new TestAction(Runnables.doNothing(),ImmutableSet.<Artifact>of(),ImmutableSet.of(outEmpty));
  Action actionUnchanging=new TestAction(Runnables.doNothing(),ImmutableSet.<Artifact>of(),ImmutableSet.of(outUnchanging));
  differencer.inject(ImmutableMap.<SkyKey,SkyValue>of(ActionExecutionValue.key(action1),actionValueWithTreeArtifacts(ImmutableList.of(file11)),ActionExecutionValue.key(action2),actionValueWithTreeArtifacts(ImmutableList.of(file21,file22)),ActionExecutionValue.key(actionEmpty),actionValueWithEmptyDirectory(outEmpty),ActionExecutionValue.key(actionUnchanging),actionValueWithEmptyDirectory(outUnchanging)));
  assertFalse(driver.evaluate(ImmutableList.<SkyKey>of(),false,1,NullEventHandler.INSTANCE).hasError());
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,ModifiedFileSet.EVERYTHING_MODIFIED)).isEmpty();
  FileSystemUtils.touchFile(out1.getPath());
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,ModifiedFileSet.EVERYTHING_MODIFIED)).isEmpty();
  FileSystemUtils.touchFile(out2.getPath().getChild("subdir"));
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,ModifiedFileSet.EVERYTHING_MODIFIED)).isEmpty();
  outEmpty.getPath().delete();
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,new ModifiedFileSet.Builder().modify(outEmpty.getExecPath()).build())).containsExactly(ActionExecutionValue.key(actionEmpty));
  Path dummyEmptyDir=fs.getPath("/bin").getRelative("symlink");
  FileSystemUtils.createDirectoryAndParents(dummyEmptyDir);
  FileSystemUtils.ensureSymbolicLink(outEmpty.getPath(),dummyEmptyDir);
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,new ModifiedFileSet.Builder().modify(outEmpty.getExecPath()).build())).containsExactly(ActionExecutionValue.key(actionEmpty));
  outEmpty.getPath().delete();
  FileSystemUtils.deleteTree(dummyEmptyDir);
  FileSystemUtils.createDirectoryAndParents(outEmpty.getPath());
  FileSystemUtils.writeContentAsLatin1(file11.getPath(),"goodbye");
  assertEquals(ActionExecutionValue.key(action1),Iterables.getOnlyElement(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,new ModifiedFileSet.Builder().modify(file11.getExecPath()).build())));
  ArtifactFile out1new=artifactFile(out1,"julius/caesar");
  FileSystemUtils.createDirectoryAndParents(out1.getPath().getChild("julius"));
  FileSystemUtils.writeContentAsLatin1(out1new.getPath(),"octavian");
  ArtifactFile outEmptyNew=artifactFile(outEmpty,"marcus");
  FileSystemUtils.writeContentAsLatin1(outEmptyNew.getPath(),"aurelius");
  file21.getPath().delete();
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,ModifiedFileSet.EVERYTHING_MODIFIED)).containsExactly(ActionExecutionValue.key(action1),ActionExecutionValue.key(action2),ActionExecutionValue.key(actionEmpty));
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,new ModifiedFileSet.Builder().modify(file21.getExecPath()).modify(out1new.getExecPath()).modify(outEmptyNew.getExecPath()).build())).containsExactly(ActionExecutionValue.key(action1),ActionExecutionValue.key(action2),ActionExecutionValue.key(actionEmpty));
  assertThat(new FilesystemValueChecker(tsgm,null).getDirtyActionValues(evaluator.getValues(),batchStatter,ModifiedFileSet.NOTHING_MODIFIED)).isEmpty();
}
