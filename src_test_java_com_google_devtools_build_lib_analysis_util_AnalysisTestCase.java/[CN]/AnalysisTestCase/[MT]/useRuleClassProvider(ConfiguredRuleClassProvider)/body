{
  this.ruleClassProvider=ruleClassProvider;
  PackageFactory pkgFactory=new PackageFactory(ruleClassProvider);
  BinTools binTools=BinTools.forUnitTesting(directories,TestConstants.EMBEDDED_TOOLS);
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,directories,binTools,workspaceStatusActionFactory,ruleClassProvider.getBuildInfoFactories(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),Preprocessor.Factory.Supplier.NullSupplier.INSTANCE,analysisMock.getSkyFunctions(directories),getPrecomputedValues(),ImmutableList.<SkyValueDirtinessChecker>of());
  skyframeExecutor.preparePackageLoading(pkgLocator,Options.getDefaults(PackageCacheOptions.class).defaultVisibility,true,3,ruleClassProvider.getDefaultsPackageContent(TestConstants.TEST_INVOCATION_POLICY),UUID.randomUUID(),new TimestampGranularityMonitor(BlazeClock.instance()));
  packageManager=skyframeExecutor.getPackageManager();
  loadingPhaseRunner=skyframeExecutor.getLoadingPhaseRunner(pkgFactory.getRuleClassNames(),defaultFlags().contains(Flag.SKYFRAME_LOADING_PHASE));
  buildView=new BuildView(directories,ruleClassProvider,skyframeExecutor,null);
  useConfiguration();
}
