{
  this.ruleClassProvider=ruleClassProvider;
  PackageFactory pkgFactory=analysisMock.getPackageFactoryForTesting().create(ruleClassProvider,scratch.getFileSystem());
  BinTools binTools=BinTools.forUnitTesting(directories,analysisMock.getEmbeddedTools());
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,directories,binTools,workspaceStatusActionFactory,ruleClassProvider.getBuildInfoFactories(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),Preprocessor.Factory.Supplier.NullSupplier.INSTANCE,analysisMock.getSkyFunctions(),getPrecomputedValues(),ImmutableList.<SkyValueDirtinessChecker>of(),analysisMock.getProductName());
  PackageCacheOptions packageCacheOptions=Options.getDefaults(PackageCacheOptions.class);
  packageCacheOptions.showLoadingProgress=true;
  packageCacheOptions.globbingThreads=3;
  skyframeExecutor.preparePackageLoading(pkgLocator,packageCacheOptions,ruleClassProvider.getDefaultsPackageContent(analysisMock.getInvocationPolicyEnforcer().getInvocationPolicy()),UUID.randomUUID(),ImmutableMap.<String,String>of(),new TimestampGranularityMonitor(BlazeClock.instance()));
  packageManager=skyframeExecutor.getPackageManager();
  loadingPhaseRunner=skyframeExecutor.getLoadingPhaseRunner(pkgFactory.getRuleClassNames(),defaultFlags().contains(Flag.SKYFRAME_LOADING_PHASE));
  buildView=new BuildView(directories,ruleClassProvider,skyframeExecutor,null);
  useConfiguration();
}
