{
  Set<Flag> flags=config.flags;
  LoadingOptions loadingOptions=Options.getDefaults(LoadingOptions.class);
  loadingOptions.loadingPhaseThreads=LOADING_PHASE_THREADS;
  BuildView.Options viewOptions=optionsParser.getOptions(BuildView.Options.class);
  viewOptions.keepGoing=flags.contains(Flag.KEEP_GOING);
  BuildOptions buildOptions=ruleClassProvider.createBuildOptions(optionsParser);
  PackageCacheOptions packageCacheOptions=optionsParser.getOptions(PackageCacheOptions.class);
  PathPackageLocator pathPackageLocator=PathPackageLocator.create(outputBase,packageCacheOptions.packagePath,reporter,rootDirectory,rootDirectory);
  skyframeExecutor.preparePackageLoading(pathPackageLocator,packageCacheOptions.defaultVisibility,true,7,ruleClassProvider.getDefaultsPackageContent(analysisMock.getInvocationPolicyEnforcer().getInvocationPolicy()),UUID.randomUUID(),ImmutableMap.<String,String>of(),new TimestampGranularityMonitor(BlazeClock.instance()));
  skyframeExecutor.invalidateFilesUnderPathForTesting(reporter,ModifiedFileSet.EVERYTHING_MODIFIED,rootDirectory);
  LoadingResult loadingResult=loadingPhaseRunner.execute(reporter,eventBus,ImmutableList.copyOf(labels),PathFragment.EMPTY_FRAGMENT,loadingOptions,buildOptions.getAllLabels(),viewOptions.keepGoing,false,null);
  BuildRequestOptions requestOptions=optionsParser.getOptions(BuildRequestOptions.class);
  ImmutableSortedSet<String> multiCpu=ImmutableSortedSet.copyOf(requestOptions.multiCpus);
  masterConfig=skyframeExecutor.createConfigurations(reporter,configurationFactory,buildOptions,multiCpu,false);
  analysisResult=buildView.update(loadingResult,masterConfig,aspects,viewOptions,AnalysisTestUtil.TOP_LEVEL_ARTIFACT_CONTEXT,reporter,eventBus);
  return analysisResult;
}
