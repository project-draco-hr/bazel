{
  Location location=call.getLocation();
  Object value=positionals.get(0);
  ImmutableList<Object> positionalArgs=positionals.subList(1,positionals.size());
  BaseFunction function=Runtime.getFunction(EvalUtils.getSkylarkType(value.getClass()),method);
  if (function != null) {
    if (!isNamespace(value.getClass())) {
      positionalArgs=positionals;
    }
    return function.call(positionalArgs,ImmutableMap.<String,Object>copyOf(keyWordArgs),call,env);
  }
 else   if (value instanceof ClassObject) {
    Object fieldValue=((ClassObject)value).getValue(method);
    if (fieldValue == null) {
      throw new EvalException(location,String.format("struct has no method '%s'",method));
    }
    if (!(fieldValue instanceof BaseFunction)) {
      throw new EvalException(location,String.format("struct field '%s' is not a function",method));
    }
    function=(BaseFunction)fieldValue;
    return function.call(positionalArgs,ImmutableMap.<String,Object>copyOf(keyWordArgs),call,env);
  }
 else {
    Class<?> objClass;
    Object obj;
    if (value instanceof Class<?>) {
      obj=null;
      objClass=(Class<?>)value;
    }
 else {
      obj=value;
      objClass=value.getClass();
    }
    if (!keyWordArgs.isEmpty()) {
      throw new EvalException(call.func.getLocation(),String.format("Keyword arguments are not allowed when calling a java method" + "\nwhile calling method '%s' for type %s",method,EvalUtils.getDataTypeNameFromClass(objClass)));
    }
    MethodDescriptor methodDescriptor=call.findJavaMethod(objClass,method,positionalArgs);
    return callMethod(methodDescriptor,method,obj,positionalArgs.toArray(),location,env);
  }
}
