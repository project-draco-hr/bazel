{
  ImmutableList.Builder<Object> posargs=new ImmutableList.Builder<>();
  Map<String,Object> kwargs=new HashMap<>();
  Object returnValue;
  Function function;
  if (obj != null) {
    Object objValue=obj.eval(env);
    function=env.getFunction(EvalUtils.getSkylarkType(objValue.getClass()),func.getName());
    if (function != null) {
      if (!isNamespace(objValue.getClass())) {
        posargs.add(objValue);
      }
      evalArguments(posargs,kwargs,env,function);
      returnValue=function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env);
    }
 else     if (env.isSkylarkEnabled()) {
      evalArguments(posargs,kwargs,env,null);
      if (!kwargs.isEmpty()) {
        throw new EvalException(func.getLocation(),String.format("Keyword arguments are not allowed when calling a java method" + "\nwhile calling method '%s' on object %s of type %s",func.getName(),objValue,EvalUtils.getDataTypeName(objValue)));
      }
      if (objValue instanceof Class<?>) {
        return invokeJavaMethod(null,(Class<?>)objValue,func.getName(),posargs.build());
      }
 else {
        return invokeJavaMethod(objValue,objValue.getClass(),func.getName(),posargs.build());
      }
    }
 else {
      throw new EvalException(getLocation(),String.format("function '%s' is not defined on '%s'",func.getName(),EvalUtils.getDataTypeName(objValue)));
    }
  }
 else {
    Object funcValue=func.eval(env);
    if ((funcValue instanceof Function)) {
      function=(Function)funcValue;
      evalArguments(posargs,kwargs,env,function);
      returnValue=function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env);
    }
 else {
      throw new EvalException(getLocation(),"'" + EvalUtils.getDataTypeName(funcValue) + "' object is not callable");
    }
  }
  EvalUtils.checkNotNull(this,returnValue);
  if (!env.isSkylarkEnabled()) {
    return SkylarkType.convertFromSkylark(returnValue);
  }
  return returnValue;
}
