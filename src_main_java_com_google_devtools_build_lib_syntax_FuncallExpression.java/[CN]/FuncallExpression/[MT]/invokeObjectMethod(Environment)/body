{
  Object objValue=obj.eval(env);
  ImmutableList.Builder<Object> posargs=new ImmutableList.Builder<>();
  Map<String,Object> kwargs=new HashMap<>();
  BaseFunction function=env.getFunction(EvalUtils.getSkylarkType(objValue.getClass()),func.getName());
  if (function != null) {
    if (!isNamespace(objValue.getClass())) {
      posargs.add(objValue);
    }
    evalArguments(posargs,kwargs,env,function);
    return convertFromSkylark(function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env),env);
  }
 else   if (env.isSkylark()) {
    evalArguments(posargs,kwargs,env,null);
    if (!kwargs.isEmpty()) {
      throw new EvalException(func.getLocation(),String.format("Keyword arguments are not allowed when calling a java method" + "\nwhile calling method '%s' on object %s of type %s",func.getName(),objValue,EvalUtils.getDataTypeName(objValue)));
    }
    if (objValue instanceof Class<?>) {
      return invokeJavaMethod(null,(Class<?>)objValue,func.getName(),posargs.build());
    }
 else {
      return invokeJavaMethod(objValue,objValue.getClass(),func.getName(),posargs.build());
    }
  }
 else {
    throw new EvalException(getLocation(),String.format("%s is not defined on object of type '%s'",functionName(),EvalUtils.getDataTypeName(objValue)));
  }
}
