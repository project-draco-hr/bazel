{
  Object objValue=obj.eval(env);
  ImmutableList.Builder<Object> posargs=new ImmutableList.Builder<>();
  Map<String,Object> kwargs=new HashMap<>();
  BaseFunction function=Runtime.getFunction(EvalUtils.getSkylarkType(objValue.getClass()),func.getName());
  if (function != null) {
    if (!isNamespace(objValue.getClass())) {
      posargs.add(objValue);
    }
    evalArguments(posargs,kwargs,env,function);
    return convertFromSkylark(function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env),env);
  }
 else   if (objValue instanceof ClassObject) {
    Object fieldValue=((ClassObject)objValue).getValue(func.getName());
    if (fieldValue == null) {
      throw new EvalException(getLocation(),String.format("struct has no method '%s'",func.getName()));
    }
    if (!(fieldValue instanceof BaseFunction)) {
      throw new EvalException(getLocation(),String.format("struct field '%s' is not a function",func.getName()));
    }
    function=(BaseFunction)fieldValue;
    evalArguments(posargs,kwargs,env,function);
    return convertFromSkylark(function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env),env);
  }
 else   if (env.isSkylark()) {
    evalArguments(posargs,kwargs,env,null);
    if (objValue instanceof Class<?>) {
      return invokeJavaMethod(null,(Class<?>)objValue,func.getName(),posargs.build(),!kwargs.isEmpty());
    }
 else {
      return invokeJavaMethod(objValue,objValue.getClass(),func.getName(),posargs.build(),!kwargs.isEmpty());
    }
  }
 else {
    throw new EvalException(getLocation(),String.format("%s is not defined on object of type '%s'",functionName(),EvalUtils.getDataTypeName(objValue)));
  }
}
