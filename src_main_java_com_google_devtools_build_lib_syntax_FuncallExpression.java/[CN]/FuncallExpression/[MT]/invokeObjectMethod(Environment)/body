{
  Object objValue=obj.eval(env);
  ImmutableList.Builder<Object> posargs=new ImmutableList.Builder<>();
  Map<String,Object> kwargs=new HashMap<>();
  BaseFunction function=Runtime.getFunction(EvalUtils.getSkylarkType(objValue.getClass()),func.getName());
  if (function != null) {
    if (!isNamespace(objValue.getClass())) {
      posargs.add(objValue);
    }
    evalArguments(posargs,kwargs,env,function);
    return convertFromSkylark(function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env),env);
  }
 else   if (objValue instanceof ClassObject) {
    Object fieldValue=((ClassObject)objValue).getValue(func.getName());
    if (fieldValue == null) {
      throw new EvalException(getLocation(),String.format("struct has no method '%s'",func.getName()));
    }
    if (!(fieldValue instanceof BaseFunction)) {
      throw new EvalException(getLocation(),String.format("struct field '%s' is not a function",func.getName()));
    }
    function=(BaseFunction)fieldValue;
    evalArguments(posargs,kwargs,env,function);
    return convertFromSkylark(function.call(posargs.build(),ImmutableMap.<String,Object>copyOf(kwargs),this,env),env);
  }
 else   if (env.isSkylark()) {
    evalArguments(posargs,kwargs,env,null);
    Class<?> objClass;
    Object obj;
    if (objValue instanceof Class<?>) {
      obj=null;
      objClass=(Class<?>)objValue;
    }
 else {
      obj=objValue;
      objClass=objValue.getClass();
    }
    String name=func.getName();
    ImmutableList<Object> args=posargs.build();
    MethodDescriptor method=findJavaMethod(objClass,name,args);
    if (!kwargs.isEmpty()) {
      throw new EvalException(func.getLocation(),String.format("Keyword arguments are not allowed when calling a java method" + "\nwhile calling method '%s' for type %s",name,EvalUtils.getDataTypeNameFromClass(objClass)));
    }
    return callMethod(method,name,obj,args.toArray(),getLocation());
  }
 else {
    throw new EvalException(getLocation(),String.format("%s is not defined on object of type '%s'",functionName(),EvalUtils.getDataTypeName(objValue)));
  }
}
