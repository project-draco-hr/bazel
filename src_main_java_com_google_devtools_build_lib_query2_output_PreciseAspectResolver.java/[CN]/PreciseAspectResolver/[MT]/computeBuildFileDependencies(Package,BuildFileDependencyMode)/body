{
  Set<Label> result=new LinkedHashSet<>();
  result.addAll(mode.getDependencies(pkg));
  Set<PackageIdentifier> dependentPackages=new LinkedHashSet<>();
  for (  Target target : pkg.getTargets()) {
    if (!(target instanceof Rule)) {
      continue;
    }
    Multimap<Attribute,Label> depsWithPossibleAspects=((Rule)target).getTransitions(new BinaryPredicate<Rule,Attribute>(){
      @Override public boolean apply(      @Nullable Rule rule,      @Nullable Attribute attribute){
        for (        AspectClass aspectClass : attribute.getAspects()) {
          if (!AspectFactory.Util.create(aspectClass).getDefinition().getAttributes().isEmpty()) {
            return true;
          }
        }
        return false;
      }
    }
);
    for (    Label depLabel : depsWithPossibleAspects.values()) {
      dependentPackages.add(depLabel.getPackageIdentifier());
    }
  }
  for (  PackageIdentifier packageIdentifier : dependentPackages) {
    try {
      result.add(Label.create(packageIdentifier,"BUILD"));
      Package dependentPackage=packageProvider.getPackage(eventHandler,packageIdentifier);
      result.addAll(mode.getDependencies(dependentPackage));
    }
 catch (    NoSuchPackageException e) {
    }
catch (    LabelSyntaxException e) {
      throw new IllegalStateException(e);
    }
  }
  return result;
}
