{
  super(ruleContext);
  Map<Class<? extends TransitiveInfoProvider>,Object> providerBuilder=new LinkedHashMap<>();
  providerBuilder.putAll(providers);
  Preconditions.checkState(providerBuilder.containsKey(RunfilesProvider.class));
  Preconditions.checkState(providerBuilder.containsKey(FileProvider.class));
  Preconditions.checkState(providerBuilder.containsKey(FilesToRunProvider.class));
  skylarkProviders1.init(this);
  providerBuilder.put(SkylarkProviders.class,skylarkProviders1);
  this.providers=ImmutableMap.copyOf(providerBuilder);
  this.configConditions=ruleContext.getConfigConditions();
  RunUnder runUnder=getConfiguration().getRunUnder();
  if (runUnder != null && getLabel().equals(runUnder.getLabel())) {
    if (getProvider(FilesToRunProvider.class).getExecutable() == null) {
      ruleContext.ruleError("run_under target " + runUnder.getLabel() + " is not executable");
    }
  }
  if (!ruleContext.hasErrors()) {
    for (    OutputFile out : ruleContext.getRule().getOutputFiles()) {
      ruleContext.createOutputArtifact(out);
    }
  }
}
