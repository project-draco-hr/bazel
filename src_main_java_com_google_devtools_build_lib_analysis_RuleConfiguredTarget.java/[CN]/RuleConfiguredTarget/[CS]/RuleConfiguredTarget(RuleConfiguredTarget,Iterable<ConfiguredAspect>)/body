{
  super(base.getTarget(),base.getConfiguration());
  Set<Class<? extends TransitiveInfoProvider>> providers=new HashSet<>();
  providers.addAll(base.providers.keySet());
  OutputGroupProvider mergedOutputGroupProvider=OutputGroupProvider.merge(getAllProviders(base,aspects,OutputGroupProvider.class));
  SkylarkProviders mergedSkylarkProviders=SkylarkProviders.merge(getAllProviders(base,aspects,SkylarkProviders.class));
  for (  ConfiguredAspect configuredAspect : aspects) {
    for (    TransitiveInfoProvider aspectProvider : configuredAspect) {
      Class<? extends TransitiveInfoProvider> aClass=aspectProvider.getClass();
      if (OutputGroupProvider.class.equals(aClass)) {
        continue;
      }
      if (SkylarkProviders.class.equals(aClass)) {
        continue;
      }
      if (!providers.add(aClass)) {
        throw new IllegalStateException("Provider " + aClass + " provided twice");
      }
    }
  }
  if (base.getProvider(OutputGroupProvider.class) == mergedOutputGroupProvider && base.getProvider(SkylarkProviders.class) == mergedSkylarkProviders) {
    this.providers=base.providers;
  }
 else {
    ImmutableMap.Builder<Class<? extends TransitiveInfoProvider>,Object> builder=new ImmutableMap.Builder<>();
    for (    Class<? extends TransitiveInfoProvider> aClass : base.providers.keySet()) {
      if (OutputGroupProvider.class.equals(aClass)) {
        continue;
      }
      if (SkylarkProviders.class.equals(aClass)) {
        continue;
      }
      builder.put(aClass,base.providers.get(aClass));
    }
    if (mergedOutputGroupProvider != null) {
      builder.put(OutputGroupProvider.class,mergedOutputGroupProvider);
    }
    if (mergedSkylarkProviders != null) {
      builder.put(SkylarkProviders.class,mergedSkylarkProviders);
    }
    this.providers=builder.build();
  }
  this.mandatoryStampFiles=base.mandatoryStampFiles;
  this.configConditions=base.configConditions;
  this.configuredAspects=ImmutableList.copyOf(aspects);
}
