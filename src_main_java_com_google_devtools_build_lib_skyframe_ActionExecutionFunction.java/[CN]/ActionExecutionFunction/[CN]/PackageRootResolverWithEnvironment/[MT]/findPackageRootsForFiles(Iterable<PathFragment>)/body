{
  Preconditions.checkState(keysRequested.isEmpty(),"resolver should only be called once: %s %s",keysRequested,execPaths);
  Map<PathFragment,SkyKey> depKeys=new HashMap<>();
  for (  PathFragment path : execPaths) {
    PathFragment parent=Preconditions.checkNotNull(path.getParentDirectory(),"Must pass in files, not root directory");
    Preconditions.checkArgument(!parent.isAbsolute(),path);
    SkyKey depKey=ContainingPackageLookupValue.key(PackageIdentifier.createInDefaultRepo(parent));
    depKeys.put(path,depKey);
    keysRequested.add(depKey);
  }
  Map<SkyKey,ValueOrException2<NoSuchPackageException,InconsistentFilesystemException>> values=env.getValuesOrThrow(depKeys.values(),NoSuchPackageException.class,InconsistentFilesystemException.class);
  Map<PathFragment,Root> result=new HashMap<>();
  for (  PathFragment path : execPaths) {
    ContainingPackageLookupValue value;
    try {
      value=(ContainingPackageLookupValue)values.get(depKeys.get(path)).get();
    }
 catch (    NoSuchPackageException|InconsistentFilesystemException e) {
      throw new PackageRootResolutionException("Could not determine containing package for " + path,e);
    }
    if (value == null) {
      Preconditions.checkState(env.valuesMissing(),path);
      continue;
    }
    if (value.hasContainingPackage()) {
      result.put(path,Root.asSourceRoot(value.getContainingPackageRoot()));
    }
 else {
      result.put(path,null);
    }
  }
  return env.valuesMissing() ? null : result;
}
