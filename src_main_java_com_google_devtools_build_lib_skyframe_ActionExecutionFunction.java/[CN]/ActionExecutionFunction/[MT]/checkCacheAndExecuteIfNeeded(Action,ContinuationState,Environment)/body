{
  if (!state.hasArtifactData()) {
    return skyframeActionExecutor.executeAction(action,null,-1,null);
  }
  ActionMetadataHandler metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm.get());
  long actionStartTime=System.nanoTime();
  if (!state.hasCheckedActionCache()) {
    state.token=skyframeActionExecutor.checkActionCache(action,metadataHandler,actionStartTime,state.allInputs.actionCacheInputs);
  }
  if (state.token == null) {
    return new ActionExecutionValue(metadataHandler.getOutputArtifactData(),metadataHandler.getOutputTreeArtifactData(),metadataHandler.getAdditionalOutputData());
  }
  PerActionFileCache perActionFileCache=new PerActionFileCache(state.inputArtifactData);
  ActionExecutionContext actionExecutionContext=null;
  try {
    if (action.discoversInputs()) {
      if (!state.hasDiscoveredInputs()) {
        try {
          state.discoveredInputs=skyframeActionExecutor.discoverInputs(action,perActionFileCache,metadataHandler,env);
        }
 catch (        MissingDepException e) {
          Preconditions.checkState(env.valuesMissing(),action);
          return null;
        }
      }
      if (state.discoveredInputs != null && !state.inputArtifactData.keySet().containsAll(state.discoveredInputs)) {
        addDiscoveredInputs(state.inputArtifactData,state.discoveredInputs,env);
        if (env.valuesMissing()) {
          return null;
        }
        perActionFileCache=new PerActionFileCache(state.inputArtifactData);
        metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm.get());
      }
    }
    actionExecutionContext=skyframeActionExecutor.getContext(perActionFileCache,metadataHandler,state.expandedArtifacts);
    if (!state.hasExecutedAction()) {
      state.value=skyframeActionExecutor.executeAction(action,metadataHandler,actionStartTime,actionExecutionContext);
    }
  }
  finally {
    if (actionExecutionContext != null) {
      try {
        actionExecutionContext.getFileOutErr().close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (action.discoversInputs()) {
    Map<Artifact,FileArtifactValue> metadataFoundDuringActionExecution=declareAdditionalDependencies(env,action,state.inputArtifactData.keySet());
    if (state.discoveredInputs == null) {
      state.discoveredInputs=metadataFoundDuringActionExecution.keySet();
      if (env.valuesMissing()) {
        return null;
      }
      if (!metadataFoundDuringActionExecution.isEmpty()) {
        Map<Artifact,FileArtifactValue> inputArtifactData=new HashMap<>();
        inputArtifactData.putAll(state.inputArtifactData);
        inputArtifactData.putAll(metadataFoundDuringActionExecution);
        state.inputArtifactData=inputArtifactData;
        metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm.get());
      }
    }
 else     if (!metadataFoundDuringActionExecution.isEmpty()) {
      String errorMessage=action.prettyPrint() + " discovered unexpected inputs. This indicates a mismatch between the build" + " system and the action's compiler. Please report this issue. The ";
      if (metadataFoundDuringActionExecution.size() > 10) {
        errorMessage+="first ten ";
      }
      errorMessage+="additional inputs found were: ";
      int artifactPrinted=0;
      for (      Artifact extraArtifact : metadataFoundDuringActionExecution.keySet()) {
        if (artifactPrinted >= 10) {
          break;
        }
        if (artifactPrinted > 0) {
          errorMessage+=", ";
        }
        artifactPrinted++;
        errorMessage+=extraArtifact.prettyPrint();
      }
      ActionExecutionException exception=new ActionExecutionException(errorMessage,action,false);
      LoggingUtil.logToRemote(Level.SEVERE,errorMessage,exception);
      throw skyframeActionExecutor.processAndThrow(exception,action,actionExecutionContext.getFileOutErr());
    }
  }
  Preconditions.checkState(!env.valuesMissing(),action);
  skyframeActionExecutor.afterExecution(action,metadataHandler,state.token);
  return state.value;
}
