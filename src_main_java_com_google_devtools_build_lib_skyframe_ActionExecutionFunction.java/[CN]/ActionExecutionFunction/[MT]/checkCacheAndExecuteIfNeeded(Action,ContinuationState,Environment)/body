{
  if (!state.hasArtifactData()) {
    return skyframeActionExecutor.executeAction(action,null,-1,null);
  }
  ActionMetadataHandler metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm);
  long actionStartTime=System.nanoTime();
  if (!state.hasCheckedActionCache()) {
    state.token=skyframeActionExecutor.checkActionCache(action,metadataHandler,actionStartTime,state.allInputs.actionCacheInputs);
  }
  if (state.token == null) {
    return new ActionExecutionValue(metadataHandler.getOutputData(),metadataHandler.getAdditionalOutputData());
  }
  PerActionFileCache perActionFileCache=new PerActionFileCache(state.inputArtifactData);
  ActionExecutionContext actionExecutionContext=null;
  try {
    if (action.discoversInputs()) {
      if (!state.hasDiscoveredInputs()) {
        try {
          state.discoveredInputs=skyframeActionExecutor.discoverInputs(action,perActionFileCache,metadataHandler,env);
        }
 catch (        MissingDepException e) {
          Preconditions.checkState(env.valuesMissing(),action);
          return null;
        }
      }
      if (state.discoveredInputs != null && !state.inputArtifactData.keySet().containsAll(state.discoveredInputs)) {
        Map<Artifact,FileArtifactValue> inputArtifactData=addDiscoveredInputs(state.inputArtifactData,state.discoveredInputs,env);
        if (env.valuesMissing()) {
          return null;
        }
        state.inputArtifactData=inputArtifactData;
        perActionFileCache=new PerActionFileCache(state.inputArtifactData);
        metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm);
      }
    }
    actionExecutionContext=skyframeActionExecutor.getContext(perActionFileCache,metadataHandler,state.expandedMiddlemen);
    if (!state.hasExecutedAction()) {
      state.value=skyframeActionExecutor.executeAction(action,metadataHandler,actionStartTime,actionExecutionContext);
    }
  }
  finally {
    if (actionExecutionContext != null) {
      try {
        actionExecutionContext.getFileOutErr().close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (action.discoversInputs()) {
    Map<Artifact,FileArtifactValue> metadataFoundDuringActionExecution=declareAdditionalDependencies(env,action,state.inputArtifactData.keySet());
    if (state.discoveredInputs == null) {
      state.discoveredInputs=metadataFoundDuringActionExecution.keySet();
    }
 else {
      if (env.valuesMissing()) {
        Set<Artifact> missingArtifacts=Maps.filterValues(metadataFoundDuringActionExecution,Predicates.isNull()).keySet();
        throw new IllegalStateException("Missing artifacts: " + missingArtifacts + ", "+ state+ action);
      }
      Set<FileArtifactValue> knownMetadata=ImmutableSet.copyOf(state.inputArtifactData.values());
      ImmutableSet.Builder<Artifact> discoveredInputBuilder=ImmutableSet.<Artifact>builder().addAll(state.discoveredInputs);
      for (      Map.Entry<Artifact,FileArtifactValue> entry : metadataFoundDuringActionExecution.entrySet()) {
        Preconditions.checkState(knownMetadata.contains(entry.getValue()),"%s %s",action,entry);
        discoveredInputBuilder.add(entry.getKey());
      }
      state.discoveredInputs=discoveredInputBuilder.build();
    }
    if (env.valuesMissing()) {
      return null;
    }
    if (!metadataFoundDuringActionExecution.isEmpty()) {
      Map<Artifact,FileArtifactValue> inputArtifactData=new HashMap<>();
      inputArtifactData.putAll(state.inputArtifactData);
      inputArtifactData.putAll(metadataFoundDuringActionExecution);
      state.inputArtifactData=inputArtifactData;
      metadataHandler=new ActionMetadataHandler(state.inputArtifactData,action.getOutputs(),tsgm);
    }
  }
  skyframeActionExecutor.afterExecution(action,metadataHandler,state.token);
  return state.value;
}
