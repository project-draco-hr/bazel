{
  ImmutableSet<Entry<Discriminator,Collection<Type<?>>>> inverseMapEntries=ProtoUtils.INVERSE_TYPE_MAP.asMap().entrySet();
  for (  Entry<Discriminator,Collection<Type<?>>> entry : inverseMapEntries) {
    ImmutableSet<Type<?>> types=ImmutableSet.copyOf(entry.getValue());
    String assertionMessage=String.format("Cannot map from discriminator \"%s\" to exactly one Type.",entry.getKey().toString());
    boolean exactlyOneType=types.size() == 1;
    boolean twoTypesDistinguishableUsingNodepHint=types.size() == 2 && Sets.difference(types,ProtoUtils.NODEP_TYPES).size() == 1;
    assertTrue(assertionMessage,exactlyOneType || twoTypesDistinguishableUsingNodepHint);
  }
}
