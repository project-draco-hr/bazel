{
  Location loc=ast == null ? location : ast.getLocation();
  if (onlyNamedArguments && args.size() > 0) {
    throw new EvalException(loc,getSignature() + " does not accept positional arguments");
  }
  if (kwargs == null) {
    kwargs=ImmutableMap.<String,Object>of();
  }
  int numParams=parameters.size();
  int numArgs=args.size();
  Object[] namedArguments=new Object[numParams];
  if (numArgs > numParams) {
    throw new EvalException(loc,"too many positional arguments in call to " + getSignature());
  }
  for (int ii=0; ii < numArgs; ++ii) {
    namedArguments[ii]=args.get(ii);
  }
  for (  Map.Entry<String,Object> entry : kwargs.entrySet()) {
    String keyword=entry.getKey();
    int pos=parameters.indexOf(keyword);
    if (pos == -1) {
      List<String> unexpected=listDifference(new ArrayList<>(kwargs.keySet()),parameters);
      Collections.sort(unexpected);
      throw new EvalException(loc,"unexpected keyword" + (unexpected.size() > 1 ? "s" : "") + " '"+ Joiner.on("', '").join(unexpected)+ "' in call to "+ getSignature());
    }
 else {
      if (namedArguments[pos] != null) {
        throw new EvalException(loc,getSignature() + " got multiple values for keyword argument '" + keyword+ "'");
      }
      namedArguments[pos]=kwargs.get(keyword);
    }
  }
  for (int ii=0; ii < numMandatoryParameters; ++ii) {
    if (namedArguments[ii] == null) {
      throw new EvalException(loc,getSignature() + " received insufficient arguments");
    }
  }
  List<Object> defaults=signature.getDefaultValues();
  if (defaults != null) {
    int jj=0;
    for (int ii=numMandatoryParameters; ii < numParams; ++ii) {
      if (namedArguments[ii] == null) {
        namedArguments[ii]=defaults.get(jj);
      }
      jj++;
    }
  }
  try {
    return call(namedArguments,ast,env);
  }
 catch (  ConversionException|IllegalArgumentException|IllegalStateException|ClassCastException e) {
    throw new EvalException(loc,e.getMessage());
  }
}
