{
  EquivalenceRelation<Node<Target>> equivalenceRelation=createEquivalenceRelation();
  Collection<Set<Node<Target>>> partition=CollectionUtils.partition(result.getNodes(),equivalenceRelation);
  Digraph<Set<Node<Target>>> factoredGraph=result.createImageUnderPartition(partition);
  LabelSerializer<Set<Node<Target>>> labelSerializer=new LabelSerializer<Set<Node<Target>>>(){
    @Override public String serialize(    Node<Set<Node<Target>>> node){
      int actualLimit=graphNodeStringLimit - RESERVED_LABEL_CHARS;
      boolean firstItem=true;
      StringBuilder buf=new StringBuilder();
      int count=0;
      for (      Node<Target> eqNode : node.getLabel()) {
        String labelString=eqNode.getLabel().getLabel().toString();
        if (!firstItem) {
          buf.append("\\n");
          if (graphNodeStringLimit != -1 && (buf.length() + labelString.length() > actualLimit)) {
            buf.append("...and ");
            buf.append(node.getLabel().size() - count);
            buf.append(" more items");
            break;
          }
        }
        buf.append(labelString);
        count++;
        firstItem=false;
      }
      return buf.toString();
    }
  }
;
  factoredGraph.visitNodesBeforeEdges(new DotOutputVisitor<Set<Node<Target>>>(out,labelSerializer){
    @Override public void beginVisit(){
      super.beginVisit();
      out.println("  node [shape=box];");
    }
  }
);
}
