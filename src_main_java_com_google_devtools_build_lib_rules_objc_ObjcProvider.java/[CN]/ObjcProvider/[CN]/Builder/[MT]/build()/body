{
  ImmutableMap.Builder<Key<?>,NestedSet<?>> propagatedBuilder=new ImmutableMap.Builder<>();
  for (  Map.Entry<Key<?>,NestedSetBuilder<?>> typeEntry : items.entrySet()) {
    propagatedBuilder.put(typeEntry.getKey(),typeEntry.getValue().build());
  }
  ImmutableMap.Builder<Key<?>,NestedSet<?>> nonPropagatedBuilder=new ImmutableMap.Builder<>();
  for (  Map.Entry<Key<?>,NestedSetBuilder<?>> typeEntry : nonPropagatedItems.entrySet()) {
    nonPropagatedBuilder.put(typeEntry.getKey(),typeEntry.getValue().build());
  }
  ImmutableMap.Builder<Key<?>,NestedSet<?>> strictDependencyBuilder=new ImmutableMap.Builder<>();
  for (  Map.Entry<Key<?>,NestedSetBuilder<?>> typeEntry : strictDependencyItems.entrySet()) {
    strictDependencyBuilder.put(typeEntry.getKey(),typeEntry.getValue().build());
  }
  ImmutableMap<Key<?>,NestedSet<?>> propagated=propagatedBuilder.build();
  ImmutableMap<Key<?>,NestedSet<?>> nonPropagated=nonPropagatedBuilder.build();
  ImmutableMap<Key<?>,NestedSet<?>> strictDependency=strictDependencyBuilder.build();
  ImmutableMap.Builder<String,Object> skylarkFields=new ImmutableMap.Builder<>();
  for (  Key<?> key : KEYS_FOR_SKYLARK) {
    if (propagated.containsKey(key) && strictDependency.containsKey(key)) {
      NestedSet<?> union=new NestedSetBuilder(STABLE_ORDER).addTransitive(propagated.get(key)).addTransitive(strictDependency.get(key)).build();
      skylarkFields.put(key.getSkylarkKeyName(),ObjcProviderSkylarkConverters.convertToSkylark(key,union));
    }
 else     if (items.containsKey(key)) {
      skylarkFields.put(key.getSkylarkKeyName(),ObjcProviderSkylarkConverters.convertToSkylark(key,propagated.get(key)));
    }
 else     if (strictDependency.containsKey(key)) {
      skylarkFields.put(key.getSkylarkKeyName(),ObjcProviderSkylarkConverters.convertToSkylark(key,strictDependency.get(key)));
    }
 else {
      skylarkFields.put(key.getSkylarkKeyName(),ObjcProviderSkylarkConverters.convertToSkylark(key,new NestedSetBuilder(STABLE_ORDER).build()));
    }
  }
  return new ObjcProvider(propagated,nonPropagated,strictDependency,skylarkFields.build());
}
