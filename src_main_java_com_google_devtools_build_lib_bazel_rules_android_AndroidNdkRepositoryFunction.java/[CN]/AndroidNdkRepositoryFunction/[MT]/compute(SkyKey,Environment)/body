{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=getRule(repositoryName,AndroidNdkRepositoryRule.NAME,env);
  if (rule == null) {
    return null;
  }
  FileValue directoryValue=prepareLocalRepositorySymlinkTree(rule,env);
  if (directoryValue == null) {
    return null;
  }
  PathFragment pathFragment=getTargetPath(rule);
  Path ndkSymlinkTreeDirectory=directoryValue.realRootedPath().asPath().getRelative("ndk");
  try {
    ndkSymlinkTreeDirectory.createDirectory();
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  if (!symlinkLocalRepositoryContents(ndkSymlinkTreeDirectory,getOutputBase().getFileSystem().getPath(pathFragment),env)) {
    return null;
  }
  AttributeMap attributes=NonconfigurableAttributeMapper.of(rule);
  String ruleName=rule.getName();
  String apiLevelAttr=attributes.get("api_level",Type.INTEGER).toString();
  ApiLevel apiLevel=new ApiLevel(env.getListener(),ruleName,apiLevelAttr);
  NdkRelease ndkRelease=getNdkRelease(directoryValue,env);
  ImmutableList.Builder<CrosstoolStlPair> crosstoolsAndStls=ImmutableList.builder();
  try {
    String hostPlatform=AndroidNdkCrosstools.getHostPlatform(ndkRelease);
    NdkPaths ndkPaths=new NdkPaths(ruleName,hostPlatform,apiLevel);
    for (    StlImpl stlImpl : StlImpls.get(ndkPaths)) {
      CrosstoolRelease crosstoolRelease=AndroidNdkCrosstools.create(env.getListener(),ndkPaths,ruleName,apiLevel,ndkRelease,stlImpl,hostPlatform);
      crosstoolsAndStls.add(new CrosstoolStlPair(crosstoolRelease,stlImpl));
    }
  }
 catch (  NdkCrosstoolsException e) {
    throw new RepositoryFunctionException(new IOException(e),Transience.PERSISTENT);
  }
  String buildFile=createBuildFile(ruleName,crosstoolsAndStls.build());
  return writeBuildFile(directoryValue,buildFile);
}
