{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=getRule(repositoryName,AndroidNdkRepositoryRule.NAME,env);
  if (rule == null) {
    return null;
  }
  FileValue directoryValue=prepareLocalRepositorySymlinkTree(rule,env);
  if (directoryValue == null) {
    return null;
  }
  PathFragment pathFragment=getTargetPath(rule);
  Path ndkSymlinkTreeDirectory=directoryValue.realRootedPath().asPath().getRelative("ndk");
  try {
    ndkSymlinkTreeDirectory.createDirectory();
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  if (!symlinkLocalRepositoryContents(ndkSymlinkTreeDirectory,getOutputBase().getFileSystem().getPath(pathFragment),env)) {
    return null;
  }
  AttributeMap attributes=NonconfigurableAttributeMapper.of(rule);
  String ruleName=rule.getName();
  String apiLevel=attributes.get("api_level",Type.INTEGER).toString();
  CrosstoolRelease androidCrosstoolRelease;
  try {
    androidCrosstoolRelease=AndroidNdkCrosstools.createCrosstoolRelease(env.getListener(),ruleName,apiLevel,getNdkRelease(directoryValue,env));
  }
 catch (  NdkCrosstoolsException e) {
    throw new RepositoryFunctionException(new IOException(e),Transience.PERSISTENT);
  }
  String buildFile=createBuildFile(androidCrosstoolRelease,ruleName);
  return writeBuildFile(directoryValue,buildFile);
}
