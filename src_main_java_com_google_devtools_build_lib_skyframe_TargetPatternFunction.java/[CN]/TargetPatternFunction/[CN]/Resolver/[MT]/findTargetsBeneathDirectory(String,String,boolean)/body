{
  FilteringPolicy actualPolicy=rulesOnly ? FilteringPolicies.and(FilteringPolicies.RULES_ONLY,policy) : policy;
  PathFragment directory=new PathFragment(pathPrefix);
  if (directory.containsUplevelReferences()) {
    throw new TargetParsingException("up-level references are not permitted: '" + directory.getPathString() + "'");
  }
  if (!pathPrefix.isEmpty() && (LabelValidator.validatePackageName(pathPrefix) != null)) {
    throw new TargetParsingException("'" + pathPrefix + "' is not a valid package name");
  }
  ResolvedTargets.Builder<Target> builder=ResolvedTargets.builder();
  List<RecursivePkgValue> lookupValues=new ArrayList<>();
  for (  Path root : pkgPath.get().getPathEntries()) {
    SkyKey key=RecursivePkgValue.key(RootedPath.toRootedPath(root,directory));
    RecursivePkgValue lookup=(RecursivePkgValue)env.getValue(key);
    if (lookup != null) {
      lookupValues.add(lookup);
    }
  }
  if (env.valuesMissing()) {
    throw new MissingDepException();
  }
  for (  RecursivePkgValue value : lookupValues) {
    for (    String pkg : value.getPackages()) {
      builder.merge(getTargetsInPackage(originalPattern,pkg,FilteringPolicies.NO_FILTER));
    }
  }
  if (builder.isEmpty()) {
    throw new TargetParsingException("no targets found beneath '" + directory + "'");
  }
  ResolvedTargets<Target> intermediateResult=builder.build();
  ResolvedTargets.Builder<Target> filteredBuilder=ResolvedTargets.builder();
  if (intermediateResult.hasError()) {
    filteredBuilder.setError();
  }
  for (  Target target : intermediateResult.getTargets()) {
    if (actualPolicy.shouldRetain(target,false)) {
      filteredBuilder.add(target);
    }
  }
  return filteredBuilder.build();
}
