{
  BlazeRuntime runtime=env.getRuntime();
  DumpOptions dumpOptions=options.getOptions(DumpOptions.class);
  boolean anyOutput=dumpOptions.dumpPackages || dumpOptions.dumpVfs || dumpOptions.dumpArtifacts|| dumpOptions.dumpActionCache|| dumpOptions.dumpRuleClasses|| (dumpOptions.dumpSkyframe != SkyframeDumpOption.OFF);
  if (!anyOutput) {
    Map<String,String> categories=new HashMap<>();
    categories.put("verbosity","Options that control what internal state is dumped");
    Collection<Class<? extends OptionsBase>> optionList=new ArrayList<>();
    optionList.add(DumpOptions.class);
    env.getReporter().getOutErr().printErrLn(BlazeCommandUtils.expandHelpTopic(getClass().getAnnotation(Command.class).name(),getClass().getAnnotation(Command.class).help(),getClass(),optionList,categories,OptionsParser.HelpVerbosity.LONG));
    return ExitCode.ANALYSIS_FAILURE;
  }
  PrintStream out=new PrintStream(env.getReporter().getOutErr().getOutputStream());
  try {
    out.println("Warning: this information is intended for consumption by developers");
    out.println("only, and may change at any time.  Script against it at your own risk!");
    out.println();
    boolean success=true;
    if (dumpOptions.dumpPackages) {
      runtime.getPackageManager().dump(out);
      out.println();
    }
    if (dumpOptions.dumpVfs) {
      out.println("Filesystem cache");
      FileSystemUtils.dump(runtime.getOutputBase().getFileSystem(),out);
      out.println();
    }
    if (dumpOptions.dumpArtifacts) {
      success=false;
      env.getReporter().handle(Event.error("Cannot dump artifacts in Skyframe full mode. " + "Use --skyframe instead"));
    }
    if (dumpOptions.dumpActionCache) {
      success&=dumpActionCache(runtime,out);
      out.println();
    }
    if (dumpOptions.dumpRuleClasses) {
      dumpRuleClasses(runtime,out);
      out.println();
    }
    if (dumpOptions.dumpSkyframe != SkyframeDumpOption.OFF) {
      success&=dumpSkyframe(runtime,dumpOptions.dumpSkyframe == SkyframeDumpOption.SUMMARY,out);
      out.println();
    }
    return success ? ExitCode.SUCCESS : ExitCode.ANALYSIS_FAILURE;
  }
  finally {
    out.flush();
  }
}
