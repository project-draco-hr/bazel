def testConsumeIntegers(self):
    int64_max = ((1 << 63) - 1)
    uint32_max = ((1 << 32) - 1)
    text = ('-1 %d %d' % ((uint32_max + 1), (int64_max + 1)))
    tokenizer = text_format.Tokenizer(text.splitlines())
    self.assertRaises(text_format.ParseError, text_format._ConsumeUint32, tokenizer)
    self.assertRaises(text_format.ParseError, text_format._ConsumeUint64, tokenizer)
    self.assertEqual((-1), text_format._ConsumeInt32(tokenizer))
    self.assertRaises(text_format.ParseError, text_format._ConsumeUint32, tokenizer)
    self.assertRaises(text_format.ParseError, text_format._ConsumeInt32, tokenizer)
    self.assertEqual((uint32_max + 1), text_format._ConsumeInt64(tokenizer))
    self.assertRaises(text_format.ParseError, text_format._ConsumeInt64, tokenizer)
    self.assertEqual((int64_max + 1), text_format._ConsumeUint64(tokenizer))
    self.assertTrue(tokenizer.AtEnd())
    text = '-0 -0 0 0'
    tokenizer = text_format.Tokenizer(text.splitlines())
    self.assertEqual(0, text_format._ConsumeUint32(tokenizer))
    self.assertEqual(0, text_format._ConsumeUint64(tokenizer))
    self.assertEqual(0, text_format._ConsumeUint32(tokenizer))
    self.assertEqual(0, text_format._ConsumeUint64(tokenizer))
    self.assertTrue(tokenizer.AtEnd())
