def testParseMessageByFieldNumber(self):
    message = unittest_pb2.TestAllTypes()
    text = '34: 1\nrepeated_uint64: 2\n'
    text_format.Parse(text, message, allow_field_number=True)
    self.assertEqual(1, message.repeated_uint64[0])
    self.assertEqual(2, message.repeated_uint64[1])
    message = unittest_mset_pb2.TestMessageSetContainer()
    text = '1 {\n  1545008 {\n    15: 23\n  }\n  1547769 {\n    25: "foo"\n  }\n}\n'
    text_format.Parse(text, message, allow_field_number=True)
    ext1 = unittest_mset_pb2.TestMessageSetExtension1.message_set_extension
    ext2 = unittest_mset_pb2.TestMessageSetExtension2.message_set_extension
    self.assertEqual(23, message.message_set.Extensions[ext1].i)
    self.assertEqual('foo', message.message_set.Extensions[ext2].str)
    message = unittest_pb2.TestAllTypes()
    text = '34:1\n'
    six.assertRaisesRegex(self, text_format.ParseError, '1:1 : Message type "\\w+.TestAllTypes" has no field named "34".', text_format.Parse, text, message)
    text = '1234:1\n'
    six.assertRaisesRegex(self, text_format.ParseError, '1:1 : Message type "\\w+.TestAllTypes" has no field named "1234".', text_format.Parse, text, message, allow_field_number=True)
