{
  FileSystem fs=new InMemoryFileSystem(clock);
  this.workspace=fs.getPath("/workspace");
  workspace.createDirectory();
  mockToolsConfig=new MockToolsConfig(workspace);
  analysisMock=AnalysisMock.get();
  analysisMock.setupMockClient(mockToolsConfig);
  FileSystemUtils.deleteTree(workspace.getRelative("base"));
  ConfiguredRuleClassProvider ruleClassProvider=analysisMock.createRuleClassProvider();
  PackageFactory pkgFactory=analysisMock.getPackageFactoryForTesting().create(ruleClassProvider,fs);
  PackageCacheOptions options=Options.getDefaults(PackageCacheOptions.class);
  storedErrors=new StoredEventHandler();
  BlazeDirectories directories=new BlazeDirectories(fs.getPath("/install"),fs.getPath("/output"),workspace,analysisMock.getProductName());
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,directories,null,null,ruleClassProvider.getBuildInfoFactories(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),Preprocessor.Factory.Supplier.NullSupplier.INSTANCE,analysisMock.getSkyFunctions(),ImmutableList.<PrecomputedValue.Injected>of(),ImmutableList.<SkyValueDirtinessChecker>of(),analysisMock.getProductName());
  PathPackageLocator pkgLocator=PathPackageLocator.create(null,options.packagePath,storedErrors,workspace,workspace);
  PackageCacheOptions packageCacheOptions=Options.getDefaults(PackageCacheOptions.class);
  packageCacheOptions.defaultVisibility=ConstantRuleVisibility.PRIVATE;
  packageCacheOptions.showLoadingProgress=true;
  packageCacheOptions.globbingThreads=7;
  skyframeExecutor.preparePackageLoading(pkgLocator,packageCacheOptions,analysisMock.getDefaultsPackageContent(),UUID.randomUUID(),ImmutableMap.<String,String>of(),new TimestampGranularityMonitor(clock));
  loadingPhaseRunner=skyframeExecutor.getLoadingPhaseRunner(pkgFactory.getRuleClassNames(),useNewImpl);
  this.options=Options.getDefaults(LoadingOptions.class);
}
