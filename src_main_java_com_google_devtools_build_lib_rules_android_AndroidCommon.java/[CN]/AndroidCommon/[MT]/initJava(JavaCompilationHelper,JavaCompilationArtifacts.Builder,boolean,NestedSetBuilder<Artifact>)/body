{
  JavaTargetAttributes attributes=helper.getAttributes();
  if (ruleContext.hasErrors()) {
    filesToBuild=filesBuilder.build();
    return;
  }
  Artifact jar=null;
  if (attributes.hasSourceFiles() || attributes.hasSourceJars() || attributes.hasResources()) {
    javaArtifactsBuilder.addRuntimeJar(classJar);
    jar=classJar;
  }
  filesBuilder.add(classJar);
  manifestProtoOutput=helper.createManifestProtoOutput(classJar);
  if (helper.usesAnnotationProcessing()) {
    genClassJar=helper.createGenJar(classJar);
    genSourceJar=helper.createGensrcJar(classJar);
    helper.createGenJarAction(classJar,manifestProtoOutput,genClassJar);
  }
  srcJar=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_SOURCE_JAR);
  helper.createSourceJarAction(srcJar,genSourceJar);
  Artifact outputDepsProto=helper.createOutputDepsProtoArtifact(classJar,javaArtifactsBuilder);
  helper.createCompileActionWithInstrumentation(classJar,manifestProtoOutput,genSourceJar,outputDepsProto,javaArtifactsBuilder);
  compileTimeDependencyArtifacts=javaCommon.collectCompileTimeDependencyArtifacts(outputDepsProto);
  filesToBuild=filesBuilder.build();
  if ((attributes.hasSourceFiles() || attributes.hasSourceJars()) && jar != null) {
    iJar=helper.createCompileTimeJarAction(jar,javaArtifactsBuilder);
  }
  javaCommon.setJavaCompilationArtifacts(javaArtifactsBuilder.build());
  javaCommon.setClassPathFragment(new ClasspathConfiguredFragment(javaCommon.getJavaCompilationArtifacts(),attributes,asNeverLink));
  transitiveNeverlinkLibraries=collectTransitiveNeverlinkLibraries(ruleContext,javaCommon.getDependencies(),javaCommon.getJavaCompilationArtifacts().getRuntimeJars());
  topLevelSourceJars=ImmutableList.of(srcJar);
  transitiveSourceJars=javaCommon.collectTransitiveSourceJars(srcJar);
  if (collectJavaCompilationArgs) {
    boolean hasSources=attributes.hasSourceFiles() || attributes.hasSourceJars();
    this.javaCompilationArgs=collectJavaCompilationArgs(exportDeps,asNeverLink,hasSources);
    this.recursiveJavaCompilationArgs=collectJavaCompilationArgs(true,asNeverLink,true);
  }
}
