{
  classJar=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_CLASS_JAR);
  idlHelper=new AndroidIdlHelper(ruleContext,classJar);
  JavaTargetAttributes.Builder attributes=javaCommon.initCommon(idlHelper.getIdlGeneratedJavaSources(),androidSemantics.getJavacArguments()).setBootClassPath(ImmutableList.of(AndroidSdkProvider.fromRuleContext(ruleContext).getAndroidJar()));
  JavaCompilationArtifacts.Builder artifactsBuilder=new JavaCompilationArtifacts.Builder();
  ImmutableList.Builder<Artifact> jarsProducedForRuntime=ImmutableList.builder();
  NestedSetBuilder<Artifact> filesBuilder=NestedSetBuilder.<Artifact>stableOrder();
  Artifact resourcesJar=resourceApk.getResourceJavaSrcJar();
  if (resourcesJar != null) {
    filesBuilder.add(resourcesJar);
    compileResources(javaSemantics,resourcesJar,artifactsBuilder,attributes,filesBuilder,jarsProducedForRuntime);
    if (resourceApk.isLegacy()) {
      createJarJarActions(attributes,jarsProducedForRuntime,resourceApk.getResourceDependencies().getResources(),resourceApk.getPrimaryResource().getJavaPackage(),resourceClassJar);
    }
  }
  JavaCompilationHelper helper=initAttributes(attributes,javaSemantics);
  if (ruleContext.hasErrors()) {
    return null;
  }
  if (addCoverageSupport) {
    androidSemantics.addCoverageSupport(ruleContext,this,javaSemantics,true,attributes,artifactsBuilder);
    if (ruleContext.hasErrors()) {
      return null;
    }
  }
  jackCompilationHelper=initJack(helper.getAttributes());
  if (ruleContext.hasErrors()) {
    return null;
  }
  initJava(helper,artifactsBuilder,collectJavaCompilationArgs,filesBuilder);
  if (ruleContext.hasErrors()) {
    return null;
  }
  this.jarsProducedForRuntime=jarsProducedForRuntime.add(classJar).build();
  return helper.getAttributes();
}
