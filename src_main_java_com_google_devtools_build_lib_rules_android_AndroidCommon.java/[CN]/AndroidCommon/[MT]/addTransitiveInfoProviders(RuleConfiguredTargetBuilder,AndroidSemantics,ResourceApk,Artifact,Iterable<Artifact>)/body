{
  javaCommon.addTransitiveInfoProviders(builder,filesToBuild,classJar,ANDROID_COLLECTION_SPEC);
  javaCommon.addGenJarsProvider(builder,genClassJar,genSourceJar);
  idlHelper.addTransitiveInfoProviders(builder,classJar,manifestProtoOutput);
  JavaRuleOutputJarsProvider.Builder outputJarsBuilder=JavaRuleOutputJarsProvider.builder().addOutputJar(classJar,iJar,srcJar);
  if (resourceClassJar != null && resourceIJar != null && resourceSourceJar != null) {
    outputJarsBuilder.addOutputJar(resourceClassJar,resourceIJar,resourceSourceJar);
  }
  return builder.setFilesToBuild(filesToBuild).add(JavaRuleOutputJarsProvider.class,outputJarsBuilder.build()).add(JavaRuntimeJarProvider.class,new JavaRuntimeJarProvider(javaCommon.getJavaCompilationArtifacts().getRuntimeJars())).add(RunfilesProvider.class,RunfilesProvider.simple(getRunfiles())).add(AndroidResourcesProvider.class,resourceApk.toResourceProvider(ruleContext.getLabel())).add(AndroidIdeInfoProvider.class,createAndroidIdeInfoProvider(ruleContext,androidSemantics,idlHelper,resourceApk,zipAlignedApk,apksUnderTest)).add(JavaCompilationArgsProvider.class,new JavaCompilationArgsProvider(javaCompilationArgs,recursiveJavaCompilationArgs,compileTimeDependencyArtifacts,NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER))).add(JackLibraryProvider.class,asNeverLink ? jackCompilationHelper.compileAsNeverlinkLibrary() : jackCompilationHelper.compileAsLibrary()).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,collectHiddenTopLevelArtifacts(ruleContext)).addOutputGroup(JavaSemantics.SOURCE_JARS_OUTPUT_GROUP,transitiveSourceJars);
}
