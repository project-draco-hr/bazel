{
  for (  ResourceContainer otherContainer : resourceContainers) {
    if (otherContainer.getLabel().equals(ruleContext.getLabel())) {
      continue;
    }
    Artifact resourcesJar=createResourceJarArtifact(ruleContext,otherContainer,".jar");
    attributes.addRuntimeClassPathEntry(resourcesJar);
    Artifact jarJarRuleFile=createResourceJarArtifact(ruleContext,otherContainer,".jar_jarjar_rules.txt");
    String jarJarRule=String.format("rule %s.* %s.@1",originalPackage,otherContainer.getJavaPackage());
    ruleContext.registerAction(new FileWriteAction(ruleContext.getActionOwner(),jarJarRuleFile,jarJarRule,false));
    FilesToRunProvider jarjar=ruleContext.getExecutablePrerequisite("$jarjar_bin",Mode.HOST);
    ruleContext.registerAction(new SpawnAction.Builder().setExecutable(jarjar).addArgument("process").addInputArgument(jarJarRuleFile).addInputArgument(binaryResourcesJar).addOutputArgument(resourcesJar).setProgressMessage("Repackaging jar").setMnemonic("AndroidRepackageJar").build(ruleContext));
  }
}
