{
  TransitiveInfoCollection lipoContextCollector=ruleContext.getPrerequisite(":lipo_context_collector",Mode.DONT_CHECK);
  if (lipoContextCollector != null && lipoContextCollector.getProvider(LipoContextProvider.class) == null) {
    ruleContext.ruleError("--lipo_context must point to a cc_binary or a cc_test rule");
    return null;
  }
  CppConfiguration cppConfiguration=Preconditions.checkNotNull(ruleContext.getFragment(CppConfiguration.class));
  Path fdoZip=ruleContext.getConfiguration().getCompilationMode() == CompilationMode.OPT ? cppConfiguration.getFdoZip() : null;
  SkyKey fdoKey=FdoSupportValue.key(cppConfiguration.getLipoMode(),fdoZip,cppConfiguration.getFdoInstrument());
  SkyFunction.Environment skyframeEnv=ruleContext.getAnalysisEnvironment().getSkyframeEnv();
  FdoSupportValue fdoSupport;
  try {
    fdoSupport=(FdoSupportValue)skyframeEnv.getValueOrThrow(fdoKey,FdoException.class,IOException.class);
  }
 catch (  FdoException|IOException e) {
    ruleContext.ruleError("cannot initialize FDO: " + e.getMessage());
    return null;
  }
  if (skyframeEnv.valuesMissing()) {
    return null;
  }
  final Label label=ruleContext.getLabel();
  final NestedSet<Artifact> crosstool=ruleContext.getPrerequisite("all_files",Mode.HOST).getProvider(FileProvider.class).getFilesToBuild();
  final NestedSet<Artifact> crosstoolMiddleman=getFiles(ruleContext,"all_files");
  final NestedSet<Artifact> compile=getFiles(ruleContext,"compiler_files");
  final NestedSet<Artifact> strip=getFiles(ruleContext,"strip_files");
  final NestedSet<Artifact> objcopy=getFiles(ruleContext,"objcopy_files");
  final NestedSet<Artifact> link=getFiles(ruleContext,"linker_files");
  final NestedSet<Artifact> dwp=getFiles(ruleContext,"dwp_files");
  final NestedSet<Artifact> libcLink=inputsForLibc(ruleContext);
  String purposePrefix=Actions.escapeLabel(label) + "_";
  String runtimeSolibDirBase="_solib_" + "_" + Actions.escapeLabel(label);
  final PathFragment runtimeSolibDir=ruleContext.getConfiguration().getBinFragment().getRelative(runtimeSolibDirBase);
  TransitiveInfoCollection staticRuntimeLibDep=selectDep(ruleContext,"static_runtime_libs",cppConfiguration.getStaticRuntimeLibsLabel());
  final NestedSet<Artifact> staticRuntimeLinkInputs;
  final Artifact staticRuntimeLinkMiddleman;
  if (cppConfiguration.supportsEmbeddedRuntimes()) {
    staticRuntimeLinkInputs=staticRuntimeLibDep.getProvider(FileProvider.class).getFilesToBuild();
  }
 else {
    staticRuntimeLinkInputs=NestedSetBuilder.emptySet(Order.STABLE_ORDER);
  }
  if (!staticRuntimeLinkInputs.isEmpty()) {
    NestedSet<Artifact> staticRuntimeLinkMiddlemanSet=CompilationHelper.getAggregatingMiddleman(ruleContext,purposePrefix + "static_runtime_link",staticRuntimeLibDep);
    staticRuntimeLinkMiddleman=staticRuntimeLinkMiddlemanSet.isEmpty() ? null : Iterables.getOnlyElement(staticRuntimeLinkMiddlemanSet);
  }
 else {
    staticRuntimeLinkMiddleman=null;
  }
  Preconditions.checkState((staticRuntimeLinkMiddleman == null) == staticRuntimeLinkInputs.isEmpty());
  TransitiveInfoCollection dynamicRuntimeLibDep=selectDep(ruleContext,"dynamic_runtime_libs",cppConfiguration.getDynamicRuntimeLibsLabel());
  final NestedSet<Artifact> dynamicRuntimeLinkInputs;
  final Artifact dynamicRuntimeLinkMiddleman;
  if (cppConfiguration.supportsEmbeddedRuntimes()) {
    NestedSetBuilder<Artifact> dynamicRuntimeLinkInputsBuilder=NestedSetBuilder.stableOrder();
    for (    Artifact artifact : dynamicRuntimeLibDep.getProvider(FileProvider.class).getFilesToBuild()) {
      if (CppHelper.SHARED_LIBRARY_FILETYPES.matches(artifact.getFilename())) {
        dynamicRuntimeLinkInputsBuilder.add(SolibSymlinkAction.getCppRuntimeSymlink(ruleContext,artifact,runtimeSolibDirBase,ruleContext.getConfiguration()).getArtifact());
      }
 else {
        dynamicRuntimeLinkInputsBuilder.add(artifact);
      }
    }
    dynamicRuntimeLinkInputs=dynamicRuntimeLinkInputsBuilder.build();
  }
 else {
    dynamicRuntimeLinkInputs=NestedSetBuilder.emptySet(Order.STABLE_ORDER);
  }
  if (!dynamicRuntimeLinkInputs.isEmpty()) {
    List<Artifact> dynamicRuntimeLinkMiddlemanSet=CppHelper.getAggregatingMiddlemanForCppRuntimes(ruleContext,purposePrefix + "dynamic_runtime_link",dynamicRuntimeLibDep,runtimeSolibDirBase,ruleContext.getConfiguration());
    dynamicRuntimeLinkMiddleman=dynamicRuntimeLinkMiddlemanSet.isEmpty() ? null : Iterables.getOnlyElement(dynamicRuntimeLinkMiddlemanSet);
  }
 else {
    dynamicRuntimeLinkMiddleman=null;
  }
  Preconditions.checkState((dynamicRuntimeLinkMiddleman == null) == dynamicRuntimeLinkInputs.isEmpty());
  CppCompilationContext.Builder contextBuilder=new CppCompilationContext.Builder(ruleContext);
  CppModuleMap moduleMap=createCrosstoolModuleMap(ruleContext);
  if (moduleMap != null) {
    contextBuilder.setCppModuleMap(moduleMap);
  }
  final CppCompilationContext context=contextBuilder.build();
  boolean supportsParamFiles=ruleContext.attributes().get("supports_param_files",BOOLEAN);
  boolean supportsHeaderParsing=ruleContext.attributes().get("supports_header_parsing",BOOLEAN);
  CcToolchainProvider provider=new CcToolchainProvider(cppConfiguration,crosstool,fullInputsForCrosstool(ruleContext,crosstoolMiddleman),compile,strip,objcopy,fullInputsForLink(ruleContext,link),dwp,libcLink,staticRuntimeLinkInputs,staticRuntimeLinkMiddleman,dynamicRuntimeLinkInputs,dynamicRuntimeLinkMiddleman,runtimeSolibDir,context,supportsParamFiles,supportsHeaderParsing,getBuildVariables(ruleContext),getBuiltinIncludes(ruleContext));
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext).add(CcToolchainProvider.class,provider).add(FdoSupportProvider.class,new FdoSupportProvider(fdoSupport.getFdoSupport())).setFilesToBuild(new NestedSetBuilder<Artifact>(Order.STABLE_ORDER).build()).add(RunfilesProvider.class,RunfilesProvider.simple(Runfiles.EMPTY));
  License outputLicense=ruleContext.getRule().getToolOutputLicense(ruleContext.attributes());
  if (outputLicense != null && outputLicense != License.NO_LICENSE) {
    final NestedSet<TargetLicense> license=NestedSetBuilder.create(Order.STABLE_ORDER,new TargetLicense(ruleContext.getLabel(),outputLicense));
    LicensesProvider licensesProvider=new LicensesProvider(){
      @Override public NestedSet<TargetLicense> getTransitiveLicenses(){
        return license;
      }
    }
;
    builder.add(LicensesProvider.class,licensesProvider);
  }
  return builder.build();
}
