{
  AnalysisMock mock=getAnalysisMock();
  directories=new BlazeDirectories(outputBase,outputBase,rootDirectory,TestConstants.PRODUCT_NAME);
  binTools=BinTools.forUnitTesting(directories,TestConstants.EMBEDDED_TOOLS);
  mockToolsConfig=new MockToolsConfig(rootDirectory,false);
  mock.setupMockClient(mockToolsConfig);
  mock.setupMockWorkspaceFiles(directories.getEmbeddedBinariesRoot());
  configurationFactory=mock.createConfigurationFactory();
  packageCacheOptions=parsePackageCacheOptions();
  workspaceStatusActionFactory=new AnalysisTestUtil.DummyWorkspaceStatusActionFactory(directories);
  mutableActionGraph=new MapBasedActionGraph();
  ruleClassProvider=getRuleClassProvider();
  pkgFactory=new PackageFactory(ruleClassProvider,getEnvironmentExtensions());
  tsgm=new TimestampGranularityMonitor(BlazeClock.instance());
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,directories,binTools,workspaceStatusActionFactory,ruleClassProvider.getBuildInfoFactories(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),getPreprocessorFactorySupplier(),mock.getSkyFunctions(),getPrecomputedValues(),ImmutableList.<SkyValueDirtinessChecker>of(),TestConstants.PRODUCT_NAME);
  skyframeExecutor.preparePackageLoading(new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory)),ConstantRuleVisibility.PUBLIC,true,7,"",UUID.randomUUID(),tsgm);
  useConfiguration();
  setUpSkyframe();
  ResourceManager.instance().setAvailableResources(getStartingResources());
}
