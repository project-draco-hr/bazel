{
  super.setUp();
  AnalysisMock mock=getAnalysisMock();
  directories=new BlazeDirectories(outputBase,outputBase,rootDirectory);
  binTools=BinTools.forUnitTesting(directories,TestConstants.EMBEDDED_TOOLS);
  mockToolsConfig=new MockToolsConfig(rootDirectory,false);
  mock.setupMockClient(mockToolsConfig);
  mock.setupMockWorkspaceFiles(directories.getEmbeddedBinariesRoot());
  configurationFactory=mock.createConfigurationFactory();
  packageCacheOptions=parsePackageCacheOptions();
  workspaceStatusActionFactory=new AnalysisTestUtil.DummyWorkspaceStatusActionFactory(directories);
  mutableActionGraph=new MapBasedActionGraph();
  ruleClassProvider=getRuleClassProvider();
  pkgFactory=new PackageFactory(ruleClassProvider,getEnvironmentExtensions());
  skyframeExecutor=SequencedSkyframeExecutor.create(pkgFactory,new TimestampGranularityMonitor(BlazeClock.instance()),directories,binTools,workspaceStatusActionFactory,ruleClassProvider.getBuildInfoFactories(),ImmutableSet.<Path>of(),ImmutableList.<DiffAwareness.Factory>of(),Predicates.<PathFragment>alwaysFalse(),getPreprocessorFactorySupplier(),mock.getSkyFunctions(directories),getPrecomputedValues(),ImmutableList.<SkyValueDirtinessChecker>of());
  skyframeExecutor.preparePackageLoading(new PathPackageLocator(rootDirectory),ConstantRuleVisibility.PUBLIC,true,7,"",UUID.randomUUID());
  useConfiguration();
  setUpSkyframe();
  ResourceManager.instance().setAvailableResources(getStartingResources());
}
