{
  if (!(ctg.getTarget() instanceof Rule)) {
    return ImmutableMap.of();
  }
  Rule rule=(Rule)ctg.getTarget();
  RawAttributeMapper mapper=RawAttributeMapper.of(rule);
  Set<SkyKey> depKeys=new LinkedHashSet<>();
  for (  Attribute attribute : rule.getAttributes()) {
    for (    Label label : mapper.getConfigurabilityKeys(attribute.getName(),attribute.getType())) {
      if (!BuildType.Selector.isReservedLabel(label)) {
        depKeys.add(ConfiguredTargetValue.key(label,ctg.getConfiguration()));
      }
    }
  }
  Map<SkyKey,SkyValue> cts=env.getValues(depKeys);
  if (env.valuesMissing()) {
    return null;
  }
  Map<Label,ConfigMatchingProvider> conditions=new LinkedHashMap<>();
  for (  Map.Entry<SkyKey,SkyValue> entry : cts.entrySet()) {
    Label label=((ConfiguredTargetKey)entry.getKey().argument()).getLabel();
    ConfiguredTarget ct=((ConfiguredTargetValue)entry.getValue()).getConfiguredTarget();
    conditions.put(label,Preconditions.checkNotNull(ct.getProvider(ConfigMatchingProvider.class)));
  }
  return ImmutableMap.copyOf(conditions);
}
