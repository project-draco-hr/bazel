{
  ZipEntry zipEntry=new ZipEntry().withHeader(header).withEntry(dirEntry);
  int offset=(int)(header.fileOffset() + header.getSize());
  String entryName=header.getFilename();
  if (dirEntry != null && !entryName.equals(dirEntry.getFilename())) {
    return zipEntry.withEntry(dirEntry).withCode(ZipEntry.Status.FILENAME_ERROR);
  }
  int sizeByHeader=header.dataSize();
  int sizeByDir=dirEntry != null ? dirEntry.dataSize() : -1;
  ByteBuffer content;
  if (sizeByDir == sizeByHeader && sizeByDir >= 0) {
    content=getData(offset,sizeByHeader);
    if (content.limit() == sizeByHeader) {
      return zipEntry.withContent(content).withCode(ZipEntry.Status.ENTRY_OK);
    }
 else {
      return zipEntry.withContent(content).withCode(ZipEntry.Status.NOT_ENOUGH_DATA);
    }
  }
  if (sizeByDir >= 0) {
    content=getData(offset,sizeByDir);
    DataDescriptor dataDesc=descriptorAt(offset + sizeByDir,dirEntry);
    if (dataDesc != null) {
      return zipEntry.withContent(content).withDescriptor(dataDesc).withCode(ZipEntry.Status.ENTRY_OK);
    }
    return zipEntry.withContent(content).withCode(ZipEntry.Status.NO_DATA_DESC);
  }
  if (!ignoreDeleted) {
    if (sizeByHeader >= 0) {
      content=getData(offset,sizeByHeader);
      if (content.limit() == sizeByHeader) {
        return zipEntry.withContent(content).withCode(ZipEntry.Status.ENTRY_OK);
      }
      return zipEntry.withContent(content).withCode(ZipEntry.Status.NOT_ENOUGH_DATA);
    }
 else {
      DataDescriptor dataDesc=descriptorFrom(offset,dirEntry);
      if (dataDesc == null) {
        return zipEntry.withCode(ZipEntry.Status.UNKNOWN_SIZE);
      }
      int sizeByDesc=dataDesc.get(EXTSIZ);
      if (sizeByDesc != dataDesc.fileOffset() - offset) {
        return zipEntry.withDescriptor(dataDesc).withCode(ZipEntry.Status.UNKNOWN_SIZE);
      }
      content=getData(offset,sizeByDesc);
      return zipEntry.withContent(content).withDescriptor(dataDesc).withCode(ZipEntry.Status.ENTRY_OK);
    }
  }
  return zipEntry.withCode(ZipEntry.Status.UNKNOWN_SIZE);
}
