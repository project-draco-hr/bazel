def IncrementalInstall(adb_path, execroot, stub_datafile, output_marker, adb_jobs, start_app, dexmanifest=None, apk=None, native_libs=None, resource_apk=None, split_main_apk=None, split_apks=None, user_home_dir=None):
    "Performs an incremental install.\n\n  Args:\n    adb_path: Path to the adb executable.\n    execroot: Exec root.\n    stub_datafile: The stub datafile containing the app's package name.\n    output_marker: Path to the output marker file.\n    adb_jobs: The number of instances of adb to use in parallel.\n    start_app: If True, starts the app after updating.\n    dexmanifest: Path to the .dex manifest file.\n    apk: Path to the .apk file. May be None to perform an incremental install.\n    native_libs: Native libraries to install.\n    resource_apk: Path to the apk containing the app's resources.\n    split_main_apk: the split main .apk if split installation is desired.\n    split_apks: the list of split .apks to be installed.\n    user_home_dir: Path to the user's home directory.\n  "
    temp_dir = tempfile.mkdtemp()
    try:
        try:
            adb = Adb(adb_path, temp_dir, adb_jobs, user_home_dir)
            app_package = GetAppPackage(os.path.join(execroot, stub_datafile))
            app_dir = os.path.join(DEVICE_DIRECTORY, app_package)
            if split_main_apk:
                adb.InstallMultiple(os.path.join(execroot, split_main_apk))
                for split_apk in split_apks:
                    adb.InstallMultiple(os.path.join(execroot, split_apk), app_package)
            else:
                if (not apk):
                    VerifyInstallTimestamp(adb, app_package)
                with file(os.path.join(execroot, dexmanifest)) as f:
                    dexmanifest = f.read()
                UploadDexes(adb, execroot, app_dir, temp_dir, dexmanifest, bool(apk))
                UploadResources(adb, os.path.join(execroot, resource_apk), app_dir)
                UploadNativeLibs(adb, native_libs, app_dir, bool(apk))
                if apk:
                    apk_path = os.path.join(execroot, apk)
                    adb.Install(apk_path)
                    future = adb.PushString(adb.GetInstallTime(app_package), ('%s/%s/install_timestamp' % (DEVICE_DIRECTORY, app_package)))
                    future.result()
                else:
                    adb.StopApp(app_package)
            if start_app:
                logging.info('Starting application %s', app_package)
                adb.StartApp(app_package)
            with file(output_marker, 'w') as _:
                pass
        except DeviceNotFoundError:
            sys.exit('Error: Device not found')
        except DeviceUnauthorizedError:
            sys.exit('Error: Device unauthorized. Please check the confirmation dialog on your device.')
        except MultipleDevicesError as e:
            sys.exit(((('Error: ' + e.message) + '\nTry specifying a device serial with ') + '"blaze mobile-install --adb_arg=-s --adb_arg=$ANDROID_SERIAL"'))
        except TimestampException as e:
            sys.exit(('Error:\n%s' % e.message))
        except AdbError as e:
            sys.exit(('Error:\n%s' % e.message))
    finally:
        shutil.rmtree(temp_dir, True)
