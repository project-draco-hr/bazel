{
  BlazeRuntime runtime=env.getRuntime();
  if (options.getResidue().isEmpty()) {
    env.getReporter().handle(Event.error(String.format("missing fetch expression. Type '%s help fetch' for syntax and help",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  try {
    env.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    env.getReporter().handle(Event.error("fetch interrupted"));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    env.getReporter().handle(Event.error(null,"Unknown error: " + e.getMessage()));
    return e.getExitCode();
  }
  PackageCacheOptions pkgOptions=options.getOptions(PackageCacheOptions.class);
  if (!pkgOptions.fetch) {
    env.getReporter().handle(Event.error(null,"You cannot run fetch with --fetch=false"));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  JavaOptions javaOptions=options.getOptions(JavaOptions.class);
  ImmutableList.Builder<String> labelsToLoad=new ImmutableList.Builder<String>().addAll(options.getResidue());
  labelsToLoad.add(String.valueOf(javaOptions.javaToolchain));
  String query=Joiner.on(" union ").join(labelsToLoad.build());
  query="deps(" + query + ")";
  AbstractBlazeQueryEnvironment<Target> queryEnv=QueryCommand.newQueryEnvironment(env,options.getOptions(FetchOptions.class).keepGoing,false,Lists.<String>newArrayList(),200,Sets.<Setting>newHashSet());
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,queryEnv);
  }
 catch (  QueryException e) {
    env.getReporter().handle(Event.error(null,"Error while parsing '" + query + "': "+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  try {
    queryEnv.evaluateQuery(expr,new Callback<Target>(){
      @Override public void process(      Iterable<Target> partialResult) throws QueryException, InterruptedException {
      }
    }
);
  }
 catch (  QueryException|InterruptedException e) {
    env.getReporter().handle(Event.error(e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  env.getReporter().handle(Event.progress("All external dependencies fetched successfully."));
  return ExitCode.SUCCESS;
}
