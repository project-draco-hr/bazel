{
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error(String.format("missing fetch expression. Type '%s help fetch' for syntax and help",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error("fetch interrupted"));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,"Unknown error: " + e.getMessage()));
    return e.getExitCode();
  }
  JavaOptions javaOptions=options.getOptions(JavaOptions.class);
  ImmutableList.Builder<String> labelsToLoad=new ImmutableList.Builder<String>().addAll(options.getResidue());
  if (String.valueOf(javaOptions.javaLangtoolsJar).equals(JavaOptions.DEFAULT_LANGTOOLS)) {
    labelsToLoad.add(javaOptions.javaBase);
  }
 else {
    labelsToLoad.add(String.valueOf(javaOptions.javaToolchain));
  }
  String query=Joiner.on(" union ").join(labelsToLoad.build());
  query="deps(" + query + ")";
  AbstractBlazeQueryEnvironment<Target> env=QueryCommand.newQueryEnvironment(runtime,options.getOptions(FetchOptions.class).keepGoing,false,Lists.<String>newArrayList(),200,Sets.<Setting>newHashSet());
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,"Error while parsing '" + query + "': "+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  try {
    env.evaluateQuery(expr);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  runtime.getReporter().handle(Event.progress("All external dependencies fetched successfully."));
  return ExitCode.SUCCESS;
}
