{
  FileSystem filesystem=FileSystems.getDefault();
  ArgumentsParsing argsParsing=ArgumentsParsing.parse(filesystem,argsArray,wrapper.name(),wrapper.subtoolName());
  for (  String error : argsParsing.error().asSet()) {
    throw new CommandFailedException(error,OutErr.empty());
  }
  if (!argsParsing.arguments().isPresent()) {
    throw new IllegalStateException("No arguments or error present");
  }
  Arguments args=argsParsing.arguments().get();
  Path tempDir=getTempDir(filesystem);
  Path outputDir=Files.createTempDirectory(tempDir,"ZippingOutput");
  Path rootedOutputDir=outputDir.resolve(args.bundleRoot());
  Files.createDirectories(wrapper.outputDirectoryMustExist() ? rootedOutputDir : rootedOutputDir.getParent());
  ImmutableList<String> subCommandArguments=ImmutableList.copyOf(wrapper.subCommand(args,rootedOutputDir.toString()));
  ProcessBuilder processBuilder=new ProcessBuilder(subCommandArguments);
  if (printOutput) {
    processBuilder=processBuilder.inheritIO();
  }
  Process subProcess=processBuilder.start();
  int exit=subProcess.waitFor();
  OutErr outErr=new OutErr(streamToString(subProcess.getInputStream()),streamToString(subProcess.getErrorStream()));
  if (exit != 0) {
    throw new CommandFailedException("",outErr);
  }
  try (OutputStream out=Files.newOutputStream(Paths.get(args.outputZip()));ZipCombiner combiner=new ZipCombiner(out)){
    ZipInputEntry.addAll(combiner,ZipInputEntry.fromDirectory(outputDir));
  }
   return outErr;
}
