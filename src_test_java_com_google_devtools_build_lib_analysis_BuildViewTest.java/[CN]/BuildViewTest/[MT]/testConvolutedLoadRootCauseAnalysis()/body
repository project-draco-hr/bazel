{
  scratch.file("third_party/first/BUILD","sh_library(name='first', deps=['//third_party/second'], licenses=['notice'])");
  scratch.file("third_party/second/BUILD","sh_library(name='second', deps=['//third_party/third'], licenses=['notice'])");
  scratch.file("third_party/third/BUILD","sh_library(name='third', deps=['//third_party/fourth'], licenses=['notice'])");
  scratch.file("third_party/fourth/BUILD","sh_library(name='fourth', deps=['//third_party/fifth'])");
  scratch.file("third_party/fifth/BUILD","sh_library(name='fifth', licenses=['notice'])");
  reporter.removeHandler(failFastHandler);
  EventBus eventBus=new EventBus();
  LoadingFailureRecorder recorder=new LoadingFailureRecorder();
  eventBus.register(recorder);
  update(eventBus,defaultFlags().with(Flag.KEEP_GOING),"//third_party/first","//third_party/third");
  assertThat(recorder.events).hasSize(2);
  assertTrue(recorder.events.toString(),recorder.events.contains(Pair.of(Label.parseAbsolute("//third_party/first"),Label.parseAbsolute("//third_party/fourth"))));
  assertThat(recorder.events).contains(Pair.of(Label.parseAbsolute("//third_party/third"),Label.parseAbsolute("//third_party/fourth")));
}
