{
  return builder.add(attr("entitlements",LABEL).legacyAllowAnyFileType()).add(attr("provisioning_profile",LABEL).singleArtifact().allowedFileTypes(FileType.of(".mobileprovision"))).add(attr(":default_provisioning_profile",LABEL).singleArtifact().allowedFileTypes(FileType.of(".mobileprovision")).value(new LateBoundLabel<BuildConfiguration>(ObjcConfiguration.class){
    @Override public Label getDefault(    Rule rule,    AttributeMap attributes,    BuildConfiguration configuration){
      AppleConfiguration appleConfiguration=configuration.getFragment(AppleConfiguration.class);
      if (appleConfiguration.getBundlingPlatform() != Platform.IOS_DEVICE) {
        return null;
      }
      if (rule.isAttributeValueExplicitlySpecified("provisioning_profile")) {
        return null;
      }
      return appleConfiguration.getDefaultProvisioningProfileLabel();
    }
  }
)).add(attr("app_icon",STRING)).add(attr("launch_image",STRING)).add(attr("launch_storyboard",LABEL).direct_compile_time_input().allowedFileTypes(FileTypeSet.of(XIB_TYPE,STORYBOARD_TYPE))).add(attr("bundle_id",STRING).value(new Attribute.ComputedDefault(){
    @Override public Object getDefault(    AttributeMap rule){
      return "example." + rule.getName();
    }
  }
)).add(attr("$bundlemerge",LABEL).cfg(HOST).exec().value(env.getToolsLabel("//tools/objc:bundlemerge"))).add(attr("$environment_plist",LABEL).cfg(HOST).exec().value(env.getToolsLabel("//tools/objc:environment_plist"))).build();
}
