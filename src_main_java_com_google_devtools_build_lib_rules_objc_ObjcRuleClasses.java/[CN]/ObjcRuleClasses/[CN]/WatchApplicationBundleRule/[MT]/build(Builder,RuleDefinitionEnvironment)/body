{
  return builder.add(attr(WATCH_APP_NAME_ATTR,STRING).mandatory()).add(attr(WATCH_APP_ICON_ATTR,STRING)).add(attr(WATCH_APP_ENTITLEMENTS_ATTR,LABEL).allowedFileTypes(ENTITLEMENTS_TYPE)).add(attr(WATCH_APP_ASSET_CATALOGS_ATTR,LABEL_LIST).legacyAllowAnyFileType().direct_compile_time_input()).add(attr(WATCH_APP_BUNDLE_ID_ATTR,STRING).value(new Attribute.ComputedDefault(WATCH_APP_NAME_ATTR){
    @Override public Object getDefault(    AttributeMap rule){
      return "example.app." + rule.get(WATCH_APP_NAME_ATTR,STRING);
    }
  }
)).add(attr(WATCH_APP_INFOPLISTS_ATTR,BuildType.LABEL_LIST).allowedFileTypes(PLIST_TYPE)).add(attr(WATCH_APP_PROVISIONING_PROFILE_ATTR,LABEL).singleArtifact().allowedFileTypes(FileType.of(".mobileprovision"))).add(attr(WATCH_APP_DEFAULT_PROVISIONING_PROFILE_ATTR,LABEL).singleArtifact().allowedFileTypes(FileType.of(".mobileprovision")).value(new LateBoundLabel<BuildConfiguration>(ObjcConfiguration.class){
    @Override public Label getDefault(    Rule rule,    AttributeMap attributes,    BuildConfiguration configuration){
      AppleConfiguration appleConfiguration=configuration.getFragment(AppleConfiguration.class);
      if (appleConfiguration.getBundlingPlatform() != Platform.IOS_DEVICE) {
        return null;
      }
      if (rule.isAttributeValueExplicitlySpecified(WATCH_APP_PROVISIONING_PROFILE_ATTR)) {
        return null;
      }
      return appleConfiguration.getDefaultProvisioningProfileLabel();
    }
  }
)).add(attr(WATCH_APP_STORYBOARDS_ATTR,LABEL_LIST).allowedFileTypes(STORYBOARD_TYPE)).add(attr(WATCH_APP_RESOURCES_ATTR,LABEL_LIST).legacyAllowAnyFileType().direct_compile_time_input()).add(attr(WATCH_APP_STRUCTURED_RESOURCES_ATTR,LABEL_LIST).legacyAllowAnyFileType().direct_compile_time_input()).add(attr(WATCH_APP_STRINGS_ATTR,LABEL_LIST).allowedFileTypes(STRINGS_TYPE).direct_compile_time_input()).build();
}
