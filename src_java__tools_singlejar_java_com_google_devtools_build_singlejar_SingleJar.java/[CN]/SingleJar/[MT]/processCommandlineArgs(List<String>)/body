{
  List<String> manifestLines=new ArrayList<>();
  List<String> prefixes=new ArrayList<>();
  for (int i=0; i < args.size(); i++) {
    String arg=args.get(i);
    if (arg.equals("--sources")) {
      i=collectFlagArguments(args,i,inputJars,"--");
    }
 else     if (arg.equals("--resources")) {
      i=collectFlagArguments(args,i,resources,"--");
    }
 else     if (arg.equals("--classpath_resources")) {
      i=collectFlagArguments(args,i,classpathResources,"--");
    }
 else     if (arg.equals("--deploy_manifest_lines")) {
      i=collectFlagArguments(args,i,manifestLines,"--");
    }
 else     if (arg.equals("--build_info_file")) {
      buildInformationFiles.add(getArgument(args,i,arg));
      i++;
    }
 else     if (arg.equals("--extra_build_info")) {
      buildInformations.add(getArgument(args,i,arg));
      i++;
    }
 else     if (arg.equals("--main_class")) {
      mainClass=getArgument(args,i,arg);
      i++;
    }
 else     if (arg.equals("--output")) {
      outputJar=getArgument(args,i,arg);
      i++;
    }
 else     if (arg.equals("--compression")) {
      outputMode=OutputMode.FORCE_DEFLATE;
    }
 else     if (arg.equals("--dont_change_compression")) {
      outputMode=OutputMode.DONT_CARE;
    }
 else     if (arg.equals("--normalize")) {
      normalize=true;
    }
 else     if (arg.equals("--include_prefixes")) {
      i=collectFlagArguments(args,i,prefixes,"--");
    }
 else     if (arg.equals("--exclude_build_data")) {
      includeBuildData=false;
    }
 else     if (arg.equals("--warn_duplicate_resources")) {
      warnDuplicateFiles=true;
    }
 else     if (arg.equals("--java_launcher")) {
      launcherBin=getArgument(args,i,arg);
      i++;
    }
 else {
      throw new IOException("unknown option : '" + arg + "'");
    }
  }
  if (!manifestLines.isEmpty()) {
    setExtraManifestContent(joinWithNewlines(manifestLines));
  }
  if (!prefixes.isEmpty()) {
    setPathPrefixes(prefixes);
  }
}
