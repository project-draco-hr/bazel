{
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    runtime.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    runtime.getReporter().handle(Event.error("query interrupted"));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    runtime.getReporter().handle(Event.error(null,"Unknown error: " + e.getMessage()));
    return e.getExitCode();
  }
  if (options.getResidue().isEmpty()) {
    runtime.getReporter().handle(Event.error("missing query expression. Type 'blaze help query' for syntax and help"));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    runtime.getReporter().handle(Event.error(String.format("Invalid output format '%s'. Valid values are: %s",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  String query=Joiner.on(' ').join(options.getResidue());
  Set<Setting> settings=queryOptions.toSettings();
  BlazeQueryEnvironment env=newQueryEnvironment(runtime,queryOptions.keepGoing,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,env);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(null,"Error while parsing '" + query + "': "+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  BlazeQueryEvalResult<Target> result;
  try {
    result=env.evaluateQuery(expr);
  }
 catch (  QueryException e) {
    runtime.getReporter().handle(Event.error(e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
  PrintStream output=new PrintStream(runtime.getReporter().getOutErr().getOutputStream());
  try {
    output(queryOptions,result,formatter,output);
  }
 catch (  IOException e) {
    runtime.getReporter().handle(Event.error("I/O error: " + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    output.flush();
  }
  if (result.getResultSet().isEmpty()) {
    runtime.getReporter().handle(Event.info("Empty results"));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}
