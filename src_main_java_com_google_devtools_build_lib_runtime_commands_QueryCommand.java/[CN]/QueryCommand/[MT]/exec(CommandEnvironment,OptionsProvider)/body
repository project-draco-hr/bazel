{
  BlazeRuntime runtime=env.getRuntime();
  QueryOptions queryOptions=options.getOptions(QueryOptions.class);
  try {
    env.setupPackageCache(options.getOptions(PackageCacheOptions.class),runtime.getDefaultsPackageContent());
  }
 catch (  InterruptedException e) {
    env.getReporter().handle(Event.error("query interrupted"));
    return ExitCode.INTERRUPTED;
  }
catch (  AbruptExitException e) {
    env.getReporter().handle(Event.error(null,"Unknown error: " + e.getMessage()));
    return e.getExitCode();
  }
  String query;
  if (!options.getResidue().isEmpty()) {
    if (!queryOptions.queryFile.isEmpty()) {
      env.getReporter().handle(Event.error("Command-line query and --query_file cannot both be specified"));
      return ExitCode.COMMAND_LINE_ERROR;
    }
    query=Joiner.on(' ').join(options.getResidue());
  }
 else   if (!queryOptions.queryFile.isEmpty()) {
    Path residuePath=env.getWorkingDirectory().getRelative(queryOptions.queryFile);
    try {
      query=new String(FileSystemUtils.readContent(residuePath),StandardCharsets.UTF_8);
    }
 catch (    IOException e) {
      env.getReporter().handle(Event.error("I/O error reading from " + residuePath.getPathString()));
      return ExitCode.COMMAND_LINE_ERROR;
    }
  }
 else {
    env.getReporter().handle(Event.error(String.format("missing query expression. Type '%s help query' for syntax and help",Constants.PRODUCT_NAME)));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();
  OutputFormatter formatter=OutputFormatter.getFormatter(formatters,queryOptions.outputFormat);
  if (formatter == null) {
    env.getReporter().handle(Event.error(String.format("Invalid output format '%s'. Valid values are: %s",queryOptions.outputFormat,OutputFormatter.formatterNames(formatters))));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  Set<Setting> settings=queryOptions.toSettings();
  boolean streamResults=QueryOutputUtils.shouldStreamResults(queryOptions,formatter);
  AbstractBlazeQueryEnvironment<Target> queryEnv=newQueryEnvironment(env,queryOptions.keepGoing,!streamResults,queryOptions.universeScope,queryOptions.loadingPhaseThreads,settings);
  QueryExpression expr;
  try {
    expr=QueryExpression.parse(query,queryEnv);
  }
 catch (  QueryException e) {
    env.getReporter().handle(Event.error(null,"Error while parsing '" + query + "': "+ e.getMessage()));
    return ExitCode.COMMAND_LINE_ERROR;
  }
  expr=queryEnv.transformParsedQuery(expr);
  QueryEvalResult result;
  PrintStream output=null;
  OutputFormatterCallback<Target> callback;
  if (streamResults) {
    disableAnsiCharactersFiltering(env);
    output=new PrintStream(env.getReporter().getOutErr().getOutputStream());
    callback=((StreamedFormatter)formatter).createStreamCallback(queryOptions,output,queryOptions.aspectDeps.createResolver(env.getPackageManager(),env.getReporter()));
  }
 else {
    callback=new AggregateAllOutputFormatterCallback<>();
  }
  try {
    callback.start();
    result=queryEnv.evaluateQuery(expr,callback);
  }
 catch (  QueryException e) {
    env.getReporter().handle(Event.error(e.getMessage() == null ? e.toString() : e.getMessage()));
    return ExitCode.ANALYSIS_FAILURE;
  }
catch (  InterruptedException e) {
    IOException ioException=callback.getIoException();
    if (ioException == null || ioException instanceof ClosedByInterruptException) {
      env.getReporter().handle(Event.error("query interrupted"));
      return ExitCode.INTERRUPTED;
    }
 else {
      env.getReporter().handle(Event.error("I/O error: " + e.getMessage()));
      return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
    }
  }
catch (  IOException e) {
    env.getReporter().handle(Event.error("I/O error: " + e.getMessage()));
    return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
  }
 finally {
    if (streamResults) {
      output.flush();
    }
    try {
      callback.close();
    }
 catch (    IOException e) {
      env.getReporter().handle(Event.error("I/O error: " + e.getMessage()));
      return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
    }
  }
  if (!streamResults) {
    disableAnsiCharactersFiltering(env);
    output=new PrintStream(env.getReporter().getOutErr().getOutputStream());
    try {
      Set<Target> targets=((AggregateAllOutputFormatterCallback<Target>)callback).getOutput();
      QueryOutputUtils.output(queryOptions,result,targets,formatter,output,queryOptions.aspectDeps.createResolver(env.getPackageManager(),env.getReporter()));
    }
 catch (    ClosedByInterruptException|InterruptedException e) {
      env.getReporter().handle(Event.error("query interrupted"));
      return ExitCode.INTERRUPTED;
    }
catch (    IOException e) {
      env.getReporter().handle(Event.error("I/O error: " + e.getMessage()));
      return ExitCode.LOCAL_ENVIRONMENTAL_ERROR;
    }
 finally {
      output.flush();
    }
  }
  if (result.isEmpty()) {
    env.getReporter().handle(Event.info("Empty results"));
  }
  return result.getSuccess() ? ExitCode.SUCCESS : ExitCode.PARTIAL_ANALYSIS_FAILURE;
}
