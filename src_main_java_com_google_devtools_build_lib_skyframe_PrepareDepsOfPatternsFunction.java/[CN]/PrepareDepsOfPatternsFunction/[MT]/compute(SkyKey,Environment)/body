{
  EventHandler eventHandler=env.getListener();
  boolean handlerIsParseFailureListener=eventHandler instanceof ParseFailureListener;
  TargetPatternSequence targetPatternSequence=(TargetPatternSequence)skyKey.argument();
  Iterable<TargetPatternSkyKeyOrException> keysMaybe=TargetPatternValue.keys(targetPatternSequence.getPatterns(),targetPatternSequence.getPolicy(),targetPatternSequence.getOffset());
  ImmutableList.Builder<SkyKey> skyKeyBuilder=ImmutableList.builder();
  for (  TargetPatternSkyKeyOrException skyKeyOrException : keysMaybe) {
    try {
      skyKeyBuilder.add(skyKeyOrException.getSkyKey());
    }
 catch (    TargetParsingException e) {
      handleTargetParsingException(eventHandler,handlerIsParseFailureListener,skyKeyOrException.getOriginalPattern(),e);
    }
  }
  ImmutableList<SkyKey> skyKeys=skyKeyBuilder.build();
  Map<SkyKey,ValueOrException<TargetParsingException>> targetPatternValuesByKey=env.getValuesOrThrow(skyKeys,TargetParsingException.class);
  if (env.valuesMissing()) {
    return null;
  }
  ResolvedTargets.Builder<Label> builder=ResolvedTargets.builder();
  for (  SkyKey key : skyKeys) {
    try {
      TargetPatternValue resultValue=Preconditions.checkNotNull((TargetPatternValue)targetPatternValuesByKey.get(key).get());
      ResolvedTargets<Label> results=resultValue.getTargets();
      if (((TargetPatternKey)key.argument()).isNegative()) {
        builder.filter(Predicates.not(Predicates.in(results.getTargets())));
      }
 else {
        builder.merge(results);
      }
    }
 catch (    TargetParsingException e) {
      handleTargetParsingException(eventHandler,handlerIsParseFailureListener,key,e);
    }
  }
  ResolvedTargets<Label> resolvedTargets=builder.build();
  List<SkyKey> targetKeys=new ArrayList<>();
  for (  Label target : resolvedTargets.getTargets()) {
    targetKeys.add(TransitiveTargetValue.key(target));
  }
  env.getValuesOrThrow(targetKeys,NoSuchPackageException.class,NoSuchTargetException.class);
  if (env.valuesMissing()) {
    return null;
  }
  return PrepareDepsOfPatternsValue.INSTANCE;
}
