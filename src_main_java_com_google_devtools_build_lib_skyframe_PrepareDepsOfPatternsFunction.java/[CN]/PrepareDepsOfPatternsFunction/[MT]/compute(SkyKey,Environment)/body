{
  EventHandler eventHandler=env.getListener();
  boolean handlerIsParseFailureListener=eventHandler instanceof ParseFailureListener;
  TargetPatternSequence targetPatternSequence=(TargetPatternSequence)skyKey.argument();
  Iterable<PrepareDepsOfPatternSkyKeyOrException> keysMaybe=PrepareDepsOfPatternValue.keys(targetPatternSequence.getPatterns(),targetPatternSequence.getOffset());
  ImmutableList.Builder<SkyKey> skyKeyBuilder=ImmutableList.builder();
  for (  PrepareDepsOfPatternSkyKeyOrException skyKeyOrException : keysMaybe) {
    try {
      skyKeyBuilder.add(skyKeyOrException.getSkyKey());
    }
 catch (    TargetParsingException e) {
      handleTargetParsingException(eventHandler,handlerIsParseFailureListener,skyKeyOrException.getOriginalPattern(),e);
    }
  }
  ImmutableList<SkyKey> skyKeys=skyKeyBuilder.build();
  Map<SkyKey,ValueOrException<TargetParsingException>> tokensByKey=env.getValuesOrThrow(skyKeys,TargetParsingException.class);
  if (env.valuesMissing()) {
    return null;
  }
  for (  SkyKey key : skyKeys) {
    try {
      Preconditions.checkNotNull(tokensByKey.get(key).get());
    }
 catch (    TargetParsingException e) {
      handleTargetParsingException(eventHandler,handlerIsParseFailureListener,key,e);
    }
  }
  ImmutableList<TargetPatternKey> targetPatternKeys=ImmutableList.copyOf(Iterables.transform(skyKeys,new Function<SkyKey,TargetPatternKey>(){
    @Override public TargetPatternKey apply(    SkyKey skyKey){
      return (TargetPatternKey)skyKey.argument();
    }
  }
));
  return new PrepareDepsOfPatternsValue(targetPatternKeys);
}
