{
  Path tempRoot=workPath.getRelative("build-" + UUID.randomUUID().toString());
  try {
    FileSystemUtils.createDirectoryAndParents(tempRoot);
    final ConcurrentMapActionCache actionCache=new ConcurrentMapActionCache(tempRoot,cache);
    final MemcacheWorkExecutor workExecutor=MemcacheWorkExecutor.createLocalWorkExecutor(actionCache,tempRoot);
    if (LOG_FINER) {
      LOG.fine("Work received has " + request.getInputFilesCount() + " input files and "+ request.getOutputFilesCount()+ " output files.");
    }
    RemoteWorkResponse response=workExecutor.executeLocally(request);
    responseObserver.onNext(response);
    if (options.debug) {
      if (!response.getSuccess()) {
        LOG.warning("Work failed. Request: " + request.toString() + ".");
      }
 else       if (LOG_FINER) {
        LOG.fine("Work completed.");
      }
    }
    if (!options.debug || response.getSuccess()) {
      FileSystemUtils.deleteTree(tempRoot);
    }
 else {
      LOG.warning("Preserving work directory " + tempRoot.toString() + ".");
    }
  }
 catch (  IOException|InterruptedException e) {
    RemoteWorkResponse.Builder response=RemoteWorkResponse.newBuilder();
    response.setSuccess(false).setOut("").setErr("").setException(e.toString());
    responseObserver.onNext(response.build());
    if (e instanceof InterruptedException) {
      Thread.currentThread().interrupt();
    }
  }
 finally {
    responseObserver.onCompleted();
  }
}
