def WriteDepMappingFile(objc_files, objc_file_root, output_dependency_mapping_file, file_open=open):
    'Scans J2ObjC-translated files and outputs a dependency mapping file.\n\n  The mapping file contains mappings between translated source files and their\n  imported source files scanned from the import and include directives.\n\n  Args:\n    objc_files: A list of ObjC files translated by J2ObjC.\n    objc_file_root: The file path which represents a directory where the\n        generated ObjC files reside.\n    output_dependency_mapping_file: The path of the dependency mapping file to\n        write to.\n    file_open: Reference to the builtin open function so it may be\n        overridden for testing.\n  Raises:\n    RuntimeError: If spawned threads throw errors during processing.\n  Returns:\n    None.\n  '
    dep_mapping = dict()
    input_file_queue = Queue.Queue()
    output_dep_mapping_queue = Queue.Queue()
    error_message_queue = Queue.Queue()
    for objc_file in objc_files:
        input_file_queue.put(os.path.join(objc_file_root, objc_file))
    for _ in xrange(multiprocessing.cpu_count()):
        t = threading.Thread(target=_ReadDepMapping, args=(input_file_queue, output_dep_mapping_queue, error_message_queue, objc_file_root, file_open))
        t.start()
    input_file_queue.join()
    if (not error_message_queue.empty()):
        error_messages = [error_message for error_message in error_message_queue.queue]
        raise RuntimeError('\n'.join(error_messages))
    while (not output_dep_mapping_queue.empty()):
        (entry_file, deps) = output_dep_mapping_queue.get()
        dep_mapping[entry_file] = deps
    f = file_open(output_dependency_mapping_file, 'w')
    for entry in sorted(dep_mapping):
        for dep in dep_mapping[entry]:
            f.write((((entry + ':') + dep) + '\n'))
    f.close()
