def main():
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument('--java', required=True, help='The path to the Java executable.')
    parser.add_argument('--jvm_flags', default='', help='A comma-separated list of flags to pass to the JVM.')
    parser.add_argument('--j2objc', required=True, help='The path to the J2ObjC deploy jar.')
    parser.add_argument('--main_class', required=True, help='The main class of the J2ObjC deploy jar to execute.')
    parser.add_argument('--translated_source_files', required=True, help='A comma-separated list of file paths where J2ObjC will write the translated files to.')
    parser.add_argument('--output_dependency_mapping_file', required=True, help='The file path of the dependency mapping file to write to.')
    parser.add_argument('--objc_file_path', '-d', required=True, help='The file path which represents a directory where the generated ObjC files reside.')
    parser.add_argument('--output_archive_source_mapping_file', help='The file path of the mapping file containing mappings between the translated source files and the to-be-generated archive file compiled from those source files. --compile_archive_file_path must be specified if this option is specified.')
    parser.add_argument('--compiled_archive_file_path', required=False, help='The archive file path that will be produced by ObjC compile action later')
    parser.add_argument('--gen_src_jar', required=False, help='The jar containing Java sources generated by annotation processor.')
    parser.add_argument('--output_gen_source_zip', required=False, help='The output zip of ObjC source files translated from the gen srcjar')
    parser.add_argument('--output_gen_header_zip', required=False, help='The output zip of ObjC header files translated from the gen srcjar')
    parser.add_argument('--output_gen_source_dir', required=False, help='The output directory of ObjC source files translated from the gen srcjar')
    parser.add_argument('--output_gen_header_dir', required=False, help='The output directory of ObjC header files translated from the gen srcjar')
    (args, pass_through_args) = parser.parse_known_args()
    (normal_java_files, j2objc_flags) = _ParseArgs(pass_through_args)
    genjar_java_files = []
    j2objc_source_paths = [os.getcwd()]
    genjar_source_tuple = UnzipGenJarSources(args.gen_src_jar)
    if genjar_source_tuple:
        j2objc_source_paths.append(genjar_source_tuple[0])
        genjar_java_files = genjar_source_tuple[1]
    tmp_objc_file_root = tempfile.mkdtemp()
    RunJ2ObjC(args.java, args.jvm_flags, args.j2objc, args.main_class, tmp_objc_file_root, j2objc_flags, j2objc_source_paths, (normal_java_files + genjar_java_files))
    normal_objc_files = _J2ObjcOutputObjcFiles(normal_java_files)
    genjar_objc_files = _J2ObjcOutputObjcFiles(genjar_java_files)
    GenerateJ2objcMappingFiles(normal_objc_files, genjar_objc_files, tmp_objc_file_root, args.output_dependency_mapping_file, args.output_archive_source_mapping_file, args.compiled_archive_file_path)
    PostJ2ObjcFileProcessing(normal_objc_files, genjar_objc_files, tmp_objc_file_root, args.objc_file_path, j2objc_source_paths, args.gen_src_jar, args.output_gen_source_zip, args.output_gen_header_zip, args.output_gen_source_dir, args.output_gen_header_dir)
