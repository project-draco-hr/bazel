{
  component.setRelativeStartNanos(clock.nanoTime());
  for (  Artifact input : action.getInputs()) {
    addArtifactDependency(component,input);
  }
synchronized (lock) {
    if (isBiggestCriticalPath(component)) {
      maxCriticalPath=component;
    }
    if (slowestComponents.size() == SLOWEST_COMPONENTS_SIZE) {
      if (slowestComponents.peek().getElapsedTimeNanos() >= component.getElapsedTimeNanos()) {
        return;
      }
      slowestComponents.remove();
    }
    slowestComponents.add(component);
  }
}
