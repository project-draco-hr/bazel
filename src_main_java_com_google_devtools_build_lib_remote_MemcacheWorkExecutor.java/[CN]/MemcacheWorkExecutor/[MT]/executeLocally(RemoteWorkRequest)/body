{
  ByteArrayOutputStream stdout=new ByteArrayOutputStream();
  ByteArrayOutputStream stderr=new ByteArrayOutputStream();
  try {
    for (    FileEntry input : work.getInputFilesList()) {
      Path file=execRoot.getRelative(input.getPath());
      FileSystemUtils.createDirectoryAndParents(file.getParentDirectory());
      cache.writeFile(input.getContentKey(),file,input.getExecutable());
    }
    List<Path> outputs=new ArrayList<>(work.getOutputFilesList().size());
    for (    FileEntry output : work.getOutputFilesList()) {
      Path file=execRoot.getRelative(output.getPath());
      if (file.exists()) {
        throw new FileAlreadyExistsException("Output file already exists: " + file);
      }
      FileSystemUtils.createDirectoryAndParents(file.getParentDirectory());
      outputs.add(file);
    }
    Command cmd=new Command(work.getArgumentsList().toArray(new String[]{}),work.getEnvironment(),new File(execRoot.getPathString()));
    CommandResult result=cmd.execute(Command.NO_INPUT,Command.NO_OBSERVER,stdout,stderr,true);
    cache.putActionOutput(work.getOutputKey(),execRoot,outputs);
    return RemoteWorkResponse.newBuilder().setSuccess(result.getTerminationStatus().success()).setOut(stdout.toString()).setErr(stderr.toString()).build();
  }
 catch (  CommandException e) {
    return RemoteWorkResponse.newBuilder().setSuccess(false).setOut(stdout.toString()).setErr(stderr.toString()).setException(e.toString()).build();
  }
}
