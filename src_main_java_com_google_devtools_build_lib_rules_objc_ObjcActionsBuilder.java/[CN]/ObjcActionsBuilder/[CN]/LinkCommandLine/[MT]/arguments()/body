{
  StringBuilder argumentStringBuilder=new StringBuilder();
  Iterable<String> archiveExecPaths=Artifact.toExecPaths(Iterables.concat(objcProvider.get(LIBRARY),objcProvider.get(IMPORTED_LIBRARY)));
  commandJoiner.appendTo(argumentStringBuilder,new ImmutableList.Builder<String>().add(objcProvider.is(USES_CPP) ? CLANG_PLUSPLUS.toString() : CLANG.toString()).addAll(objcProvider.is(USES_CPP) ? ImmutableList.of("-stdlib=libc++") : ImmutableList.<String>of()).addAll(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add("-Xlinker","-objc_abi_version").add("-Xlinker","2").add("-fobjc-link-runtime").addAll(IosSdkCommands.DEFAULT_LINKER_FLAGS).addAll(Interspersing.beforeEach("-framework",frameworkNames(objcProvider))).addAll(Interspersing.beforeEach("-weak_framework",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK)))).add("-o",linkedBinary.getExecPathString()).addAll(archiveExecPaths).addAll(dylibPaths()).addAll(extraLinkArgs).build());
  for (  Artifact justDsymBundle : dsymBundle.asSet()) {
    argumentStringBuilder.append(" ");
    commandJoiner.appendTo(argumentStringBuilder,new ImmutableList.Builder<String>().add("&&").add(DSYMUTIL.toString()).add(linkedBinary.getExecPathString()).add("-o").add(justDsymBundle.getExecPathString()).build());
  }
  return ImmutableList.of(argumentStringBuilder.toString());
}
