{
  final Set<SkyKey> invalidated=Sets.newConcurrentHashSet();
  EvaluationProgressReceiver receiver=new EvaluationProgressReceiver(){
    @Override public void invalidated(    SkyKey skyKey,    InvalidationState state){
      Preconditions.checkState(state == expectedState());
      invalidated.add(skyKey);
    }
    @Override public void enqueueing(    SkyKey skyKey){
      throw new UnsupportedOperationException();
    }
    @Override public void evaluated(    SkyKey skyKey,    SkyValue value,    EvaluationState state){
      throw new UnsupportedOperationException();
    }
  }
;
  graph=new InMemoryGraph();
  set("a","a");
  set("b","b");
  tester.getOrCreate("ab").addDependency("a").addDependency("b").setComputedValue(CONCATENATE);
  assertValueValue("ab","ab");
  set("a","c");
  invalidateWithoutError(receiver,skyKey("a"));
  assertThat(invalidated).containsExactly(skyKey("a"),skyKey("ab"));
  assertValueValue("ab","cb");
  set("b","d");
  invalidateWithoutError(receiver,skyKey("b"));
  assertThat(invalidated).containsExactly(skyKey("a"),skyKey("ab"),skyKey("b"));
}
