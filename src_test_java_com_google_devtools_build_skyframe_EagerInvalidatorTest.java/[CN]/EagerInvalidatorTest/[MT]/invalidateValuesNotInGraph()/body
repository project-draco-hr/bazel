{
  final Set<SkyKey> invalidated=Sets.newConcurrentHashSet();
  EvaluationProgressReceiver receiver=new EvaluationProgressReceiver(){
    @Override public void invalidated(    SkyKey skyKey,    InvalidationState state){
      Preconditions.checkState(state == InvalidationState.DIRTY);
      invalidated.add(skyKey);
    }
    @Override public void enqueueing(    SkyKey skyKey){
      throw new UnsupportedOperationException();
    }
    @Override public void evaluated(    SkyKey skyKey,    Supplier<SkyValue> skyValueSupplier,    EvaluationState state){
      throw new UnsupportedOperationException();
    }
  }
;
  graph=new InMemoryGraph();
  invalidateWithoutError(receiver,skyKey("a"));
  assertThat(invalidated).isEmpty();
  set("a","a");
  assertValueValue("a","a");
  invalidateWithoutError(receiver,skyKey("b"));
  assertThat(invalidated).isEmpty();
}
