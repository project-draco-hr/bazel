{
  Path tmpdir=Paths.get(turbineOptions.tempDir());
  Files.createDirectories(tmpdir);
  ImmutableList.Builder<String> argbuilder=ImmutableList.builder();
  addLanguageLevel(argbuilder,turbineOptions.javacOpts());
  argbuilder.add("-implicit:none");
  ImmutableList<Path> processorpath;
  if (!turbineOptions.processors().isEmpty()) {
    argbuilder.add("-processor");
    argbuilder.add(Joiner.on(',').join(turbineOptions.processors()));
    processorpath=asPaths(turbineOptions.processorPath());
  }
 else {
    processorpath=ImmutableList.of();
  }
  List<String> sources=new ArrayList<>();
  sources.addAll(turbineOptions.sources());
  sources.addAll(extractSourceJars(turbineOptions,tmpdir));
  argbuilder.addAll(sources);
  JavacTurbineCompileRequest.Builder requestBuilder=JavacTurbineCompileRequest.builder().setJavacOptions(argbuilder.build()).setBootClassPath(asPaths(turbineOptions.bootClassPath())).setProcessorClassPath(processorpath);
  StrictJavaDeps strictDepsMode=StrictJavaDeps.valueOf(turbineOptions.strictDepsMode());
  DependencyModule dependencyModule=buildDependencyModule(turbineOptions,strictDepsMode);
  Result result=Result.ERROR;
  JavacTurbineCompileResult compileResult;
  List<String> actualClasspath;
  if (strictDepsMode != StrictJavaDeps.OFF) {
    List<String> originalClasspath=turbineOptions.classPath();
    List<String> compressedClasspath=dependencyModule.computeStrictClasspath(turbineOptions.classPath());
    requestBuilder.setStrictDepsPlugin(new StrictJavaDepsPlugin(dependencyModule));
{
      actualClasspath=compressedClasspath;
      requestBuilder.setClassPath(asPaths(actualClasspath));
      compileResult=JavacTurbineCompiler.compile(requestBuilder.build());
      if (compileResult.success()) {
        result=Result.OK_WITH_REDUCED_CLASSPATH;
        context=compileResult.context();
      }
    }
    if (!compileResult.success() && hasRecognizedError(compileResult.output())) {
      deleteRecursively(tmpdir);
      extractSourceJars(turbineOptions,tmpdir);
      actualClasspath=originalClasspath;
      requestBuilder.setClassPath(asPaths(actualClasspath));
      compileResult=JavacTurbineCompiler.compile(requestBuilder.build());
      if (compileResult.success()) {
        result=Result.OK_WITH_FULL_CLASSPATH;
        context=compileResult.context();
      }
    }
  }
 else {
    actualClasspath=turbineOptions.classPath();
    requestBuilder.setClassPath(asPaths(actualClasspath));
    compileResult=JavacTurbineCompiler.compile(requestBuilder.build());
    if (compileResult.success()) {
      result=Result.OK_WITH_FULL_CLASSPATH;
      context=compileResult.context();
    }
  }
  if (!result.ok()) {
    out.println(compileResult.output());
    return result;
  }
  emitClassJar(Paths.get(turbineOptions.outputFile()),compileResult);
  dependencyModule.emitDependencyInformation(CLASSPATH_JOINER.join(actualClasspath),compileResult.success());
  return result;
}
