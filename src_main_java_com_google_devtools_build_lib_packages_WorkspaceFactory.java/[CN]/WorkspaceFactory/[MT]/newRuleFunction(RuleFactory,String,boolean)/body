{
  return new BuiltinFunction(ruleClassName,FunctionSignature.KWARGS,BuiltinFunction.USE_AST_ENV){
    public Object invoke(    Map<String,Object> kwargs,    FuncallExpression ast,    Environment env) throws EvalException, InterruptedException {
      try {
        Builder builder=PackageFactory.getContext(env,ast).pkgBuilder;
        if (!allowOverride && kwargs.containsKey("name") && builder.targets.containsKey(kwargs.get("name"))) {
          throw new EvalException(ast.getLocation(),"Cannot redefine repository after any load statement in the WORKSPACE file" + " (for repository '" + kwargs.get("name") + "')");
        }
        RuleClass ruleClass=ruleFactory.getRuleClass(ruleClassName);
        RuleClass bindRuleClass=ruleFactory.getRuleClass("bind");
        Rule rule=builder.externalPackageData().createAndAddRepositoryRule(builder,ruleClass,bindRuleClass,kwargs,ast);
        if (!isLegalWorkspaceName(rule.getName())) {
          throw new EvalException(ast.getLocation(),rule + "'s name field must be a legal workspace name");
        }
      }
 catch (      RuleFactory.InvalidRuleException|Package.NameConflictException|LabelSyntaxException e) {
        throw new EvalException(ast.getLocation(),e.getMessage());
      }
      return NONE;
    }
  }
;
}
