{
  PathPackageLocator packageLocator=PrecomputedValue.PATH_PACKAGE_LOCATOR.get(env);
  if (packageLocator == null) {
    throw new MissingDepException();
  }
  List<Path> roots=new ArrayList<>();
  if (repository.isMain()) {
    roots.addAll(packageLocator.getPathEntries());
  }
 else {
    RepositoryDirectoryValue repositoryValue=(RepositoryDirectoryValue)env.getValue(RepositoryDirectoryValue.key(repository));
    if (repositoryValue == null) {
      throw new MissingDepException();
    }
    roots.add(repositoryValue.getPath());
  }
  NestedSetBuilder<String> packageNames=NestedSetBuilder.stableOrder();
  for (  Path root : roots) {
    PathFragment.checkAllPathsAreUnder(excludedSubdirectories,directory);
    RecursivePkgValue lookup=(RecursivePkgValue)env.getValue(RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),excludedSubdirectories));
    if (lookup == null) {
      throw new MissingDepException();
    }
    packageNames.addTransitive(lookup.getPackages());
  }
  return Iterables.transform(packageNames.build(),PathFragment.TO_PATH_FRAGMENT);
}
