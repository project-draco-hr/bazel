{
  GraphBackedRecursivePackageProvider provider=new GraphBackedRecursivePackageProvider(graph,universeTargetPatternKeys);
  Map<String,ResolvedTargets<Target>> result=Maps.newHashMapWithExpectedSize(patterns.size());
  for (  String pattern : patterns) {
    SkyKey patternKey=TargetPatternValue.key(pattern,TargetPatternEvaluator.DEFAULT_FILTERING_POLICY,parserPrefix);
    TargetPatternValue.TargetPatternKey targetPatternKey=((TargetPatternValue.TargetPatternKey)patternKey.argument());
    TargetParsingException targetParsingException=null;
    if (graph.exists(patternKey)) {
      TargetPatternValue value=(TargetPatternValue)graph.getValue(patternKey);
      if (value != null) {
        ResolvedTargets.Builder<Target> targetsBuilder=ResolvedTargets.builder();
        targetsBuilder.addAll(makeTargetsFromLabels(value.getTargets().getTargets()));
        targetsBuilder.removeAll(makeTargetsFromLabels(value.getTargets().getFilteredTargets()));
        result.put(pattern,targetsBuilder.build());
      }
 else {
        targetParsingException=(TargetParsingException)Preconditions.checkNotNull(graph.getException(patternKey),pattern);
      }
    }
 else {
      RecursivePackageProviderBackedTargetPatternResolver resolver=new RecursivePackageProviderBackedTargetPatternResolver(provider,eventHandler,targetPatternKey.getPolicy(),pkgPath);
      TargetPattern parsedPattern=targetPatternKey.getParsedPattern();
      try {
        result.put(pattern,parsedPattern.eval(resolver));
      }
 catch (      TargetParsingException e) {
        targetParsingException=e;
      }
catch (      InterruptedException e) {
        throw new QueryException(e.getMessage());
      }
    }
    if (targetParsingException != null) {
      if (!keepGoing) {
        throw targetParsingException;
      }
 else {
        eventHandler.handle(Event.error("Evaluation of query \"" + caller + "\" failed: "+ targetParsingException.getMessage()));
        result.put(pattern,ResolvedTargets.<Target>builder().setError().build());
      }
    }
  }
  return result;
}
