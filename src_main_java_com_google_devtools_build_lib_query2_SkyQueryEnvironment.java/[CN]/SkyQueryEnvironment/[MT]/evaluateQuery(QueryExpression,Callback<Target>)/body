{
  eventHandler.resetErrors();
  beforeEvaluateQuery();
  final BatchStreamedCallback aggregator=new BatchStreamedCallback(callback,BATCH_CALLBACK_SIZE);
  final AtomicBoolean empty=new AtomicBoolean(true);
  Callback<Target> callbackWithEmptyCheck=new Callback<Target>(){
    @Override public void process(    Iterable<Target> partialResult) throws QueryException, InterruptedException {
      empty.compareAndSet(true,Iterables.isEmpty(partialResult));
      aggregator.process(partialResult);
    }
  }
;
  try (final AutoProfiler p=AutoProfiler.logged("evaluating query",LOG)){
    try {
      if (expr.canEvalConcurrently()) {
        expr.evalConcurrently(this,VariableContext.<Target>empty(),callbackWithEmptyCheck,threadPool);
      }
 else {
        expr.eval(this,VariableContext.<Target>empty(),callbackWithEmptyCheck);
      }
    }
 catch (    QueryException e) {
      throw new QueryException(e,expr);
    }
    aggregator.processLastPending();
  }
   if (eventHandler.hasErrors()) {
    if (!keepGoing) {
      throw new QueryException("Evaluation of query \"" + expr + "\" failed due to BUILD file errors");
    }
 else {
      eventHandler.handle(Event.warn("--keep_going specified, ignoring errors.  " + "Results may be inaccurate"));
    }
  }
  return new QueryEvalResult(!eventHandler.hasErrors(),empty.get());
}
