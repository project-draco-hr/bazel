{
  long startTime=Profiler.nanoTimeMaybe();
  EvaluationResult<SkyValue> result=graphFactory.prepareAndGet(universeScope,parserPrefix,loadingPhaseThreads,eventHandler);
  graph=result.getWalkableGraph();
  long duration=Profiler.nanoTimeMaybe() - startTime;
  if (duration > 0) {
    LOG.info("Spent " + (duration / 1000 / 1000) + " ms on evaluation and walkable graph");
  }
  SkyKey universeKey=graphFactory.getUniverseKey(universeScope,parserPrefix);
  universeTargetPatternKeys=PrepareDepsOfPatternsFunction.getTargetPatternKeys(PrepareDepsOfPatternsFunction.getSkyKeys(universeKey,eventHandler));
  Collection<SkyValue> values=result.values();
  if (!values.isEmpty()) {
    Preconditions.checkState(values.size() == 1,"Universe query \"%s\" returned multiple" + " values unexpectedly (%s values in result)",universeScope,values.size());
    Preconditions.checkNotNull(result.get(universeKey),result);
  }
 else {
    boolean foundCycle=!Iterables.isEmpty(result.getError().getCycleInfo());
    Preconditions.checkState(foundCycle,"Universe query \"%s\" failed with non-cycle error: %s",universeScope,result.getError());
  }
}
