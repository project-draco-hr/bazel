{
  if (precomputedPatterns.containsKey(pattern)) {
    Set<Label> labels=precomputedPatterns.get(pattern);
    if (labels != null) {
      try {
        makeTargetsFromLabels(labels,callback);
      }
 catch (      InterruptedException e) {
        throw new QueryException(owner,e.getMessage());
      }
    }
 else {
      TargetParsingException exception;
      try {
        exception=(TargetParsingException)Preconditions.checkNotNull(graph.getException(TargetPatternValue.key(pattern,TargetPatternEvaluator.DEFAULT_FILTERING_POLICY,parserPrefix)),pattern);
      }
 catch (      TargetParsingException e) {
        exception=e;
      }
      reportBuildFileError(owner,exception.getMessage());
    }
  }
 else {
    try {
      TargetPatternKey targetPatternKey=((TargetPatternKey)TargetPatternValue.key(pattern,TargetPatternEvaluator.DEFAULT_FILTERING_POLICY,parserPrefix).argument());
      GraphBackedRecursivePackageProvider provider=new GraphBackedRecursivePackageProvider(graph,universeTargetPatternKeys,pkgPath);
      RecursivePackageProviderBackedTargetPatternResolver resolver=new RecursivePackageProviderBackedTargetPatternResolver(provider,eventHandler,targetPatternKey.getPolicy());
      TargetPattern parsedPattern=targetPatternKey.getParsedPattern();
      FilteringBatchingUniquifyingCallback wrapper=new FilteringBatchingUniquifyingCallback(callback);
      parsedPattern.eval(resolver,wrapper);
      wrapper.processLastPending();
    }
 catch (    TargetParsingException e) {
      reportBuildFileError(owner,e.getMessage());
    }
catch (    InterruptedException e) {
      throw new QueryException(owner,e.getMessage());
    }
  }
}
