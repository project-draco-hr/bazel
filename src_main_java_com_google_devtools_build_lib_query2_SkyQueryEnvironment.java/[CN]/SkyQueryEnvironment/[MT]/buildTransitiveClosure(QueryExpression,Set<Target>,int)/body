{
  Iterable<SkyKey> transitiveTraversalKeys=makeTransitiveTraversalKeys(targets);
  ImmutableList.Builder<String> errorMessagesBuilder=ImmutableList.builder();
  Set<Entry<SkyKey,SkyValue>> successfulEntries=graph.getSuccessfulValues(transitiveTraversalKeys).entrySet();
  Builder<SkyKey> successfulKeysBuilder=ImmutableSet.builder();
  for (  Entry<SkyKey,SkyValue> successfulEntry : successfulEntries) {
    successfulKeysBuilder.add(successfulEntry.getKey());
    TransitiveTraversalValue value=(TransitiveTraversalValue)successfulEntry.getValue();
    String firstErrorMessage=value.getFirstErrorMessage();
    if (firstErrorMessage != null) {
      errorMessagesBuilder.add(firstErrorMessage);
    }
  }
  ImmutableSet<SkyKey> successfulKeys=successfulKeysBuilder.build();
  Iterable<SkyKey> unsuccessfulKeys=Iterables.filter(transitiveTraversalKeys,Predicates.not(Predicates.in(successfulKeys)));
  Set<Entry<SkyKey,Exception>> errorEntries=graph.getMissingAndExceptions(unsuccessfulKeys).entrySet();
  for (  Map.Entry<SkyKey,Exception> entry : errorEntries) {
    if (entry.getValue() == null) {
      eventHandler.handle(Event.warn(entry.getKey().argument() + " does not exist in graph"));
    }
 else {
      errorMessagesBuilder.add(entry.getValue().getMessage());
    }
  }
  ImmutableList<String> errorMessages=errorMessagesBuilder.build();
  for (  String errorMessage : errorMessages) {
    reportBuildFileError(caller,errorMessage);
  }
}
