{
  Map<String,ResolvedTargets<Target>> result=Maps.newHashMapWithExpectedSize(patterns.size());
  for (  String pattern : patterns) {
    SkyKey patternKey=TargetPatternValue.key(pattern,TargetPatternEvaluator.DEFAULT_FILTERING_POLICY,parserPrefix);
    TargetPatternValue.TargetPattern targetPattern=((TargetPatternValue.TargetPattern)patternKey.argument());
    if (graph.exists(patternKey)) {
      TargetPatternValue value=(TargetPatternValue)graph.getValue(patternKey);
      if (value != null) {
        result.put(pattern,value.getTargets());
      }
 else       if (!keepGoing) {
        throw (TargetParsingException)Preconditions.checkNotNull(graph.getException(patternKey),pattern);
      }
 else {
        result.put(pattern,ResolvedTargets.<Target>builder().setError().build());
      }
    }
 else {
      TargetPattern.Parser parser=new TargetPattern.Parser(targetPattern.getOffset());
      GraphBackedRecursivePackageProvider provider=new GraphBackedRecursivePackageProvider(graph);
      RecursivePackageProviderBackedTargetPatternResolver resolver=new RecursivePackageProviderBackedTargetPatternResolver(provider,eventHandler,targetPattern.getPolicy(),pkgPath);
      TargetPattern parsedPattern=parser.parse(targetPattern.getPattern());
      try {
        result.put(pattern,parsedPattern.eval(resolver));
      }
 catch (      InterruptedException e) {
        throw new QueryException(e.getMessage());
      }
    }
  }
  return result;
}
