{
  Collection<SkyKey> files=getSkyKeysForFileFragments(fileIdentifiers);
  Collection<SkyKey> current=graph.getSuccessfulValues(files).keySet();
  Set<SkyKey> resultKeys=CompactHashSet.create();
  while (!current.isEmpty()) {
    Collection<Iterable<SkyKey>> reverseDeps=graph.getReverseDeps(current).values();
    current=new HashSet<>();
    for (    SkyKey rdep : Iterables.concat(reverseDeps)) {
      if (rdep.functionName().equals(SkyFunctions.PACKAGE)) {
        resultKeys.add(rdep);
        if (rdep.equals(PackageValue.key(Label.EXTERNAL_PACKAGE_IDENTIFIER))) {
          current.add(rdep);
        }
      }
 else       if (!rdep.functionName().equals(SkyFunctions.PACKAGE_LOOKUP)) {
        current.add(rdep);
      }
    }
  }
  Map<SkyKey,SkyValue> packageValues=graph.getSuccessfulValues(resultKeys);
  ImmutableSet.Builder<Target> result=ImmutableSet.builder();
  for (  SkyValue value : packageValues.values()) {
    Package pkg=((PackageValue)value).getPackage();
    if (!pkg.containsErrors()) {
      result.add(pkg.getBuildFile());
    }
  }
  return result.build();
}
