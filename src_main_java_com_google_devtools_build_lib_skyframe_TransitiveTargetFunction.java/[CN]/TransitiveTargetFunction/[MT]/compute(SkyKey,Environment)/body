{
  Label label=(Label)key.argument();
  SkyKey packageKey=PackageValue.key(label.getPackageIdentifier());
  SkyKey targetKey=TargetMarkerValue.key(label);
  Target target;
  boolean packageLoadedSuccessfully;
  NestedSetBuilder<Label> transitiveRootCauses=NestedSetBuilder.stableOrder();
  NoSuchTargetException errorLoadingTarget=null;
  try {
    TargetMarkerValue targetValue=(TargetMarkerValue)env.getValueOrThrow(targetKey,NoSuchTargetException.class,NoSuchPackageException.class);
    if (targetValue == null) {
      return null;
    }
    PackageValue packageValue=(PackageValue)env.getValueOrThrow(packageKey,NoSuchPackageException.class);
    if (packageValue == null) {
      return null;
    }
    packageLoadedSuccessfully=true;
    try {
      target=packageValue.getPackage().getTarget(label.getName());
    }
 catch (    NoSuchTargetException unexpected) {
      throw new IllegalStateException(unexpected);
    }
  }
 catch (  NoSuchTargetException e) {
    if (!e.hasTarget()) {
      throw new TransitiveTargetFunctionException(e);
    }
    Package pkg;
    try {
      PackageValue packageValue=(PackageValue)env.getValueOrThrow(packageKey,NoSuchPackageException.class);
      if (packageValue == null) {
        return null;
      }
      throw new IllegalStateException("Expected bad package: " + label.getPackageIdentifier());
    }
 catch (    NoSuchPackageException nsp) {
      pkg=Preconditions.checkNotNull(nsp.getPackage(),label.getPackageIdentifier());
    }
    try {
      target=pkg.getTarget(label.getName());
    }
 catch (    NoSuchTargetException nste) {
      throw new IllegalStateException("Expected target to exist",nste);
    }
    errorLoadingTarget=e;
    packageLoadedSuccessfully=false;
  }
catch (  NoSuchPackageException e) {
    throw new TransitiveTargetFunctionException(e);
  }
  NestedSetBuilder<PackageIdentifier> transitiveSuccessfulPkgs=NestedSetBuilder.stableOrder();
  NestedSetBuilder<PackageIdentifier> transitiveUnsuccessfulPkgs=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Label> transitiveTargets=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Class<? extends BuildConfiguration.Fragment>> transitiveConfigFragments=NestedSetBuilder.stableOrder();
  Set<Class<? extends BuildConfiguration.Fragment>> configFragmentsFromDeps=new LinkedHashSet<>();
  PackageIdentifier packageId=target.getPackage().getPackageIdentifier();
  if (packageLoadedSuccessfully) {
    transitiveSuccessfulPkgs.add(packageId);
  }
 else {
    transitiveRootCauses.add(label);
    transitiveUnsuccessfulPkgs.add(packageId);
  }
  transitiveTargets.add(target.getLabel());
  Iterable<SkyKey> depKeys=getLabelDepKeys(target);
  boolean successfulTransitiveLoading=packageLoadedSuccessfully;
  successfulTransitiveLoading&=processDeps(env,target,transitiveRootCauses,transitiveSuccessfulPkgs,transitiveUnsuccessfulPkgs,transitiveTargets,depKeys,transitiveConfigFragments,configFragmentsFromDeps);
  if (env.valuesMissing()) {
    return null;
  }
  depKeys=getLabelAspectKeys(target,env);
  successfulTransitiveLoading&=processDeps(env,target,transitiveRootCauses,transitiveSuccessfulPkgs,transitiveUnsuccessfulPkgs,transitiveTargets,depKeys,transitiveConfigFragments,configFragmentsFromDeps);
  if (env.valuesMissing()) {
    return null;
  }
  if (target instanceof Rule) {
    Set<Class<?>> configFragments=target.getAssociatedRule().getRuleClassObject().getRequiredConfigurationFragments();
    configFragments=configFragments.isEmpty() ? getAllFragments() : configFragments;
    for (    Class<?> fragment : configFragments) {
      if (!configFragmentsFromDeps.contains(fragment)) {
        transitiveConfigFragments.add((Class<? extends BuildConfiguration.Fragment>)fragment);
      }
    }
  }
  NestedSet<PackageIdentifier> successfullyLoadedPackages=transitiveSuccessfulPkgs.build();
  NestedSet<PackageIdentifier> unsuccessfullyLoadedPackages=transitiveUnsuccessfulPkgs.build();
  NestedSet<Label> loadedTargets=transitiveTargets.build();
  if (successfulTransitiveLoading) {
    return TransitiveTargetValue.successfulTransitiveLoading(successfullyLoadedPackages,unsuccessfullyLoadedPackages,loadedTargets,transitiveConfigFragments.build());
  }
 else {
    NestedSet<Label> rootCauses=transitiveRootCauses.build();
    return TransitiveTargetValue.unsuccessfulTransitiveLoading(successfullyLoadedPackages,unsuccessfullyLoadedPackages,loadedTargets,rootCauses,errorLoadingTarget,transitiveConfigFragments.build());
  }
}
