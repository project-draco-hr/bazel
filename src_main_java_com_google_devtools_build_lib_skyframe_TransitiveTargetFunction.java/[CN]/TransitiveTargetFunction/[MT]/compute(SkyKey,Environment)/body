{
  Label label=(Label)key.argument();
  SkyKey packageKey=PackageValue.key(label.getPackageIdentifier());
  SkyKey targetKey=TargetMarkerValue.key(label);
  Target target;
  boolean packageLoadedSuccessfully;
  boolean successfulTransitiveLoading=true;
  NestedSetBuilder<Label> transitiveRootCauses=NestedSetBuilder.stableOrder();
  NoSuchTargetException errorLoadingTarget=null;
  try {
    TargetMarkerValue targetValue=(TargetMarkerValue)env.getValueOrThrow(targetKey,NoSuchThingException.class);
    if (targetValue == null) {
      return null;
    }
    PackageValue packageValue=(PackageValue)env.getValueOrThrow(packageKey,NoSuchThingException.class);
    if (packageValue == null) {
      return null;
    }
    packageLoadedSuccessfully=true;
    target=packageValue.getPackage().getTarget(label.getName());
  }
 catch (  NoSuchTargetException e) {
    target=e.getTarget();
    if (target == null) {
      throw new TransitiveTargetFunctionException(e);
    }
    successfulTransitiveLoading=false;
    transitiveRootCauses.add(label);
    errorLoadingTarget=e;
    packageLoadedSuccessfully=false;
  }
catch (  NoSuchPackageException e) {
    throw new TransitiveTargetFunctionException(e);
  }
catch (  NoSuchThingException e) {
    throw new IllegalStateException(e + " not NoSuchTargetException or NoSuchPackageException");
  }
  NestedSetBuilder<PackageIdentifier> transitiveSuccessfulPkgs=NestedSetBuilder.stableOrder();
  NestedSetBuilder<PackageIdentifier> transitiveUnsuccessfulPkgs=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Label> transitiveTargets=NestedSetBuilder.stableOrder();
  PackageIdentifier packageId=target.getPackage().getPackageIdentifier();
  if (packageLoadedSuccessfully) {
    transitiveSuccessfulPkgs.add(packageId);
  }
 else {
    transitiveUnsuccessfulPkgs.add(packageId);
  }
  transitiveTargets.add(target.getLabel());
  Iterable<SkyKey> depKeys=getLabelDepKeys(target);
  successfulTransitiveLoading&=processDeps(env,target,transitiveRootCauses,transitiveSuccessfulPkgs,transitiveUnsuccessfulPkgs,transitiveTargets,depKeys);
  if (env.valuesMissing()) {
    return null;
  }
  depKeys=getLabelAspectKeys(target,env);
  successfulTransitiveLoading&=processDeps(env,target,transitiveRootCauses,transitiveSuccessfulPkgs,transitiveUnsuccessfulPkgs,transitiveTargets,depKeys);
  if (env.valuesMissing()) {
    return null;
  }
  NestedSet<PackageIdentifier> successfullyLoadedPackages=transitiveSuccessfulPkgs.build();
  NestedSet<PackageIdentifier> unsuccessfullyLoadedPackages=transitiveUnsuccessfulPkgs.build();
  NestedSet<Label> loadedTargets=transitiveTargets.build();
  if (successfulTransitiveLoading) {
    return TransitiveTargetValue.successfulTransitiveLoading(successfullyLoadedPackages,unsuccessfullyLoadedPackages,loadedTargets);
  }
 else {
    NestedSet<Label> rootCauses=transitiveRootCauses.build();
    return TransitiveTargetValue.unsuccessfulTransitiveLoading(successfullyLoadedPackages,unsuccessfullyLoadedPackages,loadedTargets,rootCauses,errorLoadingTarget);
  }
}
