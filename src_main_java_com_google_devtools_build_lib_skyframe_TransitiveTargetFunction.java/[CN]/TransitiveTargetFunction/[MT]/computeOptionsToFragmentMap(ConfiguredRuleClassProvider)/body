{
  Map<String,Class<? extends Fragment>> result=new LinkedHashMap<>();
  Map<Class<? extends FragmentOptions>,Integer> visitedOptionsClasses=new HashMap<>();
  for (  ConfigurationFragmentFactory factory : ruleClassProvider.getConfigurationFragments()) {
    Set<Class<? extends FragmentOptions>> requiredOpts=factory.requiredOptions();
    for (    Class<? extends FragmentOptions> optionsClass : requiredOpts) {
      Integer previousBest=visitedOptionsClasses.get(optionsClass);
      if (previousBest != null && previousBest <= requiredOpts.size()) {
        continue;
      }
      visitedOptionsClasses.put(optionsClass,requiredOpts.size());
      for (      Field field : optionsClass.getFields()) {
        if (field.isAnnotationPresent(Option.class)) {
          result.put(field.getAnnotation(Option.class).name(),factory.creates());
        }
      }
    }
  }
  return result;
}
