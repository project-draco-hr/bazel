{
  return builder.setOutputToGenfiles().add(attr("srcs",LABEL_LIST).direct_compile_time_input().legacyAllowAnyFileType()).add(attr("tools",LABEL_LIST).cfg(HOST).legacyAllowAnyFileType()).add(attr("$genrule_setup",LABEL).cfg(HOST).value(env.getToolsLabel(GENRULE_SETUP_LABEL))).add(attr("outs",OUTPUT_LIST).mandatory()).add(attr("cmd",STRING).mandatory()).add(attr("output_to_bindir",BOOLEAN).value(false).nonconfigurable("policy decision: no reason for this to depend on the configuration")).add(attr("local",BOOLEAN).value(false)).add(attr("message",STRING)).add(attr("output_licenses",LICENSE)).add(attr("executable",BOOLEAN).value(false)).add(attr("stamp",BOOLEAN).value(false)).add(attr("heuristic_label_expansion",BOOLEAN).value(false)).add(attr("$is_executable",BOOLEAN).nonconfigurable("Called from RunCommand.isExecutable, which takes a Target").value(new Attribute.ComputedDefault("outs","executable"){
    @Override public Object getDefault(    AttributeMap rule){
      return (rule.get("outs",BuildType.OUTPUT_LIST).size() == 1) && rule.get("executable",BOOLEAN);
    }
  }
)).removeAttribute("data").removeAttribute("deps").build();
}
