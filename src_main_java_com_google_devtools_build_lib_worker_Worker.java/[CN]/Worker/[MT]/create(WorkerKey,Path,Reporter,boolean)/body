{
  Preconditions.checkNotNull(key);
  Preconditions.checkNotNull(logDir);
  int workerId=pidCounter.getAndIncrement();
  Path logFile=logDir.getRelative("worker-" + workerId + "-"+ key.getMnemonic()+ ".log");
  String[] command=key.getArgs().toArray(new String[0]);
  File executable=new File(command[0]);
  if (!executable.isAbsolute() && executable.getParent() != null) {
    command[0]=new File(key.getWorkDir().getPathFile(),command[0]).getAbsolutePath();
  }
  ProcessBuilder processBuilder=new ProcessBuilder(command).directory(key.getWorkDir().getPathFile()).redirectError(Redirect.appendTo(logFile.getPathFile()));
  processBuilder.environment().putAll(key.getEnv());
  final Process process=processBuilder.start();
  Thread shutdownHook=new Thread(){
    @Override public void run(){
      destroyProcess(process);
    }
  }
;
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  if (verbose) {
    reporter.handle(Event.info("Created new " + key.getMnemonic() + " worker (id "+ workerId+ "), logging to "+ logFile));
  }
  return new Worker(process,shutdownHook,workerId,key.getWorkerFilesHash());
}
