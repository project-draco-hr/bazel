{
  PathPackageLocator pkgLocator=PrecomputedValue.PATH_PACKAGE_LOCATOR.get(env);
  PackageIdentifier packageKey=(PackageIdentifier)skyKey.argument();
  if (!packageKey.getRepository().isDefault()) {
    return computeExternalPackageLookupValue(skyKey,env);
  }
  PathFragment pkg=packageKey.getPackageFragment();
  if (pkg.equals(PathFragment.EMPTY_FRAGMENT)) {
    return PackageLookupValue.invalidPackageName("The empty package name is invalid");
  }
  String pkgName=pkg.getPathString();
  String packageNameErrorMsg=LabelValidator.validatePackageName(pkgName);
  if (packageNameErrorMsg != null) {
    return PackageLookupValue.invalidPackageName("Invalid package name '" + pkgName + "': "+ packageNameErrorMsg);
  }
  if (deletedPackages.get().contains(pkg.getPathString())) {
    return PackageLookupValue.deletedPackage();
  }
  for (  Path packagePathEntry : pkgLocator.getPathEntries()) {
    PackageLookupValue value=getPackageLookupValue(env,packagePathEntry,pkg);
    if (value == null || value.packageExists()) {
      return value;
    }
  }
  return PackageLookupValue.noBuildFile();
}
