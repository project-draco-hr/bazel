{
  PathPackageLocator pkgLocator=PrecomputedValue.PATH_PACKAGE_LOCATOR.get(env);
  PackageIdentifier packageKey=(PackageIdentifier)skyKey.argument();
  if (PackageFunction.isDefaultsPackage(packageKey)) {
    return PackageLookupValue.success(pkgLocator.getPathEntries().get(0));
  }
  if (!packageKey.getRepository().equals(PackageIdentifier.MAIN_REPOSITORY_NAME) && !packageKey.getRepository().isDefault()) {
    return computeExternalPackageLookupValue(skyKey,env,packageKey);
  }
 else   if (packageKey.equals(Package.EXTERNAL_PACKAGE_IDENTIFIER)) {
    return computeWorkspaceLookupValue(env,packageKey);
  }
  String packageNameErrorMsg=LabelValidator.validatePackageName(packageKey.getPackageFragment().getPathString());
  if (packageNameErrorMsg != null) {
    return PackageLookupValue.invalidPackageName("Invalid package name '" + packageKey + "': "+ packageNameErrorMsg);
  }
  if (deletedPackages.get().contains(packageKey)) {
    return PackageLookupValue.DELETED_PACKAGE_VALUE;
  }
  for (  Path packagePathEntry : pkgLocator.getPathEntries()) {
    PackageLookupValue value=getPackageLookupValue(env,packagePathEntry,packageKey);
    if (value == null || value.packageExists()) {
      return value;
    }
  }
  return PackageLookupValue.NO_BUILD_FILE_VALUE;
}
