{
  PackageIdentifier id=(PackageIdentifier)skyKey.argument();
  SkyKey repositoryKey=RepositoryValue.key(id.getRepository());
  RepositoryValue repositoryValue=null;
  try {
    repositoryValue=(RepositoryValue)env.getValueOrThrow(repositoryKey,NoSuchPackageException.class,IOException.class,EvalException.class);
    if (repositoryValue == null) {
      return null;
    }
  }
 catch (  NoSuchPackageException e) {
    throw new PackageLookupFunctionException(e,Transience.PERSISTENT);
  }
catch (  IOException e) {
    throw new PackageLookupFunctionException(new BuildFileContainsErrorsException(PackageFunction.EXTERNAL_PACKAGE_NAME,e.getMessage()),Transience.PERSISTENT);
  }
catch (  EvalException e) {
    throw new PackageLookupFunctionException(new BuildFileContainsErrorsException(PackageFunction.EXTERNAL_PACKAGE_NAME,e.getMessage()),Transience.PERSISTENT);
  }
  return getPackageLookupValue(env,repositoryValue.getPath(),id.getPackageFragment());
}
