{
  WorkspaceStatusAction.Context context=ctx.getExecutor().getContext(WorkspaceStatusAction.Context.class);
  final Map<String,WorkspaceStatusAction.Key> keys=new LinkedHashMap<>();
  if (writeVolatileInfo) {
    keys.putAll(context.getVolatileKeys());
  }
  if (writeStableInfo) {
    keys.putAll(context.getStableKeys());
  }
  final Map<String,String> values=new LinkedHashMap<>();
  for (  Artifact valueFile : valueArtifacts) {
    values.putAll(WorkspaceStatusAction.parseValues(valueFile.getPath()));
  }
  final boolean redacted=valueArtifacts.isEmpty();
  return new DeterministicWriter(){
    @Override public void writeOutputFile(    OutputStream out) throws IOException {
      Writer writer=new OutputStreamWriter(out,UTF_8);
      for (      Map.Entry<String,WorkspaceStatusAction.Key> key : keys.entrySet()) {
        if (!key.getValue().isInLanguage("C++")) {
          continue;
        }
        String value=redacted ? key.getValue().getRedactedValue() : values.containsKey(key.getKey()) ? values.get(key.getKey()) : key.getValue().getDefaultValue();
switch (key.getValue().getType()) {
case VERBATIM:
case INTEGER:
          break;
case STRING:
        value=quote(value);
      break;
default :
    throw new IllegalStateException();
}
define(writer,key.getKey(),value);
}
writer.flush();
}
}
;
}
