{
  Preconditions.checkArgument(deterministicHeadSize <= uniqueInputs,"deterministicHeadSize must be smaller than uniqueInputs");
  List<Integer> inputList=new ArrayList<>(uniqueInputs);
  Collection<Integer> inputsDeduped=new LinkedHashSet<>(uniqueInputs);
  for (int i=0; i < deterministicHeadSize; i++) {
    inputList.add(i);
    inputsDeduped.add(i);
  }
  while (inputsDeduped.size() < uniqueInputs) {
    Integer i=RANDOM.nextInt(uniqueInputs);
    inputList.add(i);
    inputsDeduped.add(i);
  }
  List<Integer> firstList=new ArrayList<>(uniqueInputs);
  RecordingUniqueifier recordingUniqueifier=new RecordingUniqueifier();
  for (  Integer i : inputList) {
    if (recordingUniqueifier.isUnique(i)) {
      firstList.add(i);
    }
  }
  List<Integer> secondList=new ArrayList<>(uniqueInputs);
  Object memo=recordingUniqueifier.getMemo();
  Uniqueifier uniqueifier=RecordingUniqueifier.createReplayUniqueifier(memo);
  for (  Integer i : inputList) {
    if (uniqueifier.isUnique(i)) {
      secondList.add(i);
    }
  }
  inputsDeduped=ImmutableList.copyOf(inputsDeduped);
  assertEquals("Unmemo'ed run has unexpected contents",inputsDeduped,firstList);
  assertEquals("Memo'ed run has unexpected contents",inputsDeduped,secondList);
}
