{
  Preconditions.checkState(artifact.isTreeArtifact(),artifact);
  if (!artifact.getPath().isDirectory() || artifact.getPath().isSymbolicLink()) {
    return TreeArtifactValue.MISSING_TREE_ARTIFACT;
  }
  Set<PathFragment> paths=null;
  try {
    paths=TreeArtifactValue.explodeDirectory(artifact);
  }
 catch (  TreeArtifactException e) {
    throw new IllegalStateException(e);
  }
  Object previousDirectoryListing=outputDirectoryListings.put(artifact,Collections.newSetFromMap(new ConcurrentHashMap<ArtifactFile,Boolean>()));
  Preconditions.checkState(previousDirectoryListing == null,"Race condition while constructing TreArtifactValue: %s, %s",artifact,previousDirectoryListing);
  return constructTreeArtifactValue(ActionInputHelper.asArtifactFiles(artifact,paths));
}
