{
  TreeArtifactValue value=outputTreeArtifactData.get(artifact);
  if (value != null) {
    return value;
  }
  Set<TreeFileArtifact> registeredContents=outputDirectoryListings.get(artifact);
  if (registeredContents != null) {
    Set<PathFragment> paths=null;
    try {
      paths=TreeArtifactValue.explodeDirectory(artifact);
    }
 catch (    TreeArtifactException e) {
      throw new IllegalStateException(e);
    }
    Set<TreeFileArtifact> diskFiles=ActionInputHelper.asTreeFileArtifacts(artifact,paths);
    if (!diskFiles.equals(registeredContents)) {
      Set<TreeFileArtifact> missingFiles=Sets.difference(registeredContents,diskFiles);
      if (!missingFiles.isEmpty()) {
        throw new IllegalStateException("Output file " + missingFiles.iterator().next() + " was registered, but not present on disk");
      }
      Set<TreeFileArtifact> extraFiles=Sets.difference(diskFiles,registeredContents);
      throw new IllegalStateException("File " + extraFiles.iterator().next().getParentRelativePath() + ", present in TreeArtifact "+ artifact+ ", was not registered");
    }
    value=constructTreeArtifactValue(registeredContents);
  }
 else {
    value=constructTreeArtifactValueFromFilesystem(artifact);
  }
  TreeArtifactValue oldValue=outputTreeArtifactData.putIfAbsent(artifact,value);
  checkInconsistentData(artifact,oldValue,value);
  return value;
}
