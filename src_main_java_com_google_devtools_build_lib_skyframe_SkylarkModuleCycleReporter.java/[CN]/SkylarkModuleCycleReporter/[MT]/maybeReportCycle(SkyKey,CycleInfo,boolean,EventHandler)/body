{
  ImmutableList<SkyKey> pathToCycle=cycleInfo.getPathToCycle();
  if (pathToCycle.size() == 0) {
    return false;
  }
  SkyKey lastPathElement=cycleInfo.getPathToCycle().get(pathToCycle.size() - 1);
  if (alreadyReported) {
    return true;
  }
 else   if (Iterables.all(cycleInfo.getCycle(),IS_SKYLARK_MODULE_SKY_KEY) && IS_PACKAGE_SKY_KEY.apply(lastPathElement)) {
    StringBuilder cycleMessage=new StringBuilder().append(((PackageIdentifier)lastPathElement.argument()).toString() + "/BUILD: ").append("cycle in referenced extension files: ");
    AbstractLabelCycleReporter.printCycle(cycleInfo.getCycle(),cycleMessage,new Function<SkyKey,String>(){
      @Override public String apply(      SkyKey input){
        return ((PackageIdentifier)input.argument()).toString();
      }
    }
);
    eventHandler.handle(Event.error(null,cycleMessage.toString()));
    return true;
  }
  return false;
}
