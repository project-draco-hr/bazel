{
  ImmutableList<SkyKey> pathToCycle=cycleInfo.getPathToCycle();
  ImmutableList<SkyKey> cycle=cycleInfo.getCycle();
  if (pathToCycle.isEmpty()) {
    return false;
  }
  SkyKey lastPathElement=pathToCycle.get(pathToCycle.size() - 1);
  if (alreadyReported) {
    return true;
  }
 else   if (Iterables.all(cycle,IS_SKYLARK_MODULE_SKY_KEY) && IS_PACKAGE_SKY_KEY.apply(lastPathElement)) {
    StringBuilder cycleMessage=new StringBuilder().append(lastPathElement.argument()).append("/BUILD: ").append("cycle in referenced extension files: ");
    AbstractLabelCycleReporter.printCycle(cycleInfo.getCycle(),cycleMessage,new Function<SkyKey,String>(){
      @Override public String apply(      SkyKey input){
        return ((SkylarkImportLookupValue.SkylarkImportLookupKey)input.argument()).importLabel.toString();
      }
    }
);
    eventHandler.handle(Event.error(null,cycleMessage.toString()));
    return true;
  }
 else   if (Iterables.any(cycle,IS_PACKAGE_LOOKUP) && Iterables.any(cycle,IS_WORKSPACE_FILE) && (IS_REPOSITORY_DIRECTORY.apply(lastPathElement) || IS_PACKAGE_SKY_KEY.apply(lastPathElement))) {
    Label fileLabel=(Label)Iterables.getLast(Iterables.filter(cycle,IS_AST_FILE_LOOKUP)).argument();
    String repositoryName=fileLabel.getPackageIdentifier().getRepository().strippedName();
    eventHandler.handle(Event.error(null,"Failed to load Skylark extension '" + fileLabel.toString() + "'.\n"+ "It usually happens when the repository is not defined prior to being used.\n"+ "Maybe repository '"+ repositoryName+ "' was defined later in your WORKSPACE file?"));
    return true;
  }
  return false;
}
