def __init__(self, names, desc, message_options):
    self.name = names
    self.fields = []
    self.oneofs = {}
    no_unions = []
    if message_options.msgid:
        self.msgid = message_options.msgid
    if hasattr(desc, u'oneof_decl'):
        for (i, f) in enumerate(desc.oneof_decl):
            oneof_options = get_nanopb_suboptions(desc, message_options, (self.name + f.name))
            if oneof_options.no_unions:
                no_unions.append(i)
            elif (oneof_options.type == nanopb_pb2.FT_IGNORE):
                pass
            else:
                oneof = OneOf(self.name, f)
                self.oneofs[i] = oneof
                self.fields.append(oneof)
    for f in desc.field:
        field_options = get_nanopb_suboptions(f, message_options, (self.name + f.name))
        if (field_options.type == nanopb_pb2.FT_IGNORE):
            continue
        field = Field(self.name, f, field_options)
        if (hasattr(f, u'oneof_index') and f.HasField(u'oneof_index') and (f.oneof_index not in no_unions)):
            if (f.oneof_index in self.oneofs):
                self.oneofs[f.oneof_index].add_field(field)
        else:
            self.fields.append(field)
    if (len(desc.extension_range) > 0):
        field_options = get_nanopb_suboptions(desc, message_options, (self.name + u'extensions'))
        range_start = min([r.start for r in desc.extension_range])
        if (field_options.type != nanopb_pb2.FT_IGNORE):
            self.fields.append(ExtensionRange(self.name, range_start, field_options))
    self.packed = message_options.packed_struct
    self.ordered_fields = self.fields[:]
    self.ordered_fields.sort()
