def toposort2(data):
    u'Topological sort.\n    From http://code.activestate.com/recipes/577413-topological-sort/\n    This function is under the MIT license.\n    '
    for (k, v) in list(data.items()):
        v.discard(k)
    extra_items_in_deps = (reduce(set.union, list(data.values()), set()) - set(data.keys()))
    data.update(dict([(item, set()) for item in extra_items_in_deps]))
    while True:
        ordered = set((item for (item, dep) in list(data.items()) if (not dep)))
        if (not ordered):
            break
        for item in sorted(ordered):
            yield item
        data = dict([(item, (dep - ordered)) for (item, dep) in list(data.items()) if (item not in ordered)])
    assert (not data), (u'A cyclic dependency exists amongst %r' % data)
