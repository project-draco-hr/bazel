{
  Map<Artifact,FileValue> fileData=new HashMap<>();
  Map<TreeFileArtifact,FileArtifactValue> treeArtifactData=new HashMap<>();
  Action action=(Action)skyKey.argument();
  Artifact output=Iterables.getOnlyElement(action.getOutputs());
  for (  PathFragment subpath : testTreeArtifactContents) {
    try {
      TreeFileArtifact suboutput=ActionInputHelper.treeFileArtifact(output,subpath);
      FileValue fileValue=ActionMetadataHandler.fileValueFromArtifact(suboutput,null,null);
      fileData.put(suboutput,fileValue);
      byte[] digest=DigestUtils.getDigestOrFail(suboutput.getPath(),1);
      treeArtifactData.put(suboutput,FileArtifactValue.createWithDigest(suboutput.getPath(),digest,fileValue.getSize()));
    }
 catch (    IOException e) {
      throw new SkyFunctionException(e,Transience.TRANSIENT){
      }
;
    }
  }
  TreeArtifactValue treeArtifactValue=TreeArtifactValue.create(treeArtifactData);
  return new ActionExecutionValue(fileData,ImmutableMap.of(output,treeArtifactValue),ImmutableMap.<Artifact,FileArtifactValue>of());
}
