{
  Preconditions.checkState(outputRoots == null ^ directories == null);
  this.actionsEnabled=!actionsDisabled;
  this.fragments=ImmutableMap.copyOf(fragmentsMap);
  this.skylarkVisibleFragments=buildIndexOfVisibleFragments();
  this.buildOptions=buildOptions;
  this.options=buildOptions.get(Options.class);
  Map<String,String> testEnv=new TreeMap<>();
  for (  Map.Entry<String,String> entry : this.options.testEnvironment) {
    if (entry.getValue() != null) {
      testEnv.put(entry.getKey(),entry.getValue());
    }
  }
  this.testEnvironment=ImmutableMap.copyOf(testEnv);
  this.mnemonic=buildMnemonic();
  String outputDirName=(options.outputDirectoryName != null) ? options.outputDirectoryName : mnemonic;
  this.platformName=buildPlatformName();
  this.shExecutable=collectExecutables().get("sh");
  this.outputRoots=outputRoots != null ? outputRoots : new OutputRoots(directories,outputDirName);
  ImmutableSet.Builder<Label> coverageLabelsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<Label> coverageReportGeneratorLabelsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<Label> gcovLabelsBuilder=ImmutableSet.builder();
  for (  Fragment fragment : fragments.values()) {
    coverageLabelsBuilder.addAll(fragment.getCoverageLabels());
    coverageReportGeneratorLabelsBuilder.addAll(fragment.getCoverageReportGeneratorLabels());
    gcovLabelsBuilder.addAll(fragment.getGcovLabels());
  }
  this.coverageLabels=coverageLabelsBuilder.build();
  this.coverageReportGeneratorLabels=coverageReportGeneratorLabelsBuilder.build();
  this.gcovLabels=gcovLabelsBuilder.build();
  this.defaultShellEnvironment=setupShellEnvironment();
  this.transitiveOptionsMap=computeOptionsMap(buildOptions,fragments.values());
  ImmutableMap.Builder<String,String> globalMakeEnvBuilder=ImmutableMap.builder();
  for (  Fragment fragment : fragments.values()) {
    fragment.addGlobalMakeVariables(globalMakeEnvBuilder);
  }
  globalMakeEnvBuilder.put("COMPILATION_MODE",options.compilationMode.toString());
  globalMakeEnvBuilder.put("BINMODE","-" + ((options.compilationMode == CompilationMode.FASTBUILD) ? "dbg" : options.compilationMode.toString()));
  globalMakeEnvBuilder.put("BINDIR",getBinDirectory().getExecPath().getPathString());
  globalMakeEnvBuilder.put("GENDIR",getGenfilesDirectory().getExecPath().getPathString());
  globalMakeEnv=globalMakeEnvBuilder.build();
  checksum=Fingerprint.md5Digest(buildOptions.computeCacheKey());
}
