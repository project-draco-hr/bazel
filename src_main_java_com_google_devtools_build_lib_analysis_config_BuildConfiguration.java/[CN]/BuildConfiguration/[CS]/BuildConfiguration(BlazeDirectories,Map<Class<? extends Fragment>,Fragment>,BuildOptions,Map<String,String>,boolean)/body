{
  this.actionsEnabled=!actionsDisabled;
  this.fragments=ImmutableMap.copyOf(fragmentsMap);
  this.buildOptions=buildOptions;
  this.options=buildOptions.get(Options.class);
  this.testEnvironment=ImmutableMap.copyOf(testEnv);
  this.mnemonic=buildMnemonic();
  String outputDirName=(options.shortName != null) ? options.shortName : mnemonic;
  this.shortName=buildShortName(outputDirName);
  this.platformName=buildPlatformName();
  this.shExecutable=collectExecutables().get("sh");
  this.outputRoots=new OutputRoots(directories,outputDirName);
  ImmutableSet.Builder<Label> coverageLabelsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<Label> coverageReportGeneratorLabelsBuilder=ImmutableSet.builder();
  for (  Fragment fragment : fragments.values()) {
    coverageLabelsBuilder.addAll(fragment.getCoverageLabels());
    coverageReportGeneratorLabelsBuilder.addAll(fragment.getCoverageReportGeneratorLabels());
  }
  this.coverageLabels=coverageLabelsBuilder.build();
  this.coverageReportGeneratorLabels=coverageReportGeneratorLabelsBuilder.build();
  this.defaultShellEnvironment=setupShellEnvironment();
  this.transitiveOptionsMap=computeOptionsMap(buildOptions,fragments.values());
  ImmutableMap.Builder<String,String> globalMakeEnvBuilder=ImmutableMap.builder();
  for (  Fragment fragment : fragments.values()) {
    fragment.addGlobalMakeVariables(globalMakeEnvBuilder);
  }
  globalMakeEnvBuilder.put("COMPILATION_MODE",options.compilationMode.toString());
  globalMakeEnvBuilder.put("BINMODE","-" + ((options.compilationMode == CompilationMode.FASTBUILD) ? "dbg" : options.compilationMode.toString()));
  globalMakeEnvBuilder.put("BINDIR",getBinDirectory().getExecPath().getPathString());
  globalMakeEnvBuilder.put("INCDIR",getIncludeDirectory().getExecPath().getPathString());
  globalMakeEnvBuilder.put("GENDIR",getGenfilesDirectory().getExecPath().getPathString());
  globalMakeEnv=globalMakeEnvBuilder.build();
  cacheKey=computeCacheKey(directories,fragmentsMap,this.buildOptions,this.testEnvironment);
  shortCacheKey=shortName + "-" + Fingerprint.md5Digest(cacheKey);
}
