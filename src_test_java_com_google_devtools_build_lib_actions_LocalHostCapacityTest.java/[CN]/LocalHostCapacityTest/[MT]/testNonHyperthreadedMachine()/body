{
  String cpuinfoContent=StringUtilities.joinLines("processor\t: 0","vendor_id\t: GenuineIntel","cpu family\t: 15","model\t\t: 4","model name\t:               Intel(R) Pentium(R) 4 CPU 3.40GHz","stepping\t: 10","cpu MHz\t\t: 3400.000","cache size\t: 2048 KB","fpu\t\t: yes","fpu_exception\t: yes","cpuid level\t: 5","wp\t\t: yes","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca " + "cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm " + "syscall nx lm constant_tsc up pni monitor ds_cpl est cid cx16 "+ "xtpr lahf_lm","bogomips\t: 6803.83","clflush size\t: 64","cache_alignment\t: 128","address sizes\t: 36 bits physical, 48 bits virtual","power management:");
  String cpuinfoFile=scratch.file("test_cpuinfo_nonht",cpuinfoContent).getPathString();
  String meminfoContent=StringUtilities.joinLines("MemTotal:      3091732 kB","MemFree:       2167344 kB","Buffers:         60644 kB","Cached:         509940 kB","SwapCached:          0 kB","Active:         636892 kB","Inactive:       212760 kB","HighTotal:           0 kB","HighFree:            0 kB","LowTotal:      3091732 kB","LowFree:       2167344 kB","SwapTotal:     9124880 kB","SwapFree:      9124880 kB","Dirty:               0 kB","Writeback:           0 kB","AnonPages:      279028 kB","Mapped:          54404 kB","Slab:            42820 kB","PageTables:       5184 kB","NFS_Unstable:        0 kB","Bounce:              0 kB","CommitLimit:  10670744 kB","Committed_AS:   665840 kB","VmallocTotal: 34359738367 kB","VmallocUsed:    300484 kB","VmallocChunk: 34359437307 kB","HugePages_Total:     0","HugePages_Free:      0","HugePages_Rsvd:      0","Hugepagesize:     2048 kB");
  String stat1Content=StringUtilities.joinLines("cpu 29793342 260290 3479274 636259369 6683218 656426 714057 0","cpu0 29793342 260290 3479274 636259369 6683218 656426 714057 0","intr 2870488853 2486517107 3 0 0 2 0 5 0 0 0 0 0 3 0 74363716 " + "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " + "0 0 52483586 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 973315 0 0 0 0 0 0 0 46 "+ "0 0 0 0 0 0 0 98792358 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 114339590 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 43019122 0 0 0 0 0","ctxt 15053799843","btime 1199289688","processes 25799993","procs_running 1","procs_blocked 0");
  String stat2Content=StringUtilities.joinLines("cpu 29794509 260290 3479474 636287862 6683283 656450 714087 0 0","cpu0 29794509 260290 3479474 636287862 6683283 656450 714087 0 0","intr 2870488853 2486517107 3 0 0 2 0 5 0 0 0 0 0 3 0 74363716 " + "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " + "0 0 52483586 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 973315 0 0 0 0 0 0 0 46 "+ "0 0 0 0 0 0 0 98792358 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 114339590 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 43019122 0 0 0 0 0","ctxt 15053799843","btime 1199289688","processes 25799993","procs_running 1","procs_blocked 0");
  String meminfoFile=scratch.file("test_meminfo_nonht",meminfoContent).getPathString();
  String stat1File=scratch.file("proc_stat_1",stat1Content).getPathString();
  String stat2File=scratch.file("proc_stat_2",stat2Content).getPathString();
  assertEquals(1,LocalHostCapacity.getLogicalCpuCount(cpuinfoContent));
  assertEquals(1,LocalHostCapacity.getPhysicalCpuCount(cpuinfoContent,1));
  assertEquals(1,LocalHostCapacity.getCoresPerCpu(cpuinfoContent));
  ResourceSet capacity=LocalHostCapacity.getLocalHostCapacity(cpuinfoFile,meminfoFile);
  assertEquals(1.0,capacity.getCpuUsage(),0.01);
  assertEquals(3091.732,capacity.getMemoryMb(),0.1);
  LocalHostCapacity.setLocalHostCapacity(capacity);
  assertSame(capacity,LocalHostCapacity.getLocalHostCapacity());
  Clock mockedClock=new Clock(){
    private int callCount=0;
    @Override public long currentTimeMillis(){
      throw new AssertionError("unexpected method call");
    }
    @Override public long nanoTime(){
      callCount++;
      if (callCount == 1) {
        return 0;
      }
 else       if (callCount == 2) {
        return 100 * 1000000;
      }
 else       if (callCount == 3) {
        return 200 * 1000000;
      }
 else {
        throw new AssertionError("unexpected method call");
      }
    }
  }
;
  LocalHostCapacity.FreeResources freeStats=LocalHostCapacity.getFreeResources(mockedClock,meminfoFile,stat1File,null);
  assertNotNull(freeStats);
  assertEquals(2356.756,freeStats.getFreeMb(),0.001);
  assertEquals(0.0,freeStats.getAvgFreeCpu(),0);
  assertTrue(freeStats.getReadingAge() > 50);
  freeStats=LocalHostCapacity.getFreeResources(mockedClock,meminfoFile,stat2File,freeStats);
  assertNotNull(freeStats);
  assertEquals(2356.756,freeStats.getFreeMb(),0.001);
  assertTrue(freeStats.getInterval() > 100);
  assertEquals(0.95,freeStats.getAvgFreeCpu(),0.001);
}
