{
  String cpuinfoContent=StringUtilities.joinLines("processor\t: 0","vendor_id\t: AuthenticAMD","cpu family\t: 15","model\t\t: 65","model name\t: Dual-Core AMD Opteron(tm) Processor 8214 HE","stepping\t: 2","cpu MHz\t\t: 2200.000","cache size\t: 1024 KB","physical id\t: 0","siblings\t: 2","core id\t\t: 0","cpu cores\t: 2","fpu\t\t: yes","fpu_exception\t: yes","cpuid level\t: 1","wp\t\t: yes","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr " + "pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall " + "nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm "+ "cmp_legacy svm cr8_legacy","bogomips\t: 4425.84","TLB size\t: 1024 4K pages","clflush size\t: 64","cache_alignment\t: 64","address sizes\t: 40 bits physical, 48 bits virtual","power management: ts fid vid ttp tm stc","","processor\t: 1","vendor_id\t: AuthenticAMD","cpu family\t: 15","model\t\t: 65","model name\t: Dual-Core AMD Opteron(tm) Processor 8214 HE","stepping\t: 2","cpu MHz\t\t: 2200.000","cache size\t: 1024 KB","physical id\t: 0","siblings\t: 2","core id\t\t: 1","cpu cores\t: 2","fpu\t\t: yes","fpu_exception\t: yes","cpuid level\t: 1","wp\t\t: yes","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr " + "pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall " + "nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm "+ "cmp_legacy svm cr8_legacy","bogomips\t: 4460.61","TLB size\t: 1024 4K pages","clflush size\t: 64","cache_alignment\t: 64","address sizes\t: 40 bits physical, 48 bits virtual","power management: ts fid vid ttp tm stc","","processor\t: 2","vendor_id\t: AuthenticAMD","cpu family\t: 15","model\t\t: 65","model name\t: Dual-Core AMD Opteron(tm) Processor 8214 HE","stepping\t: 2","cpu MHz\t\t: 2200.000","cache size\t: 1024 KB","physical id\t: 1","siblings\t: 2","core id\t\t: 0","cpu cores\t: 2","fpu\t\t: yes","fpu_exception\t: yes","cpuid level\t: 1","wp\t\t: yes","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr " + "pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall " + "nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm "+ "cmp_legacy svm cr8_legacy","bogomips\t: 4420.45","TLB size\t: 1024 4K pages","clflush size\t: 64","cache_alignment\t: 64","address sizes\t: 40 bits physical, 48 bits virtual","power management: ts fid vid ttp tm stc","","processor\t: 3","vendor_id\t: AuthenticAMD","cpu family\t: 15","model\t\t: 65","model name\t: Dual-Core AMD Opteron(tm) Processor 8214 HE","stepping\t: 2","cpu MHz\t\t: 2200.000","cache size\t: 1024 KB","physical id\t: 1","siblings\t: 2","core id\t\t: 1","cpu cores\t: 2","fpu\t\t: yes","fpu_exception\t: yes","cpuid level\t: 1","wp\t\t: yes","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr " + "pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall " + "nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm "+ "cmp_legacy svm cr8_legacy","bogomips\t: 4460.39","TLB size\t: 1024 4K pages","clflush size\t: 64","cache_alignment\t: 64","address sizes\t: 40 bits physical, 48 bits virtual","power management: ts fid vid ttp tm stc","");
  String cpuinfoFile=scratch.file("test_cpuinfo_amd",cpuinfoContent).getPathString();
  String meminfoContent=StringUtilities.joinLines("MemTotal:      8223956 kB","MemFree:       3670396 kB","Buffers:        374068 kB","Cached:        3366980 kB","SwapCached:          0 kB","Active:        3275860 kB","Inactive:       737816 kB","HighTotal:           0 kB","HighFree:            0 kB","LowTotal:      8223956 kB","LowFree:       3670396 kB","SwapTotal:     6024332 kB","SwapFree:      6024332 kB","Dirty:              84 kB","Writeback:           0 kB","AnonPages:      272308 kB","Mapped:          62604 kB","Slab:           506140 kB","PageTables:       4608 kB","NFS_Unstable:        0 kB","Bounce:              0 kB","CommitLimit:  10136308 kB","Committed_AS:   600672 kB","VmallocTotal: 34359738367 kB","VmallocUsed:    299068 kB","VmallocChunk: 34359438843 kB","HugePages_Total:     0","HugePages_Free:      0","HugePages_Rsvd:      0","Hugepagesize:     2048 kB");
  String meminfoFile=scratch.file("test_meminfo_amd",meminfoContent).getPathString();
  assertEquals(4,LocalHostCapacity.getLogicalCpuCount(cpuinfoContent));
  assertEquals(2,LocalHostCapacity.getPhysicalCpuCount(cpuinfoContent,4));
  assertEquals(2,LocalHostCapacity.getCoresPerCpu(cpuinfoContent));
  ResourceSet capacity=LocalHostCapacity.getLocalHostCapacity(cpuinfoFile,meminfoFile);
  assertEquals(capacity.getCpuUsage(),4.0,0.01);
  assertEquals(8223.956,capacity.getMemoryMb(),0.1);
}
