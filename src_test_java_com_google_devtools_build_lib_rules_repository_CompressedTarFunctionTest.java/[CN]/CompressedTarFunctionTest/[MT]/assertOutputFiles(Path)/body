{
  assertThat(outputDir.exists()).isTrue();
  assertThat(outputDir.getRelative(REGULAR_FILE_NAME).exists()).isTrue();
  assertThat(outputDir.getRelative(REGULAR_FILE_NAME).getFileSize()).isNotEqualTo(0);
  assertThat(outputDir.getRelative(REGULAR_FILE_NAME).isSymbolicLink()).isFalse();
  assertThat(outputDir.getRelative(HARD_LINK_FILE_NAME).exists()).isTrue();
  assertThat(outputDir.getRelative(HARD_LINK_FILE_NAME).getFileSize()).isNotEqualTo(0);
  assertThat(outputDir.getRelative(HARD_LINK_FILE_NAME).isSymbolicLink()).isFalse();
  assertThat(outputDir.getRelative(RELATIVE_SYMBOLIC_LINK_FILE_NAME).exists()).isTrue();
  assertThat(outputDir.getRelative(RELATIVE_SYMBOLIC_LINK_FILE_NAME).getFileSize()).isNotEqualTo(0);
  assertThat(outputDir.getRelative(RELATIVE_SYMBOLIC_LINK_FILE_NAME).isSymbolicLink()).isTrue();
  assertThat(outputDir.getRelative(ABSOLUTE_SYMBOLIC_LINK_FILE_NAME).exists()).isTrue();
  assertThat(outputDir.getRelative(ABSOLUTE_SYMBOLIC_LINK_FILE_NAME).getFileSize()).isNotEqualTo(0);
  assertThat(outputDir.getRelative(ABSOLUTE_SYMBOLIC_LINK_FILE_NAME).isSymbolicLink()).isTrue();
  assertThat(Files.isSameFile(java.nio.file.Paths.get(outputDir.getRelative(REGULAR_FILE_NAME).toString()),java.nio.file.Paths.get(outputDir.getRelative(HARD_LINK_FILE_NAME).toString()))).isTrue();
  assertThat(Files.isSameFile(java.nio.file.Paths.get(outputDir.getRelative(REGULAR_FILE_NAME).toString()),java.nio.file.Paths.get(outputDir.getRelative(RELATIVE_SYMBOLIC_LINK_FILE_NAME).toString()))).isTrue();
  assertThat(Files.isSameFile(java.nio.file.Paths.get(outputDir.getRelative(REGULAR_FILE_NAME).toString()),java.nio.file.Paths.get(outputDir.getRelative(ABSOLUTE_SYMBOLIC_LINK_FILE_NAME).toString()))).isTrue();
}
