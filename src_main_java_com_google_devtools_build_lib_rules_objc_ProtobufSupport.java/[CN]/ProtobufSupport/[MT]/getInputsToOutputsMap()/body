{
  Iterable<ObjcProtoProvider> objcProtoProviders=getObjcProtoProviders();
  Iterable<ProtoSourcesProvider> protoProviders=getProtoSourcesProviders();
  ImmutableList.Builder<NestedSet<Artifact>> protoSets=new ImmutableList.Builder<NestedSet<Artifact>>();
  for (  ObjcProtoProvider objcProtoProvider : objcProtoProviders) {
    protoSets.addAll(objcProtoProvider.getProtoGroups());
  }
  for (  ProtoSourcesProvider protoProvider : protoProviders) {
    protoSets.add(protoProvider.getTransitiveProtoSources());
  }
  HashMap<Artifact,Set<Artifact>> protoToGroupMap=new HashMap<>();
  for (  NestedSet<Artifact> nestedProtoSet : protoSets.build()) {
    ImmutableSet<Artifact> protoSet=ImmutableSet.copyOf(nestedProtoSet.toSet());
    for (    Artifact proto : protoSet) {
      if (attributes.isProtoWellKnown(proto)) {
        continue;
      }
      if (!protoToGroupMap.containsKey(proto)) {
        protoToGroupMap.put(proto,protoSet);
      }
 else {
        protoToGroupMap.put(proto,Sets.intersection(protoSet,protoToGroupMap.get(proto)));
      }
    }
  }
  ImmutableSetMultimap.Builder<ImmutableSet<Artifact>,Artifact> inputsToOutputsMapBuilder=ImmutableSetMultimap.builder();
  for (  Artifact proto : protoToGroupMap.keySet()) {
    inputsToOutputsMapBuilder.put(ImmutableSet.copyOf(protoToGroupMap.get(proto)),proto);
  }
  return inputsToOutputsMapBuilder.build();
}
