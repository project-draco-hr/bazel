def _queue_manangement_worker(executor_reference, processes, pending_work_items, work_ids_queue, call_queue, result_queue, shutdown_process_event):
    'Manages the communication between this process and the worker processes.\n\n    This function is run in a local thread.\n\n    Args:\n        executor_reference: A weakref.ref to the ProcessPoolExecutor that owns\n            this thread. Used to determine if the ProcessPoolExecutor has been\n            garbage collected and that this function can exit.\n        process: A list of the multiprocessing.Process instances used as\n            workers.\n        pending_work_items: A dict mapping work ids to _WorkItems e.g.\n            {5: <_WorkItem...>, 6: <_WorkItem...>, ...}\n        work_ids_queue: A queue.Queue of work ids e.g. Queue([5, 6, ...]).\n        call_queue: A multiprocessing.Queue that will be filled with _CallItems\n            derived from _WorkItems for processing by the process workers.\n        result_queue: A multiprocessing.Queue of _ResultItems generated by the\n            process workers.\n        shutdown_process_event: A multiprocessing.Event used to signal the\n            process workers that they should exit when their work queue is\n            empty.\n    '
    while True:
        _add_call_item_to_queue(pending_work_items, work_ids_queue, call_queue)
        try:
            result_item = result_queue.get(block=True, timeout=0.1)
        except queue.Empty:
            executor = executor_reference()
            if (_shutdown or (executor is None) or executor._shutdown_thread):
                if (not pending_work_items):
                    shutdown_process_event.set()
                    for p in processes:
                        p.join()
                    return
            del executor
        else:
            work_item = pending_work_items[result_item.work_id]
            del pending_work_items[result_item.work_id]
            if result_item.exception:
                work_item.future.set_exception(result_item.exception)
            else:
                work_item.future.set_result(result_item.result)
