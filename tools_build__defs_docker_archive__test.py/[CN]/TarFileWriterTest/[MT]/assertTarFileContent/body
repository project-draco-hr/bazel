def assertTarFileContent(self, tar, content):
    'Assert that tarfile contains exactly the entry described by `content`.\n\n    Args:\n        tar: the path to the TAR file to test.\n        content: an array describing the expected content of the TAR file.\n            Each entry in that list should be a dictionary where each field\n            is a field to test in the corresponding TarInfo. For\n            testing the presence of a file "x", then the entry could simply\n            be `{"name": "x"}`, the missing field will be ignored. To match\n            the content of a file entry, use the key "data".\n    '
    with tarfile.open(tar, 'r:') as f:
        i = 0
        for current in f:
            error_msg = ('Extraneous file at end of archive %s: %s' % (tar, current.name))
            self.assertTrue((i < len(content)), error_msg)
            for (k, v) in content[i].items():
                if (k == 'data'):
                    value = f.extractfile(current).read()
                else:
                    value = getattr(current, k)
                error_msg = ' '.join([('Value `%s` for key `%s` of file' % (value, k)), ('%s in archive %s does' % (current.name, tar)), ('not match expected value `%s`' % v)])
                self.assertEqual(value, v, error_msg)
            i += 1
        if (i < len(content)):
            self.fail(('Missing file %s in archive %s' % (content[i], tar)))
