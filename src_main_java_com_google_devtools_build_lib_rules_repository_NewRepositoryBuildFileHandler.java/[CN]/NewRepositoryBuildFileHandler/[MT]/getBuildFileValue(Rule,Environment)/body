{
  AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
  String buildFileAttribute=mapper.get("build_file",Type.STRING);
  RootedPath rootedBuild;
  if (LabelValidator.isAbsolute(buildFileAttribute)) {
    try {
      Label label=Label.parseAbsolute(buildFileAttribute);
      SkyKey pkgSkyKey=PackageLookupValue.key(label.getPackageIdentifier());
      PackageLookupValue pkgLookupValue=(PackageLookupValue)env.getValue(pkgSkyKey);
      if (pkgLookupValue == null) {
        return null;
      }
      if (!pkgLookupValue.packageExists()) {
        throw new RepositoryFunctionException(new EvalException(rule.getLocation(),"Unable to load package for " + buildFileAttribute + ": not found."),Transience.PERSISTENT);
      }
      Path packageRoot=pkgLookupValue.getRoot();
      rootedBuild=RootedPath.toRootedPath(packageRoot,label.toPathFragment());
    }
 catch (    LabelSyntaxException ex) {
      throw new RepositoryFunctionException(new EvalException(rule.getLocation(),String.format("In %s the 'build_file' attribute does not specify a valid label: %s",rule,ex.getMessage())),Transience.PERSISTENT);
    }
  }
 else {
    PathFragment buildFile=new PathFragment(buildFileAttribute);
    Path buildFileTarget=workspacePath.getRelative(buildFile);
    if (!buildFileTarget.exists()) {
      throw new RepositoryFunctionException(new EvalException(rule.getLocation(),String.format("In %s the 'build_file' attribute does not specify an existing file " + "(%s does not exist)",rule,buildFileTarget)),Transience.PERSISTENT);
    }
    if (buildFile.isAbsolute()) {
      rootedBuild=RootedPath.toRootedPath(buildFileTarget.getParentDirectory(),new PathFragment(buildFileTarget.getBaseName()));
    }
 else {
      rootedBuild=RootedPath.toRootedPath(workspacePath,buildFile);
    }
  }
  SkyKey buildFileKey=FileValue.key(rootedBuild);
  FileValue buildFileValue;
  try {
    buildFileValue=(FileValue)env.getValueOrThrow(buildFileKey,IOException.class,FileSymlinkException.class,InconsistentFilesystemException.class);
    if (buildFileValue == null) {
      return null;
    }
  }
 catch (  IOException|FileSymlinkException|InconsistentFilesystemException e) {
    throw new RepositoryFunctionException(new IOException("Cannot lookup " + buildFileAttribute + ": "+ e.getMessage()),Transience.TRANSIENT);
  }
  return buildFileValue;
}
