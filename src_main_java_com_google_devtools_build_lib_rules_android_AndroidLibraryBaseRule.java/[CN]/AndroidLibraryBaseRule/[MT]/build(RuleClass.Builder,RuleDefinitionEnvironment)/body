{
  return builder.add(attr("srcs",LABEL_LIST).direct_compile_time_input().allowedFileTypes(JavaSemantics.JAVA_SOURCE,JavaSemantics.JAR,JavaSemantics.SOURCE_JAR)).override(builder.copy("deps").allowedRuleClasses(AndroidRuleClasses.ALLOWED_DEPENDENCIES).allowedFileTypes()).add(attr("resources",LABEL).allowedFileTypes().allowedRuleClasses("android_resources")).add(attr("alwayslink",BOOLEAN).undocumented("purely informational for now")).add(attr("neverlink",BOOLEAN).value(false)).add(attr("idl_import_root",STRING)).add(attr("idl_srcs",LABEL_LIST).direct_compile_time_input().allowedFileTypes(AndroidRuleClasses.ANDROID_IDL)).add(attr("idl_parcelables",LABEL_LIST).direct_compile_time_input().allowedFileTypes(AndroidRuleClasses.ANDROID_IDL)).add(attr("proguard_specs",LABEL_LIST).legacyAllowAnyFileType()).add(attr("$proguard_whitelister",LABEL).cfg(HOST).exec().value(new Attribute.ComputedDefault(){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.isAttributeValueExplicitlySpecified("proguard_specs") ? env.getLabel("//tools/android:proguard_whitelister") : null;
    }
  }
)).add(attr("$android_manifest_merge_tool",LABEL).cfg(HOST).exec().value(env.getLabel(AndroidRuleClasses.MANIFEST_MERGE_TOOL_LABEL))).build();
}
