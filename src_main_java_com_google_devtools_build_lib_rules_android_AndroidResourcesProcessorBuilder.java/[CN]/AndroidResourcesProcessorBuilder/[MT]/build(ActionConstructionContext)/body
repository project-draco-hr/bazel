{
  List<Artifact> outs=new ArrayList<>();
  CustomCommandLine.Builder builder=new CustomCommandLine.Builder();
  builder.addExecPath("--aapt",sdk.getAapt().getExecutable());
  NestedSetBuilder<Artifact> inputs=NestedSetBuilder.naiveLinkOrder();
  inputs.addAll(ruleContext.getExecutablePrerequisite("$android_resources_processor",Mode.HOST).getRunfilesSupport().getRunfilesArtifactsWithoutMiddlemen());
  builder.addExecPath("--annotationJar",sdk.getAnnotationsJar());
  inputs.add(sdk.getAnnotationsJar());
  builder.addExecPath("--androidJar",sdk.getAndroidJar());
  inputs.add(sdk.getAndroidJar());
  builder.add("--primaryData").add(RESOURCE_CONTAINER_TO_ARG.apply(primary));
  inputs.addTransitive(RESOURCE_CONTAINER_TO_ARTIFACTS.apply(primary));
  if (dependencies != null) {
    if (!dependencies.getTransitiveResources().isEmpty()) {
      builder.addJoinStrings("--data",",",Iterables.unmodifiableIterable(Iterables.transform(dependencies.getTransitiveResources(),RESOURCE_DEP_TO_ARG)));
    }
    if (!dependencies.getDirectResources().isEmpty()) {
      builder.addJoinStrings("--directData",",",Iterables.unmodifiableIterable(Iterables.transform(dependencies.getDirectResources(),RESOURCE_DEP_TO_ARG)));
    }
    inputs.addTransitive(NestedSetBuilder.wrap(Order.NAIVE_LINK_ORDER,FluentIterable.from(dependencies.getResources()).transformAndConcat(RESOURCE_DEP_TO_ARTIFACTS)));
  }
  if (rTxtOut != null) {
    builder.addExecPath("--rOutput",rTxtOut);
    outs.add(rTxtOut);
    builder.add("--packageType").add("LIBRARY");
  }
  if (symbolsTxt != null) {
    builder.addExecPath("--symbolsTxtOut",symbolsTxt);
    outs.add(symbolsTxt);
  }
  if (sourceJarOut != null) {
    builder.addExecPath("--srcJarOutput",sourceJarOut);
    outs.add(sourceJarOut);
  }
  if (proguardOut != null) {
    builder.addExecPath("--proguardOutput",proguardOut);
    outs.add(proguardOut);
  }
  if (manifestOut != null) {
    builder.addExecPath("--manifestOutput",manifestOut);
    outs.add(manifestOut);
  }
  if (apkOut != null) {
    builder.addExecPath("--packagePath",apkOut);
    outs.add(apkOut);
  }
  if (!resourceConfigs.isEmpty()) {
    builder.addJoinStrings("--resourceConfigs",",",resourceConfigs);
  }
  if (!densities.isEmpty()) {
    builder.addJoinStrings("--densities",",",densities);
  }
  if (!uncompressedExtensions.isEmpty()) {
    builder.addJoinStrings("--uncompressedExtensions",",",uncompressedExtensions);
  }
  if (!assetsToIgnore.isEmpty()) {
    builder.addJoinStrings("--assetsToIgnore",",",assetsToIgnore);
  }
  if (debug) {
    builder.add("--debug");
  }
  if (versionCode != null) {
    builder.add("--versionCode").add(versionCode);
  }
  if (versionName != null) {
    builder.add("--versionName").add(versionName);
  }
  if (applicationId != null) {
    builder.add("--applicationId").add(applicationId);
  }
  if (!Strings.isNullOrEmpty(customJavaPackage)) {
    builder.add("--packageForR").add(customJavaPackage);
  }
  ruleContext.registerAction(this.spawnActionBuilder.addTool(sdk.getAapt()).addTransitiveInputs(inputs.build()).addOutputs(ImmutableList.<Artifact>copyOf(outs)).setCommandLine(builder.build()).setExecutable(ruleContext.getExecutablePrerequisite("$android_resources_processor",Mode.HOST)).setProgressMessage("Processing resources").setMnemonic("AndroidAapt").build(context));
  return new ResourceContainer(primary.getLabel(),primary.getJavaPackage(),primary.getRenameManifestPackage(),primary.getConstantsInlined(),apkOut != null ? apkOut : primary.getApk(),manifestOut != null ? manifestOut : primary.getManifest(),sourceJarOut,primary.getArtifacts(ResourceType.ASSETS),primary.getArtifacts(ResourceType.RESOURCES),primary.getRoots(ResourceType.ASSETS),primary.getRoots(ResourceType.RESOURCES),primary.isManifestExported(),rTxtOut,symbolsTxt);
}
