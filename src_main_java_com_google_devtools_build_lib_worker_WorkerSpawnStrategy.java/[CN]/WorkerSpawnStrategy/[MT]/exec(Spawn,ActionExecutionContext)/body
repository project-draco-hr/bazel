{
  Executor executor=actionExecutionContext.getExecutor();
  EventHandler eventHandler=executor.getEventHandler();
  StandaloneSpawnStrategy standaloneStrategy=Preconditions.checkNotNull(executor.getContext(StandaloneSpawnStrategy.class));
  if (executor.reportsSubcommands()) {
    executor.reportSubcommand(Label.print(spawn.getOwner().getLabel()) + " [" + spawn.getResourceOwner().prettyPrint()+ "]",spawn.asShellCommand(executor.getExecRoot()));
  }
  if (!Iterables.getLast(spawn.getArguments()).startsWith("@")) {
    if (options.workerVerbose) {
      eventHandler.handle(Event.info(REASON_NO_FLAGFILE));
    }
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  if (Iterables.isEmpty(spawn.getToolFiles())) {
    if (options.workerVerbose) {
      eventHandler.handle(Event.info(REASON_NO_TOOLS));
    }
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  executor.getEventBus().post(ActionStatusMessage.runningStrategy(spawn.getResourceOwner(),"worker"));
  FileOutErr outErr=actionExecutionContext.getFileOutErr();
  ImmutableList<String> args=ImmutableList.<String>builder().addAll(spawn.getArguments().subList(0,spawn.getArguments().size() - 1)).add("--persistent_worker").build();
  ImmutableMap<String,String> env=spawn.getEnvironment();
  try {
    ActionInputFileCache inputFileCache=actionExecutionContext.getActionInputFileCache();
    HashCode workerFilesHash=combineActionInputHashes(spawn.getToolFiles(),inputFileCache);
    WorkerKey key=new WorkerKey(args,env,execRoot,spawn.getMnemonic(),workerFilesHash);
    WorkRequest.Builder requestBuilder=WorkRequest.newBuilder();
    expandArgument(requestBuilder,Iterables.getLast(spawn.getArguments()));
    List<ActionInput> inputs=ActionInputHelper.expandArtifacts(spawn.getInputFiles(),actionExecutionContext.getArtifactExpander());
    for (    ActionInput input : inputs) {
      ByteString digest=inputFileCache.getDigest(input);
      if (digest == null) {
        digest=ByteString.EMPTY;
      }
      requestBuilder.addInputsBuilder().setPath(input.getExecPathString()).setDigest(digest).build();
    }
    WorkResponse response=execInWorker(eventHandler,key,requestBuilder.build(),maxRetries);
    outErr.getErrorStream().write(response.getOutputBytes().toByteArray());
    if (response.getExitCode() != 0) {
      throw new UserExecException(String.format("Worker process sent response with exit code: %d.",response.getExitCode()));
    }
  }
 catch (  IOException e) {
    String message=CommandFailureUtils.describeCommandFailure(verboseFailures,spawn.getArguments(),env,execRoot.getPathString());
    throw new UserExecException(message,e);
  }
}
