{
  buildRequest=event.getRequest();
  RemoteOptions options=buildRequest.getOptions(RemoteOptions.class);
  ConcurrentMapActionCache cache=null;
  if (actionCache == null) {
    if (options.hazelcastNode != null || options.hazelcastClientConfig != null) {
      cache=new ConcurrentMapActionCache(this.env.getDirectories().getExecRoot(),HazelcastCacheFactory.create(options));
    }
 else     if (options.restCacheUrl != null) {
      cache=new ConcurrentMapActionCache(this.env.getDirectories().getExecRoot(),RestUrlCacheFactory.create(options));
    }
    actionCache=cache;
  }
  if (cache != null) {
    if (workExecutor == null && options.remoteWorker != null) {
      try {
        URI uri=new URI("dummy://" + options.remoteWorker);
        if (uri.getHost() == null || uri.getPort() == -1) {
          throw new URISyntaxException("Invalid host or port.","");
        }
        workExecutor=MemcacheWorkExecutor.createRemoteWorkExecutor(cache,uri.getHost(),uri.getPort());
      }
 catch (      URISyntaxException e) {
        env.getReporter().handle(Event.warn("Invalid argument for the address of remote worker."));
      }
    }
  }
}
