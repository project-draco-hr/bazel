{
  FilteringPolicy policy=rulesOnly ? FilteringPolicies.RULES_ONLY : FilteringPolicies.NO_FILTER;
  PathFragment pathFragment=TargetPatternResolverUtil.getPathFragment(directory);
  List<Path> roots=new ArrayList<>();
  if (repository.isDefault()) {
    roots.addAll(pkgPath.getPathEntries());
  }
 else {
    RepositoryDirectoryValue repositoryValue=(RepositoryDirectoryValue)env.getValue(RepositoryDirectoryValue.key(repository));
    if (repositoryValue == null) {
      throw new MissingDepException();
    }
    roots.add(repositoryValue.getPath());
  }
  for (  Path root : roots) {
    RootedPath rootedPath=RootedPath.toRootedPath(root,pathFragment);
    env.getValues(ImmutableList.of(PrepareDepsOfTargetsUnderDirectoryValue.key(repository,rootedPath,excludedSubdirectories,policy),CollectPackagesUnderDirectoryValue.key(repository,rootedPath,excludedSubdirectories)));
    if (env.valuesMissing()) {
      throw new MissingDepException();
    }
  }
}
