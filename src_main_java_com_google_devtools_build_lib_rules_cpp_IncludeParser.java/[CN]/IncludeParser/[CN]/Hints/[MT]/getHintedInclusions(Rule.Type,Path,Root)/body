{
  String pathString=path.getPathString();
  Set<Path> hints=null;
  for (  final Rule rule : rules) {
    if (type != rule.type) {
      continue;
    }
    Matcher m=rule.pattern.matcher(pathString);
    if (!m.matches()) {
      continue;
    }
    if (hints == null) {
      hints=Sets.newTreeSet();
    }
    Path root=workingDir.getRelative(m.replaceFirst(rule.findRoot));
    if (LOG_FINE) {
      LOG.fine("hint for " + rule.type + " "+ pathString+ " root: "+ root);
    }
    try {
      FileSystemUtils.traverseTree(hints,root,new Predicate<Path>(){
        @Override public boolean apply(        Path p){
          boolean take=p.isFile() && rule.findFilter.matcher(p.getPathString()).matches();
          if (LOG_FINER && take) {
            LOG.finer("hinted include: " + p);
          }
          return take;
        }
      }
);
    }
 catch (    IOException e) {
      LOG.warning("Error in hint expansion: " + e);
    }
  }
  if (hints != null && !hints.isEmpty()) {
    List<Artifact> result=new ArrayList<>(hints.size());
    for (    Path hint : hints) {
      if (hint.startsWith(workingDir)) {
        result.add(Preconditions.checkNotNull(artifactFactory.resolveSourceArtifact(hint.relativeTo(workingDir)),hint));
      }
 else {
        Preconditions.checkNotNull(sourceRoot,"%s %s",path,hint);
        Path sourcePath=sourceRoot.getPath();
        Preconditions.checkState(hint.startsWith(sourcePath),"%s %s %s",hint,path,sourceRoot);
        result.add(Preconditions.checkNotNull(artifactFactory.getSourceArtifact(hint.relativeTo(sourcePath),sourceRoot)));
      }
    }
    return result;
  }
 else {
    return ImmutableList.of();
  }
}
