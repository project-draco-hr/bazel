{
  this.workingDir=workingDir;
  this.artifactFactory=artifactFactory;
  try (InputStream is=hintsFile.getInputStream()){
    for (    String line : CharStreams.readLines(new InputStreamReader(is,"UTF-8"))) {
      line=line.trim();
      if (line.length() == 0 || line.startsWith("#")) {
        continue;
      }
      String[] tokens=WS_PAT.split(line);
      try {
        if (tokens.length == 3) {
          rules.add(new Rule(tokens[0],tokens[1],tokens[2]));
        }
 else         if (tokens.length == 4) {
          rules.add(new Rule(tokens[0],tokens[1],tokens[2],tokens[3]));
        }
 else {
          throw new IOException("Malformed hint line: " + line);
        }
      }
 catch (      PatternSyntaxException e) {
        throw new IOException("Malformed hint regex on: " + line + "\n  "+ e.getMessage());
      }
catch (      IllegalArgumentException e) {
        throw new IOException("Invalid type on: " + line + "\n  "+ e.getMessage());
      }
    }
  }
 }
