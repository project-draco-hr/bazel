{
  SkyKey key=key("foo");
  final NodeEntry entry=Iterables.getOnlyElement(graph.createIfAbsentBatch(null,Reason.OTHER,ImmutableList.of(key)).values());
  int numThreads=50;
  int numKeys=numThreads;
  final int chunkSize=40;
  final int numIterations=chunkSize * 2;
  final CountDownLatch waitForStart=new CountDownLatch(1);
  final CountDownLatch waitForAddedRdep=new CountDownLatch(numThreads);
  final CountDownLatch waitForSetValue=new CountDownLatch(1);
  ExecutorService pool=Executors.newFixedThreadPool(numThreads);
  assertEquals(DependencyState.NEEDS_SCHEDULING,entry.addReverseDepAndCheckIfDone(key("rdep")));
  List<SkyKey> rdepKeys=new ArrayList<>();
  for (int i=0; i < numKeys; i++) {
    rdepKeys.add(key("rdep" + i));
  }
  graph.createIfAbsentBatch(null,Reason.OTHER,rdepKeys);
  for (int i=0; i < numKeys; i++) {
    final int j=i;
    Runnable r=new Runnable(){
      @Override public void run(){
        try {
          waitForStart.await(TestUtils.WAIT_TIMEOUT_SECONDS,TimeUnit.SECONDS);
          assertThat(entry.addReverseDepAndCheckIfDone(key("rdep" + j))).isNotEqualTo(DependencyState.DONE);
          waitForAddedRdep.countDown();
          waitForSetValue.await(TestUtils.WAIT_TIMEOUT_SECONDS,TimeUnit.SECONDS);
        }
 catch (        InterruptedException e) {
          fail("Test failed: " + e.toString());
        }
        for (int k=chunkSize; k <= numIterations; k++) {
          entry.removeReverseDep(key("rdep" + j));
          entry.addReverseDepAndCheckIfDone(key("rdep" + j));
          entry.getReverseDeps();
        }
      }
    }
;
    pool.execute(wrapper.wrap(r));
  }
  waitForStart.countDown();
  waitForAddedRdep.await(TestUtils.WAIT_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  entry.setValue(new StringValue("foo1"),startingVersion);
  waitForSetValue.countDown();
  wrapper.waitForTasksAndMaybeThrow();
  assertFalse(ExecutorUtil.interruptibleShutdown(pool));
  assertEquals(new StringValue("foo1"),graph.get(null,Reason.OTHER,key).getValue());
  assertEquals(numKeys + 1,Iterables.size(graph.get(null,Reason.OTHER,key).getReverseDeps()));
  graph=getGraph(getNextVersion(startingVersion));
  NodeEntry sameEntry=Preconditions.checkNotNull(graph.get(null,Reason.OTHER,key));
  sameEntry.markDirty(true);
  startEvaluation(sameEntry);
  sameEntry.markRebuilding();
  sameEntry.setValue(new StringValue("foo2"),getNextVersion(startingVersion));
  assertEquals(new StringValue("foo2"),graph.get(null,Reason.OTHER,key).getValue());
  assertEquals(numKeys + 1,Iterables.size(graph.get(null,Reason.OTHER,key).getReverseDeps()));
}
