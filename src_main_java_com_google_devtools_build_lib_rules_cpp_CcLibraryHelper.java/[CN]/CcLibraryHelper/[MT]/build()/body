{
  Preconditions.checkState(ruleContext.getRule().getRuleClass().equals("cc_inc_library") || ruleContext.getRule().isAttrDefined(":lipo_context_collector",BuildType.LABEL));
  if (checkDepsGenerateCpp) {
    for (    LanguageDependentFragment dep : AnalysisUtils.getProviders(implementationDeps,LanguageDependentFragment.class)) {
      LanguageDependentFragment.Checker.depSupportsLanguage(ruleContext,dep,CppRuleClasses.LANGUAGE);
    }
  }
  CppModel model=initializeCppModel();
  CppCompilationContext cppCompilationContext=initializeCppCompilationContext(model,false);
  model.setContext(cppCompilationContext);
  CppCompilationContext interfaceCompilationContext=cppCompilationContext;
  if (implementationDeps.size() != interfaceDeps.size()) {
    interfaceCompilationContext=initializeCppCompilationContext(model,true);
  }
  model.setInterfaceContext(interfaceCompilationContext);
  boolean compileHeaderModules=featureConfiguration.isEnabled(CppRuleClasses.HEADER_MODULES);
  Preconditions.checkState(!compileHeaderModules || cppCompilationContext.getCppModuleMap() != null,"All cc rules must support module maps.");
  CcCompilationOutputs ccOutputs=model.createCcCompileActions();
  if (!objectFiles.isEmpty() || !picObjectFiles.isEmpty()) {
    ccOutputs=new CcCompilationOutputs.Builder().merge(ccOutputs).addLTOBitcodeFile(ccOutputs.getLtoBitcodeFiles()).addObjectFiles(objectFiles).addPicObjectFiles(picObjectFiles).build();
  }
  CcLinkingOutputs ccLinkingOutputs=CcLinkingOutputs.EMPTY;
  if (emitLinkActionsIfEmpty || !ccOutputs.isEmpty()) {
    if (linkType.staticness() == Staticness.STATIC) {
      ccLinkingOutputs=model.createCcLinkActions(ccOutputs,nonCodeLinkerInputs);
    }
  }
  CcLinkingOutputs originalLinkingOutputs=ccLinkingOutputs;
  if (!(staticLibraries.isEmpty() && picStaticLibraries.isEmpty() && dynamicLibraries.isEmpty())) {
    CcLinkingOutputs.Builder newOutputsBuilder=new CcLinkingOutputs.Builder();
    if (!ccOutputs.isEmpty()) {
      newOutputsBuilder.merge(originalLinkingOutputs);
      ImmutableSetMultimap<String,LibraryToLink> precompiledLibraryMap=CcLinkingOutputs.getLibrariesByIdentifier(Iterables.concat(staticLibraries,picStaticLibraries,dynamicLibraries));
      ImmutableSetMultimap<String,LibraryToLink> linkedLibraryMap=originalLinkingOutputs.getLibrariesByIdentifier();
      for (      String matchingIdentifier : Sets.intersection(precompiledLibraryMap.keySet(),linkedLibraryMap.keySet())) {
        Iterable<Artifact> matchingInputLibs=LinkerInputs.toNonSolibArtifacts(precompiledLibraryMap.get(matchingIdentifier));
        Iterable<Artifact> matchingOutputLibs=LinkerInputs.toNonSolibArtifacts(linkedLibraryMap.get(matchingIdentifier));
        ruleContext.ruleError("Can't put " + Joiner.on(", ").join(Iterables.transform(matchingInputLibs,FileType.TO_FILENAME)) + " into the srcs of a "+ ruleContext.getRuleClassNameForLogging()+ " with the same name ("+ ruleContext.getRule().getName()+ ") which also contains other code or objects to link; it shares a name with "+ Joiner.on(", ").join(Iterables.transform(matchingOutputLibs,FileType.TO_FILENAME))+ " (output compiled and linked from the non-library sources of this rule), "+ "which could cause confusion");
      }
    }
    ccLinkingOutputs=newOutputsBuilder.addStaticLibraries(staticLibraries).addPicStaticLibraries(picStaticLibraries).addDynamicLibraries(dynamicLibraries).addExecutionDynamicLibraries(dynamicLibraries).build();
  }
  DwoArtifactsCollector dwoArtifacts=DwoArtifactsCollector.transitiveCollector(ccOutputs,implementationDeps);
  Runfiles cppStaticRunfiles=collectCppRunfiles(ccLinkingOutputs,true);
  Runfiles cppSharedRunfiles=collectCppRunfiles(ccLinkingOutputs,false);
  Map<Class<? extends TransitiveInfoProvider>,TransitiveInfoProvider> providers=new LinkedHashMap<>();
  providers.put(CppRunfilesProvider.class,new CppRunfilesProvider(cppStaticRunfiles,cppSharedRunfiles));
  providers.put(CppCompilationContext.class,interfaceCompilationContext);
  providers.put(CppDebugFileProvider.class,new CppDebugFileProvider(dwoArtifacts.getDwoArtifacts(),dwoArtifacts.getPicDwoArtifacts()));
  providers.put(TransitiveLipoInfoProvider.class,collectTransitiveLipoInfo(ccOutputs));
  Map<String,NestedSet<Artifact>> outputGroups=new TreeMap<>();
  if (shouldAddLinkerOutputArtifacts(ruleContext,ccOutputs)) {
    addLinkerOutputArtifacts(outputGroups);
  }
  outputGroups.put(OutputGroupProvider.TEMP_FILES,getTemps(ccOutputs));
  if (emitCompileProviders) {
    boolean isLipoCollector=ruleContext.getFragment(CppConfiguration.class).isLipoContextCollector();
    boolean processHeadersInDependencies=ruleContext.getFragment(CppConfiguration.class).processHeadersInDependencies();
    boolean usePic=CppHelper.usePic(ruleContext,false);
    outputGroups.put(OutputGroupProvider.FILES_TO_COMPILE,ccOutputs.getFilesToCompile(isLipoCollector,processHeadersInDependencies,usePic));
    outputGroups.put(OutputGroupProvider.COMPILATION_PREREQUISITES,CcCommon.collectCompilationPrerequisites(ruleContext,cppCompilationContext));
  }
  if (emitCcNativeLibrariesProvider) {
    providers.put(CcNativeLibraryProvider.class,new CcNativeLibraryProvider(collectNativeCcLibraries(ccLinkingOutputs)));
  }
  providers.put(CcExecutionDynamicLibrariesProvider.class,collectExecutionDynamicLibraryArtifacts(ccLinkingOutputs.getExecutionDynamicLibraries()));
  boolean forcePic=ruleContext.getFragment(CppConfiguration.class).forcePic();
  if (emitCcSpecificLinkParamsProvider) {
    providers.put(CcSpecificLinkParamsProvider.class,new CcSpecificLinkParamsProvider(createCcLinkParamsStore(ccLinkingOutputs,cppCompilationContext,forcePic)));
  }
 else {
    providers.put(CcLinkParamsProvider.class,new CcLinkParamsProvider(createCcLinkParamsStore(ccLinkingOutputs,cppCompilationContext,forcePic)));
  }
  return new Info(providers,outputGroups,ccOutputs,ccLinkingOutputs,originalLinkingOutputs,cppCompilationContext);
}
