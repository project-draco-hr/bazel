{
  CppCompilationContext.Builder contextBuilder=new CppCompilationContext.Builder(ruleContext,forInterface);
  PathFragment repositoryPath=ruleContext.getLabel().getPackageIdentifier().getRepository().getPathFragment();
  contextBuilder.addQuoteIncludeDir(repositoryPath);
  contextBuilder.addQuoteIncludeDir(ruleContext.getConfiguration().getGenfilesFragment().getRelative(repositoryPath));
  for (  PathFragment systemIncludeDir : systemIncludeDirs) {
    contextBuilder.addSystemIncludeDir(systemIncludeDir);
  }
  for (  PathFragment includeDir : includeDirs) {
    contextBuilder.addIncludeDir(includeDir);
  }
  contextBuilder.mergeDependentContexts(AnalysisUtils.getProviders(forInterface ? interfaceDeps : implementationDeps,CppCompilationContext.class));
  CppHelper.mergeToolchainDependentContext(ruleContext,contextBuilder);
  contextBuilder.addDefines(defines);
  contextBuilder.addDeclaredIncludeSrcs(publicHeaders);
  contextBuilder.addDeclaredIncludeSrcs(publicTextualHeaders);
  contextBuilder.addDeclaredIncludeSrcs(privateHeaders);
  contextBuilder.addPregreppedHeaderMap(CppHelper.createExtractInclusions(ruleContext,semantics,publicHeaders));
  contextBuilder.addPregreppedHeaderMap(CppHelper.createExtractInclusions(ruleContext,semantics,publicTextualHeaders));
  contextBuilder.addPregreppedHeaderMap(CppHelper.createExtractInclusions(ruleContext,semantics,privateHeaders));
  contextBuilder.addCompilationPrerequisites(prerequisites);
  if (headersCheckingMode == HeadersCheckingMode.WARN) {
    contextBuilder.addDeclaredIncludeWarnDir(ruleContext.getLabel().getPackageFragment());
    for (    PathFragment looseIncludeDir : looseIncludeDirs) {
      contextBuilder.addDeclaredIncludeWarnDir(looseIncludeDir);
    }
  }
 else   if (headersCheckingMode == HeadersCheckingMode.LOOSE) {
    contextBuilder.addDeclaredIncludeDir(ruleContext.getLabel().getPackageFragment());
    for (    PathFragment looseIncludeDir : looseIncludeDirs) {
      contextBuilder.addDeclaredIncludeDir(looseIncludeDir);
    }
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.MODULE_MAPS)) {
    CppModuleMap cppModuleMap=injectedCppModuleMap == null ? CppHelper.createDefaultCppModuleMap(ruleContext) : injectedCppModuleMap;
    contextBuilder.setCppModuleMap(cppModuleMap);
    CppModuleMapAction action=new CppModuleMapAction(ruleContext.getActionOwner(),cppModuleMap,privateHeaders,publicHeaders,collectModuleMaps(),additionalExportedHeaders,featureConfiguration.isEnabled(CppRuleClasses.HEADER_MODULES),featureConfiguration.isEnabled(CppRuleClasses.MODULE_MAP_HOME_CWD),featureConfiguration.isEnabled(CppRuleClasses.GENERATE_SUBMODULES),!featureConfiguration.isEnabled(CppRuleClasses.MODULE_MAP_WITHOUT_EXTERN_MODULE));
    ruleContext.registerAction(action);
    if (model.getGeneratesPicHeaderModule()) {
      contextBuilder.setPicHeaderModule(model.getPicHeaderModule(cppModuleMap.getArtifact()));
    }
    if (model.getGeneratesNoPicHeaderModule()) {
      contextBuilder.setHeaderModule(model.getHeaderModule(cppModuleMap.getArtifact()));
    }
    contextBuilder.setUseHeaderModules(featureConfiguration.isEnabled(CppRuleClasses.USE_HEADER_MODULES));
    if (featureConfiguration.isEnabled(CppRuleClasses.USE_HEADER_MODULES) && featureConfiguration.isEnabled(CppRuleClasses.TRANSITIVE_MODULE_MAPS)) {
      contextBuilder.setProvideTransitiveModuleMaps(true);
    }
  }
  semantics.setupCompilationContext(ruleContext,contextBuilder);
  return contextBuilder.build();
}
