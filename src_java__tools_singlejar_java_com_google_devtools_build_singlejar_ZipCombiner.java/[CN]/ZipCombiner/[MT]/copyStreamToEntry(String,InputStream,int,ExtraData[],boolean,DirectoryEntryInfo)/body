{
  fileNames.put(filename,COPIED_FILE_ENTRY);
  byte[] fileNameAsBytes=filename.getBytes(UTF_8);
  checkArgument(fileNameAsBytes.length <= 65535,"File name too long: %s bytes (max. 65535)",fileNameAsBytes.length);
  byte[] localBuffer=new byte[4096];
  byte[] uncompressedData=null;
  if (!compress) {
    ByteArrayOutputStream temp=new ByteArrayOutputStream();
    int bytesRead;
    while ((bytesRead=in.read(localBuffer)) != -1) {
      temp.write(localBuffer,0,bytesRead);
    }
    uncompressedData=temp.toByteArray();
  }
  byte[] extraData=null;
  if (extraDataEntries.length != 0) {
    int totalLength=0;
    for (    ExtraData extra : extraDataEntries) {
      int length=extra.getData().length;
      if (totalLength > 0xffff - 4 - length) {
        throw new IOException("Total length of extra data too big.");
      }
      totalLength+=length + 4;
    }
    extraData=new byte[totalLength];
    int position=0;
    for (    ExtraData extra : extraDataEntries) {
      byte[] data=extra.getData();
      setUnsignedShort(extraData,position + 0,extra.getId());
      setUnsignedShort(extraData,position + 2,(short)data.length);
      System.arraycopy(data,0,extraData,position + 4,data.length);
      position+=data.length + 4;
    }
  }
  Arrays.fill(headerBuffer,(byte)0);
  setUnsignedInt(headerBuffer,0,LOCAL_FILE_HEADER_MARKER);
  if (compress) {
    setUnsignedShort(headerBuffer,4,(short)VERSION_DEFLATE);
    setUnsignedShort(headerBuffer,6,(short)SIZE_MASKED_FLAG);
    setUnsignedShort(headerBuffer,8,(short)DEFLATE_METHOD);
  }
 else {
    setUnsignedShort(headerBuffer,4,(short)VERSION_STORED);
    setUnsignedShort(headerBuffer,6,(short)0);
    setUnsignedShort(headerBuffer,8,(short)STORED_METHOD);
  }
  setUnsignedShort(headerBuffer,10,(short)dosTime);
  setUnsignedShort(headerBuffer,12,(short)(dosTime >> 16));
  if (uncompressedData != null) {
    CRC32 crc=new CRC32();
    crc.update(uncompressedData);
    setUnsignedInt(headerBuffer,14,(int)crc.getValue());
    setUnsignedInt(headerBuffer,18,uncompressedData.length);
    setUnsignedInt(headerBuffer,22,uncompressedData.length);
  }
 else {
    setUnsignedInt(headerBuffer,14,0);
    setUnsignedInt(headerBuffer,18,0);
    setUnsignedInt(headerBuffer,22,0);
  }
  setUnsignedShort(headerBuffer,26,(short)fileNameAsBytes.length);
  if (extraData != null) {
    setUnsignedShort(headerBuffer,28,(short)extraData.length);
  }
 else {
    setUnsignedShort(headerBuffer,28,(short)0);
  }
  int directoryOffset=fillDirectoryEntryBuffer(directoryEntryInfo);
  write(headerBuffer);
  write(fileNameAsBytes);
  centralDirectory.writeToCentralDirectory(fileNameAsBytes);
  if (extraData != null) {
    write(extraData);
    centralDirectory.writeToCentralDirectory(extraData);
  }
  if (uncompressedData != null) {
    write(uncompressedData);
  }
 else {
    try (DeflaterOutputStream deflaterStream=new DeflaterOutputStream()){
      int bytesRead;
      while ((bytesRead=in.read(localBuffer)) != -1) {
        deflaterStream.write(localBuffer,0,bytesRead);
      }
      deflaterStream.finish();
      Arrays.fill(headerBuffer,(byte)0);
      setUnsignedInt(headerBuffer,0,DATA_DESCRIPTOR_MARKER);
      setUnsignedInt(headerBuffer,4,deflaterStream.getCRC());
      setUnsignedInt(headerBuffer,8,deflaterStream.getCompressedSize());
      setUnsignedInt(headerBuffer,12,deflaterStream.getUncompressedSize());
      write(headerBuffer,0,16);
      fixDirectoryEntry(directoryOffset,deflaterStream.getCRC(),deflaterStream.getCompressedSize(),deflaterStream.getUncompressedSize());
    }
   }
}
