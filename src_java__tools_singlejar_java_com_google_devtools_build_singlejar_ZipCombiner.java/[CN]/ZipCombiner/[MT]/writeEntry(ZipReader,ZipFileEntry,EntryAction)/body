{
  checkArgument(action.getType() != ActionType.SKIP,"Cannot write a zip entry whose action is of type SKIP.");
  ZipFileEntry outEntry=new ZipFileEntry(entry);
  if (action.getType() == ActionType.RENAME) {
    checkNotNull(action.getNewName(),"ZipEntryFilter actions of type RENAME must not have a null filename.");
    outEntry.setName(action.getNewName());
  }
  if (action.getDate() != null) {
    outEntry.setTime(action.getDate().getTime());
  }
  InputStream data;
  if (mode == OutputMode.FORCE_DEFLATE && entry.getMethod() != Compression.DEFLATED) {
    ByteArrayOutputStream tmp=new ByteArrayOutputStream();
    copyStream(new DeflaterInputStream(zip.getRawInputStream(entry),getDeflater()),tmp);
    data=new ByteArrayInputStream(tmp.toByteArray());
    outEntry.setMethod(Compression.DEFLATED);
    outEntry.setCompressedSize(tmp.size());
  }
 else   if (mode == OutputMode.FORCE_STORED && entry.getMethod() != Compression.STORED) {
    data=new InflaterInputStream(zip.getRawInputStream(entry),getInflater());
    outEntry.setMethod(Compression.STORED);
    outEntry.setCompressedSize(entry.getSize());
  }
 else {
    data=zip.getRawInputStream(entry);
  }
  writeEntry(outEntry,data);
}
