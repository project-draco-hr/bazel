{
  setUnsignedInt(directoryEntryBuffer,0,CENTRAL_DIRECTORY_MARKER);
  short version=(short)getUnsignedShort(headerBuffer,VERSION_TO_EXTRACT_OFFSET);
  short curMadeMyVersion=(directoryEntryInfo.madeByVersion == -1) ? version : directoryEntryInfo.madeByVersion;
  setUnsignedShort(directoryEntryBuffer,4,curMadeMyVersion);
  setUnsignedShort(directoryEntryBuffer,6,version);
  setUnsignedShort(directoryEntryBuffer,8,(short)getUnsignedShort(headerBuffer,GENERAL_PURPOSE_FLAGS_OFFSET));
  setUnsignedShort(directoryEntryBuffer,10,(short)getUnsignedShort(headerBuffer,COMPRESSION_METHOD_OFFSET));
  setUnsignedShort(directoryEntryBuffer,12,(short)getUnsignedShort(headerBuffer,MTIME_OFFSET));
  setUnsignedShort(directoryEntryBuffer,14,(short)getUnsignedShort(headerBuffer,MDATE_OFFSET));
  setUnsignedInt(directoryEntryBuffer,16,(int)getUnsignedInt(headerBuffer,CRC32_OFFSET));
  setUnsignedInt(directoryEntryBuffer,20,(int)getUnsignedInt(headerBuffer,COMPRESSED_SIZE_OFFSET));
  setUnsignedInt(directoryEntryBuffer,24,(int)getUnsignedInt(headerBuffer,UNCOMPRESSED_SIZE_OFFSET));
  setUnsignedShort(directoryEntryBuffer,28,(short)getUnsignedShort(headerBuffer,FILENAME_LENGTH_OFFSET));
  setUnsignedShort(directoryEntryBuffer,30,(short)getUnsignedShort(headerBuffer,EXTRA_LENGTH_OFFSET));
  setUnsignedShort(directoryEntryBuffer,32,(short)0);
  setUnsignedShort(directoryEntryBuffer,34,(short)0);
  setUnsignedShort(directoryEntryBuffer,36,(short)0);
  setUnsignedInt(directoryEntryBuffer,38,directoryEntryInfo.externalFileAttribute);
  if (out.bytesWritten >= MAXIMUM_DATA_SIZE) {
    throw new IOException("Unable to handle files bigger than 2^32 bytes.");
  }
  setUnsignedInt(directoryEntryBuffer,42,(int)out.bytesWritten);
  fileCount++;
  return centralDirectory.writeToCentralDirectory(directoryEntryBuffer);
}
