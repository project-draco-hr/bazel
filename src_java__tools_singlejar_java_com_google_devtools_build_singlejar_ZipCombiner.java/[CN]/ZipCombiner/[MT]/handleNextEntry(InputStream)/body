{
  try {
    readFully(in,FILE_HEADER_BUFFER_SIZE);
  }
 catch (  EOFException e) {
    return false;
  }
  System.arraycopy(buffer,bufferOffset,headerBuffer,0,FILE_HEADER_BUFFER_SIZE);
  bufferOffset+=FILE_HEADER_BUFFER_SIZE;
  bufferLength-=FILE_HEADER_BUFFER_SIZE;
  if (getUnsignedInt(headerBuffer,0) != LOCAL_FILE_HEADER_MARKER) {
    return false;
  }
  validateHeader();
  final int fileNameLength=getUnsignedShort(headerBuffer,FILENAME_LENGTH_OFFSET);
  readFully(in,fileNameLength);
  final String filename=new String(buffer,bufferOffset,fileNameLength,ISO_8859_1);
  FileEntry handler=fileNames.get(filename);
  if (handler == null || handler == RENAMED_FILE_ENTRY) {
    TheStrategyCallback callback=new TheStrategyCallback(filename,in);
    entryFilter.accept(filename,callback);
    if (fileNames.get(callback.filename) == null && fileNames.get(filename) == null) {
      throw new IllegalStateException();
    }
  }
 else   if (handler.mergeStrategy == null) {
    copyOrSkipEntry(filename,in,SkipMode.SKIP,null,DEFAULT_DIRECTORY_ENTRY_INFO);
  }
 else {
    handleCustomMerge(in,handler.mergeStrategy,handler.outputBuffer);
  }
  return true;
}
