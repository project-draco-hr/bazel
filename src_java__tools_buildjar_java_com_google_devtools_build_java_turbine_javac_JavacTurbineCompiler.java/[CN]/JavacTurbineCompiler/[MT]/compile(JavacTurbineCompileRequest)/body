{
  Map<String,OutputFileObject> files=new LinkedHashMap<>();
  Status status;
  StringWriter sw=new StringWriter();
  Context context=new Context();
  try (PrintWriter pw=new PrintWriter(sw)){
    ZipOutputFileManager.preRegister(context,files);
    setupContext(context,request.strictJavaDepsPlugin(),request.prune());
    CacheFSInfo.preRegister(context);
    context.put(Log.outKey,pw);
    ZipOutputFileManager fm=(ZipOutputFileManager)context.get(JavaFileManager.class);
    fm.setLocationFromPaths(StandardLocation.SOURCE_PATH,Collections.<Path>emptyList());
    fm.setLocationFromPaths(StandardLocation.CLASS_PATH,request.classPath());
    fm.setLocationFromPaths(StandardLocation.PLATFORM_CLASS_PATH,request.bootClassPath());
    fm.setLocationFromPaths(StandardLocation.ANNOTATION_PROCESSOR_PATH,request.processorClassPath());
    String[] javacArgArray=request.javacOptions().toArray(new String[0]);
    javacArgArray=CommandLine.parse(javacArgArray);
    Arguments args=Arguments.instance(context);
    args.init("turbine",javacArgArray);
    fm.setContext(context);
    fm.handleOptions(args.getDeferredFileManagerOptions());
    if (!args.validate()) {
      return new JavacTurbineCompileResult(ImmutableMap.<String,OutputFileObject>of(),Status.ERROR,sw,context);
    }
    JavaCompiler comp=JavaCompiler.instance(context);
    if (request.strictJavaDepsPlugin() != null) {
      request.strictJavaDepsPlugin().init(context,Log.instance(context),comp);
    }
    try {
      comp.compile(args.getFileObjects(),args.getClassNames(),null);
      status=comp.errorCount() == 0 ? Status.OK : Status.ERROR;
    }
 catch (    Throwable t) {
      t.printStackTrace(pw);
      status=Status.ERROR;
    }
  }
   return new JavacTurbineCompileResult(ImmutableMap.copyOf(files),status,sw,context);
}
