{
  createFileSystem(outputs);
  List<String> args=new ArrayList<>();
  args.add(execRoot.getRelative("_bin/namespace-sandbox").getPathString());
  if (sandboxDebug) {
    args.add("-D");
  }
  args.add("-S");
  args.add(sandboxPath.getPathString());
  args.add("-W");
  args.add(cwd.toString());
  if (timeout != -1) {
    args.add("-T");
    args.add(Integer.toString(timeout));
  }
  for (  ImmutableMap.Entry<Path,Path> mount : mounts.entrySet()) {
    args.add("-M");
    args.add(mount.getValue().getPathString());
    args.add("-m");
    args.add(mount.getKey().getPathString());
  }
  args.add("--");
  args.addAll(spawnArguments);
  Command cmd=new Command(args.toArray(new String[0]),env,cwd);
  try {
    cmd.execute(new byte[]{},Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true);
  }
 catch (  CommandException e) {
    boolean timedOut=false;
    if (e instanceof AbnormalTerminationException) {
      TerminationStatus status=((AbnormalTerminationException)e).getResult().getTerminationStatus();
      timedOut=!status.exited() && (status.getTerminatingSignal() == 14);
    }
    String message=CommandFailureUtils.describeCommandFailure(verboseFailures,spawnArguments,env,cwd.getPath());
    throw new UserExecException(message,e,timedOut);
  }
  copyOutputs(outputs);
}
