{
  RootedPath workspaceRoot=(RootedPath)skyKey.argument();
  WorkspaceASTValue workspaceASTValue=(WorkspaceASTValue)env.getValue(new SkyKey(SkyFunctions.WORKSPACE_AST,workspaceRoot));
  if (workspaceASTValue == null) {
    return null;
  }
  Path repoWorkspace=workspaceRoot.getRoot().getRelative(workspaceRoot.getRelativePath());
  LegacyBuilder builder=com.google.devtools.build.lib.packages.Package.newExternalPackageBuilder(repoWorkspace,ruleClassProvider.getRunfilesPrefix());
  try (Mutability mutability=Mutability.create("workspace %s",repoWorkspace)){
    WorkspaceFactory parser=new WorkspaceFactory(builder,ruleClassProvider,packageFactory.getEnvironmentExtensions(),mutability,directories.getEmbeddedBinariesRoot(),directories.getWorkspace());
    try {
      BuildFileAST ast=workspaceASTValue.getAST();
      PackageFunction.SkylarkImportResult importResult=PackageFunction.fetchImportsFromBuildFile(repoWorkspace,Label.EXTERNAL_PACKAGE_IDENTIFIER,ast,env,null);
      if (importResult != null) {
        parser.execute(ast,importResult.importMap);
      }
 else {
        return null;
      }
    }
 catch (    PackageFunctionException e) {
      throw new WorkspaceFileFunctionException(e,Transience.PERSISTENT);
    }
  }
   return new PackageValue(builder.build());
}
