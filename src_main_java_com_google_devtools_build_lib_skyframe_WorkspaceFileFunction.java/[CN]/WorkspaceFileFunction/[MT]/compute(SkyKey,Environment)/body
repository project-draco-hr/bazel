{
  WorkspaceFileKey key=(WorkspaceFileKey)skyKey.argument();
  RootedPath workspaceRoot=key.getPath();
  WorkspaceASTValue workspaceASTValue=(WorkspaceASTValue)env.getValue(WorkspaceASTValue.key(workspaceRoot));
  if (workspaceASTValue == null) {
    return null;
  }
  Path repoWorkspace=workspaceRoot.getRoot().getRelative(workspaceRoot.getRelativePath());
  LegacyBuilder builder=Package.newExternalPackageBuilder(repoWorkspace,ruleClassProvider.getRunfilesPrefix());
  if (workspaceASTValue.getASTs().isEmpty()) {
    return new WorkspaceFileValue(builder.build(),ImmutableMap.<String,Extension>of(),ImmutableMap.<String,Object>of(),workspaceRoot,0,false);
  }
  WorkspaceFactory parser;
  try (Mutability mutability=Mutability.create("workspace %s",repoWorkspace)){
    parser=new WorkspaceFactory(builder,ruleClassProvider,packageFactory.getEnvironmentExtensions(),mutability,key.getIndex() == 0,directories.getEmbeddedBinariesRoot(),directories.getWorkspace());
    if (key.getIndex() > 0) {
      WorkspaceFileValue prevValue=(WorkspaceFileValue)env.getValue(WorkspaceFileValue.key(key.getPath(),key.getIndex() - 1));
      if (prevValue == null) {
        return null;
      }
      if (prevValue.next() == null) {
        return prevValue;
      }
      parser.setParent(prevValue.getPackage(),prevValue.getImportMap(),prevValue.getBindings());
    }
    BuildFileAST ast=workspaceASTValue.getASTs().get(key.getIndex());
    PackageFunction.SkylarkImportResult importResult=PackageFunction.fetchImportsFromBuildFile(repoWorkspace,rootPackage,ast,env,null);
    if (importResult == null) {
      return null;
    }
    parser.execute(ast,importResult.importMap);
  }
 catch (  PackageFunctionException|NameConflictException e) {
    throw new WorkspaceFileFunctionException(e,Transience.PERSISTENT);
  }
  return new WorkspaceFileValue(builder.build(),parser.getImportMap(),parser.getVariableBindings(),workspaceRoot,key.getIndex(),key.getIndex() < workspaceASTValue.getASTs().size() - 1);
}
