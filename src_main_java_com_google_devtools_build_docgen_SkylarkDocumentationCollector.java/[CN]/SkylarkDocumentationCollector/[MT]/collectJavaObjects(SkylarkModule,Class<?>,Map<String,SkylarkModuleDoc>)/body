{
  Set<Class<?>> done=new HashSet<>();
  Deque<Class<?>> toProcess=new LinkedList<>();
  Map<Class<?>,SkylarkModule> annotations=new HashMap<>();
  toProcess.addLast(firstClass);
  annotations.put(firstClass,firstModule);
  while (!toProcess.isEmpty()) {
    Class<?> c=toProcess.removeFirst();
    SkylarkModule annotation=annotations.get(c);
    done.add(c);
    if (!modules.containsKey(annotation.name())) {
      modules.put(annotation.name(),new SkylarkModuleDoc(annotation,c));
    }
    SkylarkModuleDoc module=modules.get(annotation.name());
    if (module.javaMethodsNotCollected()) {
      ImmutableMap<Method,SkylarkCallable> methods=FuncallExpression.collectSkylarkMethodsWithAnnotation(c);
      for (      Map.Entry<Method,SkylarkCallable> entry : methods.entrySet()) {
        module.addMethod(new SkylarkJavaMethodDoc(module,entry.getKey(),entry.getValue()));
      }
      for (      Map.Entry<Method,SkylarkCallable> method : methods.entrySet()) {
        Class<?> returnClass=method.getKey().getReturnType();
        if (returnClass.isAnnotationPresent(SkylarkModule.class) && !done.contains(returnClass)) {
          toProcess.addLast(returnClass);
          annotations.put(returnClass,returnClass.getAnnotation(SkylarkModule.class));
        }
      }
    }
  }
}
