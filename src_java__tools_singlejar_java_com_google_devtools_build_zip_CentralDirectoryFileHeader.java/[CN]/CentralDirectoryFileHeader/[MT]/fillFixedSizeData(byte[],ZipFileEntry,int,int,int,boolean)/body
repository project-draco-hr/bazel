{
  if (!allowZip64 && entry.getFeatureSet().contains(Feature.ZIP64_CSIZE)) {
    throw new ZipException(String.format("Writing an entry with compressed size %d without" + " Zip64 extensions is not supported.",entry.getCompressedSize()));
  }
  if (!allowZip64 && entry.getFeatureSet().contains(Feature.ZIP64_SIZE)) {
    throw new ZipException(String.format("Writing an entry of size %d without" + " Zip64 extensions is not supported.",entry.getSize()));
  }
  if (!allowZip64 && entry.getFeatureSet().contains(Feature.ZIP64_OFFSET)) {
    throw new ZipException(String.format("Writing an entry with local header offset %d without" + " Zip64 extensions is not supported.",entry.getLocalHeaderOffset()));
  }
  int csize=(int)(entry.getFeatureSet().contains(Feature.ZIP64_CSIZE) ? -1 : entry.getCompressedSize());
  int size=(int)(entry.getFeatureSet().contains(Feature.ZIP64_SIZE) ? -1 : entry.getSize());
  int offset=(int)(entry.getFeatureSet().contains(Feature.ZIP64_OFFSET) ? -1 : entry.getLocalHeaderOffset());
  ZipUtil.intToLittleEndian(buf,SIGNATURE_OFFSET,SIGNATURE);
  ZipUtil.shortToLittleEndian(buf,VERSION_OFFSET,entry.getVersion());
  ZipUtil.shortToLittleEndian(buf,VERSION_NEEDED_OFFSET,entry.getVersionNeeded());
  ZipUtil.shortToLittleEndian(buf,FLAGS_OFFSET,entry.getFlags());
  ZipUtil.shortToLittleEndian(buf,METHOD_OFFSET,entry.getMethod().getValue());
  ZipUtil.intToLittleEndian(buf,MOD_TIME_OFFSET,ZipUtil.unixToDosTime(entry.getTime()));
  ZipUtil.intToLittleEndian(buf,CRC_OFFSET,(int)(entry.getCrc() & 0xffffffff));
  ZipUtil.intToLittleEndian(buf,COMPRESSED_SIZE_OFFSET,csize);
  ZipUtil.intToLittleEndian(buf,UNCOMPRESSED_SIZE_OFFSET,size);
  ZipUtil.shortToLittleEndian(buf,FILENAME_LENGTH_OFFSET,(short)(nameLength & 0xffff));
  ZipUtil.shortToLittleEndian(buf,EXTRA_FIELD_LENGTH_OFFSET,(short)(extraLength & 0xffff));
  ZipUtil.shortToLittleEndian(buf,COMMENT_LENGTH_OFFSET,(short)(commentLength & 0xffff));
  ZipUtil.shortToLittleEndian(buf,DISK_START_OFFSET,(short)0);
  ZipUtil.shortToLittleEndian(buf,INTERNAL_ATTRIBUTES_OFFSET,entry.getInternalAttributes());
  ZipUtil.intToLittleEndian(buf,EXTERNAL_ATTRIBUTES_OFFSET,entry.getExternalAttributes());
  ZipUtil.intToLittleEndian(buf,LOCAL_HEADER_OFFSET_OFFSET,offset);
}
