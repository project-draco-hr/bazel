{
  Function<String,String> commandOptionSourceFunction=new Function<String,String>(){
    @Override public String apply(    String input){
      if (INTERNAL_COMMAND_OPTIONS.contains(input)) {
        return "options generated by Blaze launcher";
      }
 else {
        return "command line options";
      }
    }
  }
;
  List<String> cmdLineAfterCommand=args.subList(1,args.size());
  optionsParser.parseWithSourceFunction(OptionPriority.COMMAND_LINE,commandOptionSourceFunction,cmdLineAfterCommand);
  CommonCommandOptions rcFileOptions=optionsParser.getOptions(CommonCommandOptions.class);
  List<Pair<String,ListMultimap<String,String>>> optionsMap=getOptionsMap(outErr,rcFileOptions.rcSource,rcFileOptions.optionsOverrides,runtime.getCommandMap().keySet());
  parseOptionsForCommand(rcfileNotes,commandAnnotation,optionsParser,optionsMap,null);
  List<String> configsLoaded=ImmutableList.of();
  CommonCommandOptions commonOptions=optionsParser.getOptions(CommonCommandOptions.class);
  while (!commonOptions.configs.equals(configsLoaded)) {
    Set<String> missingConfigs=new LinkedHashSet<>(commonOptions.configs);
    missingConfigs.removeAll(configsLoaded);
    parseOptionsForCommand(rcfileNotes,commandAnnotation,optionsParser,optionsMap,missingConfigs);
    configsLoaded=commonOptions.configs;
    commonOptions=optionsParser.getOptions(CommonCommandOptions.class);
  }
  return commonOptions;
}
