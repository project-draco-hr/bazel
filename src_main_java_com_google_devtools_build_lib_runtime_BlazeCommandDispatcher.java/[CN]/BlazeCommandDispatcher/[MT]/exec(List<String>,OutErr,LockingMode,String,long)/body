{
  Preconditions.checkNotNull(clientDescription);
  if (args.isEmpty()) {
    args=HELP_COMMAND;
  }
  String commandName=args.get(0);
  if (ALL_HELP_OPTIONS.contains(commandName)) {
    commandName="help";
  }
  BlazeCommand command=runtime.getCommandMap().get(commandName);
  if (command == null) {
    outErr.printErrLn(String.format("Command '%s' not found. Try '%s help'.",commandName,runtime.getProductName()));
    return ExitCode.COMMAND_LINE_ERROR.getNumericExitCode();
  }
  long waitTimeInMs=0;
synchronized (commandLock) {
    boolean warningPrinted=false;
    while (currentClientDescription != null) {
switch (lockingMode) {
case WAIT:
        if (!warningPrinted) {
          outErr.printErrLn("Another command (" + currentClientDescription + ") is running. "+ " Waiting for it to complete...");
          warningPrinted=true;
        }
      long clockBefore=BlazeClock.nanoTime();
    commandLock.wait();
  waitTimeInMs=(BlazeClock.nanoTime() - clockBefore) / (1000L * 1000L);
break;
case ERROR_OUT:
outErr.printErrLn(String.format("Another command (" + currentClientDescription + ") is "+ "running. Exiting immediately."));
return ExitCode.COMMAND_LINE_ERROR.getNumericExitCode();
default :
throw new IllegalStateException();
}
}
Verify.verify(currentClientDescription == null);
currentClientDescription=clientDescription;
}
try {
if (shutdownReason != null) {
outErr.printErrLn("Server shut down " + shutdownReason);
return ExitCode.LOCAL_ENVIRONMENTAL_ERROR.getNumericExitCode();
}
return execExclusively(args,outErr,firstContactTime,commandName,command,waitTimeInMs);
}
 catch (ShutdownBlazeServerException e) {
shutdownReason="explicitly by client " + currentClientDescription;
throw e;
}
 finally {
synchronized (commandLock) {
currentClientDescription=null;
commandLock.notify();
}
}
}
