{
  LOG.info("Starting analysis");
  pollInterruptedStatus();
  skyframeBuildView.resetEvaluatedConfiguredTargetKeysSet();
  Collection<Target> targets=loadingResult.getTargets();
  eventBus.post(new AnalysisPhaseStartedEvent(targets));
  skyframeBuildView.setConfigurations(configurations);
  List<TargetAndConfiguration> nodes=nodesForTargets(configurations,targets);
  List<ConfiguredTargetKey> targetSpecs=Lists.transform(nodes,new Function<TargetAndConfiguration,ConfiguredTargetKey>(){
    @Override public ConfiguredTargetKey apply(    TargetAndConfiguration node){
      return new ConfiguredTargetKey(node.getLabel(),node.getConfiguration());
    }
  }
);
  List<AspectValueKey> aspectKeys=new ArrayList<>();
  for (  String aspect : aspects) {
    int delimiterPosition=aspect.indexOf('%');
    if (delimiterPosition >= 0) {
      PathFragment bzlFile=new PathFragment("/" + aspect.substring(0,delimiterPosition));
      String skylarkFunctionName=aspect.substring(delimiterPosition + 1);
      for (      ConfiguredTargetKey targetSpec : targetSpecs) {
        aspectKeys.add(AspectValue.createSkylarkAspectKey(targetSpec.getLabel(),targetSpec.getConfiguration(),bzlFile,skylarkFunctionName));
      }
    }
 else {
      final Class<? extends ConfiguredNativeAspectFactory> aspectFactoryClass=ruleClassProvider.getAspectFactoryMap().get(aspect).asSubclass(ConfiguredNativeAspectFactory.class);
      if (aspectFactoryClass != null) {
        for (        ConfiguredTargetKey targetSpec : targetSpecs) {
          aspectKeys.add(AspectValue.createAspectKey(targetSpec.getLabel(),targetSpec.getConfiguration(),new NativeAspectClass<ConfiguredNativeAspectFactory>(aspectFactoryClass)));
        }
      }
 else {
        throw new ViewCreationFailedException("Aspect '" + aspect + "' is unknown");
      }
    }
  }
  if (loadingEnabled) {
    setArtifactRoots(loadingResult.getPackageRoots(),configurations);
  }
  prepareToBuild(configurations,new SkyframePackageRootResolver(skyframeExecutor,eventHandler));
  skyframeExecutor.injectWorkspaceStatusData();
  SkyframeAnalysisResult skyframeAnalysisResult;
  try {
    skyframeAnalysisResult=skyframeBuildView.configureTargets(eventHandler,targetSpecs,aspectKeys,eventBus,viewOptions.keepGoing);
    setArtifactRoots(skyframeAnalysisResult.getPackageRoots(),configurations);
  }
  finally {
    skyframeBuildView.clearInvalidatedConfiguredTargets();
  }
  int numTargetsToAnalyze=nodes.size();
  int numSuccessful=skyframeAnalysisResult.getConfiguredTargets().size();
  if (0 < numSuccessful && numSuccessful < numTargetsToAnalyze) {
    String msg=String.format("Analysis succeeded for only %d of %d top-level targets",numSuccessful,numTargetsToAnalyze);
    eventHandler.handle(Event.info(msg));
    LOG.info(msg);
  }
  AnalysisResult result=createResult(eventHandler,loadingResult,topLevelOptions,viewOptions,skyframeAnalysisResult);
  LOG.info("Finished analysis");
  return result;
}
