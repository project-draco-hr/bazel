{
  LOG.info("Starting analysis");
  pollInterruptedStatus();
  skyframeBuildView.resetEvaluatedConfiguredTargetKeysSet();
  Collection<Target> targets=loadingResult.getTargets();
  eventBus.post(new AnalysisPhaseStartedEvent(targets));
  skyframeBuildView.setConfigurations(configurations);
  List<TargetAndConfiguration> topLevelTargetsWithConfigs=nodesForTopLevelTargets(configurations,targets,eventHandler);
  List<ConfiguredTargetKey> topLevelCtKeys=Lists.transform(topLevelTargetsWithConfigs,new Function<TargetAndConfiguration,ConfiguredTargetKey>(){
    @Override public ConfiguredTargetKey apply(    TargetAndConfiguration node){
      return new ConfiguredTargetKey(node.getLabel(),node.getConfiguration());
    }
  }
);
  List<AspectValueKey> aspectKeys=new ArrayList<>();
  for (  String aspect : aspects) {
    int delimiterPosition=aspect.indexOf('%');
    if (delimiterPosition >= 0) {
      PathFragment bzlFile=new PathFragment("/" + aspect.substring(0,delimiterPosition));
      String skylarkFunctionName=aspect.substring(delimiterPosition + 1);
      for (      TargetAndConfiguration targetSpec : topLevelTargetsWithConfigs) {
        if (!(targetSpec.getTarget() instanceof Rule)) {
          continue;
        }
        aspectKeys.add(AspectValue.createSkylarkAspectKey(targetSpec.getLabel(),targetSpec.getConfiguration(),targetSpec.getConfiguration(),bzlFile,skylarkFunctionName));
      }
    }
 else {
      final NativeAspectClass aspectFactoryClass=ruleClassProvider.getNativeAspectClassMap().get(aspect);
      if (aspectFactoryClass != null) {
        for (        TargetAndConfiguration targetSpec : topLevelTargetsWithConfigs) {
          if (!(targetSpec.getTarget() instanceof Rule)) {
            continue;
          }
          aspectKeys.add(AspectValue.createAspectKey(targetSpec.getLabel(),targetSpec.getConfiguration(),targetSpec.getConfiguration(),aspectFactoryClass));
        }
      }
 else {
        throw new ViewCreationFailedException("Aspect '" + aspect + "' is unknown");
      }
    }
  }
  skyframeExecutor.injectWorkspaceStatusData();
  SkyframeAnalysisResult skyframeAnalysisResult;
  try {
    skyframeAnalysisResult=skyframeBuildView.configureTargets(eventHandler,topLevelCtKeys,aspectKeys,eventBus,viewOptions.keepGoing);
    setArtifactRoots(skyframeAnalysisResult.getPackageRoots());
  }
  finally {
    skyframeBuildView.clearInvalidatedConfiguredTargets();
  }
  int numTargetsToAnalyze=topLevelTargetsWithConfigs.size();
  int numSuccessful=skyframeAnalysisResult.getConfiguredTargets().size();
  if (0 < numSuccessful && numSuccessful < numTargetsToAnalyze) {
    String msg=String.format("Analysis succeeded for only %d of %d top-level targets",numSuccessful,numTargetsToAnalyze);
    eventHandler.handle(Event.info(msg));
    LOG.info(msg);
  }
  AnalysisResult result=createResult(eventHandler,loadingResult,topLevelOptions,viewOptions,skyframeAnalysisResult);
  LOG.info("Finished analysis");
  return result;
}
