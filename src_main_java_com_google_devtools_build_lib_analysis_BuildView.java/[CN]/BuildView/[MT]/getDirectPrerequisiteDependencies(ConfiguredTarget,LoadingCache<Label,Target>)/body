{
  if (!(ct.getTarget() instanceof Rule)) {
    return ImmutableList.of();
  }
class SilentDependencyResolver extends DependencyResolver {
    @Override protected void invalidVisibilityReferenceHook(    TargetAndConfiguration node,    Label label){
    }
    @Override protected void invalidPackageGroupReferenceHook(    TargetAndConfiguration node,    Label label){
    }
    @Override protected Target getTarget(    Label label) throws NoSuchThingException {
      if (targetCache == null) {
        return packageManager.getLoadedTarget(label);
      }
      try {
        return targetCache.get(label);
      }
 catch (      ExecutionException e) {
        throw new IllegalStateException(e);
      }
    }
  }
  DependencyResolver dependencyResolver=new SilentDependencyResolver();
  TargetAndConfiguration ctgNode=new TargetAndConfiguration(ct.getTarget(),ct.getConfiguration());
  return dependencyResolver.dependentNodes(ctgNode,configurations.getHostConfiguration(),getConfigurableAttributeKeys(ctgNode));
}
