{
  CompilationAttributes compilationAttributes=CompilationAttributes.Builder.fromRuleContext(ruleContext).build();
  ObjcCommon.Builder commonBuilder=new Builder(ruleContext).addExtraSdkFrameworks(compilationAttributes.sdkFrameworks()).addExtraWeakSdkFrameworks(compilationAttributes.weakSdkFrameworks()).addExtraSdkDylibs(compilationAttributes.sdkDylibs());
  ImmutableList<Artifact> frameworkImports=ruleContext.getPrerequisiteArtifacts("framework_imports",Mode.TARGET).list();
  if (ruleContext.attributes().get("is_dynamic",Type.BOOLEAN)) {
    commonBuilder.addDynamicFrameworkImports(frameworkImports);
  }
 else {
    commonBuilder.addStaticFrameworkImports(frameworkImports);
  }
  Iterable<String> containerErrors=ObjcCommon.notInContainerErrors(frameworkImports,ObjcCommon.FRAMEWORK_CONTAINER_TYPE);
  for (  String error : containerErrors) {
    ruleContext.attributeError("framework_imports",error);
  }
  NestedSet<Artifact> filesToBuild=NestedSetBuilder.emptySet(STABLE_ORDER);
  return ObjcRuleClasses.ruleConfiguredTarget(ruleContext,filesToBuild).addProvider(ObjcProvider.class,commonBuilder.build().getObjcProvider()).build();
}
