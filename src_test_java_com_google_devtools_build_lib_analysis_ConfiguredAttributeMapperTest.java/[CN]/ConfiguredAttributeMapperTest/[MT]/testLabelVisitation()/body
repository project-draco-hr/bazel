{
  writeConfigRules();
  scratch.file("a/BUILD","sh_binary(","    name = 'bin',","    srcs = ['bin.sh'],","    deps = select({","        '//conditions:a': [':adep'],","        '//conditions:b': [':bdep'],","        '" + BuildType.Selector.DEFAULT_CONDITION_KEY + "': [':defaultdep'],","    }))","sh_library(","    name = 'adep',","    srcs = ['adep.sh'])","sh_library(","    name = 'bdep',","    srcs = ['bdep.sh'])","sh_library(","    name = 'defaultdep',","    srcs = ['defaultdep.sh'])");
  final List<Label> visitedLabels=new ArrayList<>();
  AttributeMap.AcceptsLabelAttribute testVisitor=new AttributeMap.AcceptsLabelAttribute(){
    @Override public void acceptLabelAttribute(    Label label,    Attribute attribute){
      if (label.toString().contains("//a:")) {
        visitedLabels.add(label);
      }
    }
  }
;
  final Label binSrc=Label.parseAbsolute("//a:bin.sh");
  useConfiguration("-c","opt");
  getMapper("//a:bin").visitLabels(testVisitor);
  assertSameContents(ImmutableList.of(binSrc,Label.parseAbsolute("//a:adep")),visitedLabels);
  visitedLabels.clear();
  useConfiguration("-c","dbg");
  getMapper("//a:bin").visitLabels(testVisitor);
  assertSameContents(ImmutableList.of(binSrc,Label.parseAbsolute("//a:bdep")),visitedLabels);
  visitedLabels.clear();
  useConfiguration("-c","fastbuild");
  getMapper("//a:bin").visitLabels(testVisitor);
  assertSameContents(ImmutableList.of(binSrc,Label.parseAbsolute("//a:defaultdep")),visitedLabels);
}
