{
  AtomicReference<PathPackageLocator> pkgLocatorRef=new AtomicReference<>(pkgLocator);
  BlazeDirectories directories=new BlazeDirectories(pkgRoot,outputBase,pkgRoot,TestConstants.PRODUCT_NAME);
  ExternalFilesHelper externalFilesHelper=new ExternalFilesHelper(pkgLocatorRef,errorOnExternalFiles,directories);
  differencer=new RecordingDifferencer();
  MemoizingEvaluator evaluator=new InMemoryMemoizingEvaluator(ImmutableMap.<SkyFunctionName,SkyFunction>builder().put(SkyFunctions.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),externalFilesHelper)).put(SkyFunctions.FILE_SYMLINK_CYCLE_UNIQUENESS,new FileSymlinkCycleUniquenessFunction()).put(SkyFunctions.FILE_SYMLINK_INFINITE_EXPANSION_UNIQUENESS,new FileSymlinkInfiniteExpansionUniquenessFunction()).put(SkyFunctions.FILE,new FileFunction(pkgLocatorRef)).put(SkyFunctions.PACKAGE,new PackageFunction(null,null,null,null,null,null,null)).put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(new AtomicReference<>(ImmutableSet.<PackageIdentifier>of()))).put(SkyFunctions.WORKSPACE_AST,new WorkspaceASTFunction(TestRuleClassProvider.getRuleClassProvider())).put(SkyFunctions.WORKSPACE_FILE,new WorkspaceFileFunction(TestRuleClassProvider.getRuleClassProvider(),TestConstants.PACKAGE_FACTORY_FACTORY_FOR_TESTING.create(TestRuleClassProvider.getRuleClassProvider(),fs),directories)).put(SkyFunctions.EXTERNAL_PACKAGE,new ExternalPackageFunction()).build(),differencer);
  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());
  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator);
  return new SequentialBuildDriver(evaluator);
}
