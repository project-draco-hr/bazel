{
  AnalysisResult analysisResult=update(ImmutableList.of(target),ImmutableList.of("intellij_tools/intellij_info.bzl%intellij_info_aspect"),false,LOADING_PHASE_THREADS,true,new EventBus());
  Collection<AspectValue> aspects=analysisResult.getAspects();
  assertThat(aspects).hasSize(1);
  AspectValue aspectValue=aspects.iterator().next();
  this.configuredAspect=aspectValue.getConfiguredAspect();
  OutputGroupProvider provider=configuredAspect.getProvider(OutputGroupProvider.class);
  NestedSet<Artifact> outputGroup=provider.getOutputGroup("ide-info-text");
  Map<String,RuleIdeInfo> ruleIdeInfos=new HashMap<>();
  for (  Artifact artifact : outputGroup) {
    Action generatingAction=getGeneratingAction(artifact);
    assertThat(generatingAction).isInstanceOf(FileWriteAction.class);
    String fileContents=((FileWriteAction)generatingAction).getFileContents();
    Builder builder=RuleIdeInfo.newBuilder();
    TextFormat.getParser().merge(fileContents,builder);
    RuleIdeInfo ruleIdeInfo=builder.build();
    ruleIdeInfos.put(ruleIdeInfo.getLabel(),ruleIdeInfo);
  }
  return ruleIdeInfos;
}
