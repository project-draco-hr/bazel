{
  scratch.file("com/google/example/BUILD","java_library(","    name = 'simple',","    srcs = ['simple/Simple.java']",")");
  AnalysisResult analysisResult=update(ImmutableList.of("//com/google/example:simple"),ImmutableList.of("intellij_tools/intellij_info.bzl%intellij_info_aspect"),false,LOADING_PHASE_THREADS,true,new EventBus());
  Collection<AspectValue> aspects=analysisResult.getAspects();
  assertThat(aspects).hasSize(1);
  AspectValue aspectValue=aspects.iterator().next();
  OutputGroupProvider provider=aspectValue.getConfiguredAspect().getProvider(OutputGroupProvider.class);
  NestedSet<Artifact> outputGroup=provider.getOutputGroup("ide-info-text");
  assertThat(outputGroup.toList()).hasSize(1);
  for (  Artifact artifact : outputGroup) {
    Action generatingAction=getGeneratingAction(artifact);
    assertThat(generatingAction).isInstanceOf(FileWriteAction.class);
    String fileContents=((FileWriteAction)generatingAction).getFileContents();
    Builder builder=RuleIdeInfo.newBuilder();
    TextFormat.getParser().merge(fileContents,builder);
    RuleIdeInfo build=builder.build();
    assertThat(build.getLabel()).isEqualTo("//com/google/example:simple");
    assertThat(build.getKind()).isEqualTo(Kind.JAVA_LIBRARY);
  }
}
