{
  setGraphForTesting(new DeterministicInMemoryGraph());
  final SkyKey cycleKey1=GraphTester.toSkyKey("zcycleKey1");
  final SkyKey cycleKey2=GraphTester.toSkyKey("acycleKey2");
  tester.getOrCreate(cycleKey2).addDependency(cycleKey2).setComputedValue(CONCATENATE);
  tester.getOrCreate(cycleKey1).setBuilder(new SkyFunction(){
    @Nullable @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException, InterruptedException {
      Map<SkyKey,SkyValue> result=env.getValues(ImmutableList.of(cycleKey1,cycleKey2));
      Preconditions.checkState(env.valuesMissing(),result);
      return null;
    }
    @Nullable @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  for (int i=0; i < 2; i++) {
    EvaluationResult<SkyValue> result=tester.eval(true,cycleKey1);
    assertEquals(null,result.get(cycleKey1));
    ErrorInfo errorInfo=result.getError(cycleKey1);
    CycleInfo cycleInfo=Iterables.getOnlyElement(errorInfo.getCycleInfo());
    assertThat(cycleInfo.getCycle()).containsExactly(cycleKey1).inOrder();
    assertThat(cycleInfo.getPathToCycle()).isEmpty();
  }
}
