{
  initializeTester();
  SkyKey cycleKey1=GraphTester.toSkyKey("cycleKey1");
  SkyKey cycleKey2=GraphTester.toSkyKey("cycleKey2");
  SkyKey mid=GraphTester.toSkyKey("mid");
  SkyKey errorKey=GraphTester.toSkyKey("errorKey");
  tester.getOrCreate(cycleKey1).addDependency(cycleKey2).setComputedValue(COPY);
  tester.getOrCreate(cycleKey2).addDependency(cycleKey1).setComputedValue(COPY);
  tester.getOrCreate(errorKey).setHasTransientError(true);
  tester.getOrCreate(mid).addErrorDependency(errorKey,new StringValue("recovered")).setComputedValue(COPY);
  SkyKey top=GraphTester.toSkyKey("top");
  CountDownLatch topEvaluated=new CountDownLatch(2);
  tester.getOrCreate(top).setBuilder(new ChainedFunction(topEvaluated,null,null,false,new StringValue("unused"),ImmutableList.of(mid,cycleKey1)));
  EvaluationResult<StringValue> evalResult=tester.eval(true,top);
  assertTrue(evalResult.hasError());
  ErrorInfo errorInfo=evalResult.getError(top);
  assertThat(topEvaluated.getCount()).isEqualTo(1);
  assertThat(errorInfo.isTransient()).isTrue();
  assertWithMessage(errorInfo.toString()).that(errorInfo.getCycleInfo()).containsExactly(new CycleInfo(ImmutableList.of(top),ImmutableList.of(cycleKey1,cycleKey2)));
  assertThat(errorInfo.getException()).hasMessage(NODE_TYPE.getName() + ":errorKey");
  assertThat(errorInfo.getRootCauseOfException()).isEqualTo(errorKey);
  assertThat(evalResult.getWalkableGraph().getDirectDeps(ImmutableList.of(top)).get(top)).doesNotContain(ErrorTransienceValue.KEY);
}
