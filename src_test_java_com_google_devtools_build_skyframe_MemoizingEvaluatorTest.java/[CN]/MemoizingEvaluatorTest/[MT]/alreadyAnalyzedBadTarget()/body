{
  final SkyKey mid=GraphTester.toSkyKey("zzmid");
  final CountDownLatch valueSet=new CountDownLatch(1);
  injectGraphListenerForTesting(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (!key.equals(mid)) {
        return;
      }
switch (type) {
case ADD_REVERSE_DEP:
        if (context == null) {
          TrackingAwaiter.INSTANCE.awaitLatchAndTrackExceptions(valueSet,"value not set");
        }
      break;
case SET_VALUE:
    valueSet.countDown();
  break;
default :
break;
}
}
}
,true);
SkyKey top=GraphTester.skyKey("aatop");
tester.getOrCreate(top).addDependency(mid).setComputedValue(CONCATENATE);
tester.getOrCreate(mid).setHasError(true);
tester.eval(false,top,mid);
assertEquals(0L,valueSet.getCount());
assertThat(tester.progressReceiver.evaluated).containsExactly(mid);
}
