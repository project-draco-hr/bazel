{
  initializeTester();
  SkyKey aKey=GraphTester.toSkyKey("a");
  SkyKey bKey=GraphTester.toSkyKey("b");
  tester.getOrCreate(aKey).addDependency(bKey);
  tester.getOrCreate(bKey).addDependency(aKey);
  EvaluationResult<StringValue> result=tester.eval(true,aKey,bKey);
  assertThatEvaluationResult(result).hasError();
  assertThatEvaluationResult(result).hasErrorEntryForKeyThat(aKey).hasCycleInfoThat().isNotEmpty();
  CycleInfo aCycleInfo=Iterables.getOnlyElement(result.getError(aKey).getCycleInfo());
  if (cyclesDetected()) {
    assertThat(aCycleInfo.getCycle()).containsExactly(aKey,bKey).inOrder();
    assertThat(aCycleInfo.getPathToCycle()).isEmpty();
  }
  assertThatEvaluationResult(result).hasErrorEntryForKeyThat(bKey).hasCycleInfoThat().isNotEmpty();
  CycleInfo bCycleInfo=Iterables.getOnlyElement(result.getError(bKey).getCycleInfo());
  if (cyclesDetected()) {
    assertThat(bCycleInfo.getCycle()).containsExactly(bKey,aKey).inOrder();
    assertThat(bCycleInfo.getPathToCycle()).isEmpty();
  }
  tester.getOrCreate(bKey).removeDependency(aKey);
  tester.set(bKey,new StringValue("bValue"));
  tester.getOrCreate(aKey).removeDependency(bKey);
  tester.set(aKey,new StringValue("aValue"));
  tester.invalidate();
  result=tester.eval(true,aKey,bKey);
  assertThatEvaluationResult(result).hasEntryThat(aKey).isEqualTo(new StringValue("aValue"));
  assertThatEvaluationResult(result).hasEntryThat(bKey).isEqualTo(new StringValue("bValue"));
}
