{
  initializeTester();
  SkyKey cycleKey1=GraphTester.toSkyKey("cycleKey1");
  SkyKey cycleKey2=GraphTester.toSkyKey("cycleKey2");
  tester.getOrCreate(cycleKey1).addDependency(cycleKey2).setComputedValue(COPY);
  tester.getOrCreate(cycleKey2).addDependency(cycleKey1).setComputedValue(COPY);
  EvaluationResult<StringValue> result=tester.eval(true,cycleKey1);
  assertEquals(null,result.get(cycleKey1));
  ErrorInfo errorInfo=result.getError(cycleKey1);
  CycleInfo cycleInfo=Iterables.getOnlyElement(errorInfo.getCycleInfo());
  if (cyclesDetected()) {
    assertThat(cycleInfo.getCycle()).containsExactly(cycleKey1,cycleKey2).inOrder();
    assertThat(cycleInfo.getPathToCycle()).isEmpty();
  }
  tester.getOrCreate(cycleKey1,true);
  tester.invalidate();
  result=tester.eval(true,cycleKey1);
  assertEquals(null,result.get(cycleKey1));
  errorInfo=result.getError(cycleKey1);
  cycleInfo=Iterables.getOnlyElement(errorInfo.getCycleInfo());
  if (cyclesDetected()) {
    assertThat(cycleInfo.getCycle()).containsExactly(cycleKey1,cycleKey2).inOrder();
    assertThat(cycleInfo.getPathToCycle()).isEmpty();
  }
}
