{
  makeGraphDeterministic();
  final SkyKey topKey=skyKey("bKey");
  final SkyKey depKey=skyKey("aKey");
  tester.getOrCreate(topKey).addDependency(depKey).setConstantValue(new StringValue("a"));
  tester.getOrCreate(depKey).setConstantValue(new StringValue("b"));
  EvaluationResult<StringValue> result1=tester.eval(true,topKey,depKey);
  assertThatEvaluationResult(result1).hasEntryThat(topKey).isEqualTo(new StringValue("a"));
  assertThatEvaluationResult(result1).hasEntryThat(depKey).isEqualTo(new StringValue("b"));
  assertThatEvaluationResult(result1).hasNoError();
  tester.getOrCreate(depKey,true).addDependency(depKey);
  tester.getOrCreate(topKey,true).setConstantValue(null).removeDependency(depKey).setBuilder(new SkyFunction(){
    @Nullable @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException, InterruptedException {
      env.getValues(ImmutableList.of(topKey,depKey));
      assertThat(env.valuesMissing()).isTrue();
      return null;
    }
    @Nullable @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  tester.invalidate();
  EvaluationResult<StringValue> result2=tester.eval(true,topKey,depKey);
  if (cyclesDetected()) {
    assertThatEvaluationResult(result2).hasErrorEntryForKeyThat(topKey).hasCycleInfoThat().containsExactly(new CycleInfo(ImmutableList.of(topKey)));
    assertThatEvaluationResult(result2).hasDirectDepsInGraphThat(topKey).containsExactly(topKey);
    assertThatEvaluationResult(result2).hasErrorEntryForKeyThat(depKey).hasCycleInfoThat().containsExactly(new CycleInfo(ImmutableList.of(depKey)));
  }
 else {
    assertThatEvaluationResult(result2).hasErrorEntryForKeyThat(topKey).hasCycleInfoThat().hasSize(1);
    assertThatEvaluationResult(result2).hasErrorEntryForKeyThat(depKey).hasCycleInfoThat().hasSize(1);
  }
}
