{
  initializeTester();
  String[] leftValues=new String[TEST_NODE_COUNT];
  String[] rightValues=new String[TEST_NODE_COUNT];
  for (int i=0; i < leftValues.length; i++) {
    leftValues[i]="left-" + i;
    rightValues[i]="right-" + i;
    if (i == 0) {
      tester.getOrCreate(leftValues[i]).addDependency("leaf").setComputedValue(COPY);
      tester.getOrCreate(rightValues[i]).addDependency("leaf").setComputedValue(COPY);
    }
 else {
      tester.getOrCreate(leftValues[i]).addDependency(leftValues[i - 1]).addDependency(rightValues[i - 1]).setComputedValue(new PassThroughSelected(toSkyKey(leftValues[i - 1])));
      tester.getOrCreate(rightValues[i]).addDependency(leftValues[i - 1]).addDependency(rightValues[i - 1]).setComputedValue(new PassThroughSelected(toSkyKey(rightValues[i - 1])));
    }
  }
  tester.set("leaf",new StringValue("leaf"));
  String lastLeft="left-" + (TEST_NODE_COUNT - 1);
  String lastRight="right-" + (TEST_NODE_COUNT - 1);
  EvaluationResult<StringValue> result=tester.eval(false,lastLeft,lastRight);
  assertEquals(new StringValue("leaf"),result.get(toSkyKey(lastLeft)));
  assertEquals(new StringValue("leaf"),result.get(toSkyKey(lastRight)));
  for (int j=0; j < TESTED_NODES; j++) {
    String value="other" + j;
    tester.set("leaf",new StringValue(value));
    tester.invalidate();
    result=tester.eval(false,lastLeft,lastRight);
    assertEquals(new StringValue(value),result.get(toSkyKey(lastLeft)));
    assertEquals(new StringValue(value),result.get(toSkyKey(lastRight)));
  }
}
