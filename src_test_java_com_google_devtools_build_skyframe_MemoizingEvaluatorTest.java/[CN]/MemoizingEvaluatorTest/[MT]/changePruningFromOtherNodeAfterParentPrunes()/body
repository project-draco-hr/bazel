{
  initializeTester();
  final SkyKey leaf=GraphTester.toSkyKey("leaf");
  final SkyKey other=GraphTester.toSkyKey("other");
  SkyKey top=GraphTester.toSkyKey("top");
  tester.set(leaf,new StringValue("leafy"));
  tester.set(other,new StringValue("other"));
  final StringValue fixedTopValue=new StringValue("top");
  final AtomicBoolean topEvaluated=new AtomicBoolean(false);
  tester.getOrCreate(top).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws InterruptedException {
      topEvaluated.set(true);
      return env.getValue(other) == null || env.getValue(leaf) == null ? null : fixedTopValue;
    }
    @Nullable @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  StringValue topValue=(StringValue)tester.evalAndGet("top");
  assertEquals(fixedTopValue,topValue);
  assertThat(topEvaluated.get()).isTrue();
  tester.set(leaf,new StringValue("crunchy"));
  tester.invalidate();
  topEvaluated.set(false);
  StringValue topValue2=(StringValue)tester.evalAndGet("top");
  assertEquals(fixedTopValue,topValue2);
  assertThat(topEvaluated.get()).isTrue();
  tester.getOrCreate(other,true);
  tester.invalidate();
  topEvaluated.set(false);
  StringValue topValue3=(StringValue)tester.evalAndGet("top");
  assertEquals(fixedTopValue,topValue3);
  assertThat(topEvaluated.get()).isFalse();
}
