{
  final SkyKey errorKey=GraphTester.toSkyKey("errorKey");
  final SkyKey otherErrorKey=GraphTester.toSkyKey("otherErrorKey");
  final CountDownLatch errorCommitted=new CountDownLatch(1);
  final CountDownLatch otherStarted=new CountDownLatch(1);
  final CountDownLatch otherDone=new CountDownLatch(1);
  final AtomicInteger numOtherInvocations=new AtomicInteger(0);
  final AtomicReference<String> bogusInvocationMessage=new AtomicReference<>(null);
  final AtomicReference<String> nonNullValueMessage=new AtomicReference<>(null);
  tester.getOrCreate(errorKey).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException {
      TrackingAwaiter.INSTANCE.awaitLatchAndTrackExceptions(otherStarted,"otherErrorKey's SkyFunction didn't start in time.");
      throw new GenericFunctionException(new SomeErrorException("error"),Transience.PERSISTENT);
    }
    @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  tester.getOrCreate(otherErrorKey).setBuilder(new SkyFunction(){
    @Override public SkyValue compute(    SkyKey skyKey,    Environment env) throws SkyFunctionException {
      otherStarted.countDown();
      int invocations=numOtherInvocations.incrementAndGet();
      TrackingAwaiter.INSTANCE.awaitLatchAndTrackExceptions(errorCommitted,"errorKey's error didn't get committed to the graph in time");
      try {
        SkyValue value=env.getValueOrThrow(errorKey,SomeErrorException.class);
        if (value != null) {
          nonNullValueMessage.set("bogus non-null value " + value);
        }
        if (invocations != 1) {
          bogusInvocationMessage.set("bogus invocation count: " + invocations);
        }
        otherDone.countDown();
        throw new GenericFunctionException(new SomeErrorException("other"),Transience.PERSISTENT);
      }
 catch (      SomeErrorException e) {
        fail();
        return null;
      }
    }
    @Override public String extractTag(    SkyKey skyKey){
      return null;
    }
  }
);
  setGraphForTesting(new NotifyingInMemoryGraph(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (key.equals(errorKey) && type == EventType.SET_VALUE && order == Order.AFTER) {
        errorCommitted.countDown();
        TrackingAwaiter.INSTANCE.awaitLatchAndTrackExceptions(otherDone,"otherErrorKey's SkyFunction didn't finish in time.");
      }
    }
  }
));
  EvaluationResult<StringValue> result=tester.eval(false,errorKey,otherErrorKey);
  assertTrue(result.hasError());
  assertEquals(errorKey,result.getError().getRootCauseOfException());
  assertNull(tester.driver.getExistingErrorForTesting(otherErrorKey));
  assertNull(tester.driver.getExistingValueForTesting(otherErrorKey));
  assertNull(nonNullValueMessage.get(),nonNullValueMessage.get());
  assertEquals(numOtherInvocations.get(),1);
  assertNull(bogusInvocationMessage.get(),bogusInvocationMessage.get());
}
