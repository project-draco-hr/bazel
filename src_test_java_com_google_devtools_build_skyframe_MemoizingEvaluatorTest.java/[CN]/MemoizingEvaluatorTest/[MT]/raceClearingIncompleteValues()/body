{
  SkyKey topKey=GraphTester.toSkyKey("aatop");
  final SkyKey midKey=GraphTester.toSkyKey("zzmid");
  SkyKey badKey=GraphTester.toSkyKey("bad");
  final AtomicBoolean waitForSecondCall=new AtomicBoolean(false);
  final CountDownLatch otherThreadWinning=new CountDownLatch(1);
  final AtomicReference<Thread> firstThread=new AtomicReference<>();
  injectGraphListenerForTesting(new Listener(){
    @Override public void accept(    SkyKey key,    EventType type,    Order order,    Object context){
      if (!waitForSecondCall.get()) {
        return;
      }
      if (key.equals(midKey)) {
        if (type == EventType.CREATE_IF_ABSENT) {
          firstThread.compareAndSet(null,Thread.currentThread());
          return;
        }
        if (type == EventType.ADD_REVERSE_DEP) {
          if (order == Order.BEFORE && Thread.currentThread().equals(firstThread.get())) {
            TrackingAwaiter.INSTANCE.awaitLatchAndTrackExceptions(otherThreadWinning,"other thread didn't pass this one");
          }
 else           if (order == Order.AFTER && !Thread.currentThread().equals(firstThread.get())) {
            otherThreadWinning.countDown();
          }
        }
      }
    }
  }
,true);
  tester.getOrCreate(topKey).addDependency(midKey).setComputedValue(CONCATENATE);
  tester.getOrCreate(midKey).addDependency(badKey).setComputedValue(CONCATENATE);
  tester.getOrCreate(badKey).setHasError(true);
  EvaluationResult<SkyValue> result=tester.eval(false,topKey,midKey);
  assertThat(result.getError(midKey).getRootCauses()).containsExactly(badKey);
  waitForSecondCall.set(true);
  result=tester.eval(true,topKey,midKey);
  assertNotNull(firstThread.get());
  assertEquals(0,otherThreadWinning.getCount());
  assertThatEvaluationResult(result).hasErrorEntryForKeyThat(midKey).isNotNull();
  assertThatEvaluationResult(result).hasErrorEntryForKeyThat(topKey).isNotNull();
  if (rootCausesStored()) {
    assertThatEvaluationResult(result).hasErrorEntryForKeyThat(midKey).rootCauseOfExceptionIs(badKey);
    assertThatEvaluationResult(result).hasErrorEntryForKeyThat(topKey).rootCauseOfExceptionIs(badKey);
  }
}
