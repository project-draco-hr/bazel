{
  Builder<String,ResourceXmlAttrValue> formats=ImmutableMap.<String,AttrXmlResourceValue.ResourceXmlAttrValue>builder();
  for (  Entry<String,SerializeFormat.DataValueXml> entry : proto.getMappedXmlValue().entrySet()) {
switch (entry.getKey()) {
case FLAGS:
      formats.put(entry.getKey(),FlagResourceXmlAttrValue.of(entry.getValue().getMappedStringValue()));
    break;
case ENUM:
  formats.put(entry.getKey(),EnumResourceXmlAttrValue.of(entry.getValue().getMappedStringValue()));
break;
case REFERENCE:
formats.put(entry.getKey(),ReferenceResourceXmlAttrValue.of());
break;
case COLOR:
formats.put(entry.getKey(),ColorResourceXmlAttrValue.of());
break;
case BOOLEAN:
formats.put(entry.getKey(),BooleanResourceXmlAttrValue.of());
break;
case DIMENSION:
formats.put(entry.getKey(),DimensionResourceXmlAttrValue.of());
break;
case FLOAT:
formats.put(entry.getKey(),FloatResourceXmlAttrValue.of());
break;
case INTEGER:
formats.put(entry.getKey(),IntegerResourceXmlAttrValue.of());
break;
case STRING:
formats.put(entry.getKey(),StringResourceXmlAttrValue.of());
break;
case FRACTION:
formats.put(entry.getKey(),FractionResourceXmlAttrValue.of());
break;
default :
throw new InvalidProtocolBufferException("Unexpected format: " + entry.getKey());
}
}
return of(formats.build());
}
