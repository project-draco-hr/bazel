{
  WorkspaceAttributeMapper mapper=WorkspaceAttributeMapper.of(rule);
  boolean hasRepository=mapper.isAttributeValueExplicitlySpecified("repository");
  boolean hasServer=mapper.isAttributeValueExplicitlySpecified("server");
  if (hasRepository && hasServer) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),rule + " specifies both " + "'repository' and 'server', which are mutually exclusive options"),Transience.PERSISTENT);
  }
  try {
    if (hasRepository) {
      return MavenServerValue.createFromUrl(mapper.get("repository",Type.STRING));
    }
 else {
      String serverName=DEFAULT_SERVER;
      if (hasServer) {
        serverName=mapper.get("server",Type.STRING);
      }
      return (MavenServerValue)env.getValue(MavenServerValue.key(serverName));
    }
  }
 catch (  EvalException e) {
    throw new RepositoryFunctionException(e,Transience.PERSISTENT);
  }
}
