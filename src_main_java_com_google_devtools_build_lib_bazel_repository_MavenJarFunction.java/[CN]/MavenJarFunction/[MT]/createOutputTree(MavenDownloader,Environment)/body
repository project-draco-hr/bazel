{
  FileValue outputDirectoryValue=createDirectory(downloader.getOutputDirectory(),env);
  if (outputDirectoryValue == null) {
    return null;
  }
  Path repositoryJar;
  try {
    repositoryJar=downloader.download();
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  DecompressorValue value;
  try {
    value=(DecompressorValue)env.getValueOrThrow(DecompressorValue.key(JarFunction.NAME,DecompressorDescriptor.builder().setTargetKind(MavenJarRule.NAME).setTargetName(downloader.getName()).setArchivePath(repositoryJar).setRepositoryPath(outputDirectoryValue.realRootedPath().asPath()).build()),IOException.class);
    if (value == null) {
      return null;
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  FileValue repositoryFileValue=getRepositoryDirectory(value.getDirectory(),env);
  if (repositoryFileValue == null) {
    return null;
  }
  return RepositoryValue.create(repositoryFileValue);
}
