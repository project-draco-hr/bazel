{
  MavenConnector connector=new MavenConnector(outputDirectory.getPathString());
  RepositorySystem system=connector.newRepositorySystem();
  RepositorySystemSession session=connector.newRepositorySystemSession(system);
  RemoteRepository repository=new RemoteRepository.Builder(name,MavenServerValue.DEFAULT_ID,url).setAuthentication(new MavenAuthentication(server)).build();
  ArtifactRequest artifactRequest=new ArtifactRequest();
  Artifact artifact;
  try {
    artifact=new DefaultArtifact(this.artifact);
  }
 catch (  IllegalArgumentException e) {
    throw new IOException(e.getMessage());
  }
  artifactRequest.setArtifact(artifact);
  artifactRequest.setRepositories(ImmutableList.of(repository));
  try {
    ArtifactResult artifactResult=system.resolveArtifact(session,artifactRequest);
    artifact=artifactResult.getArtifact();
  }
 catch (  ArtifactResolutionException e) {
    throw new IOException("Failed to fetch Maven dependency: " + e.getMessage());
  }
  Path downloadPath=outputDirectory.getRelative(artifact.getFile().getAbsolutePath());
  if (!Strings.isNullOrEmpty(sha1)) {
    Hasher hasher=Hashing.sha1().newHasher();
    String downloadSha1=HttpDownloader.getHash(hasher,downloadPath);
    if (!sha1.equals(downloadSha1)) {
      throw new IOException("Downloaded file at " + downloadPath + " has SHA-1 of "+ downloadSha1+ ", does not match expected SHA-1 ("+ sha1+ ")");
    }
  }
  return downloadPath;
}
