{
  Map<Label,Collection<Artifact>> locationMap=Maps.newHashMap();
  if (labelMap != null) {
    for (    Map.Entry<Label,? extends Collection<Artifact>> entry : labelMap.entrySet()) {
      mapGet(locationMap,entry.getKey()).addAll(entry.getValue());
    }
  }
  for (  OutputFile out : ruleContext.getRule().getOutputFiles()) {
    mapGet(locationMap,out.getLabel()).add(ruleContext.createOutputArtifact(out));
  }
  if (ruleContext.getRule().isAttrDefined("srcs",BuildType.LABEL_LIST)) {
    for (    TransitiveInfoCollection src : ruleContext.getPrerequisitesIf("srcs",Mode.TARGET,FileProvider.class)) {
      Iterables.addAll(mapGet(locationMap,AliasProvider.getDependencyLabel(src)),src.getProvider(FileProvider.class).getFilesToBuild());
    }
  }
  List<TransitiveInfoCollection> depsDataAndTools=new ArrayList<>();
  if (ruleContext.getRule().isAttrDefined("deps",BuildType.LABEL_LIST)) {
    Iterables.addAll(depsDataAndTools,ruleContext.getPrerequisitesIf("deps",Mode.DONT_CHECK,FilesToRunProvider.class));
  }
  if (allowDataAttributeEntriesInLabel && ruleContext.getRule().isAttrDefined("data",BuildType.LABEL_LIST)) {
    Iterables.addAll(depsDataAndTools,ruleContext.getPrerequisitesIf("data",Mode.DATA,FilesToRunProvider.class));
  }
  if (ruleContext.getRule().isAttrDefined("tools",BuildType.LABEL_LIST)) {
    Iterables.addAll(depsDataAndTools,ruleContext.getPrerequisitesIf("tools",Mode.HOST,FilesToRunProvider.class));
  }
  for (  TransitiveInfoCollection dep : depsDataAndTools) {
    Label label=AliasProvider.getDependencyLabel(dep);
    FilesToRunProvider filesToRun=dep.getProvider(FilesToRunProvider.class);
    Artifact executableArtifact=filesToRun.getExecutable();
    if (executableArtifact != null) {
      mapGet(locationMap,label).add(executableArtifact);
    }
 else {
      mapGet(locationMap,label).addAll(filesToRun.getFilesToRun());
    }
  }
  return locationMap;
}
