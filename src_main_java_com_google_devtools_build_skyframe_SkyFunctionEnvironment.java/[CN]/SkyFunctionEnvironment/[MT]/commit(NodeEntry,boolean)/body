{
  finalizeErrorInfo();
  NestedSet<TaggedEvents> events=buildEvents(primaryEntry,false);
  Version valueVersion;
  SkyValue valueWithMetadata;
  if (value == null) {
    Preconditions.checkNotNull(errorInfo,"%s %s",skyKey,primaryEntry);
    valueWithMetadata=ValueWithMetadata.error(errorInfo,events);
  }
 else {
    Preconditions.checkState(enqueueParents,"%s %s",skyKey,primaryEntry);
    valueWithMetadata=ValueWithMetadata.normal(value,errorInfo,events);
  }
  if (!oldDeps.isEmpty()) {
    Set<SkyKey> depsToRemove=Sets.difference(oldDeps,primaryEntry.getTemporaryDirectDeps().toSet());
    Collection<? extends NodeEntry> oldDepEntries=evaluatorContext.getGraph().getBatch(skyKey,Reason.RDEP_REMOVAL,depsToRemove).values();
    for (    NodeEntry oldDepEntry : oldDepEntries) {
      oldDepEntry.removeReverseDep(skyKey);
    }
  }
  Set<SkyKey> reverseDeps=primaryEntry.setValue(valueWithMetadata,evaluatorContext.getGraphVersion());
  valueVersion=primaryEntry.getVersion();
  Preconditions.checkState(valueVersion.atMost(evaluatorContext.getGraphVersion()),"%s should be at most %s in the version partial ordering",valueVersion,evaluatorContext.getGraphVersion());
  if (evaluatorContext.getProgressReceiver() != null) {
    evaluatorContext.getProgressReceiver().evaluated(skyKey,new SkyValueSupplier(primaryEntry),valueVersion.equals(evaluatorContext.getGraphVersion()) ? EvaluationState.BUILT : EvaluationState.CLEAN);
  }
  evaluatorContext.signalValuesAndEnqueueIfReady(skyKey,reverseDeps,valueVersion,enqueueParents);
  evaluatorContext.getVisitor().notifyDone(skyKey);
  evaluatorContext.getReplayingNestedSetEventVisitor().visit(events);
}
