{
  try {
    while (!lameDuck) {
      try {
        IdleServerTasks idleChecker=new IdleServerTasks(workspaceDir);
        idleChecker.idle();
        RequestIo requestIo;
        long startTime=clock.currentTimeMillis();
        while (true) {
          try {
            allowingInterrupt.set(true);
            Socket socket=serverSocket.accept();
            long firstContactTime=clock.currentTimeMillis();
            requestIo=new RequestIo(socket,firstContactTime);
            break;
          }
 catch (          SocketTimeoutException e) {
            long idleTime=clock.currentTimeMillis() - startTime;
            if (lameDuck) {
              closeServerSocket();
              return;
            }
 else             if (idleTime > maxIdleMillis || (idleTime > statusCheckMillis && !idleChecker.continueProcessing(idleTime))) {
              enterLameDuck();
            }
          }
        }
        idleChecker.busy();
        List<String> request=null;
        try {
          request=extractRequest(requestIo);
          cmdNum.incrementAndGet();
          inAction.set(true);
          if (request != null) {
            executeRequest(request,requestIo);
          }
        }
  finally {
          inAction.set(false);
          if (request != null) {
synchronized (interruptLock) {
              allowingInterrupt.set(false);
              Thread.interrupted();
            }
          }
          requestIo.shutdown();
switch (rpcService.getShutdown()) {
case NONE:
            break;
case CLEAN:
          return;
case EXPUNGE:
        disableShutdownHooks();
      return;
  }
}
}
 catch (EOFException e) {
LOG.info("Connection to the client lost: " + e.getMessage());
}
catch (IOException e) {
printStack(e);
}
}
}
  finally {
rpcService.shutdown(ShutdownMethod.CLEAN);
LOG.info("Logging finished");
}
}
