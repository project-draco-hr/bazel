{
  ImmutableSet<PathFragment> gcdaFiles=ImmutableSet.of();
  ImmutableMultimap<PathFragment,PathFragment> imports=ImmutableMultimap.of();
  if (fdoProfile != null && execRoot != null) {
    Path fdoDirPath=execRoot.getRelative(fdoRootExecPath);
    FileSystemUtils.deleteTreesBelow(fdoDirPath);
    FileSystemUtils.createDirectoryAndParents(fdoDirPath);
    if (fdoMode == FdoMode.AUTO_FDO) {
      if (lipoMode != LipoMode.OFF) {
        imports=readAutoFdoImports(getAutoFdoImportsPath(fdoProfile));
      }
      FileSystemUtils.ensureSymbolicLink(execRoot.getRelative(getAutoProfilePath(fdoProfile,fdoRootExecPath)),fdoProfile);
    }
 else     if (fdoMode == FdoMode.LLVM_FDO) {
      FileSystemUtils.ensureSymbolicLink(execRoot.getRelative(getLLVMProfilePath(fdoProfile,fdoRootExecPath)),fdoProfile);
    }
 else {
      Path zipFilePath=new ZipFileSystem(fdoProfile).getRootDirectory();
      String outputSymlinkName=productName + "-out";
      if (!zipFilePath.getRelative(outputSymlinkName).isDirectory()) {
        throw new ZipException("FDO zip files must be zipped directly above '" + outputSymlinkName + "' for the compiler to find the profile");
      }
      ImmutableSet.Builder<PathFragment> gcdaFilesBuilder=ImmutableSet.builder();
      ImmutableMultimap.Builder<PathFragment,PathFragment> importsBuilder=ImmutableMultimap.builder();
      extractFdoZipDirectory(zipFilePath,fdoDirPath,gcdaFilesBuilder,importsBuilder);
      gcdaFiles=gcdaFilesBuilder.build();
      imports=importsBuilder.build();
    }
  }
  return new FdoZipContents(gcdaFiles,imports);
}
