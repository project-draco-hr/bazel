{
  super.init(context,log,compiler);
  if (!enabled) {
    return;
  }
  setupMessageBundle(context);
  JavaFileManager fileManager=context.get(JavaFileManager.class);
  ClassLoader loader=fileManager.hasLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH) ? fileManager.getClassLoader(StandardLocation.ANNOTATION_PROCESSOR_PATH) : fileManager.getClass().getClassLoader();
  Iterable<BugChecker> extraBugCheckers=ServiceLoader.load(BugChecker.class,loader);
  ScannerSupplier scannerSupplier=defaultScannerSupplier().plus(ScannerSupplier.fromBugCheckerClasses(Iterables.transform(extraBugCheckers,GET_CLASS)));
  if (epOptions != null) {
    try {
      scannerSupplier=scannerSupplier.applyOverrides(epOptions);
    }
 catch (    InvalidCommandLineOptionException e) {
      throwError(Result.CMDERR,e.getMessage());
    }
  }
  errorProneAnalyzer=ErrorProneAnalyzer.create(scannerSupplier.get()).init(context);
}
