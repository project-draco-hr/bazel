{
  Preconditions.checkState(catastrophe == (keepGoing && bubbleErrorInfo != null),"Catastrophe not consistent with keepGoing mode and bubbleErrorInfo: %s %s %s %s",skyKeys,catastrophe,keepGoing,bubbleErrorInfo);
  EvaluationResult.Builder<T> result=EvaluationResult.builder();
  List<SkyKey> cycleRoots=new ArrayList<>();
  for (  SkyKey skyKey : skyKeys) {
    SkyValue unwrappedValue=maybeGetValueFromError(skyKey,graph.get(null,Reason.EVALUATION,skyKey),bubbleErrorInfo);
    ValueWithMetadata valueWithMetadata=unwrappedValue == NULL_MARKER ? null : ValueWithMetadata.wrapWithMetadata(unwrappedValue);
    if (valueWithMetadata == null) {
      if (bubbleErrorInfo == null) {
        cycleRoots.add(skyKey);
      }
      continue;
    }
    SkyValue value=valueWithMetadata.getValue();
    replayingNestedSetEventVisitor.visit(valueWithMetadata.getTransitiveEvents());
    ErrorInfo errorInfo=valueWithMetadata.getErrorInfo();
    Preconditions.checkState(value != null || errorInfo != null,skyKey);
    if (!keepGoing && errorInfo != null) {
      result.addError(skyKey,errorInfo);
      continue;
    }
    if (value == null) {
      result.addError(skyKey,errorInfo);
    }
 else {
      result.addResult(skyKey,value);
    }
  }
  if (!cycleRoots.isEmpty()) {
    Preconditions.checkState(visitor != null,skyKeys);
    checkForCycles(cycleRoots,result,visitor,keepGoing);
  }
  if (catastrophe) {
    ErrorInfo errorInfo=Preconditions.checkNotNull(Iterables.getOnlyElement(bubbleErrorInfo.values()).getErrorInfo(),"bubbleErrorInfo should have contained element with errorInfo: %s",bubbleErrorInfo);
    Preconditions.checkState(errorInfo.isCatastrophic(),"bubbleErrorInfo should have contained element with catastrophe: %s",bubbleErrorInfo);
    result.setCatastrophe(errorInfo.getException());
  }
  EvaluationResult<T> builtResult=result.build();
  Preconditions.checkState(bubbleErrorInfo == null || builtResult.hasError(),"If an error bubbled up, some top-level node must be in error: %s %s %s",bubbleErrorInfo,skyKeys,builtResult);
  return builtResult;
}
