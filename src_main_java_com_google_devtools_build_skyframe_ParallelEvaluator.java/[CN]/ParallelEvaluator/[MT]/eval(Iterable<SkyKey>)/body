{
  ImmutableSet<SkyKey> skyKeySet=ImmutableSet.copyOf(skyKeys);
  boolean allAreDone=true;
  Map<SkyKey,? extends NodeEntry> batch=evaluatorContext.getBatchValues(null,Reason.PRE_OR_POST_EVALUATION,skyKeySet);
  for (  SkyKey key : skyKeySet) {
    if (!isDoneForBuild(batch.get(key))) {
      allAreDone=false;
      break;
    }
  }
  if (allAreDone) {
    for (    SkyKey skyKey : skyKeySet) {
      informProgressReceiverThatValueIsDone(skyKey,batch.get(skyKey));
    }
    return constructResult(skyKeySet,null,false);
  }
  if (!evaluatorContext.keepGoing()) {
    Set<SkyKey> cachedErrorKeys=new HashSet<>();
    for (    SkyKey skyKey : skyKeySet) {
      NodeEntry entry=graph.get(null,Reason.PRE_OR_POST_EVALUATION,skyKey);
      if (entry == null) {
        continue;
      }
      if (entry.isDone() && entry.getErrorInfo() != null) {
        informProgressReceiverThatValueIsDone(skyKey,entry);
        cachedErrorKeys.add(skyKey);
      }
    }
    if (!cachedErrorKeys.isEmpty()) {
      return constructResult(cachedErrorKeys,null,false);
    }
  }
  Preconditions.checkState(evaluatorContext.keepGoing() || !(graph instanceof InMemoryGraphImpl) || ((InMemoryGraphImpl)graph).keepsEdges(),"nokeep_going evaluations are not allowed if graph edges are not kept: %s",skyKeys);
  Profiler.instance().startTask(ProfilerTask.SKYFRAME_EVAL,skyKeySet);
  try {
    return doMutatingEvaluation(skyKeySet);
  }
  finally {
    Profiler.instance().completeTask(ProfilerTask.SKYFRAME_EVAL);
  }
}
