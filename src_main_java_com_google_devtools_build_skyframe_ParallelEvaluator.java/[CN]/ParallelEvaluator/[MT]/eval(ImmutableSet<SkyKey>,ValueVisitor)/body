{
  NodeEntry errorTransienceEntry=graph.createIfAbsent(ErrorTransienceValue.key());
  if (!errorTransienceEntry.isDone()) {
    injectValue(ErrorTransienceValue.key(),new ErrorTransienceValue(),graphVersion,graph,dirtyKeyTracker);
  }
  for (  SkyKey skyKey : skyKeys) {
    NodeEntry entry=graph.createIfAbsent(skyKey);
switch (entry.addReverseDepAndCheckIfDone(null)) {
case NEEDS_SCHEDULING:
      visitor.enqueueEvaluation(skyKey);
    break;
case DONE:
  informProgressReceiverThatValueIsDone(skyKey);
break;
case ALREADY_EVALUATING:
break;
default :
throw new IllegalStateException(entry + " for " + skyKey+ " in unknown state");
}
}
try {
return waitForCompletionAndConstructResult(visitor,skyKeys);
}
  finally {
inflightKeysReceiver.accept(visitor.inflightNodes);
}
}
