{
  checkActive();
  Set<SkyKey> keys=Sets.newLinkedHashSetWithExpectedSize(depKeys.size());
  for (  SkyKey depKey : depKeys) {
    keys.add(KEY_CANONICALIZER.intern(depKey));
  }
  depKeys=keys;
  Map<SkyKey,ValueWithMetadata> values=getValuesMaybeFromError(depKeys,bubbleErrorInfo);
  ImmutableMap.Builder<SkyKey,ValueOrUntypedException> builder=ImmutableMap.builder();
  for (  SkyKey depKey : depKeys) {
    Preconditions.checkState(!depKey.equals(ErrorTransienceValue.KEY));
    ValueWithMetadata value=values.get(depKey);
    if (value == null) {
      valuesMissing=true;
      if (bubbleErrorInfo != null) {
        builder.put(depKey,ValueOrExceptionUtils.ofNull());
        continue;
      }
      if (directDeps.containsKey(depKey)) {
        throw new IllegalStateException("Undone key " + depKey + " was already in deps of "+ skyKey+ "( dep: "+ graph.get(depKey)+ ", parent: "+ graph.get(skyKey));
      }
      addDep(depKey);
      valuesMissing=true;
      builder.put(depKey,ValueOrExceptionUtils.ofNull());
      continue;
    }
    if (!directDeps.containsKey(depKey)) {
      addDep(depKey);
    }
    replayingNestedSetEventVisitor.visit(value.getTransitiveEvents());
    ErrorInfo errorInfo=value.getErrorInfo();
    if (errorInfo != null) {
      childErrorInfos.add(errorInfo);
    }
    if (value.getValue() != null && (keepGoing || errorInfo == null)) {
      builder.put(depKey,ValueOrExceptionUtils.ofValueUntyped(value.getValue()));
      continue;
    }
    Preconditions.checkNotNull(errorInfo,"%s %s %s",skyKey,depKey,value);
    if (!keepGoing && errorInfo.getException() != null && bubbleErrorInfo == null) {
      if (depErrorKey == null) {
        depErrorKey=depKey;
      }
      valuesMissing=true;
      builder.put(depKey,ValueOrExceptionUtils.ofNull());
      continue;
    }
    if (bubbleErrorInfo != null) {
      Thread.currentThread().interrupt();
    }
    if (errorInfo.getException() != null) {
      Exception e=errorInfo.getException();
      builder.put(depKey,ValueOrExceptionUtils.ofExn(e));
      continue;
    }
    Preconditions.checkState(!Iterables.isEmpty(errorInfo.getCycleInfo()),"%s %s %s %s",skyKey,depKey,errorInfo,value);
    valuesMissing=true;
    builder.put(depKey,ValueOrExceptionUtils.ofNull());
  }
  return builder.build();
}
