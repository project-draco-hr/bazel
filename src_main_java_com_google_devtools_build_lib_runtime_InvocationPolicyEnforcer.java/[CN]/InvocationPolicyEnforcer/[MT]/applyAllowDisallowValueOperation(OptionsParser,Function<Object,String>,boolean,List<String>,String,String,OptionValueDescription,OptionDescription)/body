{
  String policyType=allowValues ? "Allow" : "Disallow";
  Set<Object> convertedPolicyValues=Sets.newHashSet();
  for (  String value : policyValues) {
    convertedPolicyValues.add(optionDescription.getConverter().convert(value));
  }
  if (valueDescription == null) {
    if (allowValues ^ convertedPolicyValues.contains(optionDescription.getDefaultValue())) {
      if (newDefaultValue != null) {
        LOG.info(String.format("Overriding default value '%s' for flag '%s' with " + "new default value '%s' specified by invocation policy. %sed values are: %s",optionDescription.getDefaultValue(),flagName,newDefaultValue,policyType,Joiner.on(", ").join(policyValues)));
        parser.clearValue(flagName);
        setFlagValue(parser,flagName,newDefaultValue,sourceFunction);
      }
 else {
        throw new OptionsParsingException(String.format("Default flag value '%s' for flag '%s' is not allowed by invocation policy, but " + "the policy does not provide a new default value. " + "%sed values are: %s",optionDescription.getDefaultValue(),flagName,policyType,Joiner.on(", ").join(policyValues)));
      }
    }
  }
 else {
    List<?> values;
    if (optionDescription.getAllowMultiple()) {
      values=(List<?>)valueDescription.getValue();
    }
 else {
      values=ImmutableList.of(valueDescription.getValue());
    }
    for (    Object value : values) {
      if (allowValues ^ convertedPolicyValues.contains(value)) {
        throw new OptionsParsingException(String.format("Flag value '%s' for flag '%s' is not allowed by invocation policy. " + "%sed values are: %s",value,flagName,policyType,Joiner.on(", ").join(policyValues)));
      }
    }
  }
}
