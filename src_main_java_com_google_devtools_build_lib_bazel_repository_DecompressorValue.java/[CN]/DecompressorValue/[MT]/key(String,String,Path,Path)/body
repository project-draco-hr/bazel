{
  String baseName=archivePath.getBaseName();
  DecompressorDescriptor descriptor=new DecompressorDescriptor(targetKind,targetName,archivePath,repositoryPath);
  if (targetKind.startsWith(HttpJarRule.NAME + " ") || targetKind.equals(MavenJarRule.NAME)) {
    if (baseName.endsWith(".jar")) {
      return new SkyKey(JarFunction.NAME,descriptor);
    }
 else {
      throw new IOException(String.format("Expected %s %s to create file with a .jar suffix (got %s)",targetKind,targetName,archivePath));
    }
  }
  if (targetKind.startsWith(HttpArchiveRule.NAME + " ") || targetKind.startsWith(NewHttpArchiveRule.NAME + " ")) {
    if (baseName.endsWith(".zip") || baseName.endsWith(".jar") || baseName.endsWith(".war")) {
      return new SkyKey(ZipFunction.NAME,descriptor);
    }
 else     if (baseName.endsWith(".tar.gz") || baseName.endsWith(".tgz")) {
      return new SkyKey(TarGzFunction.NAME,descriptor);
    }
 else {
      throw new IOException(String.format("Expected %s %s to create file with a .zip, .jar, .war, .tar.gz, or .tgz" + " suffix (got %s)",HttpArchiveRule.NAME,targetName,archivePath));
    }
  }
  throw new IOException(String.format("No decompressor found for %s rule %s (got %s)",targetKind,targetName,archivePath));
}
