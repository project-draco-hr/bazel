{
  ImmutableCollection<LoadStatement> imports=buildFileAST.getImports();
  Map<PathFragment,Extension> importMap=new HashMap<>();
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  Label buildFileLabel;
  try {
    buildFileLabel=Label.create(packageId,"BUILD");
  }
 catch (  LabelSyntaxException e) {
    throw new IllegalStateException(e);
  }
  try {
    for (    LoadStatement loadStmt : imports) {
      Label importLabel=SkylarkImportLookupFunction.findLabelForLoadStatement(loadStmt,buildFileLabel,env);
      if (importLabel == null) {
        return null;
      }
      SkyKey importsLookupKey=SkylarkImportLookupValue.key(importLabel);
      SkylarkImportLookupValue importLookupValue=(SkylarkImportLookupValue)env.getValueOrThrow(importsLookupKey,SkylarkImportFailedException.class,InconsistentFilesystemException.class,BuildFileNotFoundException.class);
      if (importLookupValue != null) {
        importMap.put(loadStmt.getImportPath(),importLookupValue.getEnvironmentExtension());
        fileDependencies.add(importLookupValue.getDependency());
      }
    }
  }
 catch (  SkylarkImportFailedException e) {
    env.getListener().handle(Event.error(Location.fromFile(buildFilePath),e.getMessage()));
    throw new PackageFunctionException(new BuildFileContainsErrorsException(packageId,e.getMessage()),Transience.PERSISTENT);
  }
catch (  InconsistentFilesystemException e) {
    throw new PackageFunctionException(new InternalInconsistentFilesystemException(packageId,e),Transience.PERSISTENT);
  }
catch (  BuildFileNotFoundException e) {
    throw new PackageFunctionException(e,Transience.PERSISTENT);
  }
  if (env.valuesMissing()) {
    return null;
  }
  return new SkylarkImportResult(importMap,transitiveClosureOfLabels(fileDependencies.build()));
}
