{
  ImmutableMap<Location,PathFragment> imports=buildFileAST.getImports();
  Map<PathFragment,Extension> importMap=Maps.newHashMapWithExpectedSize(imports.size());
  ImmutableList.Builder<SkylarkFileDependency> fileDependencies=ImmutableList.builder();
  Map<SkyKey,PathFragment> skylarkImports=Maps.newHashMapWithExpectedSize(imports.size());
  for (  Map.Entry<Location,PathFragment> entry : imports.entrySet()) {
    try {
      skylarkImports.put(getImportKey(entry,preludePath,buildFileFragment,packageId),entry.getValue());
    }
 catch (    ASTLookupInputException e) {
      throw new PackageFunctionException(new BuildFileContainsErrorsException(packageId,e.getMessage()),Transience.PERSISTENT);
    }
  }
  Map<SkyKey,ValueOrException4<SkylarkImportFailedException,InconsistentFilesystemException,ASTLookupInputException,BuildFileNotFoundException>> skylarkImportMap=env.getValuesOrThrow(skylarkImports.keySet(),SkylarkImportFailedException.class,InconsistentFilesystemException.class,ASTLookupInputException.class,BuildFileNotFoundException.class);
  for (  Map.Entry<SkyKey,ValueOrException4<SkylarkImportFailedException,InconsistentFilesystemException,ASTLookupInputException,BuildFileNotFoundException>> entry : skylarkImportMap.entrySet()) {
    SkylarkImportLookupValue importLookupValue;
    try {
      importLookupValue=(SkylarkImportLookupValue)entry.getValue().get();
    }
 catch (    SkylarkImportFailedException e) {
      env.getListener().handle(Event.error(Location.fromFile(buildFilePath),e.getMessage()));
      throw new PackageFunctionException(new BuildFileContainsErrorsException(packageId,e.getMessage()),Transience.PERSISTENT);
    }
catch (    InconsistentFilesystemException e) {
      throw new PackageFunctionException(new InternalInconsistentFilesystemException(packageId,e),Transience.PERSISTENT);
    }
catch (    ASTLookupInputException e) {
      throw new PackageFunctionException(new BuildFileContainsErrorsException(packageId,e.getMessage()),Transience.PERSISTENT);
    }
catch (    BuildFileNotFoundException e) {
      throw new PackageFunctionException(e,Transience.PERSISTENT);
    }
    if (importLookupValue == null) {
      Preconditions.checkState(env.valuesMissing(),entry);
    }
 else {
      importMap.put(skylarkImports.get(entry.getKey()),importLookupValue.getEnvironmentExtension());
      fileDependencies.add(importLookupValue.getDependency());
    }
  }
  if (env.valuesMissing()) {
    return null;
  }
  return new SkylarkImportResult(importMap,transitiveClosureOfLabels(fileDependencies.build()));
}
