{
  ParserInputSource replacementSource=replacementContents == null ? null : ParserInputSource.create(replacementContents,buildFilePath.asFragment());
  Package.LegacyBuilder pkgBuilder=packageFunctionCache.getIfPresent(packageId);
  if (pkgBuilder == null) {
    profiler.startTask(ProfilerTask.CREATE_PACKAGE,packageId.toString());
    try {
      Globber globber=packageFactory.createLegacyGlobber(buildFilePath.getParentDirectory(),packageId,packageLocator);
      StoredEventHandler localReporter=new StoredEventHandler();
      Preprocessor.Result preprocessingResult=replacementSource == null ? packageFactory.preprocess(packageId,buildFilePath,inputSource,globber,localReporter) : Preprocessor.Result.noPreprocessing(replacementSource);
      SkylarkImportResult importResult=discoverSkylarkImports(buildFilePath,buildFileFragment,packageId,env,preprocessingResult.result,preludeStatements);
      if (importResult == null) {
        return null;
      }
      pkgBuilder=packageFactory.createPackageFromPreprocessingResult(externalPkg,packageId,buildFilePath,preprocessingResult,localReporter.getEvents(),preludeStatements,importResult.importMap,importResult.fileDependencies,packageLocator,defaultVisibility,globber);
      numPackagesLoaded.incrementAndGet();
      packageFunctionCache.put(packageId,pkgBuilder);
    }
  finally {
      profiler.completeTask(ProfilerTask.CREATE_PACKAGE);
    }
  }
  return pkgBuilder;
}
