{
  PackageIdentifier packageId=(PackageIdentifier)key.argument();
  PathFragment packageNameFragment=packageId.getPackageFragment();
  SkyKey packageLookupKey=PackageLookupValue.key(packageId);
  PackageLookupValue packageLookupValue;
  try {
    packageLookupValue=(PackageLookupValue)env.getValueOrThrow(packageLookupKey,BuildFileNotFoundException.class,InconsistentFilesystemException.class);
  }
 catch (  BuildFileNotFoundException e) {
    throw new PackageFunctionException(e,Transience.PERSISTENT);
  }
catch (  InconsistentFilesystemException e) {
    throw new PackageFunctionException(new NoSuchPackageException(packageId,e.getMessage(),e),Transience.PERSISTENT);
  }
  if (packageLookupValue == null) {
    return null;
  }
  if (!packageLookupValue.packageExists()) {
switch (packageLookupValue.getErrorReason()) {
case NO_BUILD_FILE:
case DELETED_PACKAGE:
      throw new PackageFunctionException(new BuildFileNotFoundException(packageId,packageLookupValue.getErrorMsg()),Transience.PERSISTENT);
case INVALID_PACKAGE_NAME:
    throw new PackageFunctionException(new InvalidPackageNameException(packageId,packageLookupValue.getErrorMsg()),Transience.PERSISTENT);
default :
  throw new IllegalStateException();
}
}
if (packageId.equals(Label.EXTERNAL_PACKAGE_IDENTIFIER)) {
return getExternalPackage(env,packageLookupValue.getRoot());
}
SkyKey externalPackageKey=PackageValue.key(Label.EXTERNAL_PACKAGE_IDENTIFIER);
PackageValue externalPackage=(PackageValue)env.getValue(externalPackageKey);
if (externalPackage == null) {
return null;
}
Package externalPkg=externalPackage.getPackage();
if (externalPkg.containsErrors()) {
throw new PackageFunctionException(new BuildFileContainsErrorsException(Label.EXTERNAL_PACKAGE_IDENTIFIER),Transience.PERSISTENT);
}
PathFragment buildFileFragment=packageNameFragment.getChild("BUILD");
RootedPath buildFileRootedPath=RootedPath.toRootedPath(packageLookupValue.getRoot(),buildFileFragment);
FileValue buildFileValue=null;
Path buildFilePath=buildFileRootedPath.asPath();
String replacementContents=null;
if (!isDefaultsPackage(packageId)) {
buildFileValue=getBuildFileValue(env,buildFileRootedPath);
if (buildFileValue == null) {
return null;
}
}
 else {
replacementContents=PrecomputedValue.DEFAULTS_PACKAGE_CONTENTS.get(env);
if (replacementContents == null) {
return null;
}
}
RuleVisibility defaultVisibility=PrecomputedValue.DEFAULT_VISIBILITY.get(env);
if (defaultVisibility == null) {
return null;
}
SkyKey astLookupKey=ASTFileLookupValue.key(preludeLabel);
ASTFileLookupValue astLookupValue=null;
try {
astLookupValue=(ASTFileLookupValue)env.getValueOrThrow(astLookupKey,ErrorReadingSkylarkExtensionException.class,InconsistentFilesystemException.class);
}
 catch (ErrorReadingSkylarkExtensionException|InconsistentFilesystemException e) {
throw new PackageFunctionException(new NoSuchPackageException(packageId,"Error encountered while reading the prelude file: " + e.getMessage()),Transience.PERSISTENT);
}
if (astLookupValue == null) {
return null;
}
List<Statement> preludeStatements=astLookupValue.lookupSuccessful() ? astLookupValue.getAST().getStatements() : ImmutableList.<Statement>of();
CacheEntryWithGlobDeps<Package.Builder> packageBuilderAndGlobDeps=loadPackage(externalPkg,replacementContents,packageId,buildFilePath,buildFileValue,defaultVisibility,preludeStatements,packageLookupValue.getRoot(),env);
if (packageBuilderAndGlobDeps == null) {
return null;
}
Package.Builder pkgBuilder=packageBuilderAndGlobDeps.value;
pkgBuilder.buildPartial();
try {
handleLabelsCrossingSubpackagesAndPropagateInconsistentFilesystemExceptions(packageLookupValue.getRoot(),packageId,pkgBuilder,env);
}
 catch (InternalInconsistentFilesystemException e) {
packageFunctionCache.invalidate(packageId);
throw new PackageFunctionException(e.toNoSuchPackageException(),e.isTransient() ? Transience.TRANSIENT : Transience.PERSISTENT);
}
Set<SkyKey> globKeys=packageBuilderAndGlobDeps.globDepKeys;
Map<Label,Path> subincludes=pkgBuilder.getSubincludes();
boolean packageShouldBeConsideredInError;
try {
packageShouldBeConsideredInError=markDependenciesAndPropagateInconsistentFilesystemExceptions(env,globKeys,subincludes,packageId,pkgBuilder.containsErrors());
}
 catch (InternalInconsistentFilesystemException e) {
packageFunctionCache.invalidate(packageId);
throw new PackageFunctionException(e.toNoSuchPackageException(),e.isTransient() ? Transience.TRANSIENT : Transience.PERSISTENT);
}
if (env.valuesMissing()) {
return null;
}
Event.replayEventsOn(env.getListener(),pkgBuilder.getEvents());
if (packageShouldBeConsideredInError) {
pkgBuilder.setContainsErrors();
}
Package pkg=pkgBuilder.finishBuild();
packageFunctionCache.invalidate(packageId);
packageFactory.afterDoneLoadingPackage(pkg);
return new PackageValue(pkg);
}
