{
  assertEquals("foo 3",Printer.formatToString("%s %d",makeTuple("foo",3)));
  assertEquals("foo 3",Printer.format("%s %d","foo",3));
  assertThat(Printer.formatToString("",makeTuple())).isEmpty();
  assertEquals("foo",Printer.format("%s","foo"));
  assertEquals("3.14159",Printer.format("%s",3.14159));
  checkFormatPositionalFails("not all arguments converted during string formatting","%s",1,2,3);
  assertEquals("%foo",Printer.format("%%%s","foo"));
  checkFormatPositionalFails("not all arguments converted during string formatting","%%s","foo");
  checkFormatPositionalFails("unsupported format character \" \" at index 1 in \"% %s\"","% %s","foo");
  assertEquals("[1, 2, 3]",Printer.format("%s",makeList(1,2,3)));
  assertEquals("(1, 2, 3)",Printer.format("%s",makeTuple(1,2,3)));
  assertEquals("[]",Printer.format("%s",makeList()));
  assertEquals("()",Printer.format("%s",makeTuple()));
  assertEquals("% 1 \"2\" 3",Printer.format("%% %d %r %s",1,"2","3"));
  checkFormatPositionalFails("invalid argument \"1\" for format pattern %d","%d","1");
  checkFormatPositionalFails("unsupported format character \".\" at index 1 in \"%.3g\"","%.3g");
  checkFormatPositionalFails("unsupported format character \".\" at index 1 in \"%.3g\"","%.3g",1,2);
  checkFormatPositionalFails("unsupported format character \".\" at index 1 in \"%.s\"","%.s");
}
