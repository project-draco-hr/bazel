{
  validateAttributes(ruleContext);
  CompilationArtifacts compilationArtifacts=CompilationSupport.compilationArtifacts(ruleContext);
  CompilationAttributes compilationAttributes=CompilationAttributes.Builder.fromRuleContext(ruleContext).build();
  PrecompiledFiles precompiledFiles=new PrecompiledFiles(ruleContext);
  CompilationSupport compilationSupport=new CompilationSupport(ruleContext);
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  ObjcCommon common=common(ruleContext,compilationAttributes,compilationArtifacts);
  ObjcVariablesExtension variablesExtension=new ObjcVariablesExtension(ruleContext,common.getObjcProvider(),compilationArtifacts,ruleContext.getImplicitOutputArtifact(CompilationSupport.FULLY_LINKED_LIB),intermediateArtifacts,ruleContext.getConfiguration());
  FeatureConfiguration featureConfiguration=getFeatureConfiguration(ruleContext);
  Collection<Artifact> arcSources=Sets.newHashSet(compilationArtifacts.getSrcs());
  Collection<Artifact> nonArcSources=Sets.newHashSet(compilationArtifacts.getNonArcSrcs());
  Collection<Artifact> privateHdrs=Sets.newHashSet(compilationArtifacts.getPrivateHdrs());
  Collection<Artifact> publicHdrs=Sets.newHashSet(compilationAttributes.hdrs());
  Artifact pchHdr=ruleContext.getPrerequisiteArtifact("pch",Mode.TARGET);
  ImmutableList<Artifact> pchHdrList=(pchHdr != null) ? ImmutableList.<Artifact>of(pchHdr) : ImmutableList.<Artifact>of();
  CcLibraryHelper helper=new CcLibraryHelper(ruleContext,new ObjcCppSemantics(common.getObjcProvider()),featureConfiguration,CcLibraryHelper.SourceCategory.CC_AND_OBJC).addSources(arcSources,ImmutableMap.of("objc_arc","")).addSources(nonArcSources,ImmutableMap.of("no_objc_arc","")).addSources(privateHdrs).addDefines(common.getObjcProvider().get(DEFINE)).enableCompileProviders().addPublicHeaders(publicHdrs).addPublicHeaders(pchHdrList).addPrecompiledFiles(precompiledFiles).addDeps(ruleContext.getPrerequisites("deps",Mode.TARGET)).addCopts(compilationSupport.getCompileRuleCopts()).addIncludeDirs(common.getObjcProvider().get(INCLUDE)).addSystemIncludeDirs(common.getObjcProvider().get(INCLUDE_SYSTEM)).addVariableExtension(variablesExtension);
  if (compilationArtifacts.getArchive().isPresent()) {
    registerArchiveAction(intermediateArtifacts,compilationSupport,compilationArtifacts,helper);
  }
  registerFullyLinkAction(ruleContext,common,variablesExtension,featureConfiguration);
  if (ObjcCommon.shouldUseObjcModules(ruleContext)) {
    helper.setCppModuleMap(ObjcRuleClasses.intermediateArtifacts(ruleContext).moduleMap());
  }
  CcLibraryHelper.Info info=helper.build();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.<Artifact>stableOrder().addAll(common.getCompiledArchive().asSet());
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder();
  compilationSupport.addXcodeSettings(xcodeProviderBuilder,common);
  new ResourceSupport(ruleContext).validateAttributes().addXcodeSettings(xcodeProviderBuilder);
  new XcodeSupport(ruleContext).addFilesToBuild(filesToBuild).addXcodeSettings(xcodeProviderBuilder,common.getObjcProvider(),LIBRARY_STATIC).addDependencies(xcodeProviderBuilder,new Attribute("bundles",Mode.TARGET)).addDependencies(xcodeProviderBuilder,new Attribute("deps",Mode.TARGET)).addNonPropagatedDependencies(xcodeProviderBuilder,new Attribute("non_propagated_deps",Mode.TARGET)).registerActions(xcodeProviderBuilder.build());
  return ObjcRuleClasses.ruleConfiguredTarget(ruleContext,filesToBuild.build()).addProvider(ObjcProvider.class,common.getObjcProvider()).addProviders(info.getProviders()).addProvider(ObjcProvider.class,common.getObjcProvider()).addProvider(XcodeProvider.class,xcodeProviderBuilder.build()).build();
}
