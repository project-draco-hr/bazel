{
  PeekingIterator<String> rawQualifiers=Iterators.peekingIterator(Iterators.forArray(dirNameAndQualifiers));
  rawQualifiers.next();
  List<String> unHandledLanguageRegionQualifiers=new ArrayList<>();
  List<String> unHandledDensityQualifiers=new ArrayList<>();
  List<String> unHandledUIModeQualifiers=new ArrayList<>();
  List<String> handledQualifiers=new ArrayList<>();
  while (rawQualifiers.hasNext()) {
    String qualifier=rawQualifiers.next();
    if (qualifier.startsWith(BCP_PREFIX)) {
      unHandledLanguageRegionQualifiers.add(qualifier);
    }
 else     if ("es".equalsIgnoreCase(qualifier) && rawQualifiers.hasNext() && "419".equalsIgnoreCase(rawQualifiers.peek())) {
      unHandledLanguageRegionQualifiers.add("b+es+419");
      rawQualifiers.next();
    }
 else     if ("sr".equalsIgnoreCase(qualifier) && rawQualifiers.hasNext() && "rlatn".equalsIgnoreCase(rawQualifiers.peek())) {
      unHandledLanguageRegionQualifiers.add("b+sr+Latn");
      rawQualifiers.next();
    }
 else     if (qualifier.equals("watch")) {
      unHandledUIModeQualifiers.add(qualifier);
    }
 else {
      handledQualifiers.add(qualifier);
    }
  }
  FolderConfiguration config=FolderConfiguration.getConfigFromQualifiers(handledQualifiers);
  if (config == null) {
    throw new IllegalArgumentException(String.format(INVALID_QUALIFIERS,DASH_JOINER.join(dirNameAndQualifiers)));
  }
  config.normalize();
  Builder<String> builder=ImmutableList.<String>builder();
  addIfNotNull(config.getCountryCodeQualifier(),builder);
  addIfNotNull(config.getNetworkCodeQualifier(),builder);
  if (unHandledLanguageRegionQualifiers.isEmpty()) {
    addIfNotNull(config.getLanguageQualifier(),builder);
    addIfNotNull(config.getRegionQualifier(),builder);
  }
 else {
    builder.addAll(unHandledLanguageRegionQualifiers);
  }
  addIfNotNull(config.getLayoutDirectionQualifier(),builder);
  addIfNotNull(config.getSmallestScreenWidthQualifier(),builder);
  addIfNotNull(config.getScreenWidthQualifier(),builder);
  addIfNotNull(config.getScreenHeightQualifier(),builder);
  addIfNotNull(config.getScreenSizeQualifier(),builder);
  addIfNotNull(config.getScreenRatioQualifier(),builder);
  addIfNotNullAndExist(config,"getScreenRoundQualifier",builder);
  addIfNotNull(config.getScreenOrientationQualifier(),builder);
  if (unHandledUIModeQualifiers.isEmpty()) {
    addIfNotNull(config.getUiModeQualifier(),builder);
  }
 else {
    builder.addAll(unHandledUIModeQualifiers);
  }
  addIfNotNull(config.getNightModeQualifier(),builder);
  if (unHandledDensityQualifiers.isEmpty()) {
    addIfNotNull(config.getDensityQualifier(),builder);
  }
 else {
    builder.addAll(unHandledDensityQualifiers);
  }
  addIfNotNull(config.getTouchTypeQualifier(),builder);
  addIfNotNull(config.getKeyboardStateQualifier(),builder);
  addIfNotNull(config.getTextInputMethodQualifier(),builder);
  addIfNotNull(config.getNavigationStateQualifier(),builder);
  addIfNotNull(config.getNavigationMethodQualifier(),builder);
  addIfNotNull(config.getScreenDimensionQualifier(),builder);
  addIfNotNull(config.getVersionQualifier(),builder);
  return builder.build();
}
