{
  setupRoot(new CustomInMemoryFs());
  AtomicReference<PathPackageLocator> pkgLocator=new AtomicReference<>(new PathPackageLocator(root.getFileSystem().getPath("/outputbase"),ImmutableList.of(root)));
  BlazeDirectories directories=new BlazeDirectories(root,root,root,TestConstants.PRODUCT_NAME);
  ExternalFilesHelper externalFilesHelper=new ExternalFilesHelper(pkgLocator,false,directories);
  differencer=new RecordingDifferencer();
  evaluator=new InMemoryMemoizingEvaluator(ImmutableMap.<SkyFunctionName,SkyFunction>builder().put(SkyFunctions.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),externalFilesHelper)).put(SkyFunctions.FILE,new FileFunction(pkgLocator)).put(SkyFunctions.ARTIFACT,new ArtifactFunction(allowedMissingInputsPredicate)).put(SkyFunctions.ACTION_EXECUTION,new SimpleActionExecutionFunction()).put(SkyFunctions.PACKAGE,new PackageFunction(null,null,null,null,null,null,null)).put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(null)).put(SkyFunctions.WORKSPACE_AST,new WorkspaceASTFunction(TestRuleClassProvider.getRuleClassProvider())).put(SkyFunctions.WORKSPACE_FILE,new WorkspaceFileFunction(TestRuleClassProvider.getRuleClassProvider(),new PackageFactory(TestRuleClassProvider.getRuleClassProvider()),directories)).put(SkyFunctions.EXTERNAL_PACKAGE,new ExternalPackageFunction()).build(),differencer);
  driver=new SequentialBuildDriver(evaluator);
  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());
  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());
  actions=new HashSet<>();
}
