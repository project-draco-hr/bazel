{
  Object[] arguments=new Object[getArgArraySize()];
  FunctionSignature sig=signature.getSignature();
  FunctionSignature.Shape shape=sig.getShape();
  ImmutableList<String> names=sig.getNames();
  List<Object> defaultValues=signature.getDefaultValues();
  int numPositionalArgs=args.size();
  int numMandatoryPositionalParams=shape.getMandatoryPositionals();
  int numOptionalPositionalParams=shape.getOptionalPositionals();
  int numMandatoryNamedOnlyParams=shape.getMandatoryNamedOnly();
  int numOptionalNamedOnlyParams=shape.getOptionalNamedOnly();
  boolean hasStarParam=shape.hasStarArg();
  boolean hasKwParam=shape.hasKwArg();
  int numPositionalParams=numMandatoryPositionalParams + numOptionalPositionalParams;
  int numNamedOnlyParams=numMandatoryNamedOnlyParams + numOptionalNamedOnlyParams;
  int numNamedParams=numPositionalParams + numNamedOnlyParams;
  int numOptionalParams=numOptionalPositionalParams + numOptionalNamedOnlyParams;
  int endOptionalParams=numMandatoryPositionalParams + numOptionalParams;
  int kwParamIndex=names.size() - 1;
  if (hasStarParam) {
    int starParamIndex=numNamedParams;
    if (numPositionalArgs > numPositionalParams) {
      arguments[starParamIndex]=SkylarkList.tuple(args.subList(numPositionalParams,numPositionalArgs));
      numPositionalArgs=numPositionalParams;
    }
 else {
      arguments[starParamIndex]=SkylarkList.EMPTY_TUPLE;
    }
  }
 else   if (numPositionalArgs > numPositionalParams) {
    throw new EvalException(loc,numPositionalParams > 0 ? "too many (" + numPositionalArgs + ") positional arguments in call to "+ this : this + " does not accept positional arguments, but got " + numPositionalArgs);
  }
  for (int i=0; i < numPositionalArgs; i++) {
    arguments[i]=args.get(i);
  }
  if (kwargs == null || kwargs.isEmpty()) {
    if (numPositionalArgs < numMandatoryPositionalParams) {
      throw new EvalException(loc,String.format("insufficient arguments received by %s (got %s, expected at least %s)",this,numPositionalArgs,numMandatoryPositionalParams));
    }
    if (numMandatoryNamedOnlyParams > 0) {
      throw new EvalException(loc,String.format("missing mandatory keyword arguments in call to %s",this));
    }
    if (defaultValues != null) {
      int j=numPositionalArgs - numMandatoryPositionalParams;
      for (int i=numPositionalArgs; i < endOptionalParams; i++) {
        arguments[i]=defaultValues.get(j++);
      }
    }
    if (hasKwParam) {
      arguments[kwParamIndex]=ImmutableMap.<String,Object>of();
    }
  }
 else   if (hasKwParam && numNamedParams == 0) {
    arguments[kwParamIndex]=kwargs;
  }
 else {
    HashMap<String,Object> kwArg=hasKwParam ? new HashMap<String,Object>() : null;
    ArrayList<String> bothPosKey=new ArrayList<>();
    for (int i=0; i < numPositionalArgs; i++) {
      String name=names.get(i);
      if (kwargs.containsKey(name)) {
        bothPosKey.add(name);
      }
    }
    if (!bothPosKey.isEmpty()) {
      throw new EvalException(loc,String.format("argument%s '%s' passed both by position and by name in call to %s",(bothPosKey.size() > 1 ? "s" : ""),Joiner.on("', '").join(bothPosKey),this));
    }
    for (    Map.Entry<String,Object> entry : kwargs.entrySet()) {
      String keyword=entry.getKey();
      Object value=entry.getValue();
      int pos=names.indexOf(keyword);
      if (0 <= pos && pos < numNamedParams) {
        arguments[pos]=value;
      }
 else {
        if (!hasKwParam) {
          List<String> unexpected=Ordering.natural().sortedCopy(Sets.difference(kwargs.keySet(),ImmutableSet.copyOf(names.subList(0,numNamedParams))));
          throw new EvalException(loc,String.format("unexpected keyword%s '%s' in call to %s",unexpected.size() > 1 ? "s" : "",Joiner.on("', '").join(unexpected),this));
        }
        if (kwArg.containsKey(keyword)) {
          throw new EvalException(loc,String.format("%s got multiple values for keyword argument '%s'",this,keyword));
        }
        kwArg.put(keyword,value);
      }
    }
    if (hasKwParam) {
      arguments[kwParamIndex]=ImmutableMap.copyOf(kwArg);
    }
    for (int i=numPositionalArgs; i < numMandatoryPositionalParams; i++) {
      if (arguments[i] == null) {
        throw new EvalException(loc,String.format("missing mandatory positional argument '%s' while calling %s",names.get(i),toString()));
      }
    }
    for (int i=numNamedParams - numMandatoryNamedOnlyParams; i < numNamedParams; i++) {
      if (arguments[i] == null) {
        throw new EvalException(loc,String.format("missing mandatory named-only argument '%s' while calling %s",names.get(i),toString()));
      }
    }
    if (defaultValues != null) {
      for (int j=numPositionalArgs > numMandatoryPositionalParams ? numPositionalArgs - numMandatoryPositionalParams : 0; j < numOptionalParams; j++) {
        int i=j + numMandatoryPositionalParams;
        if (arguments[i] == null) {
          arguments[i]=defaultValues.get(j);
        }
      }
    }
  }
  return arguments;
}
