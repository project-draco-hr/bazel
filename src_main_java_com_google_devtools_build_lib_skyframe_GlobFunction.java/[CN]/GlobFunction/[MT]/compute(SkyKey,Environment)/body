{
  GlobDescriptor glob=(GlobDescriptor)skyKey.argument();
  PathFragment globSubdir=glob.getSubdir();
  if (!globSubdir.equals(PathFragment.EMPTY_FRAGMENT)) {
    PackageLookupValue globSubdirPkgLookupValue=(PackageLookupValue)env.getValue(PackageLookupValue.key(PackageIdentifier.create(glob.getPackageId().getRepository(),glob.getPackageId().getPackageFragment().getRelative(globSubdir))));
    if (globSubdirPkgLookupValue == null) {
      return null;
    }
    if (globSubdirPkgLookupValue.packageExists()) {
      return GlobValue.EMPTY;
    }
  }
  String pattern=glob.getPattern();
  int slashPos=pattern.indexOf('/');
  String patternHead;
  String patternTail;
  if (slashPos == -1) {
    patternHead=pattern;
    patternTail=null;
  }
 else {
    patternHead=pattern.substring(0,slashPos);
    patternTail=pattern.substring(slashPos + 1);
  }
  NestedSetBuilder<PathFragment> matches=NestedSetBuilder.stableOrder();
  boolean globMatchesBareFile=patternTail == null;
  if ("**".equals(patternHead)) {
    if (globMatchesBareFile) {
      if (!glob.excludeDirs() && !globSubdir.equals(PathFragment.EMPTY_FRAGMENT)) {
        matches.add(globSubdir);
      }
    }
 else {
      SkyKey globKey=GlobValue.internalKey(glob.getPackageId(),glob.getPackageRoot(),globSubdir,patternTail,glob.excludeDirs());
      GlobValue globValue=(GlobValue)env.getValue(globKey);
      if (globValue == null) {
        return null;
      }
      matches.addTransitive(globValue.getMatches());
    }
  }
  PathFragment dirPathFragment=glob.getPackageId().getPackageFragment().getRelative(globSubdir);
  RootedPath dirRootedPath=RootedPath.toRootedPath(glob.getPackageRoot(),dirPathFragment);
  if (alwaysUseDirListing || containsGlobs(patternHead)) {
    String subdirPattern="**".equals(patternHead) ? glob.getPattern() : patternTail;
    DirectoryListingValue listingValue=(DirectoryListingValue)env.getValue(DirectoryListingValue.key(dirRootedPath));
    if (listingValue == null) {
      return null;
    }
    int direntsSize=listingValue.getDirents().size();
    Map<SkyKey,Dirent> symlinkFileMap=Maps.newHashMapWithExpectedSize(direntsSize);
    Map<SkyKey,Dirent> subdirMap=Maps.newHashMapWithExpectedSize(direntsSize);
    Map<Dirent,Object> sortedResultMap=Maps.newTreeMap();
    for (    Dirent dirent : listingValue.getDirents()) {
      Type direntType=dirent.getType();
      String fileName=dirent.getName();
      if (!UnixGlob.matches(patternHead,fileName,regexPatternCache)) {
        continue;
      }
      if (direntType == Dirent.Type.SYMLINK) {
        symlinkFileMap.put(FileValue.key(RootedPath.toRootedPath(glob.getPackageRoot(),dirPathFragment.getRelative(fileName))),dirent);
        continue;
      }
      if (direntType == Dirent.Type.DIRECTORY) {
        SkyKey keyToRequest=getSkyKeyForSubdir(fileName,glob,subdirPattern);
        if (keyToRequest != null) {
          subdirMap.put(keyToRequest,dirent);
        }
      }
 else       if (globMatchesBareFile) {
        sortedResultMap.put(dirent,glob.getSubdir().getRelative(fileName));
      }
    }
    Map<SkyKey,SkyValue> subdirAndSymlinksResult=env.getValues(Sets.union(subdirMap.keySet(),symlinkFileMap.keySet()));
    if (env.valuesMissing()) {
      return null;
    }
    Map<SkyKey,Dirent> symlinkSubdirMap=Maps.newHashMapWithExpectedSize(symlinkFileMap.size());
    for (    Map.Entry<SkyKey,SkyValue> lookedUpKeyAndValue : subdirAndSymlinksResult.entrySet()) {
      if (symlinkFileMap.containsKey(lookedUpKeyAndValue.getKey())) {
        FileValue symlinkFileValue=(FileValue)lookedUpKeyAndValue.getValue();
        if (!symlinkFileValue.isSymlink()) {
          throw new GlobFunctionException(new InconsistentFilesystemException("readdir and stat disagree about whether " + ((RootedPath)lookedUpKeyAndValue.getKey().argument()).asPath() + " is a symlink."),Transience.TRANSIENT);
        }
        if (!symlinkFileValue.exists()) {
          continue;
        }
        Dirent dirent=symlinkFileMap.get(lookedUpKeyAndValue.getKey());
        String fileName=dirent.getName();
        if (symlinkFileValue.isDirectory()) {
          SkyKey keyToRequest=getSkyKeyForSubdir(fileName,glob,subdirPattern);
          if (keyToRequest != null) {
            symlinkSubdirMap.put(keyToRequest,dirent);
          }
        }
 else         if (globMatchesBareFile) {
          sortedResultMap.put(dirent,glob.getSubdir().getRelative(fileName));
        }
      }
 else {
        processSubdir(lookedUpKeyAndValue,subdirMap,glob,sortedResultMap);
      }
    }
    Map<SkyKey,SkyValue> symlinkSubdirResult=env.getValues(symlinkSubdirMap.keySet());
    if (env.valuesMissing()) {
      return null;
    }
    for (    Map.Entry<SkyKey,SkyValue> lookedUpKeyAndValue : symlinkSubdirResult.entrySet()) {
      processSubdir(lookedUpKeyAndValue,symlinkSubdirMap,glob,sortedResultMap);
    }
    for (    Map.Entry<Dirent,Object> fileMatches : sortedResultMap.entrySet()) {
      addToMatches(fileMatches.getValue(),matches);
    }
  }
 else {
    String fileName=patternHead;
    RootedPath fileRootedPath=RootedPath.toRootedPath(glob.getPackageRoot(),dirPathFragment.getRelative(fileName));
    FileValue fileValue=(FileValue)env.getValue(FileValue.key(fileRootedPath));
    if (fileValue == null) {
      return null;
    }
    if (fileValue.exists()) {
      if (fileValue.isDirectory()) {
        SkyKey keyToRequest=getSkyKeyForSubdir(fileName,glob,patternTail);
        if (keyToRequest != null) {
          SkyValue valueRequested=env.getValue(keyToRequest);
          if (env.valuesMissing()) {
            return null;
          }
          Object fileMatches=getSubdirMatchesFromSkyValue(fileName,glob,valueRequested);
          if (fileMatches != null) {
            addToMatches(fileMatches,matches);
          }
        }
      }
 else       if (globMatchesBareFile) {
        matches.add(glob.getSubdir().getRelative(fileName));
      }
    }
  }
  Preconditions.checkState(!env.valuesMissing(),skyKey);
  NestedSet<PathFragment> matchesBuilt=matches.build();
  if (matchesBuilt.isEmpty()) {
    return GlobValue.EMPTY;
  }
  return new GlobValue(matchesBuilt);
}
