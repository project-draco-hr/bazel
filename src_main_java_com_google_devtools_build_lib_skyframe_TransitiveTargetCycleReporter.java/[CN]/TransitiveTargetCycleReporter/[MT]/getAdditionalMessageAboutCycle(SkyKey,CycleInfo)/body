{
  Target currentTarget=getTargetForLabel(getLabel(topLevelKey));
  List<SkyKey> keys=Lists.newArrayList();
  if (!cycleInfo.getPathToCycle().isEmpty()) {
    keys.add(topLevelKey);
    keys.addAll(cycleInfo.getPathToCycle());
  }
  keys.addAll(cycleInfo.getCycle());
  keys.add(cycleInfo.getCycle().get(0));
  for (  SkyKey nextKey : keys) {
    Label nextLabel=getLabel(nextKey);
    Target nextTarget=getTargetForLabel(nextLabel);
    if (currentTarget.getVisibility().getDependencyLabels().contains(nextLabel) && !nextTarget.getTargetKind().equals(PackageGroup.targetKind())) {
      return "\nThe cycle is caused by a visibility edge from " + currentTarget.getLabel() + " to the non-package-group target "+ nextTarget.getLabel()+ " . Note that "+ "visibility labels are supposed to be package group targets (which prevents cycles "+ "of this form)";
    }
    currentTarget=nextTarget;
  }
  return "";
}
