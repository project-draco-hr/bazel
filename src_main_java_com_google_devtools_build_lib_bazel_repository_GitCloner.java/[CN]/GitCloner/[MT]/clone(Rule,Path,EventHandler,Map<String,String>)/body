{
  WorkspaceAttributeMapper mapper=WorkspaceAttributeMapper.of(rule);
  if (mapper.isAttributeValueExplicitlySpecified("commit") == mapper.isAttributeValueExplicitlySpecified("tag")) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),"One of either commit or tag must be defined"),Transience.PERSISTENT);
  }
  GitRepositoryDescriptor descriptor;
  String startingPoint;
  try {
    if (mapper.isAttributeValueExplicitlySpecified("commit")) {
      startingPoint=mapper.get("commit",Type.STRING);
    }
 else {
      startingPoint="tags/" + mapper.get("tag",Type.STRING);
    }
    descriptor=new GitRepositoryDescriptor(mapper.get("remote",Type.STRING),startingPoint,mapper.get("init_submodules",Type.BOOLEAN),outputDirectory);
  }
 catch (  EvalException e) {
    throw new RepositoryFunctionException(e,Transience.PERSISTENT);
  }
  if (descriptor.remote != null && descriptor.remote.startsWith("http")) {
    try {
      ProxyHelper.createProxyIfNeeded(descriptor.remote,clientEnvironment);
    }
 catch (    IOException ie) {
      throw new RepositoryFunctionException(ie,Transience.TRANSIENT);
    }
  }
  Git git=null;
  try {
    if (descriptor.directory.exists()) {
      if (isUpToDate(descriptor)) {
        return new HttpDownloadValue(descriptor.directory);
      }
      try {
        FileSystemUtils.deleteTree(descriptor.directory);
      }
 catch (      IOException e) {
        throw new RepositoryFunctionException(e,Transience.TRANSIENT);
      }
    }
    git=Git.cloneRepository().setURI(descriptor.remote).setCredentialsProvider(new NetRCCredentialsProvider()).setDirectory(descriptor.directory.getPathFile()).setCloneSubmodules(false).setNoCheckout(true).setProgressMonitor(new GitProgressMonitor("Cloning " + descriptor.remote,eventHandler)).call();
    git.checkout().setCreateBranch(true).setName("bazel-checkout").setStartPoint(descriptor.checkout).call();
    if (descriptor.initSubmodules && !git.submoduleInit().call().isEmpty()) {
      git.submoduleUpdate().setProgressMonitor(new GitProgressMonitor("Cloning submodules for " + descriptor.remote,eventHandler)).call();
    }
  }
 catch (  InvalidRemoteException e) {
    throw new RepositoryFunctionException(new IOException("Invalid Git repository URI: " + e.getMessage()),Transience.PERSISTENT);
  }
catch (  RefNotFoundException|InvalidRefNameException e) {
    throw new RepositoryFunctionException(new IOException("Invalid branch, tag, or commit: " + e.getMessage()),Transience.PERSISTENT);
  }
catch (  GitAPIException e) {
    StringBuilder errmsg=new StringBuilder();
    errmsg.append(e.getMessage());
    Throwable throwable=e;
    while (throwable.getCause() != null) {
      throwable=throwable.getCause();
      errmsg.append(" caused by " + throwable.getMessage());
    }
    throw new RepositoryFunctionException(new IOException("Error cloning repository: " + errmsg),Transience.PERSISTENT);
  }
catch (  JGitInternalException e) {
    throw new RepositoryFunctionException(new IOException(e.getMessage()),Transience.PERSISTENT);
  }
 finally {
    if (git != null) {
      git.close();
    }
  }
  return new HttpDownloadValue(descriptor.directory);
}
