{
  OptionsParser optionsParser=new OptionsParser(args);
  DependencyModule.Builder builder=new DependencyModule.Builder();
  builder.addDirectMappings(optionsParser.getDirectMappings());
  builder.addIndirectMappings(optionsParser.getIndirectMappings());
  if (optionsParser.getStrictJavaDeps() != null) {
    builder.setStrictJavaDeps(optionsParser.getStrictJavaDeps());
  }
  if (optionsParser.getOutputDepsFile() != null) {
    builder.setOutputDepsFile(optionsParser.getOutputDepsFile());
  }
  if (optionsParser.getOutputDepsProtoFile() != null) {
    builder.setOutputDepsProtoFile(optionsParser.getOutputDepsProtoFile());
  }
  builder.addDepsArtifacts(optionsParser.getDepsArtifacts());
  if (optionsParser.reduceClasspath()) {
    builder.setReduceClasspath();
  }
  if (optionsParser.getRuleKind() != null) {
    builder.setRuleKind(optionsParser.getRuleKind());
  }
  if (optionsParser.getTargetLabel() != null) {
    builder.setTargetLabel(optionsParser.getTargetLabel());
  }
  this.dependencyModule=builder.build();
  this.plugins=ImmutableList.<BlazeJavaCompilerPlugin>builder().add(dependencyModule.getPlugin()).addAll(extraPlugins).build();
  this.compressJar=optionsParser.compressJar();
  this.sourceFiles=optionsParser.getSourceFiles();
  this.sourceJars=ImmutableList.copyOf(optionsParser.getSourceJars());
  this.messageFiles=ImmutableList.copyOf(optionsParser.getMessageFiles());
  this.resourceFiles=ImmutableList.copyOf(optionsParser.getResourceFiles());
  this.resourceJars=ImmutableList.copyOf(optionsParser.getResourceJars());
  this.rootResourceFiles=ImmutableList.copyOf(optionsParser.getRootResourceFiles());
  this.classPath=optionsParser.getClassPath();
  this.processorPath=optionsParser.getProcessorPath();
  this.processorNames=optionsParser.getProcessorNames();
  if (optionsParser.getClassDir() != null) {
    this.classDir=optionsParser.getClassDir();
  }
 else {
    this.classDir="classes";
  }
  if (optionsParser.getTempDir() != null) {
    this.tempDir=optionsParser.getTempDir();
  }
 else {
    this.tempDir="_tmp";
  }
  this.outputJar=optionsParser.getOutputJar();
  ImmutableList.Builder<AbstractPostProcessor> postProcessors=ImmutableList.builder();
  for (  Entry<String,List<String>> entry : optionsParser.getPostProcessors().entrySet()) {
    postProcessors.add(AbstractPostProcessor.create(entry.getKey(),entry.getValue()));
  }
  this.postProcessors=postProcessors.build();
  this.javacOpts=ImmutableList.copyOf(optionsParser.getJavacOpts());
  this.sourceGenDir=optionsParser.getSourceGenDir();
  this.generatedSourcesOutputJar=optionsParser.getGeneratedSourcesOutputJar();
}
