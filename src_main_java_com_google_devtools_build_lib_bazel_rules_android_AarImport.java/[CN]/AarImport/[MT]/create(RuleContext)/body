{
  RuleConfiguredTargetBuilder ruleBuilder=new RuleConfiguredTargetBuilder(ruleContext);
  Artifact aar=ruleContext.getPrerequisiteArtifact("aar",Mode.TARGET);
  Artifact classesJar=createAarArtifact(ruleContext,CLASSES_JAR);
  ruleContext.registerAction(createSingleFileExtractor(ruleContext,aar,CLASSES_JAR,classesJar));
  Artifact androidManifestArtifact=createAarArtifact(ruleContext,ANDROID_MANIFEST);
  ruleContext.registerAction(createSingleFileExtractor(ruleContext,aar,ANDROID_MANIFEST,androidManifestArtifact));
  Artifact resourcesManifest=createAarArtifact(ruleContext,"resource_manifest");
  ruleContext.registerAction(createManifestExtractor(ruleContext,aar,"res/.*",resourcesManifest));
  Artifact resources=createResourcesTreeArtifact(ruleContext);
  ruleContext.registerAction(createTreePopulater(ruleContext,aar,resourcesManifest,resources));
  ApplicationManifest androidManifest=ApplicationManifest.fromExplicitManifest(ruleContext,androidManifestArtifact);
  FileProvider resourcesProvider=new FileProvider(new NestedSetBuilder<Artifact>(Order.NAIVE_LINK_ORDER).add(resources).build());
  ResourceApk resourceApk=androidManifest.packWithDataAndResources(ruleContext,new LocalResourceContainer.Builder(ruleContext).withResources(ImmutableList.of(resourcesProvider)).build(),ResourceDependencies.fromRuleDeps(ruleContext,JavaCommon.isNeverLink(ruleContext)),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_SYMBOLS_TXT),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_PROCESSED_MANIFEST),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_ZIP));
  NestedSetBuilder<Artifact> filesToBuildBuilder=NestedSetBuilder.<Artifact>stableOrder().add(resources).add(classesJar);
  JavaRuleOutputJarsProvider.Builder jarProviderBuilder=new JavaRuleOutputJarsProvider.Builder().addOutputJar(classesJar,null,null);
  for (  TransitiveInfoCollection export : ruleContext.getPrerequisites("exports",Mode.TARGET)) {
    for (    OutputJar jar : export.getProvider(JavaRuleOutputJarsProvider.class).getOutputJars()) {
      jarProviderBuilder.addOutputJar(jar);
      filesToBuildBuilder.add(jar.getClassJar());
    }
  }
  return ruleBuilder.setFilesToBuild(filesToBuildBuilder.build()).addProvider(RunfilesProvider.class,RunfilesProvider.EMPTY).addProvider(AndroidResourcesProvider.class,resourceApk.toResourceProvider(ruleContext.getLabel())).addProvider(JavaRuleOutputJarsProvider.class,jarProviderBuilder.build()).build();
}
