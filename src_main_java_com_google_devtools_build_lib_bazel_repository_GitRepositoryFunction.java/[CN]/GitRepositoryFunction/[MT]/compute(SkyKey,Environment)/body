{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=RepositoryFunction.getRule(repositoryName,GitRepositoryRule.NAME,env);
  if (rule == null) {
    return null;
  }
  Path outputDirectory=getExternalRepositoryDirectory().getRelative(rule.getName());
  if (isFilesystemUpToDate(rule,NO_RULE_SPECIFIC_DATA)) {
    return RepositoryValue.create(outputDirectory);
  }
  createDirectory(outputDirectory,rule);
  try {
    HttpDownloadValue value=(HttpDownloadValue)env.getValueOrThrow(GitCloneFunction.key(rule,outputDirectory),IOException.class);
    if (value == null) {
      return null;
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  writeMarkerFile(rule,NO_RULE_SPECIFIC_DATA);
  return RepositoryValue.create(outputDirectory);
}
