{
  List<String> unparsedArgs=Lists.newArrayList();
  LinkedHashMap<String,List<String>> implicitRequirements=Maps.newLinkedHashMap();
  Iterator<String> argsIterator=args.iterator();
  while (argsIterator.hasNext()) {
    String arg=argsIterator.next();
    if (!arg.startsWith("-")) {
      unparsedArgs.add(arg);
      continue;
    }
    if (arg.equals("--")) {
      Iterators.addAll(unparsedArgs,argsIterator);
      break;
    }
    ParseOptionResult optionParseResult=parseOption(arg,argsIterator);
    Field field=optionParseResult.field;
    Option option=optionParseResult.option;
    String value=optionParseResult.value;
    final String originalName=option.name();
    if (option.wrapperOption()) {
      if (value.startsWith("-")) {
        List<String> unparsed=parse(priority,Functions.constant("Unwrapped from wrapper option --" + originalName),null,null,ImmutableList.of(value));
        if (!unparsed.isEmpty()) {
          throw new OptionsParsingException("Unparsed options remain after unwrapping " + arg + ": "+ Joiner.on(' ').join(unparsed));
        }
        continue;
      }
 else {
        throw new OptionsParsingException("Invalid --" + originalName + " value format. "+ "You may have meant --"+ originalName+ "=--"+ value);
      }
    }
    if (implicitDependent == null) {
      UnparsedOptionValueDescription unparsedOptionValueDescription=new UnparsedOptionValueDescription(originalName,field,value,priority,sourceFunction.apply(originalName),expandedFrom == null);
      unparsedValues.add(unparsedOptionValueDescription);
      if (option.allowMultiple()) {
        canonicalizeValues.put(field,unparsedOptionValueDescription);
      }
 else {
        canonicalizeValues.replaceValues(field,ImmutableList.of(unparsedOptionValueDescription));
      }
    }
    if (option.expansion().length > 0) {
      Function<Object,String> expansionSourceFunction=Functions.<String>constant("expanded from option --" + originalName + " from "+ sourceFunction.apply(originalName));
      maybeAddDeprecationWarning(field);
      List<String> unparsed=parse(priority,expansionSourceFunction,null,originalName,ImmutableList.copyOf(option.expansion()));
      if (!unparsed.isEmpty()) {
        throw new AssertionError("Unparsed options remain after parsing expansion of " + arg + ": "+ Joiner.on(' ').join(unparsed));
      }
    }
 else {
      Converter<?> converter=optionsData.getConverter(field);
      Object convertedValue;
      try {
        convertedValue=converter.convert(value);
      }
 catch (      OptionsParsingException e) {
        throw new OptionsParsingException("While parsing option " + arg + ": "+ e.getMessage(),e);
      }
      if (!option.allowMultiple()) {
        setValue(field,originalName,convertedValue,priority,sourceFunction.apply(originalName),implicitDependent,expandedFrom);
      }
 else {
        addListValue(field,convertedValue,priority,sourceFunction.apply(originalName),implicitDependent,expandedFrom);
      }
    }
    if (option.implicitRequirements().length > 0) {
      implicitRequirements.put(option.name(),Arrays.asList(option.implicitRequirements()));
    }
  }
  if (!implicitRequirements.isEmpty()) {
    for (    Map.Entry<String,List<String>> entry : implicitRequirements.entrySet()) {
      Function<Object,String> requirementSourceFunction=Functions.<String>constant("implicit requirement of option --" + entry.getKey() + " from "+ sourceFunction.apply(entry.getKey()));
      List<String> unparsed=parse(priority,requirementSourceFunction,entry.getKey(),null,entry.getValue());
      if (!unparsed.isEmpty()) {
        throw new AssertionError("Unparsed options remain after parsing implicit options: " + Joiner.on(' ').join(unparsed));
      }
    }
  }
  return unparsedArgs;
}
