{
  if (tree == null) {
    ErrorReporter.errorAbort("InternalUtils.symbol: tree is null");
    return null;
  }
  if (!(tree instanceof JCTree)) {
    ErrorReporter.errorAbort("InternalUtils.symbol: tree is not a valid Javac tree");
    return null;
  }
  if (TreeUtils.isExpressionTree(tree)) {
    tree=TreeUtils.skipParens((ExpressionTree)tree);
  }
switch (tree.getKind()) {
case VARIABLE:
case METHOD:
case CLASS:
case ENUM:
case INTERFACE:
case ANNOTATION_TYPE:
case TYPE_PARAMETER:
    return TreeInfo.symbolFor((JCTree)tree);
case METHOD_INVOCATION:
  return TreeInfo.symbol(((JCMethodInvocation)tree).getMethodSelect());
case ASSIGNMENT:
return TreeInfo.symbol((JCTree)((AssignmentTree)tree).getVariable());
case ARRAY_ACCESS:
return symbol(((ArrayAccessTree)tree).getExpression());
case NEW_CLASS:
return ((JCNewClass)tree).constructor;
case MEMBER_REFERENCE:
return ((JCMemberReference)tree).sym;
default :
return TreeInfo.symbol((JCTree)tree);
}
}
