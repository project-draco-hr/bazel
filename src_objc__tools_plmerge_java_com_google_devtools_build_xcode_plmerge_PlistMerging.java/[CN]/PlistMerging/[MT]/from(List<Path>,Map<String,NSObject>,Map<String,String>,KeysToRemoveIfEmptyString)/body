{
  NSDictionary merged=PlistMerging.merge(sourceFiles);
  Set<String> conflictingEntries=Sets.intersection(immutableEntries.keySet(),merged.keySet());
  Preconditions.checkArgument(conflictingEntries.isEmpty(),"The following plist entries may not be overridden, but are present in more than one " + "of the input lists: %s",conflictingEntries);
  merged.putAll(immutableEntries);
  for (  Map.Entry<String,NSObject> entry : merged.entrySet()) {
    if (entry.getValue().toJavaObject() instanceof String) {
      String newValue=substituteEnvironmentVariable(substitutions,(String)entry.getValue().toJavaObject());
      merged.put(entry.getKey(),newValue);
    }
  }
  for (  String key : keysToRemoveIfEmptyString) {
    if (Equaling.of(Mapping.of(merged,key),Optional.<NSObject>of(new NSString("")))) {
      merged.remove(key);
    }
  }
  if (!immutableEntries.isEmpty()) {
    Pattern versionPattern=Pattern.compile("[^0-9.]");
    if (!merged.containsKey(BUNDLE_VERSION_PLIST_KEY)) {
      merged.put(BUNDLE_VERSION_PLIST_KEY,BUNDLE_VERSION_DEFAULT);
    }
 else {
      NSObject nsVersion=merged.get(BUNDLE_VERSION_PLIST_KEY);
      String version=(String)nsVersion.toJavaObject();
      if (version.length() > 18 || versionPattern.matcher(version).find()) {
        merged.put(BUNDLE_VERSION_PLIST_KEY,BUNDLE_VERSION_DEFAULT);
      }
    }
    if (!merged.containsKey(BUNDLE_SHORT_VERSION_STRING_PLIST_KEY)) {
      merged.put(BUNDLE_SHORT_VERSION_STRING_PLIST_KEY,BUNDLE_SHORT_VERSION_STRING_DEFAULT);
    }
 else {
      NSObject nsVersion=merged.get(BUNDLE_SHORT_VERSION_STRING_PLIST_KEY);
      String version=(String)nsVersion.toJavaObject();
      if (version.length() > 18 || versionPattern.matcher(version).find()) {
        merged.put(BUNDLE_SHORT_VERSION_STRING_PLIST_KEY,BUNDLE_SHORT_VERSION_STRING_DEFAULT);
      }
    }
  }
  return new PlistMerging(merged);
}
