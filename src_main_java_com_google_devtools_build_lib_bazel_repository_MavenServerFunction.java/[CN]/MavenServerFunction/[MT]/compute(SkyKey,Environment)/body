{
  String repository=(String)skyKey.argument();
  Package externalPackage=RepositoryFunction.getExternalPackage(env);
  if (externalPackage == null) {
    return null;
  }
  Rule repositoryRule=externalPackage.getRule(repository);
  String serverName;
  String url;
  Map<String,FileValue> settingsFiles;
  boolean foundRepoRule=repositoryRule != null && repositoryRule.getRuleClass().equals(MavenServerRule.NAME);
  if (!foundRepoRule) {
    if (repository.equals(MavenServerValue.DEFAULT_ID)) {
      settingsFiles=getDefaultSettingsFile(env);
      serverName=MavenServerValue.DEFAULT_ID;
      url=MavenConnector.getMavenCentralRemote().getUrl();
    }
 else {
      throw new RepositoryFunctionException(new IOException("Could not find maven repository " + repository),Transience.TRANSIENT);
    }
  }
 else {
    AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(repositoryRule);
    serverName=repositoryRule.getName();
    url=mapper.get("url",Type.STRING);
    if (!mapper.has("settings_file",Type.STRING) || mapper.get("settings_file",Type.STRING).isEmpty()) {
      settingsFiles=getDefaultSettingsFile(env);
    }
 else {
      PathFragment settingsFilePath=new PathFragment(mapper.get("settings_file",Type.STRING));
      RootedPath settingsPath=RootedPath.toRootedPath(directories.getWorkspace().getRelative(settingsFilePath),PathFragment.EMPTY_FRAGMENT);
      FileValue fileValue=(FileValue)env.getValue(FileValue.key(settingsPath));
      if (fileValue == null) {
        return null;
      }
      if (!fileValue.exists()) {
        throw new RepositoryFunctionException(new IOException("Could not find settings file " + settingsPath),Transience.TRANSIENT);
      }
      settingsFiles=ImmutableMap.<String,FileValue>builder().put(USER_KEY,fileValue).build();
    }
  }
  if (settingsFiles == null) {
    return null;
  }
  Fingerprint fingerprint=new Fingerprint();
  try {
    for (    Map.Entry<String,FileValue> entry : settingsFiles.entrySet()) {
      fingerprint.addString(entry.getKey());
      Path path=entry.getValue().realRootedPath().asPath();
      if (path.exists()) {
        fingerprint.addBoolean(true);
        fingerprint.addBytes(path.getMD5Digest());
      }
 else {
        fingerprint.addBoolean(false);
      }
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  byte[] fingerprintBytes=fingerprint.digestAndReset();
  if (settingsFiles.isEmpty()) {
    return new MavenServerValue(serverName,url,new Server(),fingerprintBytes);
  }
  DefaultSettingsBuildingRequest request=new DefaultSettingsBuildingRequest();
  if (settingsFiles.containsKey(SYSTEM_KEY)) {
    request.setGlobalSettingsFile(settingsFiles.get(SYSTEM_KEY).realRootedPath().asPath().getPathFile());
  }
  if (settingsFiles.containsKey(USER_KEY)) {
    request.setUserSettingsFile(settingsFiles.get(USER_KEY).realRootedPath().asPath().getPathFile());
  }
  DefaultSettingsBuilder builder=(new DefaultSettingsBuilderFactory()).newInstance();
  SettingsBuildingResult result;
  try {
    result=builder.build(request);
  }
 catch (  SettingsBuildingException e) {
    throw new RepositoryFunctionException(new IOException("Error parsing settings files: " + e.getMessage()),Transience.TRANSIENT);
  }
  if (!result.getProblems().isEmpty()) {
    throw new RepositoryFunctionException(new IOException("Errors interpreting settings file: " + Arrays.toString(result.getProblems().toArray())),Transience.PERSISTENT);
  }
  Settings settings=result.getEffectiveSettings();
  Server server=settings.getServer(serverName);
  server=server == null ? new Server() : server;
  return new MavenServerValue(serverName,url,server,fingerprintBytes);
}
