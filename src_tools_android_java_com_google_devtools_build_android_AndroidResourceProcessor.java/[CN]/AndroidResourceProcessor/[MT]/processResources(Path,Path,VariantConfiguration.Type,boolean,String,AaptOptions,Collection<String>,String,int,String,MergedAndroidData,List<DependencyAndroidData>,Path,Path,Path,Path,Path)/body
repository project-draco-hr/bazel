{
  List<SymbolFileProvider> libraries=new ArrayList<>();
  List<String> packages=new ArrayList<>();
  for (  DependencyAndroidData dataDep : dependencyData) {
    SymbolFileProvider library=dataDep.asSymbolFileProvider();
    libraries.add(library);
    packages.add(VariantConfiguration.getManifestPackage(library.getManifest()));
  }
  Path androidManifest=processManifest(variantType == VariantConfiguration.Type.DEFAULT ? applicationId : customPackageForR,versionCode,versionName,primaryData,workingDirectory,variantType == VariantConfiguration.Type.DEFAULT ? ManifestMerger2.MergeType.APPLICATION : ManifestMerger2.MergeType.LIBRARY);
  File resFolder=primaryData.getResourceDirFile();
  File assetsDir=primaryData.getAssetDirFile();
  List<String> command=new ArrayList<>();
  command.add(aapt.toString());
  command.add("package");
  if (stdLogger.getLevel() == StdLogger.Level.VERBOSE) {
    command.add("-v");
  }
  command.add("-f");
  command.add("--no-crunch");
  command.add("-I");
  command.add(androidJar.toString());
  command.add("-M");
  command.add(androidManifest.toAbsolutePath().toString());
  if (resFolder.isDirectory()) {
    command.add("-S");
    command.add(resFolder.getAbsolutePath());
  }
  if (assetsDir != null && assetsDir.isDirectory()) {
    command.add("-A");
    command.add(assetsDir.getAbsolutePath());
  }
  if (sourceOut != null) {
    prepareOutputPath(sourceOut);
    command.add("-m");
    command.add("-J");
    command.add(sourceOut.toString());
    command.add("--output-text-symbols");
    command.add(sourceOut.toString());
  }
  if (packageOut != null) {
    command.add("-F");
    command.add(packageOut.toString());
  }
  if (proguardOut != null) {
    command.add("-G");
    command.add(proguardOut.toString());
  }
  if (debug) {
    command.add("--debug-mode");
  }
  if (customPackageForR != null) {
    command.add("--custom-package");
    command.add(customPackageForR);
    stdLogger.verbose("Custom package for R class: '%s'",customPackageForR);
  }
  if (variantType == VariantConfiguration.Type.LIBRARY) {
    command.add("--non-constant-id");
  }
  if (variantType == VariantConfiguration.Type.DEFAULT) {
    command.add("--extra-packages");
    command.add(Joiner.on(":").join(packages));
  }
  if (aaptOptions.getIgnoreAssets() != null) {
    command.add("--ignore-assets");
    command.add(aaptOptions.getIgnoreAssets());
  }
  if (aaptOptions.getFailOnMissingConfigEntry()) {
    command.add("--error-on-missing-config-entry");
  }
  command.add("-0");
  command.add("apk");
  for (  String noCompress : aaptOptions.getNoCompress()) {
    command.add("-0");
    command.add(noCompress);
  }
  if (!resourceConfigs.isEmpty()) {
    command.add("-c");
    command.add(Joiner.on(',').join(resourceConfigs));
  }
  new CommandLineRunner(stdLogger).runCmdLine(command,null);
  writeDependencyPackageRs(variantType,customPackageForR,libraries,androidManifest.toFile(),sourceOut);
  if (proguardOut != null) {
    Files.setLastModifiedTime(proguardOut,FileTime.fromMillis(0L));
  }
  if (packageOut != null) {
    Files.setLastModifiedTime(packageOut,FileTime.fromMillis(0L));
  }
  if (manifestOut != null) {
    Files.copy(androidManifest,manifestOut);
    Files.setLastModifiedTime(manifestOut,FileTime.fromMillis(0L));
  }
}
