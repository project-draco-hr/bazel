{
  List<Object> dataToConsolidate=getDataToConsolidate(container);
  if (dataToConsolidate == null) {
    return;
  }
  setDataToConsolidate(container,null);
  Object reverseDeps=getReverseDepsObject(container);
  if (isSingleReverseDep(container)) {
    Preconditions.checkState(dataToConsolidate.size() == 1,"dataToConsolidate not size 1 even though only one rdep: %s %s %s",dataToConsolidate,reverseDeps,container);
    Object keyToConsolidate=Iterables.getOnlyElement(dataToConsolidate);
    SkyKey key=KeyToConsolidate.key(keyToConsolidate);
switch (KeyToConsolidate.op(keyToConsolidate)) {
case REMOVE:
      overwriteReverseDepsList(container,ImmutableList.<SkyKey>of());
case CHECK:
    Preconditions.checkState(key.equals(reverseDeps),"%s %s %s",keyToConsolidate,reverseDeps,container);
  break;
case ADD:
throw new IllegalStateException("Shouldn't delay add if only one element: " + keyToConsolidate + ", "+ reverseDeps+ ", "+ container);
default :
throw new IllegalStateException(keyToConsolidate + ", " + reverseDeps+ ", "+ container);
}
return;
}
List<SkyKey> reverseDepsAsList=(List<SkyKey>)reverseDeps;
Set<SkyKey> reverseDepsAsSet=CompactHashSet.create(reverseDepsAsList);
if (reverseDepsAsSet.size() != reverseDepsAsList.size()) {
Set<SkyKey> seen=new HashSet<>();
List<SkyKey> duplicates=new ArrayList<>();
for (SkyKey key : reverseDepsAsList) {
if (!seen.add(key)) {
duplicates.add(key);
}
}
throw new IllegalStateException((reverseDepsAsList.size() - reverseDepsAsSet.size()) + " duplicates: " + duplicates+ " for "+ container);
}
for (Object keyToConsolidate : dataToConsolidate) {
SkyKey key=KeyToConsolidate.key(keyToConsolidate);
switch (KeyToConsolidate.op(keyToConsolidate)) {
case CHECK:
Preconditions.checkState(reverseDepsAsSet.contains(key),"%s %s %s",keyToConsolidate,reverseDepsAsSet,container);
break;
case REMOVE:
Preconditions.checkState(reverseDepsAsSet.remove(key),"%s %s %s",keyToConsolidate,reverseDeps,container);
break;
case ADD:
Preconditions.checkState(reverseDepsAsSet.add(key),"%s %s %s",keyToConsolidate,reverseDeps,container);
break;
default :
throw new IllegalStateException(keyToConsolidate + ", " + reverseDepsAsSet+ ", "+ container);
}
}
if (reverseDepsAsSet.isEmpty()) {
overwriteReverseDepsList(container,ImmutableList.<SkyKey>of());
}
 else if (reverseDepsAsSet.size() == 1) {
overwriteReverseDepsWithObject(container,Iterables.getOnlyElement(reverseDepsAsSet));
}
 else {
overwriteReverseDepsList(container,new ArrayList<>(reverseDepsAsSet));
}
}
