{
  owningExecutable=Preconditions.checkNotNull(executable);
  this.createSymlinks=createSymlinks;
  RunUnder runUnder=ruleContext.getConfiguration().getRunUnder();
  if (runUnder != null && runUnder.getLabel() != null && TargetUtils.isTestRule(ruleContext.getRule())) {
    TransitiveInfoCollection runUnderTarget=ruleContext.getPrerequisite(":run_under",Mode.DATA);
    runfiles=new Runfiles.Builder(ruleContext.getWorkspaceName()).merge(getRunfiles(runUnderTarget)).merge(runfiles).build();
  }
  this.runfiles=runfiles;
  Preconditions.checkState(!runfiles.isEmpty());
  Map<PathFragment,Artifact> symlinks=getRunfilesSymlinks();
  if (executable != null && !symlinks.containsValue(executable)) {
    throw new IllegalStateException("main program " + executable + " not included in runfiles");
  }
  Artifact artifactsMiddleman=createArtifactsMiddleman(ruleContext,runfiles.getAllArtifacts());
  runfilesInputManifest=createRunfilesInputManifestArtifact(ruleContext);
  this.runfilesManifest=createRunfilesAction(ruleContext,runfiles);
  this.runfilesMiddleman=createRunfilesMiddleman(ruleContext,artifactsMiddleman,runfilesManifest);
  sourcesManifest=createSourceManifest(ruleContext,runfiles);
  args=ImmutableList.<String>builder().addAll(ruleContext.getTokenizedStringListAttr("args")).addAll(appendingArgs).build();
}
