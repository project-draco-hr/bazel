{
  PathFragment.checkAllPathsAreUnder(excludedSubdirectories,directory);
  boolean inUniverse=false;
  for (  TargetPatternKey patternKey : universeTargetPatternKeys) {
    TargetPattern pattern=patternKey.getParsedPattern();
    boolean isTBD=pattern.getType().equals(Type.TARGETS_BELOW_DIRECTORY);
    PackageIdentifier packageIdentifier=PackageIdentifier.create(repository,directory);
    if (isTBD && pattern.containsBelowDirectory(packageIdentifier)) {
      inUniverse=true;
      break;
    }
  }
  if (!inUniverse) {
    return ImmutableList.of();
  }
  List<Path> roots=new ArrayList<>();
  if (repository.isDefault()) {
    roots.addAll(pkgPath.getPathEntries());
  }
 else {
    RepositoryValue repositoryValue=(RepositoryValue)graph.getValue(RepositoryValue.key(repository));
    if (repositoryValue == null) {
      return ImmutableList.of();
    }
    roots.add(repositoryValue.getPath());
  }
  ImmutableList.Builder<PathFragment> builder=ImmutableList.builder();
  for (  Path root : roots) {
    RootedPath rootedDir=RootedPath.toRootedPath(root,directory);
    TraversalInfo info=new TraversalInfo(rootedDir,excludedSubdirectories);
    collectPackagesUnder(repository,ImmutableSet.of(info),builder);
  }
  return builder.build();
}
