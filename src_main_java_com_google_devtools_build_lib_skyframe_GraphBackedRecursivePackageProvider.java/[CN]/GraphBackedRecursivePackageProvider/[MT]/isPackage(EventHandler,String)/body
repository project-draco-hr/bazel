{
  SkyKey packageLookupKey=PackageLookupValue.key(new PathFragment(packageName));
  if (!graph.exists(packageLookupKey)) {
    return false;
  }
  PackageLookupValue packageLookupValue=(PackageLookupValue)graph.getValue(packageLookupKey);
  if (packageLookupValue == null) {
    Exception exception=Preconditions.checkNotNull(graph.getException(packageLookupKey),"During package lookup for '%s', got null for exception",packageName);
    if (exception instanceof NoSuchPackageException || exception instanceof InconsistentFilesystemException) {
      eventHandler.handle(Event.error(exception.getMessage()));
      return false;
    }
 else {
      throw new IllegalStateException("During package lookup for '" + packageName + "', got unexpected exception type",exception);
    }
  }
  return packageLookupValue.packageExists();
}
