{
  BlazeDirectories directories=env.getBlazeDirectories();
  if (directories == null) {
    return null;
  }
  Label crosstoolTopLabel=RedirectChaser.followRedirects(env,options.get(CppOptions.class).crosstoolTop,"crosstool_top");
  if (crosstoolTopLabel == null) {
    return null;
  }
  CrosstoolConfigurationLoader.CrosstoolFile file=CrosstoolConfigurationLoader.readCrosstool(env,crosstoolTopLabel);
  if (file == null) {
    return null;
  }
  CrosstoolConfig.CToolchain toolchain=CrosstoolConfigurationLoader.selectToolchain(file.getProto(),options,cpuTransformer);
  CppOptions cppOptions=options.get(CppOptions.class);
  Path fdoZip;
  if (cppOptions.fdoOptimize == null) {
    fdoZip=null;
  }
 else   if (cppOptions.fdoOptimize.startsWith("//")) {
    try {
      Target target=env.getTarget(Label.parseAbsolute(cppOptions.fdoOptimize));
      if (target == null) {
        return null;
      }
      if (!(target instanceof InputFile)) {
        throw new InvalidConfigurationException("--fdo_optimize cannot accept targets that do not refer to input files");
      }
      fdoZip=env.getPath(target.getPackage(),target.getName());
      if (fdoZip == null) {
        throw new InvalidConfigurationException("The --fdo_optimize parameter you specified resolves to a file that does not exist");
      }
    }
 catch (    NoSuchPackageException|NoSuchTargetException|LabelSyntaxException e) {
      env.getEventHandler().handle(Event.error(e.getMessage()));
      throw new InvalidConfigurationException(e);
    }
  }
 else {
    fdoZip=directories.getWorkspace().getRelative(cppOptions.fdoOptimize);
    try {
      FileSystemUtils.checkBaseName(fdoZip.getBaseName());
    }
 catch (    IllegalArgumentException e) {
      throw new InvalidConfigurationException(e);
    }
  }
  Label ccToolchainLabel;
  Target crosstoolTop;
  try {
    crosstoolTop=env.getTarget(crosstoolTopLabel);
  }
 catch (  NoSuchThingException e) {
    throw new IllegalStateException(e);
  }
  if (crosstoolTop instanceof Rule && ((Rule)crosstoolTop).getRuleClass().equals("cc_toolchain_suite")) {
    Rule ccToolchainSuite=(Rule)crosstoolTop;
    ccToolchainLabel=NonconfigurableAttributeMapper.of(ccToolchainSuite).get("toolchains",BuildType.LABEL_DICT_UNARY).get(toolchain.getTargetCpu());
    if (ccToolchainLabel == null) {
      throw new InvalidConfigurationException(String.format("cc_toolchain_suite '%s' does not contain a toolchain for CPU '%s'",crosstoolTopLabel,toolchain.getTargetCpu()));
    }
  }
 else {
    try {
      ccToolchainLabel=crosstoolTopLabel.getRelative("cc-compiler-" + toolchain.getTargetCpu());
    }
 catch (    LabelSyntaxException e) {
      throw new InvalidConfigurationException(String.format("'%s' is not a valid CPU. It should only consist of characters valid in labels",toolchain.getTargetCpu()));
    }
  }
  Target ccToolchain;
  try {
    ccToolchain=env.getTarget(ccToolchainLabel);
    if (ccToolchain == null) {
      return null;
    }
  }
 catch (  NoSuchThingException e) {
    throw new InvalidConfigurationException(String.format("The toolchain rule '%s' does not exist",ccToolchainLabel));
  }
  if (!(ccToolchain instanceof Rule) || !CcToolchainRule.isCcToolchain(ccToolchain)) {
    throw new InvalidConfigurationException(String.format("The label '%s' is not a cc_toolchain rule",ccToolchainLabel));
  }
  return new CppConfigurationParameters(toolchain,file.getMd5(),options,fdoZip,directories.getExecRoot(),crosstoolTopLabel,ccToolchainLabel);
}
