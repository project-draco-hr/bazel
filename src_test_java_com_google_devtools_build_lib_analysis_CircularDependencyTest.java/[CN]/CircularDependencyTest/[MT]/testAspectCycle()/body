{
  reporter.removeHandler(failFastHandler);
  scratch.file("x/BUILD","load('//x:x.bzl', 'aspected', 'plain')","plain(name = 'a', noaspect_deps = [':b'])","aspected(name = 'b', aspect_deps = ['c'])","plain(name = 'c')","plain(name = 'aspectdep', aspect_deps = ['a'])");
  scratch.file("x/x.bzl","def _impl(ctx):","    return struct()","","rule_aspect = aspect(","    implementation = _impl,","    attr_aspects = ['aspect_deps'],","    attrs = { '_implicit': attr.label(default = Label('//x:aspectdep')) })","","plain = rule(","    implementation = _impl,","    attrs = { 'aspect_deps': attr.label_list(), 'noaspect_deps': attr.label_list() })","","aspected = rule(","    implementation = _impl,","    attrs = { 'aspect_deps': attr.label_list(aspects = [rule_aspect]) })");
  getConfiguredTarget("//x:a");
  assertContainsEvent("cycle in dependency graph");
  assertContainsEvent("//x:c with aspect //x:x.bzl%rule_aspect");
}
