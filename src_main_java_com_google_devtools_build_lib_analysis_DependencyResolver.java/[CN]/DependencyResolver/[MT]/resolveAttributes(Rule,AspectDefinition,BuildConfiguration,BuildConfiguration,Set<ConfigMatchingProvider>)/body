{
  ConfiguredAttributeMapper attributeMap=ConfiguredAttributeMapper.of(rule,configConditions);
  attributeMap.validateAttributes();
  List<Attribute> attributes;
  if (aspect == null) {
    attributes=rule.getRuleClassObject().getAttributes();
  }
 else {
    attributes=new ArrayList<>();
    attributes.addAll(rule.getRuleClassObject().getAttributes());
    if (aspect != null) {
      attributes.addAll(aspect.getAttributes().values());
    }
  }
  ImmutableSortedKeyListMultimap.Builder<Attribute,LabelAndConfiguration> result=ImmutableSortedKeyListMultimap.builder();
  resolveExplicitAttributes(rule,configuration,attributeMap,result);
  resolveImplicitAttributes(rule,configuration,attributeMap,attributes,result);
  resolveLateBoundAttributes(rule,configuration,hostConfiguration,attributeMap,attributes,result);
  addExplicitDeps(result,rule,"visibility",rule.getVisibility().getDependencyLabels(),configuration);
  if (!rule.isAttributeValueExplicitlySpecified(RuleClass.COMPATIBLE_ENVIRONMENT_ATTR)) {
    addExplicitDeps(result,rule,RuleClass.COMPATIBLE_ENVIRONMENT_ATTR,rule.getPackage().getDefaultCompatibleWith(),configuration);
  }
  if (!rule.isAttributeValueExplicitlySpecified(RuleClass.RESTRICTED_ENVIRONMENT_ATTR)) {
    addExplicitDeps(result,rule,RuleClass.RESTRICTED_ENVIRONMENT_ATTR,rule.getPackage().getDefaultRestrictedTo(),configuration);
  }
  return result.build();
}
