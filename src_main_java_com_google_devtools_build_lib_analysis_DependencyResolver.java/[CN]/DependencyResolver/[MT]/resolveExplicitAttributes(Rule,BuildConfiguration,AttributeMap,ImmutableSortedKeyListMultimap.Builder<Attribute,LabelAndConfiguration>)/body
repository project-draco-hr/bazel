{
  attributes.visitLabels(new AttributeMap.AcceptsLabelAttribute(){
    @Override public void acceptLabelAttribute(    Label label,    Attribute attribute){
      String attributeName=attribute.getName();
      if (attributeName.equals("abi_deps")) {
        return;
      }
      if (attribute.getType() == Type.NODEP_LABEL) {
        return;
      }
      if (attribute.isImplicit() || attribute.isLateBound()) {
        return;
      }
      builder.put(attribute,LabelAndConfiguration.of(label,configuration));
    }
  }
);
  if (attributes.getAttributeDefinition("abi_deps") != null) {
    Attribute depsAttribute=attributes.getAttributeDefinition("deps");
    MakeVariableExpander.Context context=new ConfigurationMakeVariableContext(rule.getPackage(),configuration);
    String abi=null;
    try {
      abi=MakeVariableExpander.expand(attributes.get("abi",Type.STRING),context);
    }
 catch (    MakeVariableExpander.ExpansionException e) {
    }
    if (abi != null) {
      for (      Map.Entry<String,List<Label>> entry : attributes.get("abi_deps",Type.LABEL_LIST_DICT).entrySet()) {
        try {
          if (Pattern.matches(entry.getKey(),abi)) {
            for (            Label label : entry.getValue()) {
              builder.put(depsAttribute,LabelAndConfiguration.of(label,configuration));
            }
          }
        }
 catch (        PatternSyntaxException e) {
        }
      }
    }
  }
}
