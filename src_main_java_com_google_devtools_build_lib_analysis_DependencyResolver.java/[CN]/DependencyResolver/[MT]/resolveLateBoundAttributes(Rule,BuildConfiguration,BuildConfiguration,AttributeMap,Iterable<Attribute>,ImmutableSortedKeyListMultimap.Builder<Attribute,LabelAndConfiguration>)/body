{
  for (  Attribute attribute : attributes) {
    if (!attribute.isLateBound() || !attribute.getCondition().apply(attributeMap)) {
      continue;
    }
    List<BuildConfiguration> actualConfigurations=ImmutableList.of(configuration);
    if (attribute.getConfigurationTransition() instanceof SplitTransition<?>) {
      Preconditions.checkState(attribute.getConfigurator() == null);
      actualConfigurations=configuration.getSplitConfigurations((SplitTransition<?>)attribute.getConfigurationTransition());
    }
    for (    BuildConfiguration actualConfig : actualConfigurations) {
      @SuppressWarnings("unchecked") LateBoundDefault<BuildConfiguration> lateBoundDefault=(LateBoundDefault<BuildConfiguration>)attribute.getLateBoundDefault();
      if (lateBoundDefault.useHostConfiguration()) {
        actualConfig=hostConfiguration;
      }
      if (!lateBoundDefault.getRequiredConfigurationFragments().isEmpty()) {
        if (!actualConfig.hasAllFragments(lateBoundDefault.getRequiredConfigurationFragments())) {
          continue;
        }
      }
      Object actualValue=lateBoundDefault.getDefault(rule,actualConfig);
      if (EvalUtils.isNullOrNone(actualValue)) {
        continue;
      }
      try {
        if (attribute.getType() == BuildType.LABEL) {
          Label label=BuildType.LABEL.cast(actualValue);
          builder.put(attribute,LabelAndConfiguration.of(label,actualConfig));
        }
 else         if (attribute.getType() == BuildType.LABEL_LIST) {
          for (          Label label : BuildType.LABEL_LIST.cast(actualValue)) {
            builder.put(attribute,LabelAndConfiguration.of(label,actualConfig));
          }
        }
 else {
          throw new IllegalStateException(String.format("Late bound attribute '%s' is not a label or a label list",attribute.getName()));
        }
      }
 catch (      ClassCastException e) {
        throw new EvalException(rule.getLocation(),String.format("When computing the default value of %s, expected '%s', got '%s'",attribute.getName(),attribute.getType(),EvalUtils.getDataTypeName(actualValue,true)));
      }
    }
  }
}
