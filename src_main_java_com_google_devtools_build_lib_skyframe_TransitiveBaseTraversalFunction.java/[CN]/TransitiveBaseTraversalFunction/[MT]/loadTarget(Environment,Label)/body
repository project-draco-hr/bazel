{
  SkyKey packageKey=PackageValue.key(label.getPackageIdentifier());
  SkyKey targetKey=TargetMarkerValue.key(label);
  boolean packageLoadedSuccessfully;
  Target target;
  NoSuchTargetException errorLoadingTarget=null;
  try {
    TargetMarkerValue targetValue=(TargetMarkerValue)env.getValueOrThrow(targetKey,NoSuchTargetException.class,NoSuchPackageException.class);
    if (targetValue == null) {
      return ValuesMissing.INSTANCE;
    }
    PackageValue packageValue=(PackageValue)env.getValueOrThrow(packageKey,NoSuchPackageException.class);
    if (packageValue == null) {
      return ValuesMissing.INSTANCE;
    }
    Package pkg=packageValue.getPackage();
    if (pkg.containsErrors()) {
      throw new BuildFileContainsErrorsException(label.getPackageIdentifier());
    }
    packageLoadedSuccessfully=true;
    try {
      target=pkg.getTarget(label.getName());
    }
 catch (    NoSuchTargetException unexpected) {
      throw new IllegalStateException(unexpected);
    }
  }
 catch (  NoSuchTargetException e) {
    if (!e.hasTarget()) {
      throw e;
    }
    PackageValue packageValue=(PackageValue)Preconditions.checkNotNull(env.getValue(packageKey),label);
    Package pkg=packageValue.getPackage();
    try {
      target=pkg.getTarget(label.getName());
    }
 catch (    NoSuchTargetException nste) {
      throw new IllegalStateException("Expected target to exist",nste);
    }
    errorLoadingTarget=e;
    packageLoadedSuccessfully=false;
  }
  return new TargetAndErrorIfAnyImpl(packageLoadedSuccessfully,errorLoadingTarget,target);
}
