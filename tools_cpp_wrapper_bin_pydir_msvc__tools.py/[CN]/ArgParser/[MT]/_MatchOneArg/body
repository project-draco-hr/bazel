def _MatchOneArg(self, args):
    'Finds a pattern which matches the beginning elements of args.\n\n    Args:\n      args: A list of arguments to replace.\n\n    Returns:\n       A tuple of (number of arguments parsed, action, match groups).\n    '
    for (regex, action) in self.substitutions:
        if isinstance(regex, str):
            regex = [regex]
        j = 0
        matches = []
        for r in regex:
            if (j < len(args)):
                match = re.compile((('^' + r) + '$')).match(args[j])
            else:
                match = None
            matches.append(match)
            j += 1
        if (None in matches):
            continue
        groups = []
        for m in matches:
            groups.extend(m.groups())
        return (len(regex), action, groups)
    return (0, '', [])
