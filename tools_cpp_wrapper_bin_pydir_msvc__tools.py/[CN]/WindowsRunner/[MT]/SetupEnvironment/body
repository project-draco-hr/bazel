def SetupEnvironment(self, build_arch):
    "Setup proper path for running.\n\n    Args:\n      build_arch: Either 'x64' or 'x86', which binary architecture to build for.\n\n    Returns:\n      An environment suitable for running on Windows.\n    "
    common_paths = ['C:\\Windows', 'C:\\Windows\\system32', 'C:\\Windows\\System32\\Wbem', os.path.join(VC_PATH, 'Common7\\IDE'), os.path.join(VC_PATH, 'Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow'), os.path.join(VC_PATH, 'Common7\\Tools'), os.path.join(VC_PATH, 'VC\\VCPackages')]
    x86_paths = ([os.path.join(VC_PATH, 'VC\\bin'), os.path.join(VC_PATH, (('VC\\redist\\x86\\Microsoft.VC' + VC_VERSION) + '.CRT')), os.path.join(PLATFORM_SDK_PATH, 'bin\\x86')] + common_paths)
    x64_paths = ([os.path.join(VC_PATH, 'VC\\bin\\x86_amd64'), os.path.join(VC_PATH, 'VC\\bin'), os.path.join(VC_PATH, (('VC\\redist\\x64\\Microsoft.VC' + VC_VERSION) + '.CRT')), os.path.join(VC_PATH, (('VC\\redist\\x86\\Microsoft.VC' + VC_VERSION) + '.CRT')), os.path.join(PLATFORM_SDK_PATH, 'bin\\x64')] + common_paths)
    path = (x86_paths if (build_arch == 'x86') else x64_paths)
    include = [os.path.join(GNU_PATH, 'include'), os.path.join(PYTHON_PATH, 'include'), os.path.join(VC_PATH, 'VC\\INCLUDE'), os.path.join(VC_PATH, 'VC\\ATLMFC\\INCLUDE'), os.path.join(PLATFORM_SDK_PATH, '10\\include', PLATFORM_SDK_VERSION, 'ucrt'), os.path.join(PLATFORM_SDK_PATH, '8.1\\include'), os.path.join(PLATFORM_SDK_PATH, '8.1\\include\\um'), os.path.join(PLATFORM_SDK_PATH, '8.1\\include\\shared'), os.path.join(PLATFORM_SDK_PATH, '8.1\\include\\winrt'), os.path.join(PLATFORM_SDK_PATH, 'NETFXSDK\\4.6.1\\include\\um')]
    common_lib_paths = [os.path.join(GNU_PATH, 'bin'), os.path.join(GNU_PATH, 'lib'), os.path.join(PYTHON_PATH, 'libs')]
    x86_lib_path = ([os.path.join(VC_PATH, 'VC\\bin'), os.path.join(VC_PATH, 'VC\\LIB'), os.path.join(VC_PATH, 'VC\\ATLMFC\\LIB'), os.path.join(VC_PATH, (('VC\\redist\\x86\\Microsoft.VC' + VC_VERSION) + '.CRT')), os.path.join(PLATFORM_SDK_PATH, '10\\lib', PLATFORM_SDK_VERSION, 'ucrt\\x86'), os.path.join(PLATFORM_SDK_PATH, '8.1\\lib\\winv6.3\\um\\x86'), os.path.join(PLATFORM_SDK_PATH, 'NETFXSDK\\4.6.1\\lib\\um\\x86'), os.path.join(GNU_PATH, 'bin\\x86'), os.path.join(GNU_PATH, 'lib\\x86')] + common_lib_paths)
    x64_lib_path = ([os.path.join(VC_PATH, 'VC\\bin\\x86_amd64'), os.path.join(VC_PATH, 'VC\\LIB\\amd64'), os.path.join(VC_PATH, 'VC\\ATLMFC\\LIB\\amd64'), os.path.join(VC_PATH, (('VC\\redist\\x64\\Microsoft.VC' + VC_VERSION) + '.CRT')), os.path.join(PLATFORM_SDK_PATH, '10\\lib', PLATFORM_SDK_VERSION, 'ucrt\\x64'), os.path.join(PLATFORM_SDK_PATH, '8.1\\lib\\winv6.3\\um\\x64'), os.path.join(PLATFORM_SDK_PATH, 'NETFXSDK\\4.6.1\\lib\\um\\x64'), os.path.join(GNU_PATH, 'bin\\x64'), os.path.join(GNU_PATH, 'lib\\x64')] + common_lib_paths)
    lib = (x86_lib_path if (build_arch == 'x86') else x64_lib_path)
    build_env = os.environ.copy()
    build_env['PATH'] = ';'.join(([build_env['PATH']] + path))
    build_env['INCLUDE'] = ';'.join(include)
    build_env['LIB'] = ';'.join(lib)
    build_env['TEMP'] = TMP_PATH
    build_env['TMP'] = TMP_PATH
    return build_env
