{
  Builder<String,Object> attrBuilder=new Builder<>();
  Builder<String,Object> executableBuilder=new Builder<>();
  Builder<Artifact,FilesToRunProvider> executableRunfilesbuilder=new Builder<>();
  Builder<String,Object> fileBuilder=new Builder<>();
  Builder<String,Object> filesBuilder=new Builder<>();
  HashSet<Artifact> seenExecutables=new HashSet<>();
  for (  Attribute a : attributes) {
    Type<?> type=a.getType();
    Object val=attributeValueExtractor.apply(a);
    if (type != BuildType.LABEL && type != BuildType.LABEL_LIST) {
      attrBuilder.put(a.getPublicName(),val == null ? Runtime.NONE : SkylarkType.convertToSkylark(val,null));
      continue;
    }
    String skyname=a.getPublicName();
    if (a.isExecutable()) {
      FilesToRunProvider provider=ruleContext.getExecutablePrerequisite(a.getName(),Mode.DONT_CHECK);
      if (provider != null && provider.getExecutable() != null) {
        Artifact executable=provider.getExecutable();
        executableBuilder.put(skyname,executable);
        if (!seenExecutables.contains(executable)) {
          executableRunfilesbuilder.put(executable,provider);
          seenExecutables.add(executable);
        }
      }
 else {
        executableBuilder.put(skyname,Runtime.NONE);
      }
    }
    if (a.isSingleArtifact()) {
      Artifact artifact=ruleContext.getPrerequisiteArtifact(a.getName(),Mode.DONT_CHECK);
      if (artifact != null) {
        fileBuilder.put(skyname,artifact);
      }
 else {
        fileBuilder.put(skyname,Runtime.NONE);
      }
    }
    filesBuilder.put(skyname,ruleContext.getPrerequisiteArtifacts(a.getName(),Mode.DONT_CHECK).list());
    List<?> allPrereq=ruleContext.getPrerequisites(a.getName(),Mode.DONT_CHECK);
    if (type == BuildType.LABEL) {
      Object prereq=ruleContext.getPrerequisite(a.getName(),Mode.DONT_CHECK);
      if (prereq == null) {
        prereq=Runtime.NONE;
      }
      attrBuilder.put(skyname,prereq);
    }
 else {
      attrBuilder.put(skyname,new MutableList(allPrereq));
    }
  }
  return new SkylarkRuleAttributesCollection(ruleContext.getRule().getRuleClass(),attrBuilder.build(),executableBuilder.build(),fileBuilder.build(),filesBuilder.build(),executableRunfilesbuilder.build());
}
