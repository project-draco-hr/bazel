{
  this.ruleContext=Preconditions.checkNotNull(ruleContext);
  fragments=new FragmentCollection(ruleContext);
  HashMap<String,Object> outputsBuilder=new HashMap<>();
  if (ruleContext.getRule().getRuleClassObject().outputsDefaultExecutable()) {
    addOutput(outputsBuilder,"executable",ruleContext.createOutputArtifact());
  }
  ImplicitOutputsFunction implicitOutputsFunction=ruleContext.getRule().getRuleClassObject().getImplicitOutputsFunction();
  if (implicitOutputsFunction instanceof SkylarkImplicitOutputsFunction) {
    SkylarkImplicitOutputsFunction func=(SkylarkImplicitOutputsFunction)ruleContext.getRule().getRuleClassObject().getImplicitOutputsFunction();
    for (    Map.Entry<String,String> entry : func.calculateOutputs(RawAttributeMapper.of(ruleContext.getRule())).entrySet()) {
      addOutput(outputsBuilder,entry.getKey(),ruleContext.getImplicitOutputArtifact(entry.getValue()));
    }
  }
  ImmutableMap.Builder<Artifact,Label> artifactLabelMapBuilder=ImmutableMap.builder();
  for (  Attribute a : ruleContext.getRule().getAttributes()) {
    String attrName=a.getName();
    Type<?> type=a.getType();
    if (type != Type.OUTPUT && type != Type.OUTPUT_LIST) {
      continue;
    }
    ImmutableList.Builder<Artifact> artifactsBuilder=ImmutableList.builder();
    for (    OutputFile outputFile : ruleContext.getRule().getOutputFileMap().get(attrName)) {
      Artifact artifact=ruleContext.createOutputArtifact(outputFile);
      artifactsBuilder.add(artifact);
      artifactLabelMapBuilder.put(artifact,outputFile.getLabel());
    }
    ImmutableList<Artifact> artifacts=artifactsBuilder.build();
    if (type == Type.OUTPUT) {
      if (artifacts.size() == 1) {
        addOutput(outputsBuilder,attrName,Iterables.getOnlyElement(artifacts));
      }
 else {
        addOutput(outputsBuilder,attrName,Environment.NONE);
      }
    }
 else     if (type == Type.OUTPUT_LIST) {
      addOutput(outputsBuilder,attrName,SkylarkList.list(artifacts,Artifact.class));
    }
 else {
      throw new IllegalArgumentException("Type of " + attrName + "("+ type+ ") is not output type ");
    }
  }
  artifactLabelMap=artifactLabelMapBuilder.build();
  outputsObject=new SkylarkClassObject(outputsBuilder,"No such output '%s'");
  ImmutableMap.Builder<String,Object> attrBuilder=new ImmutableMap.Builder<>();
  ImmutableMap.Builder<String,Object> executableBuilder=new ImmutableMap.Builder<>();
  ImmutableMap.Builder<Artifact,FilesToRunProvider> executableRunfilesbuilder=new ImmutableMap.Builder<>();
  ImmutableMap.Builder<String,Object> fileBuilder=new ImmutableMap.Builder<>();
  ImmutableMap.Builder<String,Object> filesBuilder=new ImmutableMap.Builder<>();
  for (  Attribute a : ruleContext.getRule().getAttributes()) {
    Type<?> type=a.getType();
    Object val=ruleContext.attributes().get(a.getName(),type);
    if (type != Type.LABEL && type != Type.LABEL_LIST) {
      attrBuilder.put(attributeToSkylark(a.getName()),val == null ? Environment.NONE : SkylarkType.convertToSkylark(val,null));
      continue;
    }
    String skyname=attributeToSkylark(a.getName());
    Mode mode=getMode(a.getName());
    if (a.isExecutable()) {
      FilesToRunProvider provider=ruleContext.getExecutablePrerequisite(a.getName(),mode);
      if (provider != null && provider.getExecutable() != null) {
        Artifact executable=provider.getExecutable();
        executableBuilder.put(skyname,executable);
        executableRunfilesbuilder.put(executable,provider);
      }
 else {
        executableBuilder.put(skyname,Environment.NONE);
      }
    }
    if (a.isSingleArtifact()) {
      Artifact artifact=ruleContext.getPrerequisiteArtifact(a.getName(),mode);
      if (artifact != null) {
        fileBuilder.put(skyname,artifact);
      }
 else {
        fileBuilder.put(skyname,Environment.NONE);
      }
    }
    filesBuilder.put(skyname,ruleContext.getPrerequisiteArtifacts(a.getName(),mode).list());
    List<?> allPrereq=ruleContext.getPrerequisites(a.getName(),mode);
    if (type == Type.LABEL) {
      Object prereq=ruleContext.getPrerequisite(a.getName(),mode);
      if (prereq == null) {
        prereq=Environment.NONE;
      }
      attrBuilder.put(skyname,prereq);
    }
 else {
      attrBuilder.put(skyname,SkylarkList.list(allPrereq,TransitiveInfoCollection.class));
    }
  }
  attrObject=new SkylarkClassObject(attrBuilder.build(),"No such attribute '%s'");
  executableObject=new SkylarkClassObject(executableBuilder.build(),"No such executable. " + "Make sure there is a '%s' label type attribute marked as 'executable'");
  fileObject=new SkylarkClassObject(fileBuilder.build(),"No such file. Make sure there is a '%s' label type attribute marked as 'single_file'");
  filesObject=new SkylarkClassObject(filesBuilder.build(),"No such files. Make sure there is a '%s' label or label_list type attribute");
  executableRunfilesMap=executableRunfilesbuilder.build();
  makeVariables=ruleContext.getConfigurationMakeVariableContext().collectMakeVariables();
}
