{
  SkyframeBuildView view=buildViewProvider.getSkyframeBuildView();
  NestedSetBuilder<Package> transitivePackages=NestedSetBuilder.stableOrder();
  AspectKey key=(AspectKey)skyKey.argument();
  ConfiguredAspectFactory aspectFactory=aspectFactoryCreator.createAspectFactory(skyKey,env);
  PackageValue packageValue=(PackageValue)env.getValue(PackageValue.key(key.getLabel().getPackageIdentifier()));
  if (packageValue == null) {
    return null;
  }
  Package pkg=packageValue.getPackage();
  if (pkg.containsErrors()) {
    throw new AspectFunctionException(skyKey,new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));
  }
  Target target;
  try {
    target=pkg.getTarget(key.getLabel().getName());
  }
 catch (  NoSuchTargetException e) {
    throw new AspectFunctionException(skyKey,e);
  }
  if (!(target instanceof Rule)) {
    throw new AspectFunctionException(new AspectCreationException("aspects must be attached to rules"));
  }
  final ConfiguredTargetValue configuredTargetValue=(ConfiguredTargetValue)env.getValue(ConfiguredTargetValue.key(key.getLabel(),key.getConfiguration()));
  if (configuredTargetValue == null) {
    return null;
  }
  RuleConfiguredTarget associatedTarget=(RuleConfiguredTarget)configuredTargetValue.getConfiguredTarget();
  if (associatedTarget == null) {
    return null;
  }
  SkyframeDependencyResolver resolver=view.createDependencyResolver(env);
  if (resolver == null) {
    return null;
  }
  TargetAndConfiguration ctgValue=new TargetAndConfiguration(target,key.getConfiguration());
  try {
    Set<ConfigMatchingProvider> configConditions=ConfiguredTargetFunction.getConfigConditions(target,env,resolver,ctgValue,transitivePackages);
    if (configConditions == null) {
      return null;
    }
    ListMultimap<Attribute,ConfiguredTarget> depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,ctgValue,aspectFactory.getDefinition(),key.getParameters(),configConditions,ruleClassProvider,view.getHostConfiguration(ctgValue.getConfiguration()),transitivePackages);
    return createAspect(env,key,aspectFactory,associatedTarget,configConditions,depValueMap,transitivePackages);
  }
 catch (  DependencyEvaluationException e) {
    throw new AspectFunctionException(e.getRootCauseSkyKey(),e.getCause());
  }
catch (  AspectCreationException e) {
    throw new AspectFunctionException(e);
  }
}
