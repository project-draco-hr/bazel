{
  SkyframeBuildView view=buildViewProvider.getSkyframeBuildView();
  NestedSetBuilder<Package> transitivePackages=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Label> transitiveRootCauses=NestedSetBuilder.stableOrder();
  AspectKey key=(AspectKey)skyKey.argument();
  ConfiguredAspectFactory aspectFactory;
  Aspect aspect;
  if (key.getAspectClass() instanceof NativeAspectClass) {
    NativeAspectClass nativeAspectClass=(NativeAspectClass)key.getAspectClass();
    aspectFactory=(ConfiguredAspectFactory)nativeAspectClass;
    aspect=Aspect.forNative(nativeAspectClass,key.getParameters());
  }
 else   if (key.getAspectClass() instanceof SkylarkAspectClass) {
    SkylarkAspectClass skylarkAspectClass=(SkylarkAspectClass)key.getAspectClass();
    SkylarkAspect skylarkAspect;
    try {
      skylarkAspect=loadSkylarkAspect(env,skylarkAspectClass.getExtensionLabel(),skylarkAspectClass.getExportedName());
    }
 catch (    AspectCreationException e) {
      throw new AspectFunctionException(e);
    }
    if (skylarkAspect == null) {
      return null;
    }
    aspectFactory=new SkylarkAspectFactory(skylarkAspect);
    aspect=Aspect.forSkylark(skylarkAspect.getAspectClass(),skylarkAspect.getDefinition(key.getParameters()),key.getParameters());
  }
 else {
    throw new IllegalStateException();
  }
  PackageValue packageValue=(PackageValue)env.getValue(PackageValue.key(key.getLabel().getPackageIdentifier()));
  if (packageValue == null) {
    return null;
  }
  Package pkg=packageValue.getPackage();
  if (pkg.containsErrors()) {
    throw new AspectFunctionException(new BuildFileContainsErrorsException(key.getLabel().getPackageIdentifier()));
  }
  Target target;
  try {
    target=pkg.getTarget(key.getLabel().getName());
  }
 catch (  NoSuchTargetException e) {
    throw new AspectFunctionException(e);
  }
  Label aliasLabel=TargetUtils.getAliasTarget(target);
  if (aliasLabel != null) {
    return createAliasAspect(env,target,aliasLabel,aspect,key);
  }
  if (!(target instanceof Rule)) {
    env.getListener().handle(Event.error(target.getLocation(),String.format("%s is attached to %s %s but aspects must be attached to rules",aspect.getAspectClass().getName(),target.getTargetKind(),target.getName())));
    throw new AspectFunctionException(new AspectCreationException("aspects must be attached to rules"));
  }
  final ConfiguredTargetValue configuredTargetValue;
  try {
    configuredTargetValue=(ConfiguredTargetValue)env.getValueOrThrow(ConfiguredTargetValue.key(key.getLabel(),key.getBaseConfiguration()),ConfiguredValueCreationException.class);
  }
 catch (  ConfiguredValueCreationException e) {
    throw new AspectFunctionException(new AspectCreationException(e.getRootCauses()));
  }
  if (configuredTargetValue == null) {
    return null;
  }
  RuleConfiguredTarget associatedTarget=(RuleConfiguredTarget)configuredTargetValue.getConfiguredTarget();
  if (associatedTarget == null) {
    return null;
  }
  SkyframeDependencyResolver resolver=view.createDependencyResolver(env);
  TargetAndConfiguration originalTargetAndAspectConfiguration=new TargetAndConfiguration(target,key.getAspectConfiguration());
  try {
    ImmutableMap<Label,ConfigMatchingProvider> configConditions=ConfiguredTargetFunction.getConfigConditions(target,env,resolver,originalTargetAndAspectConfiguration,transitivePackages,transitiveRootCauses);
    if (configConditions == null) {
      return null;
    }
    OrderedSetMultimap<Attribute,ConfiguredTarget> depValueMap=ConfiguredTargetFunction.computeDependencies(env,resolver,originalTargetAndAspectConfiguration,aspect,configConditions,ruleClassProvider,view.getHostConfiguration(originalTargetAndAspectConfiguration.getConfiguration()),transitivePackages,transitiveRootCauses);
    if (depValueMap == null) {
      return null;
    }
    if (!transitiveRootCauses.isEmpty()) {
      throw new AspectFunctionException(new AspectCreationException("Loading failed",transitiveRootCauses.build()));
    }
    return createAspect(env,key,aspect,aspectFactory,associatedTarget,key.getAspectConfiguration(),configConditions,depValueMap,transitivePackages);
  }
 catch (  DependencyEvaluationException e) {
    if (e.getCause() instanceof ConfiguredValueCreationException) {
      ConfiguredValueCreationException cause=(ConfiguredValueCreationException)e.getCause();
      throw new AspectFunctionException(new AspectCreationException(cause.getMessage(),cause.getAnalysisRootCause()));
    }
 else {
      InvalidConfigurationException cause=(InvalidConfigurationException)e.getCause();
      throw new AspectFunctionException(new AspectCreationException(cause.getMessage()));
    }
  }
catch (  AspectCreationException e) {
    throw new AspectFunctionException(e);
  }
}
