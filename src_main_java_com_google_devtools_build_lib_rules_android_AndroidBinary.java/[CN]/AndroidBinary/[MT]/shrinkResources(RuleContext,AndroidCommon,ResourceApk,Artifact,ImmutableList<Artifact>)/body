{
  if (ruleContext.getFragment(AndroidConfiguration.class).useAndroidResourceShrinking() && LocalResourceContainer.definesAndroidResources(ruleContext.attributes()) && !proguardSpecs.isEmpty()) {
    Artifact shrunkJar=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_SHRUNK_JAR);
    AndroidSdkProvider sdk=AndroidSdkProvider.fromRuleContext(ruleContext);
    Iterable<Artifact> libraryJars=NestedSetBuilder.<Artifact>naiveLinkOrder().add(sdk.getAndroidJar()).addTransitive(androidCommon.getTransitiveNeverLinkLibraries()).build();
    Builder builder=new SpawnAction.Builder().addInput(deployJar).addInputs(libraryJars).addInputs(proguardSpecs).setExecutable(sdk.getProguard()).setProgressMessage("Finding Resource References With Proguard").setMnemonic("ProguardResourceMapping").addArgument("-injars").addArgument(deployJar.getExecPathString());
    for (    Artifact libraryJar : libraryJars) {
      builder.addArgument("-libraryjars").addArgument(libraryJar.getExecPathString());
    }
    for (    Artifact proguardSpec : proguardSpecs) {
      builder.addArgument("@" + proguardSpec.getExecPathString());
    }
    builder.addArgument("-ignorewarnings").addArgument("-dontnote").addArgument("-forceprocessing").addArgument("-dontoptimize").addArgument("-dontobfuscate").addArgument("-dontpreverify").addArgument("-outjars").addOutputArgument(shrunkJar);
    ruleContext.registerAction(builder.build(ruleContext));
    Artifact apk=new ResourceShrinkerActionBuilder(ruleContext).setResourceApkOut(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_SHRUNK_APK)).setShrunkResourcesOut(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_SHRUNK_ZIP)).withResourceFiles(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_ZIP)).withShrunkJar(shrunkJar).withPrimary(resourceApk.getPrimaryResource()).withDependencies(resourceApk.getResourceDependencies()).setConfigurationFilters(ruleContext.getTokenizedStringListAttr("resource_configuration_filters")).setUncompressedExtensions(ruleContext.getTokenizedStringListAttr("nocompress_extensions")).build();
    return new ResourceApk(apk,resourceApk.getResourceJavaSrcJar(),resourceApk.getResourceDependencies(),resourceApk.getPrimaryResource(),resourceApk.getManifest(),resourceApk.getResourceProguardConfig(),resourceApk.getMainDexProguardConfig(),resourceApk.isLegacy());
  }
  return resourceApk;
}
