{
  boolean isFinalJarDerived=isBinaryJarFiltered || binaryJar != proguardedJar;
  List<String> dexopts=ruleContext.getTokenizedStringListAttr("dexopts");
  MultidexMode multidexMode=getMultidexMode(ruleContext);
  if (!supportsMultidexMode(ruleContext,multidexMode)) {
    ruleContext.throwWithRuleError("Multidex mode \"" + multidexMode.getAttributeValue() + "\" not supported by this version of the Android SDK");
  }
  int dexShards=ruleContext.attributes().get("dex_shards",Type.INTEGER);
  if (dexShards > 1) {
    if (multidexMode == MultidexMode.OFF) {
      ruleContext.throwWithRuleError(".dex sharding is only available in multidex mode");
    }
    if (multidexMode == MultidexMode.MANUAL_MAIN_DEX) {
      ruleContext.throwWithRuleError(".dex sharding is not available in manual multidex mode");
    }
  }
  Artifact mainDexList=ruleContext.getPrerequisiteArtifact("main_dex_list",Mode.TARGET);
  if ((mainDexList != null && multidexMode != MultidexMode.MANUAL_MAIN_DEX) || (mainDexList == null && multidexMode == MultidexMode.MANUAL_MAIN_DEX)) {
    ruleContext.throwWithRuleError("Both \"main_dex_list\" and \"multidex='manual_main_dex'\" must be specified.");
  }
  ImmutableSet<AndroidBinaryType> incrementalDexing=getEffectiveIncrementalDexing(ruleContext,dexopts,isFinalJarDerived,isBinaryJarFiltered);
  if (multidexMode == MultidexMode.OFF) {
    if (incrementalDexing.contains(AndroidBinaryType.MONODEX)) {
      Artifact classesDex=getDxArtifact(ruleContext,"classes.dex.zip");
      Artifact jarToDex=getDxArtifact(ruleContext,"classes.jar");
      createShuffleJarAction(ruleContext,true,(Artifact)null,ImmutableList.of(jarToDex),common,attributes,(Artifact)null);
      createDexMergerAction(ruleContext,"off",jarToDex,classesDex,(Artifact)null,false);
      return new DexingOutput(classesDex,binaryJar,ImmutableList.of(classesDex));
    }
 else {
      Artifact classesDex=getDxArtifact(ruleContext,"classes.dex");
      AndroidCommon.createDexAction(ruleContext,proguardedJar,classesDex,dexopts,false,(Artifact)null);
      return new DexingOutput(classesDex,binaryJar,ImmutableList.of(classesDex));
    }
  }
 else {
    if (multidexMode == MultidexMode.LEGACY) {
      mainDexList=createMainDexListAction(ruleContext,proguardedJar,mainDexProguardSpec);
    }
    Artifact classesDex=getDxArtifact(ruleContext,"classes.dex.zip");
    if (dexShards > 1) {
      List<Artifact> shards=new ArrayList<>(dexShards);
      for (int i=1; i <= dexShards; i++) {
        shards.add(getDxArtifact(ruleContext,"shard" + i + ".jar"));
      }
      Artifact javaResourceJar=createShuffleJarAction(ruleContext,incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED),isFinalJarDerived ? proguardedJar : null,shards,common,attributes,mainDexList);
      List<Artifact> shardDexes=new ArrayList<>(dexShards);
      for (int i=1; i <= dexShards; i++) {
        Artifact shard=shards.get(i - 1);
        Artifact shardDex=getDxArtifact(ruleContext,"shard" + i + ".dex.zip");
        shardDexes.add(shardDex);
        if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
          String multidexStrategy=mainDexList != null && i == 1 ? "minimal" : "best_effort";
          createDexMergerAction(ruleContext,multidexStrategy,shard,shardDex,(Artifact)null,false);
        }
 else {
          AndroidCommon.createDexAction(ruleContext,shard,shardDex,dexopts,true,(Artifact)null);
        }
      }
      CommandLine mergeCommandLine=CustomCommandLine.builder().addBeforeEachExecPath("--input_zip",shardDexes).addExecPath("--output_zip",classesDex).build();
      ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("MergeDexZips").setProgressMessage("Merging dex shards for " + ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite("$merge_dexzips",Mode.HOST)).addInputs(shardDexes).addOutput(classesDex).setCommandLine(mergeCommandLine).build(ruleContext));
      if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
        javaResourceJar=binaryJar;
      }
      return new DexingOutput(classesDex,javaResourceJar,shardDexes);
    }
 else {
      if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_UNSHARDED)) {
        Artifact jarToDex=AndroidBinary.getDxArtifact(ruleContext,"classes.jar");
        createShuffleJarAction(ruleContext,true,(Artifact)null,ImmutableList.of(jarToDex),common,attributes,(Artifact)null);
        createDexMergerAction(ruleContext,"minimal",jarToDex,classesDex,mainDexList,Iterables.any(dexopts,FlagMatcher.MINIMAL_MAIN_DEX));
      }
 else {
        Artifact classesDexIntermediate=AndroidBinary.getDxArtifact(ruleContext,"intermediate_classes.dex.zip");
        AndroidCommon.createDexAction(ruleContext,proguardedJar,classesDexIntermediate,dexopts,true,mainDexList);
        createCleanDexZipAction(ruleContext,classesDexIntermediate,classesDex);
      }
      return new DexingOutput(classesDex,binaryJar,ImmutableList.of(classesDex));
    }
  }
}
