{
  ProguardOutput proguardOutput=applyProguard(ruleContext,androidCommon,deployJar,filesBuilder,resourceApk,ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS,Mode.TARGET).list(),proguardMapping,tools);
  Artifact jarToDex=proguardOutput.outputJar;
  DexingOutput dexingOutput=shouldDexWithJack(ruleContext) ? dexWithJack(ruleContext,androidCommon) : dex(ruleContext,androidSemantics,tools,getMultidexMode(ruleContext),ruleContext.getTokenizedStringListAttr("dexopts"),deployJar,jarToDex,androidCommon,resourceClasses);
  Artifact unsignedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_UNSIGNED_APK);
  Artifact signedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_SIGNED_APK);
  ApkActionBuilder apkBuilder=new ApkActionBuilder(ruleContext,androidSemantics,tools).classesDex(dexingOutput.classesDexZip).resourceApk(resourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs);
  ruleContext.registerAction(apkBuilder.message("Generating unsigned apk").build(unsignedApk));
  ruleContext.registerAction(apkBuilder.message("Generating signed apk").sign(true).build(signedApk));
  Artifact zipAlignedApk=zipalignApk(ruleContext,tools,signedApk,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_APK));
  filesBuilder.add(deployJar);
  filesBuilder.add(unsignedApk);
  filesBuilder.add(zipAlignedApk);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  NestedSet<Artifact> coverageMetadata=(androidCommon.getInstrumentedJar() != null) ? NestedSetBuilder.create(Order.STABLE_ORDER,androidCommon.getInstrumentedJar()) : NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  Artifact incrementalApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_INCREMENTAL_APK);
  Artifact fullDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.FULL_DEPLOY_MARKER);
  Artifact incrementalDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.INCREMENTAL_DEPLOY_MARKER);
  Artifact splitDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.SPLIT_DEPLOY_MARKER);
  Artifact incrementalDexManifest=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEX_MANIFEST);
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("AndroidDexManifest").setProgressMessage("Generating incremental installation manifest for " + ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite("$build_incremental_dexmanifest",Mode.HOST)).addOutputArgument(incrementalDexManifest).addInputArguments(dexingOutput.shardDexZips).useParameterFile(ParameterFileType.UNQUOTED).build(ruleContext));
  Artifact stubData=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.STUB_APPLICATION_DATA);
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).classesDex(getStubDex(ruleContext,javaSemantics,androidSemantics,tools,false)).resourceApk(incrementalResourceApk.getArtifact()).javaResourceZip(dexingOutput.javaResourceJar).nativeLibs(nativeLibs).sign(true).javaResourceFile(stubData).message("Generating incremental apk").build(incrementalApk));
  Artifact argsArtifact=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.MOBILE_INSTALL_ARGS);
  ruleContext.registerAction(new WriteAdbArgsAction(ruleContext.getActionOwner(),argsArtifact));
  createInstallAction(ruleContext,tools,false,fullDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  createInstallAction(ruleContext,tools,true,incrementalDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,stubData);
  NestedSetBuilder<Artifact> splitApkSetBuilder=NestedSetBuilder.stableOrder();
  for (int i=0; i < dexingOutput.shardDexZips.size(); i++) {
    String splitName="dex" + (i + 1);
    Artifact splitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,splitName,true);
    Artifact splitApk=getDxArtifact(ruleContext,splitName + ".apk");
    ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).classesDex(dexingOutput.shardDexZips.get(i)).resourceApk(splitApkResources).sign(true).message("Generating split dex apk " + (i + 1)).build(splitApk));
    splitApkSetBuilder.add(splitApk);
  }
  Artifact nativeSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,"native",false);
  Artifact nativeSplitApk=getDxArtifact(ruleContext,"native.apk");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).resourceApk(nativeSplitApkResources).sign(true).message("Generating split native apk").nativeLibs(nativeLibs).build(nativeSplitApk));
  splitApkSetBuilder.add(nativeSplitApk);
  Artifact javaSplitApkResources=createSplitApkResources(ruleContext,tools,applicationManifest,"java_resources",false);
  Artifact javaSplitApk=getDxArtifact(ruleContext,"java_resources.apk");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).resourceApk(javaSplitApkResources).javaResourceZip(dexingOutput.javaResourceJar).sign(true).message("Generating split Java resource apk").build(javaSplitApk));
  splitApkSetBuilder.add(javaSplitApk);
  Artifact resourceSplitApk=getDxArtifact(ruleContext,"android_resources.apk");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).resourceApk(splitResourceApk.getArtifact()).sign(true).message("Generating split Android resource apk").build(resourceSplitApk));
  splitApkSetBuilder.add(resourceSplitApk);
  Artifact splitMainApkResources=getDxArtifact(ruleContext,"split_main.ap_");
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("AndroidStripResources").setProgressMessage("Stripping resources from split main apk").setExecutable(ruleContext.getExecutablePrerequisite("$strip_resources",Mode.HOST)).addArgument("--input_resource_apk").addInputArgument(resourceApk.getArtifact()).addArgument("--output_resource_apk").addOutputArgument(splitMainApkResources).build(ruleContext));
  NestedSet<Artifact> splitApks=splitApkSetBuilder.build();
  Artifact splitMainApk=getDxArtifact(ruleContext,"split_main.apk");
  ruleContext.registerAction(new ApkActionBuilder(ruleContext,androidSemantics,tools).resourceApk(splitMainApkResources).classesDex(getStubDex(ruleContext,javaSemantics,androidSemantics,tools,true)).sign(true).message("Generating split main apk").build(splitMainApk));
  splitApkSetBuilder.add(splitMainApk);
  NestedSet<Artifact> allSplitApks=splitApkSetBuilder.build();
  createSplitInstallAction(ruleContext,tools,splitDeployMarker,argsArtifact,splitMainApk,splitApks,stubData);
  NestedSet<Artifact> splitOutputGroup=NestedSetBuilder.<Artifact>stableOrder().addTransitive(allSplitApks).add(splitDeployMarker).build();
  androidCommon.addTransitiveInfoProviders(builder,tools);
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,jarToDex,resourceApk,zipAlignedApk,apksUnderTest);
  if (proguardOutput.mapping != null) {
    builder.add(ProguardMappingProvider.class,new ProguardMappingProvider(proguardOutput.mapping));
  }
  return builder.setFilesToBuild(filesToBuild).add(RunfilesProvider.class,RunfilesProvider.simple(new Runfiles.Builder().addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES).addTransitiveArtifacts(filesToBuild).build())).add(ApkProvider.class,new ApkProvider(NestedSetBuilder.create(Order.STABLE_ORDER,zipAlignedApk),coverageMetadata)).add(AndroidPreDexJarProvider.class,new AndroidPreDexJarProvider(jarToDex)).addOutputGroup("mobile_install_full",fullDeployMarker).addOutputGroup("mobile_install_incremental",incrementalDeployMarker).addOutputGroup("mobile_install_split",splitOutputGroup);
}
