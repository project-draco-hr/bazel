{
  Multimap<String,TransitiveInfoCollection> depsByArchitecture=MultimapBuilder.treeKeys().arrayListValues().build();
  AndroidConfiguration config=ruleContext.getFragment(AndroidConfiguration.class);
  if (config.isFatApk()) {
    for (    String depsAttribute : depsAttributes) {
      for (      Map.Entry<String,? extends List<? extends TransitiveInfoCollection>> entry : ruleContext.getSplitPrerequisites(depsAttribute).entrySet()) {
        depsByArchitecture.putAll(entry.getKey(),entry.getValue());
      }
    }
  }
 else {
    for (    String depsAttribute : depsAttributes) {
      depsByArchitecture.putAll(config.getCpu(),ruleContext.getPrerequisites(depsAttribute,Mode.TARGET));
    }
  }
  Map<String,BuildConfiguration> configurationMap=new LinkedHashMap<>();
  Map<String,CcToolchainProvider> toolchainMap=new LinkedHashMap<>();
  if (config.isFatApk()) {
    for (    Map.Entry<String,? extends List<? extends TransitiveInfoCollection>> entry : ruleContext.getSplitPrerequisites(":cc_toolchain_split").entrySet()) {
      TransitiveInfoCollection dep=Iterables.getOnlyElement(entry.getValue());
      CcToolchainProvider toolchain=CppHelper.getToolchain(ruleContext,dep);
      configurationMap.put(entry.getKey(),dep.getConfiguration());
      toolchainMap.put(entry.getKey(),toolchain);
    }
  }
 else {
    configurationMap.put(config.getCpu(),ruleContext.getConfiguration());
    toolchainMap.put(config.getCpu(),CppHelper.getToolchain(ruleContext));
  }
  NativeLibs nativeLibs=shouldLinkNativeDeps(ruleContext) ? NativeLibs.fromLinkedNativeDeps(ruleContext,androidSemantics.getNativeDepsFileName(),depsByArchitecture,toolchainMap,configurationMap) : NativeLibs.fromPrecompiledObjects(ruleContext,depsByArchitecture);
  ApplicationManifest applicationManifest;
  ResourceApk splitResourceApk;
  ResourceApk incrementalResourceApk;
  ResourceApk resourceApk;
  if (LocalResourceContainer.definesAndroidResources(ruleContext.attributes())) {
    if (!LocalResourceContainer.validateRuleContext(ruleContext)) {
      throw new RuleConfigurationException();
    }
    applicationManifest=androidSemantics.getManifestForRule(ruleContext).mergeWith(ruleContext,resourceContainers);
    resourceApk=applicationManifest.packWithDataAndResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK),ruleContext,resourceContainers,null,null,ruleContext.getTokenizedStringListAttr("resource_configuration_filters"),ruleContext.getTokenizedStringListAttr("nocompress_extensions"),ruleContext.getTokenizedStringListAttr("densities"),ruleContext.attributes().get("application_id",Type.STRING),getExpandedMakeVarsForAttr(ruleContext,"version_code"),getExpandedMakeVarsForAttr(ruleContext,"version_name"),false,getProguardConfigArtifact(ruleContext,""));
    incrementalResourceApk=applicationManifest.addStubApplication(ruleContext).packWithDataAndResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_INCREMENTAL_RESOURCES_APK),ruleContext,resourceContainers,null,null,ruleContext.getTokenizedStringListAttr("resource_configuration_filters"),ruleContext.getTokenizedStringListAttr("nocompress_extensions"),ruleContext.getTokenizedStringListAttr("densities"),ruleContext.attributes().get("application_id",Type.STRING),getExpandedMakeVarsForAttr(ruleContext,"version_code"),getExpandedMakeVarsForAttr(ruleContext,"version_name"),true,getProguardConfigArtifact(ruleContext,"incremental"));
    splitResourceApk=applicationManifest.createSplitManifest(ruleContext,"android_resources",false).packWithDataAndResources(getDxArtifact(ruleContext,"android_resources.ap_"),ruleContext,resourceContainers,null,null,ruleContext.getTokenizedStringListAttr("resource_configuration_filters"),ruleContext.getTokenizedStringListAttr("nocompress_extensions"),ruleContext.getTokenizedStringListAttr("densities"),ruleContext.attributes().get("application_id",Type.STRING),getExpandedMakeVarsForAttr(ruleContext,"version_code"),getExpandedMakeVarsForAttr(ruleContext,"version_name"),true,getProguardConfigArtifact(ruleContext,"incremental_split"));
  }
 else {
    applicationManifest=ApplicationManifest.fromResourcesRule(ruleContext).mergeWith(ruleContext,resourceContainers);
    if (shouldRegenerate(ruleContext,resourceContainers)) {
      resourceApk=applicationManifest.packWithResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK),ruleContext,resourceContainers,true,getProguardConfigArtifact(ruleContext,""));
    }
 else {
      resourceApk=applicationManifest.useCurrentResources(ruleContext,getProguardConfigArtifact(ruleContext,""));
    }
    incrementalResourceApk=applicationManifest.addStubApplication(ruleContext).packWithResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_INCREMENTAL_RESOURCES_APK),ruleContext,resourceContainers,false,getProguardConfigArtifact(ruleContext,"incremental"));
    splitResourceApk=applicationManifest.createSplitManifest(ruleContext,"android_resources",false).packWithResources(getDxArtifact(ruleContext,"android_resources.ap_"),ruleContext,resourceContainers,false,getProguardConfigArtifact(ruleContext,"incremental_split"));
  }
  JavaTargetAttributes resourceClasses=androidCommon.init(javaSemantics,androidSemantics,resourceApk,AndroidIdlProvider.EMPTY,ruleContext.getConfiguration().isCodeCoverageEnabled(),true);
  if (resourceClasses == null) {
    return null;
  }
  Artifact deployJar=createDeployJar(ruleContext,javaSemantics,androidCommon,resourceClasses,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_DEPLOY_JAR));
  return createAndroidBinary(ruleContext,filesBuilder,deployJar,javaCommon,androidCommon,javaSemantics,androidSemantics,nativeLibs,applicationManifest,resourceApk,incrementalResourceApk,splitResourceApk,resourceClasses,ImmutableList.<Artifact>of(),null);
}
