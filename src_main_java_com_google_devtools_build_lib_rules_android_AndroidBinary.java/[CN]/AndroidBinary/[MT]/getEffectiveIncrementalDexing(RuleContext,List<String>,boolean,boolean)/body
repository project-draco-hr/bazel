{
  TriState override=ruleContext.attributes().get("incremental_dexing",BuildType.TRISTATE);
  if (isFinalJarDerived && override == TriState.YES) {
    ruleContext.attributeError("incremental_dexing","target cannot be incrementally dexed because " + (isBinaryJarFiltered ? "it builds a partial APK" : "the target uses Proguard"));
    return ImmutableSet.of();
  }
  if (isFinalJarDerived || override == TriState.NO) {
    return ImmutableSet.of();
  }
  ImmutableSet<AndroidBinaryType> result=override == TriState.YES ? ImmutableSet.copyOf(AndroidBinaryType.values()) : AndroidCommon.getAndroidConfig(ruleContext).getIncrementalDexingBinaries();
  if (!result.isEmpty()) {
    Iterable<String> blacklistedDexopts=Iterables.filter(dexopts,new DexArchiveAspect.FlagMatcher(AndroidCommon.getAndroidConfig(ruleContext).getTargetDexoptsThatPreventIncrementalDexing()));
    if (!Iterables.isEmpty(blacklistedDexopts)) {
      if (override == TriState.YES) {
        ruleContext.attributeWarning("incremental_dexing","Using incremental dexing even though the following dexopts indicate this target " + "may be unsuitable for incremental dexing for the moment: " + blacklistedDexopts);
      }
 else {
        result=ImmutableSet.of();
      }
    }
  }
  return result;
}
