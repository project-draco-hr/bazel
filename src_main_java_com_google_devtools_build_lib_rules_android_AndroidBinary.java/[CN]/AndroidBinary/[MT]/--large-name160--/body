{
  ImmutableList<Artifact> proguardSpecs=ProguardHelper.collectTransitiveProguardSpecs(ruleContext,ImmutableList.of(resourceApk.getResourceProguardConfig()));
  ProguardOutput proguardOutput=applyProguard(ruleContext,androidCommon,javaSemantics,binaryJar,filesBuilder,proguardSpecs,proguardMapping);
  if (shrinkResources) {
    resourceApk=shrinkResources(ruleContext,resourceApk,proguardSpecs,proguardOutput);
  }
  Artifact jarToDex=proguardOutput.getOutputJar();
  DexingOutput dexingOutput=shouldDexWithJack(ruleContext) ? dexWithJack(ruleContext,androidCommon,proguardSpecs) : dex(ruleContext,androidSemantics,binaryJar,jarToDex,isBinaryJarFiltered,androidCommon,resourceApk.getMainDexProguardConfig(),resourceClasses);
  ApkSigningMethod signingMethod=ruleContext.getFragment(AndroidConfiguration.class).getApkSigningMethod();
  Artifact unsignedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_UNSIGNED_APK);
  Artifact zipAlignedApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_APK);
  createApkActionsBuilder(signingMethod).setClassesDex(dexingOutput.classesDexZip).setResourceApk(resourceApk.getArtifact()).setJavaResourceZip(dexingOutput.javaResourceJar).setNativeLibs(nativeLibs).setUnsignedApk(unsignedApk).setSignedAndZipalignedApk(zipAlignedApk).setApkName("apk").registerActions(ruleContext,androidSemantics);
  filesBuilder.add(binaryJar);
  filesBuilder.add(unsignedApk);
  filesBuilder.add(zipAlignedApk);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  Iterable<Artifact> dataDeps=ImmutableList.of();
  if (ruleContext.getAttribute("data") != null && ruleContext.getAttributeMode("data") == Mode.DATA) {
    dataDeps=ruleContext.getPrerequisiteArtifacts("data",Mode.DATA).list();
  }
  Artifact deployInfo=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEPLOY_INFO);
  AndroidDeployInfoAction.createDeployInfoAction(ruleContext,deployInfo,resourceApk.getManifest(),additionalMergedManifests,Iterables.concat(ImmutableList.of(zipAlignedApk),apksUnderTest),dataDeps);
  NestedSet<Artifact> coverageMetadata=(androidCommon.getInstrumentedJar() != null) ? NestedSetBuilder.create(Order.STABLE_ORDER,androidCommon.getInstrumentedJar()) : NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  Artifact incrementalApk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_BINARY_INCREMENTAL_APK);
  Artifact fullDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.FULL_DEPLOY_MARKER);
  Artifact incrementalDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.INCREMENTAL_DEPLOY_MARKER);
  Artifact splitDeployMarker=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.SPLIT_DEPLOY_MARKER);
  Artifact incrementalDexManifest=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEX_MANIFEST);
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("AndroidDexManifest").setProgressMessage("Generating incremental installation manifest for " + ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite("$build_incremental_dexmanifest",Mode.HOST)).addOutputArgument(incrementalDexManifest).addInputArguments(dexingOutput.shardDexZips).useParameterFile(ParameterFileType.UNQUOTED).build(ruleContext));
  Artifact stubData=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.MOBILE_INSTALL_STUB_APPLICATION_DATA);
  Artifact stubDex=getStubDex(ruleContext,javaSemantics,false);
  ruleContext.assertNoErrors();
  ApkActionsBuilder incrementalActionsBuilder=createApkActionsBuilder(signingMethod).setClassesDex(stubDex).setResourceApk(incrementalResourceApk.getArtifact()).setJavaResourceZip(dexingOutput.javaResourceJar).setJavaResourceFile(stubData).setApkName("incremental apk").setSignedApk(incrementalApk);
  if (!ruleContext.getFragment(AndroidConfiguration.class).useIncrementalNativeLibs()) {
    incrementalActionsBuilder.setNativeLibs(nativeLibs);
  }
  incrementalActionsBuilder.registerActions(ruleContext,androidSemantics);
  Artifact argsArtifact=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.MOBILE_INSTALL_ARGS);
  ruleContext.registerAction(new WriteAdbArgsAction(ruleContext.getActionOwner(),argsArtifact));
  createInstallAction(ruleContext,false,fullDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,nativeLibs,stubData);
  createInstallAction(ruleContext,true,incrementalDeployMarker,argsArtifact,incrementalDexManifest,incrementalResourceApk.getArtifact(),incrementalApk,nativeLibs,stubData);
  Artifact incrementalDeployInfo=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEPLOY_INFO_INCREMENTAL);
  AndroidDeployInfoAction.createDeployInfoAction(ruleContext,incrementalDeployInfo,resourceApk.getManifest(),additionalMergedManifests,ImmutableList.<Artifact>of(),dataDeps);
  NestedSet<Artifact> fullInstallOutputGroup=NestedSetBuilder.<Artifact>stableOrder().add(fullDeployMarker).add(incrementalDeployInfo).build();
  NestedSet<Artifact> incrementalInstallOutputGroup=NestedSetBuilder.<Artifact>stableOrder().add(incrementalDeployMarker).add(incrementalDeployInfo).build();
  NestedSetBuilder<Artifact> splitApkSetBuilder=NestedSetBuilder.compileOrder();
  Artifact resourceSplitApk=getDxArtifact(ruleContext,"android_resources.apk");
  createApkActionsBuilder(signingMethod).setResourceApk(splitResourceApk.getArtifact()).setApkName("split Android resource apk").setSignedApk(resourceSplitApk).registerActions(ruleContext,androidSemantics);
  splitApkSetBuilder.add(resourceSplitApk);
  for (int i=0; i < dexingOutput.shardDexZips.size(); i++) {
    String splitName="dex" + (i + 1);
    Artifact splitApkResources=createSplitApkResources(ruleContext,applicationManifest,splitName,true);
    Artifact splitApk=getDxArtifact(ruleContext,splitName + ".apk");
    createApkActionsBuilder(signingMethod).setClassesDex(dexingOutput.shardDexZips.get(i)).setResourceApk(splitApkResources).setApkName("split dex apk " + (i + 1)).setSignedApk(splitApk).registerActions(ruleContext,androidSemantics);
    splitApkSetBuilder.add(splitApk);
  }
  Artifact nativeSplitApkResources=createSplitApkResources(ruleContext,applicationManifest,"native",false);
  Artifact nativeSplitApk=getDxArtifact(ruleContext,"native.apk");
  createApkActionsBuilder(signingMethod).setResourceApk(nativeSplitApkResources).setNativeLibs(nativeLibs).setApkName("split native apk").setSignedApk(nativeSplitApk).registerActions(ruleContext,androidSemantics);
  splitApkSetBuilder.add(nativeSplitApk);
  Artifact javaSplitApkResources=createSplitApkResources(ruleContext,applicationManifest,"java_resources",false);
  Artifact javaSplitApk=getDxArtifact(ruleContext,"java_resources.apk");
  createApkActionsBuilder(signingMethod).setResourceApk(javaSplitApkResources).setJavaResourceZip(dexingOutput.javaResourceJar).setApkName("split Java resource apk").setSignedApk(javaSplitApk).registerActions(ruleContext,androidSemantics);
  splitApkSetBuilder.add(javaSplitApk);
  Artifact splitMainApkResources=getDxArtifact(ruleContext,"split_main.ap_");
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("AndroidStripResources").setProgressMessage("Stripping resources from split main apk").setExecutable(ruleContext.getExecutablePrerequisite("$strip_resources",Mode.HOST)).addArgument("--input_resource_apk").addInputArgument(resourceApk.getArtifact()).addArgument("--output_resource_apk").addOutputArgument(splitMainApkResources).build(ruleContext));
  NestedSet<Artifact> splitApks=splitApkSetBuilder.build();
  Artifact splitMainApk=getDxArtifact(ruleContext,"split_main.apk");
  Artifact splitStubDex=getStubDex(ruleContext,javaSemantics,true);
  ruleContext.assertNoErrors();
  createApkActionsBuilder(signingMethod).setClassesDex(splitStubDex).setResourceApk(splitMainApkResources).setApkName("split main apk").setSignedApk(splitMainApk).registerActions(ruleContext,androidSemantics);
  splitApkSetBuilder.add(splitMainApk);
  NestedSet<Artifact> allSplitApks=splitApkSetBuilder.build();
  createSplitInstallAction(ruleContext,splitDeployMarker,argsArtifact,splitMainApk,splitApks,stubData);
  Artifact splitDeployInfo=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.DEPLOY_INFO_SPLIT);
  AndroidDeployInfoAction.createDeployInfoAction(ruleContext,splitDeployInfo,resourceApk.getManifest(),additionalMergedManifests,ImmutableList.<Artifact>of(),dataDeps);
  NestedSet<Artifact> splitInstallOutputGroup=NestedSetBuilder.<Artifact>stableOrder().addTransitive(allSplitApks).add(splitDeployMarker).add(splitDeployInfo).build();
  Artifact debugKeystore=androidSemantics.getApkDebugSigningKey(ruleContext);
  Artifact apkManifest=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.APK_MANIFEST);
  createApkManifestAction(ruleContext,apkManifest,false,androidCommon,resourceClasses,instantRunResourceApk,nativeLibs,debugKeystore);
  Artifact apkManifestText=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.APK_MANIFEST_TEXT);
  createApkManifestAction(ruleContext,apkManifestText,true,androidCommon,resourceClasses,instantRunResourceApk,nativeLibs,debugKeystore);
  androidCommon.addTransitiveInfoProviders(builder,androidSemantics,resourceApk,zipAlignedApk,apksUnderTest);
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,jarToDex);
  if (proguardOutput.getMapping() != null) {
    builder.add(ProguardMappingProvider.class,ProguardMappingProvider.create(proguardOutput.getMapping(),proguardOutput.getProtoMapping()));
  }
  return builder.setFilesToBuild(filesToBuild).add(RunfilesProvider.class,RunfilesProvider.simple(new Runfiles.Builder(ruleContext.getWorkspaceName(),ruleContext.getConfiguration().legacyExternalRunfiles()).addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES).addTransitiveArtifacts(filesToBuild).build())).add(JavaSourceInfoProvider.class,JavaSourceInfoProvider.fromJavaTargetAttributes(resourceClasses,javaSemantics)).add(ApkProvider.class,ApkProvider.create(NestedSetBuilder.create(Order.STABLE_ORDER,zipAlignedApk),coverageMetadata,NestedSetBuilder.create(Order.STABLE_ORDER,applicationManifest.getManifest()))).add(AndroidPreDexJarProvider.class,AndroidPreDexJarProvider.create(jarToDex)).addOutputGroup("mobile_install_full" + INTERNAL_SUFFIX,fullInstallOutputGroup).addOutputGroup("mobile_install_incremental" + INTERNAL_SUFFIX,incrementalInstallOutputGroup).addOutputGroup("mobile_install_split" + INTERNAL_SUFFIX,splitInstallOutputGroup).addOutputGroup("apk_manifest",apkManifest).addOutputGroup("apk_manifest_text",apkManifestText).addOutputGroup("android_deploy_info",deployInfo);
}
