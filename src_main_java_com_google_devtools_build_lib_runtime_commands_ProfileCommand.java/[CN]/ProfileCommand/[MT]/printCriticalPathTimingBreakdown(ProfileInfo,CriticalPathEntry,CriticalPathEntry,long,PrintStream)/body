{
  Preconditions.checkNotNull(totalPath);
  Preconditions.checkNotNull(optimalPath);
  if (isLightCriticalPath(totalPath)) {
    return;
  }
  out.println(totalPath.task.type);
  long workerWaitTime=0;
  long mainThreadWaitTime=0;
  for (ProfileInfo.CriticalPathEntry entry=totalPath; entry != null; entry=entry.next) {
    workerWaitTime+=info.getActionWaitTime(entry.task);
    mainThreadWaitTime+=info.getActionQueueTime(entry.task);
  }
  out.printf(TWO_COLUMN_FORMAT,"Worker thread scheduling delays",TimeUtilities.prettyTime(workerWaitTime));
  out.printf(TWO_COLUMN_FORMAT,"Main thread scheduling delays",TimeUtilities.prettyTime(mainThreadWaitTime));
  out.println("\nCritical path time:");
  long totalTime=totalPath.cumulativeDuration;
  out.printf("%-37s %10s (%s of execution time)\n","Actual time",TimeUtilities.prettyTime(totalTime),prettyPercentage(totalTime,execTime));
  long optimalTime=optimalPath.cumulativeDuration;
  out.printf("%-37s %10s (%s of execution time)\n","Time excluding scheduling delays",TimeUtilities.prettyTime(optimalTime),prettyPercentage(optimalTime,execTime));
  out.println("\nTime related to:");
  EnumSet<ProfilerTask> typeFilter=EnumSet.allOf(ProfilerTask.class);
  ProfileInfo.CriticalPathEntry path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"the builder overhead",prettyPercentage(path.cumulativeDuration,totalTime));
  typeFilter=getTypeFilter();
  for (  ProfilerTask task : ProfilerTask.values()) {
    if (task.name().startsWith("VFS_")) {
      typeFilter.add(task);
    }
  }
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"the VFS calls",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.ACTION_CHECK);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"the dependency checking",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.ACTION_EXECUTE);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"the execution setup",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.SPAWN,ProfilerTask.LOCAL_EXECUTION);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"local execution",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.SCANNER);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"the include scanner",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.REMOTE_EXECUTION,ProfilerTask.PROCESS_TIME,ProfilerTask.LOCAL_PARSE,ProfilerTask.UPLOAD_TIME,ProfilerTask.REMOTE_QUEUE,ProfilerTask.REMOTE_SETUP,ProfilerTask.FETCH);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"Remote execution (cumulative)",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.UPLOAD_TIME,ProfilerTask.REMOTE_SETUP);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  file uploads",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.FETCH);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  file fetching",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.PROCESS_TIME);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  process time",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.REMOTE_QUEUE);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  remote queueing",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.LOCAL_PARSE);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  remote execution parse",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
  typeFilter=getTypeFilter(ProfilerTask.REMOTE_EXECUTION);
  path=info.getCriticalPath(typeFilter);
  out.printf(TWO_COLUMN_FORMAT,"  other remote activities",prettyPercentage(optimalTime - path.cumulativeDuration,optimalTime));
}
