{
  final BlazeRuntime runtime=env.getRuntime();
  ProfileOptions opts=options.getOptions(ProfileOptions.class);
  if (!opts.vfsStats) {
    opts.vfsStatsLimit=0;
  }
  try (PrintStream out=new PrintStream(env.getReporter().getOutErr().getOutputStream())){
    env.getReporter().handle(Event.warn(null,"This information is intended for consumption by Blaze developers" + " only, and may change at any time.  Script against it at your own risk"));
    for (    String name : options.getResidue()) {
      Path profileFile=runtime.getWorkingDirectory().getRelative(name);
      try {
        ProfileInfo info=ProfileInfo.loadProfileVerbosely(profileFile,getInfoListener(env));
        ProfileInfo.aggregateProfile(info,getInfoListener(env));
        if (opts.taskTree != null) {
          printTaskTree(out,name,info,opts.taskTree,opts.taskTreeThreshold);
          continue;
        }
        PhaseSummaryStatistics phaseSummaryStatistics=new PhaseSummaryStatistics(info);
        EnumMap<ProfilePhase,PhaseStatistics> phaseStatistics=new EnumMap<>(ProfilePhase.class);
        for (        ProfilePhase phase : ProfilePhase.values()) {
          phaseStatistics.put(phase,new PhaseStatistics(phase,info,runtime.getWorkspaceName()));
        }
        if (opts.dumpMode != null) {
          dumpProfile(env,info,out,opts.dumpMode);
        }
 else         if (opts.html) {
          Path htmlFile=profileFile.getParentDirectory().getChild(profileFile.getBaseName() + ".html");
          env.getReporter().handle(Event.info("Creating HTML output in " + htmlFile));
          HtmlCreator.create(info,htmlFile,phaseSummaryStatistics,phaseStatistics,opts.htmlDetails,opts.htmlPixelsPerSecond,opts.vfsStatsLimit);
        }
 else {
          CriticalPathStatistics critPathStats=new CriticalPathStatistics(info);
          new PhaseText(out,phaseSummaryStatistics,phaseStatistics,critPathStats,info.getMissingActionsCount(),opts.vfsStatsLimit).print();
        }
      }
 catch (      IOException e) {
        env.getReporter().handle(Event.error(null,"Failed to process file " + name + ": "+ e.getMessage()));
      }
    }
  }
   return ExitCode.SUCCESS;
}
