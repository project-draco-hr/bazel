{
  final BlazeRuntime runtime=env.getRuntime();
  ProfileOptions opts=options.getOptions(ProfileOptions.class);
  if (!opts.vfsStats) {
    opts.vfsStatsLimit=0;
  }
  currentPathMapping=new Function<String,String>(){
    @Override public String apply(    String input){
      if (runtime.getWorkspaceName().isEmpty()) {
        return input;
      }
 else {
        return input.substring(input.lastIndexOf("/" + runtime.getWorkspaceName()) + 1);
      }
    }
  }
;
  PrintStream out=new PrintStream(env.getReporter().getOutErr().getOutputStream());
  try {
    env.getReporter().handle(Event.warn(null,"This information is intended for consumption by Blaze developers" + " only, and may change at any time.  Script against it at your own risk"));
    for (    String name : options.getResidue()) {
      Path profileFile=runtime.getWorkingDirectory().getRelative(name);
      try {
        ProfileInfo info=ProfileInfo.loadProfileVerbosely(profileFile,getInfoListener(env));
        if (opts.dumpMode != null) {
          dumpProfile(env,info,out,opts.dumpMode);
        }
 else         if (opts.html) {
          Path htmlFile=profileFile.getParentDirectory().getChild(profileFile.getBaseName() + ".html");
          env.getReporter().handle(Event.info("Creating HTML output in " + htmlFile));
          HtmlCreator.createHtml(info,htmlFile,getStatistics(env,info,opts),opts.htmlDetails,opts.htmlPixelsPerSecond);
        }
 else {
          createText(env,info,out,opts);
        }
      }
 catch (      IOException e) {
        env.getReporter().handle(Event.error(null,"Failed to process file " + name + ": "+ e.getMessage()));
      }
    }
  }
  finally {
    out.flush();
  }
  return ExitCode.SUCCESS;
}
