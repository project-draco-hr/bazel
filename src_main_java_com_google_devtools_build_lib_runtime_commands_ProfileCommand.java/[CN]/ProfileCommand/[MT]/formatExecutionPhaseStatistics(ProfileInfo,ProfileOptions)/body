{
  ByteArrayOutputStream byteOutput=new ByteArrayOutputStream();
  PrintStream out=new PrintStream(byteOutput,false,"UTF-8");
  ProfileInfo.Task prepPhase=info.getPhaseTask(ProfilePhase.PREPARE);
  ProfileInfo.Task execPhase=info.getPhaseTask(ProfilePhase.EXECUTE);
  ProfileInfo.Task finishPhase=info.getPhaseTask(ProfilePhase.FINISH);
  if (execPhase == null) {
    return null;
  }
  List<ProfileInfo.Task> execTasks=info.getTasksForPhase(execPhase);
  long graphTime=info.getStatsForType(ProfilerTask.ACTION_GRAPH,execTasks).totalTime;
  long execTime=info.getPhaseDuration(execPhase) - graphTime;
  if (prepPhase != null) {
    out.printf(TWO_COLUMN_FORMAT,"Total preparation time",TimeUtilities.prettyTime(info.getPhaseDuration(prepPhase)));
  }
  out.printf(TWO_COLUMN_FORMAT,"Total execution phase time",TimeUtilities.prettyTime(info.getPhaseDuration(execPhase)));
  if (finishPhase != null) {
    out.printf(TWO_COLUMN_FORMAT,"Total time finalizing build",TimeUtilities.prettyTime(info.getPhaseDuration(finishPhase)));
  }
  out.println();
  out.printf(TWO_COLUMN_FORMAT,"Action dependency map creation",TimeUtilities.prettyTime(graphTime));
  out.printf(TWO_COLUMN_FORMAT,"Actual execution time",TimeUtilities.prettyTime(execTime));
  EnumSet<ProfilerTask> typeFilter=EnumSet.noneOf(ProfilerTask.class);
  CriticalPathEntry totalPath=info.getCriticalPath(typeFilter);
  info.analyzeCriticalPath(typeFilter,totalPath);
  typeFilter=getTypeFilter();
  CriticalPathEntry optimalPath=info.getCriticalPath(typeFilter);
  info.analyzeCriticalPath(typeFilter,optimalPath);
  if (totalPath != null) {
    printCriticalPathTimingBreakdown(info,totalPath,optimalPath,execTime,out);
  }
 else {
    out.println("\nCritical path not available because no action graph was generated.");
  }
  printTimeDistributionByType(info,out,execPhase);
  if (totalPath != null) {
    printCriticalPath("Critical path",out,totalPath);
    if (!isLightCriticalPath(totalPath)) {
      printCriticalPath("Critical path excluding scheduling delays",out,optimalPath);
    }
  }
  if (info.getMissingActionsCount() > 0) {
    out.println("\n" + info.getMissingActionsCount() + " action(s) are present in the"+ " action graph but missing instrumentation data. Most likely profile file"+ " has been created for the failed or aborted build.");
  }
  printVfsStatistics(info,out,ProfilePhase.EXECUTE,opts.vfsStatsLimit);
  return new ProfilePhaseStatistics("Execution Phase Information",new String(byteOutput.toByteArray(),"UTF-8"));
}
