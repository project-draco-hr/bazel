{
  Iterable<BlazeModule> blazeModules=runtime.getBlazeModules();
  ConfiguredRuleClassProvider ruleClassProvider=runtime.getRuleClassProvider();
  Map<String,BlazeCommand> commandsByName=getSortedCommands(runtime);
  outErr.printOutLn("BAZEL_COMMAND_LIST=\"" + SPACE_JOINER.join(commandsByName.keySet()) + "\"");
  outErr.printOutLn("BAZEL_INFO_KEYS=\"");
  for (  String name : InfoCommand.getHardwiredInfoItemNames(runtime.getProductName())) {
    outErr.printOutLn(name);
  }
  outErr.printOutLn("\"");
  outErr.printOutLn("BAZEL_STARTUP_OPTIONS=\"");
  Iterable<Class<? extends OptionsBase>> options=BlazeCommandUtils.getStartupOptions(blazeModules);
  outErr.printOut(OptionsParser.newOptionsParser(options).getOptionsCompletion());
  outErr.printOutLn("\"");
  for (  Map.Entry<String,BlazeCommand> e : commandsByName.entrySet()) {
    BlazeCommand command=e.getValue();
    String varName=e.getKey().toUpperCase(Locale.US).replace('-','_');
    Command annotation=command.getClass().getAnnotation(Command.class);
    if (!annotation.completion().isEmpty()) {
      outErr.printOutLn("BAZEL_COMMAND_" + varName + "_ARGUMENT=\""+ annotation.completion()+ "\"");
    }
    options=BlazeCommandUtils.getOptions(command.getClass(),blazeModules,ruleClassProvider);
    outErr.printOutLn("BAZEL_COMMAND_" + varName + "_FLAGS=\"");
    outErr.printOut(OptionsParser.newOptionsParser(options).getOptionsCompletion());
    outErr.printOutLn("\"");
  }
}
