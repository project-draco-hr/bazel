{
  outErr.printOut(String.format("Usage: %s <command> <options> ...\n\n",runtime.getProductName()));
  outErr.printOut("Available commands:\n");
  Map<String,BlazeCommand> commandsByName=runtime.getCommandMap();
  List<String> namesInOrder=new ArrayList<>(commandsByName.keySet());
  Collections.sort(namesInOrder);
  for (  String name : namesInOrder) {
    BlazeCommand command=commandsByName.get(name);
    Command annotation=command.getClass().getAnnotation(Command.class);
    if (annotation.hidden()) {
      continue;
    }
    String shortDescription=annotation.shortDescription().replace("%{product}",runtime.getProductName());
    outErr.printOut(String.format("  %-19s %s\n",name,shortDescription));
  }
  outErr.printOut("\n");
  outErr.printOut("Getting more help:\n");
  outErr.printOut(String.format("  %s help <command>\n",runtime.getProductName()));
  outErr.printOut("                   Prints help and options for <command>.\n");
  outErr.printOut(String.format("  %s help startup_options\n",runtime.getProductName()));
  outErr.printOut(String.format("                   Options for the JVM hosting %s.\n",runtime.getProductName()));
  outErr.printOut(String.format("  %s help target-syntax\n",runtime.getProductName()));
  outErr.printOut("                   Explains the syntax for specifying targets.\n");
  outErr.printOut(String.format("  %s help info-keys\n",runtime.getProductName()));
  outErr.printOut("                   Displays a list of keys used by the info command.\n");
}
