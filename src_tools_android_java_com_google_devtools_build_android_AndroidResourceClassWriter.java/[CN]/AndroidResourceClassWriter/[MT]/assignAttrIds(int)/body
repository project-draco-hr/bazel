{
  if (!innerClasses.containsKey(ResourceType.ATTR)) {
    return ImmutableMap.of();
  }
  Map<String,Integer> attrToId=Maps.newHashMapWithExpectedSize(innerClasses.get(ResourceType.ATTR).size());
  Set<Integer> assignedIds=ImmutableSet.of();
  if (publicIds.containsKey(ResourceType.ATTR)) {
    assignedIds=assignPublicIds(attrToId,publicIds.get(ResourceType.ATTR),attrTypeId);
  }
  Set<String> inlineAttrs=new HashSet<>();
  Set<String> styleablesWithInlineAttrs=new TreeSet<>();
  for (  Map.Entry<String,Map<String,Boolean>> styleableAttrEntry : styleableAttrs.entrySet()) {
    Map<String,Boolean> attrs=styleableAttrEntry.getValue();
    for (    Map.Entry<String,Boolean> attrEntry : attrs.entrySet()) {
      if (attrEntry.getValue()) {
        inlineAttrs.add(attrEntry.getKey());
        styleablesWithInlineAttrs.add(styleableAttrEntry.getKey());
      }
    }
  }
  int nextId=nextFreeId(getInitialIdForTypeId(attrTypeId),assignedIds);
  ImmutableList<String> sortedAttrs=Ordering.natural().immutableSortedCopy(innerClasses.get(ResourceType.ATTR));
  for (  String attr : sortedAttrs) {
    if (!inlineAttrs.contains(attr) && !attrToId.containsKey(attr)) {
      attrToId.put(attr,nextId);
      nextId=nextFreeId(nextId + 1,assignedIds);
    }
  }
  for (  String styleable : styleablesWithInlineAttrs) {
    Map<String,Boolean> attrs=styleableAttrs.get(styleable);
    for (    Map.Entry<String,Boolean> attrEntry : attrs.entrySet()) {
      if (attrEntry.getValue() && !attrToId.containsKey(attrEntry.getKey())) {
        attrToId.put(attrEntry.getKey(),nextId);
        nextId=nextFreeId(nextId + 1,assignedIds);
      }
    }
  }
  return attrToId;
}
