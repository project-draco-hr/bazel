{
  BitSet definedAttrs=new BitSet();
  for (  Map.Entry<String,Object> entry : attributeValues.entrySet()) {
    String attributeName=entry.getKey();
    Object attributeValue=entry.getValue();
    if (attributeValue == Runtime.NONE) {
      continue;
    }
    Integer attrIndex=setRuleAttributeValue(rule,eventHandler,attributeName,attributeValue);
    if (attrIndex != null) {
      definedAttrs.set(attrIndex);
      checkAttrValNonEmpty(rule,eventHandler,attributeValue,attrIndex);
    }
  }
  if (ast != null) {
    for (    Argument.Passed arg : ast.getArguments()) {
      if (arg.isKeyword()) {
        String name=arg.getName();
        Integer attrIndex=getAttributeIndex(name);
        if (attrIndex != null) {
          rule.setAttributeLocation(attrIndex,arg.getValue().getLocation());
        }
      }
    }
  }
  List<Attribute> attrsWithComputedDefaults=new ArrayList<>();
  int numAttributes=getAttributeCount();
  for (int attrIndex=0; attrIndex < numAttributes; ++attrIndex) {
    if (!definedAttrs.get(attrIndex)) {
      Attribute attr=getAttribute(attrIndex);
      if (attr.isMandatory()) {
        rule.reportError(rule.getLabel() + ": missing value for mandatory " + "attribute '"+ attr.getName()+ "' in '"+ name+ "' rule",eventHandler);
      }
      if (attr.hasComputedDefault()) {
        attrsWithComputedDefaults.add(attr);
      }
 else {
        Object defaultValue=getAttributeNoncomputedDefaultValue(attr,pkgBuilder);
        checkAttrValNonEmpty(rule,eventHandler,defaultValue,attrIndex);
        rule.setAttributeValue(attr,defaultValue,false);
        checkAllowedValues(rule,attr,eventHandler);
      }
    }
  }
  for (  Attribute attr : attrsWithComputedDefaults) {
    rule.setAttributeValue(attr,attr.getDefaultValue(rule),false);
  }
  populateConfigDependenciesAttribute(rule);
  checkForDuplicateLabels(rule,eventHandler);
  checkThirdPartyRuleHasLicense(rule,pkgBuilder,eventHandler);
  checkForValidSizeAndTimeoutValues(rule,eventHandler);
}
