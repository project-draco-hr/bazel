{
  this.name=name;
  this.skylark=skylark;
  this.type=type;
  Preconditions.checkState(skylark || type != RuleClassType.PLACEHOLDER,name);
  this.documented=type != RuleClassType.ABSTRACT;
  for (  RuleClass parent : parents) {
    if (parent.getValidityPredicate() != PredicatesWithMessage.<Rule>alwaysTrue()) {
      setValidityPredicate(parent.getValidityPredicate());
    }
    if (parent.preferredDependencyPredicate != Predicates.<String>alwaysFalse()) {
      setPreferredDependencyPredicate(parent.preferredDependencyPredicate);
    }
    configurationFragmentPolicy.includeConfigurationFragmentsFrom(parent.getConfigurationFragmentPolicy());
    configurationFragmentPolicy.setMissingFragmentPolicy(parent.getConfigurationFragmentPolicy().getMissingFragmentPolicy());
    supportsConstraintChecking=parent.supportsConstraintChecking;
    for (    Attribute attribute : parent.getAttributes()) {
      String attrName=attribute.getName();
      Preconditions.checkArgument(!attributes.containsKey(attrName) || attributes.get(attrName) == attribute,"Attribute %s is inherited multiple times in %s ruleclass",attrName,name);
      attributes.put(attrName,attribute);
    }
    advertisedProviders.addAll(parent.getAdvertisedProviders());
  }
  if (this.type.equals(RuleClassType.TEST)) {
    Attribute.Builder<Boolean> testOnlyAttr=attr("testonly",BOOLEAN).value(true).nonconfigurable("policy decision: this shouldn't depend on the configuration");
    if (attributes.containsKey("testonly")) {
      override(testOnlyAttr);
    }
 else {
      add(testOnlyAttr);
    }
  }
}
