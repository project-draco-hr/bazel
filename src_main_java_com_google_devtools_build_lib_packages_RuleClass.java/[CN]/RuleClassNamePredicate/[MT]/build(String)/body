{
  Preconditions.checkArgument(this.name.isEmpty() || this.name.equals(name));
  type.checkName(name);
  type.checkAttributes(attributes);
  boolean skylarkExecutable=skylark && (type == RuleClassType.NORMAL || type == RuleClassType.TEST);
  Preconditions.checkState((type == RuleClassType.ABSTRACT) == (configuredTargetFactory == null && configuredTargetFunction == null));
  Preconditions.checkState(skylarkExecutable == (configuredTargetFunction != null));
  Preconditions.checkState(skylarkExecutable == (ruleDefinitionEnvironment != null));
  Preconditions.checkState(workspaceOnly || externalBindingsFunction == NO_EXTERNAL_BINDINGS);
  return new RuleClass(name,skylark,skylarkExecutable,documented,publicByDefault,binaryOutput,workspaceOnly,outputsDefaultExecutable,implicitOutputsFunction,configurator,configuredTargetFactory,validityPredicate,preferredDependencyPredicate,ImmutableSet.copyOf(advertisedProviders),configuredTargetFunction,externalBindingsFunction,ruleDefinitionEnvironment,configurationFragmentPolicy.build(),supportsConstraintChecking,attributes.values().toArray(new Attribute[0]));
}
