{
  return new ActionExecutionInactivityWatchdog.InactivityMonitor(){
    @Override public boolean hasStarted(){
      return !enqueuedActions.isEmpty();
    }
    @Override public int getPending(){
      return statusReporter.getCount();
    }
    @Override public int waitForNextCompletion(    int timeoutMilliseconds) throws InterruptedException {
synchronized (activityIndicator) {
        int before=completedActions.size();
        long startTime=BlazeClock.instance().currentTimeMillis();
        while (true) {
          activityIndicator.wait(timeoutMilliseconds);
          int completed=completedActions.size() - before;
          long now=0;
          if (completed > 0 || (startTime + timeoutMilliseconds) <= (now=BlazeClock.instance().currentTimeMillis())) {
            return completed;
          }
 else {
            timeoutMilliseconds-=now - startTime;
            startTime=now;
          }
        }
      }
    }
  }
;
}
