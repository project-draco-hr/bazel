{
  Executor executor=actionExecutionContext.getExecutor();
  if (!spawn.isRemotable()) {
    SandboxHelpers.fallbackToNonSandboxedExecution(spawn,actionExecutionContext,executor);
    return;
  }
  SandboxHelpers.reportSubcommand(executor,spawn);
  SandboxHelpers.postActionStatusMessage(executor,spawn);
  Path sandboxPath=SandboxHelpers.getSandboxRoot(blazeDirs,productName,uuid,execCounter);
  Path sandboxExecRoot=sandboxPath.getRelative("execroot");
  ImmutableMap<String,String> spawnEnvironment=StandaloneSpawnStrategy.locallyDeterminedEnv(execRoot,productName,spawn.getEnvironment());
  Set<Path> writableDirs=getWritableDirs(sandboxExecRoot,spawn.getEnvironment());
  try {
    HardlinkedExecRoot hardlinkedExecRoot=new HardlinkedExecRoot(execRoot,sandboxPath,sandboxExecRoot);
    ImmutableSet<PathFragment> outputs=SandboxHelpers.getOutputFiles(spawn);
    hardlinkedExecRoot.createFileSystem(getMounts(spawn,actionExecutionContext),outputs,writableDirs);
    DarwinSandboxRunner runner;
    runner=new DarwinSandboxRunner(sandboxPath,sandboxExecRoot,getWritableDirs(sandboxExecRoot,spawnEnvironment),getInaccessiblePaths(),verboseFailures);
    try {
      runner.run(spawn.getArguments(),spawnEnvironment,actionExecutionContext.getFileOutErr(),SandboxHelpers.getTimeout(spawn),SandboxHelpers.shouldAllowNetwork(buildRequest,spawn));
    }
  finally {
      hardlinkedExecRoot.copyOutputs(execRoot,outputs);
      if (!sandboxDebug) {
        SandboxHelpers.lazyCleanup(backgroundWorkers,runner);
      }
    }
  }
 catch (  IOException e) {
    throw new UserExecException("I/O error during sandboxed execution",e);
  }
}
