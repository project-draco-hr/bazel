{
  FileSystemUtils.createDirectoryAndParents(sandboxPath);
  Path sandboxConfigPath=sandboxPath.getParentDirectory().getRelative(sandboxPath.getBaseName() + ".sb");
  try (PrintWriter out=new PrintWriter(sandboxConfigPath.getOutputStream())){
    out.println("(version 1)");
    out.println("(debug deny)");
    out.println("(allow default)");
    if (!allowNetwork) {
      out.println("(deny network*)");
    }
    out.println("(allow network* (local ip \"localhost:*\"))");
    out.println("(allow network* (remote ip \"localhost:*\"))");
    out.println("(allow network* (remote unix-socket (subpath \"/\")))");
    out.println("(allow network* (local unix-socket (subpath \"/\")))");
    out.println("(deny file-read* (subpath \"" + blazeDirs.getWorkspace() + "\"))");
    out.println("(deny file-read* (subpath \"" + execRoot + "\"))");
    out.println("(deny file-write* (subpath \"/\"))");
    allowWriteSubpath(out,blazeDirs.getFileSystem().getPath("/dev"));
    allowWriteSubpath(out,sandboxPath);
    Path sysTmpDir=blazeDirs.getFileSystem().getPath(System.getenv("TMPDIR"));
    allowWriteSubpath(out,sysTmpDir);
    allowWriteSubpath(out,blazeDirs.getFileSystem().getPath("/tmp"));
    for (    Path path : confPaths) {
      if (path.exists()) {
        allowWriteSubpath(out,path);
      }
    }
  }
   return sandboxConfigPath;
}
