{
  StringBuilder sb=new StringBuilder();
  if (generateNameAndHeader) {
    String nameExtraHtmlDoc=docVariables.containsKey(DocgenConsts.VAR_NAME) ? docVariables.get(DocgenConsts.VAR_NAME) : "";
    sb.append(String.format(Joiner.on('\n').join(new String[]{"<h4 id=\"%s_args\">Arguments</h4>","<ul>","<li id=\"%s.name\"><code>name</code>: A unique name for this rule.","<i>(<a href=\"build-ref.html#name\">Name</a>; required)</i>%s</li>\n"}),ruleName,ruleName,nameExtraHtmlDoc));
  }
 else {
    sb.append("<ul>\n");
  }
  for (  RuleDocumentationAttribute attributeDoc : attributes) {
    if (isCommonType() == attributeDoc.isCommonType()) {
      String attrName=attributeDoc.getAttributeName();
      Attribute attribute=isCommonType() ? null : ruleClassProvider.getRuleClassMap().get(ruleName).getAttributeByName(attrName);
      sb.append(String.format("<li id=\"%s.%s\"%s><code>%s</code>:\n%s</li>\n",ruleName.toLowerCase(),attrName,getDeprecatedString(attributeDoc.hasFlag(DocgenConsts.FLAG_DEPRECATED)),attrName,attributeDoc.getHtmlDocumentation(attribute)));
    }
  }
  sb.append("</ul>\n");
  RuleClass ruleClass=ruleClassProvider.getRuleClassMap().get(ruleName);
  if (ruleClass != null && ruleClass.isPublicByDefault()) {
    sb.append("The default visibility is public: <code>visibility = [\"//visibility:public\"]</code>.");
  }
  return sb.toString();
}
