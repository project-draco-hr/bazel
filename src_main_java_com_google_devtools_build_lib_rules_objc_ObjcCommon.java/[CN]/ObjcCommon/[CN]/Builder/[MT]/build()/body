{
  Iterable<BundleableFile> bundleImports=BundleableFile.bundleImportsFromRule(context);
  ObjcProvider.Builder objcProvider=new ObjcProvider.Builder().addAll(IMPORTED_LIBRARY,extraImportLibraries).addAll(BUNDLE_FILE,bundleImports).addAll(BUNDLE_IMPORT_DIR,uniqueContainers(BundleableFile.toArtifacts(bundleImports),BUNDLE_CONTAINER_TYPE)).addAll(SDK_FRAMEWORK,extraSdkFrameworks).addAll(WEAK_SDK_FRAMEWORK,extraWeakSdkFrameworks).addAll(SDK_DYLIB,extraSdkDylibs).addAll(FRAMEWORK_FILE,frameworkImports).addAll(FRAMEWORK_DIR,uniqueContainers(frameworkImports,FRAMEWORK_CONTAINER_TYPE)).addAll(INCLUDE,userHeaderSearchPaths).addAll(DEFINE,defines).addAll(HEADER,headers).addTransitiveAndPropagate(depObjcProviders).addTransitiveWithoutPropagating(directDepObjcProviders);
  for (  CppCompilationContext headerProvider : depCcHeaderProviders) {
    objcProvider.addTransitiveAndPropagate(HEADER,headerProvider.getDeclaredIncludeSrcs());
  }
  for (  CcLinkParamsProvider linkProvider : depCcLinkProviders) {
    objcProvider.addTransitiveAndPropagate(CC_LIBRARY,linkProvider.getCcLinkParams(true,false).getLibraries());
  }
  if (compilationAttributes.isPresent()) {
    CompilationAttributes attributes=compilationAttributes.get();
    ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(context);
    Iterable<PathFragment> sdkIncludes=Iterables.transform(Interspersing.prependEach(IosSdkCommands.sdkDir(objcConfiguration) + "/usr/include/",PathFragment.safePathStrings(attributes.sdkIncludes())),TO_PATH_FRAGMENT);
    objcProvider.addAll(HEADER,attributes.hdrs()).addAll(INCLUDE,attributes.headerSearchPaths()).addAll(INCLUDE,sdkIncludes).addAll(SDK_FRAMEWORK,attributes.sdkFrameworks()).addAll(WEAK_SDK_FRAMEWORK,attributes.weakSdkFrameworks()).addAll(SDK_DYLIB,attributes.sdkDylibs());
  }
  if (resourceAttributes.isPresent()) {
    ResourceAttributes attributes=resourceAttributes.get();
    objcProvider.addAll(GENERAL_RESOURCE_FILE,attributes.storyboards()).addAll(GENERAL_RESOURCE_FILE,attributes.resources()).addAll(GENERAL_RESOURCE_FILE,attributes.strings()).addAll(GENERAL_RESOURCE_FILE,attributes.xibs()).addAll(BUNDLE_FILE,BundleableFile.flattenedRawResourceFiles(attributes.resources())).addAll(BUNDLE_FILE,BundleableFile.structuredRawResourceFiles(attributes.structuredResources())).addAll(XCASSETS_DIR,uniqueContainers(attributes.assetCatalogs(),ASSET_CATALOG_CONTAINER_TYPE)).addAll(ASSET_CATALOG,attributes.assetCatalogs()).addAll(XCDATAMODEL,attributes.datamodels()).addAll(XIB,attributes.xibs()).addAll(STRINGS,attributes.strings()).addAll(STORYBOARD,attributes.storyboards());
  }
  for (  CompilationArtifacts artifacts : compilationArtifacts.asSet()) {
    Iterable<Artifact> allSources=Iterables.concat(artifacts.getSrcs(),artifacts.getNonArcSrcs());
    objcProvider.addAll(LIBRARY,artifacts.getArchive().asSet());
    objcProvider.addAll(SOURCE,allSources);
    BuildConfiguration configuration=context.getConfiguration();
    RegexFilter filter=configuration.getInstrumentationFilter();
    if (configuration.isCodeCoverageEnabled() && filter.isIncluded(context.getLabel().toString())) {
      for (      Artifact source : allSources) {
        objcProvider.add(INSTRUMENTED_SOURCE,source);
        objcProvider.add(GCNO,intermediateArtifacts.gcnoFile(source));
      }
    }
    boolean usesCpp=false;
    for (    Artifact sourceFile : Iterables.concat(artifacts.getSrcs(),artifacts.getNonArcSrcs())) {
      usesCpp=usesCpp || ObjcRuleClasses.CPP_SOURCES.matches(sourceFile.getExecPath());
    }
    if (usesCpp) {
      objcProvider.add(FLAG,USES_CPP);
    }
  }
  if (alwayslink) {
    for (    CompilationArtifacts artifacts : compilationArtifacts.asSet()) {
      for (      Artifact archive : artifacts.getArchive().asSet()) {
        objcProvider.add(FORCE_LOAD_LIBRARY,archive);
        objcProvider.add(FORCE_LOAD_FOR_XCODEGEN,String.format("$(BUILT_PRODUCTS_DIR)/lib%s.a",XcodeProvider.xcodeTargetName(context.getLabel())));
      }
    }
    for (    Artifact archive : extraImportLibraries) {
      objcProvider.add(FORCE_LOAD_LIBRARY,archive);
      objcProvider.add(FORCE_LOAD_FOR_XCODEGEN,"$(WORKSPACE_ROOT)/" + archive.getExecPath().getSafePathString());
    }
  }
  objcProvider.addAll(LINKED_BINARY,linkedBinary.asSet()).addAll(BREAKPAD_FILE,breakpadFile.asSet());
  return new ObjcCommon(objcProvider.build(),compilationArtifacts);
}
