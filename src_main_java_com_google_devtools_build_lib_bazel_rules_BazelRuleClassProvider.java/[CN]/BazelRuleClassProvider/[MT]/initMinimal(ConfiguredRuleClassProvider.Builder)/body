{
  builder.setConfigurationCollectionFactory(new BazelConfigurationCollection()).setPrelude("//tools/build_rules:prelude_bazel").setRunfilesPrefix(Label.DEFAULT_REPOSITORY_DIRECTORY).setPrerequisiteValidator(new BazelPrerequisiteValidator());
  builder.setUniversalConfigurationFragment(BazelConfiguration.class);
  builder.addConfigurationOptions(BuildConfiguration.Options.class);
  builder.addConfigurationOptions(ProtoConfiguration.Options.class);
  builder.addConfigurationFragment(new BazelConfiguration.Loader());
  builder.addConfigurationFragment(new ProtoConfiguration.Loader());
  builder.addRuleDefinition(new BaseRuleClasses.BaseRule());
  builder.addRuleDefinition(new BaseRuleClasses.RuleBase());
  builder.addRuleDefinition(new BazelBaseRuleClasses.BinaryBaseRule());
  builder.addRuleDefinition(new BaseRuleClasses.TestBaseRule());
  builder.addRuleDefinition(new BazelBaseRuleClasses.ErrorRule());
  builder.addRuleDefinition(new EnvironmentRule());
  builder.addRuleDefinition(new ConfigRuleClasses.ConfigBaseRule());
  builder.addRuleDefinition(new ConfigRuleClasses.ConfigSettingRule());
  builder.addRuleDefinition(new AliasRule());
  builder.addRuleDefinition(new BazelFilegroupRule());
  builder.addRuleDefinition(new BazelTestSuiteRule());
  builder.addRuleDefinition(new BazelGenRuleRule());
  builder.addRuleDefinition(new GenQueryRule());
  builder.addRuleDefinition(new BindRule());
  builder.addRuleDefinition(new WorkspaceBaseRule());
  builder.addRuleDefinition(new LocalRepositoryRule());
  try {
    builder.addWorkspaceFilePrefix(ResourceFileLoader.loadResource(BazelRuleClassProvider.class,"tools.WORKSPACE"));
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
