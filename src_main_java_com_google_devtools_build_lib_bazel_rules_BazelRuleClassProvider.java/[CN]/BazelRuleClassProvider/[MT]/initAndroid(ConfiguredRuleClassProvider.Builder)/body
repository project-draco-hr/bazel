{
  String toolsRepository=checkNotNull(builder.getToolsRepository());
  builder.addConfigurationOptions(AndroidConfiguration.Options.class);
  builder.addConfigurationFragment(new AndroidConfiguration.Loader());
  AndroidNeverlinkAspect androidNeverlinkAspect=new AndroidNeverlinkAspect();
  DexArchiveAspect dexArchiveAspect=new DexArchiveAspect(toolsRepository);
  JackAspect jackAspect=new JackAspect(toolsRepository);
  builder.addNativeAspectClass(androidNeverlinkAspect);
  builder.addNativeAspectClass(dexArchiveAspect);
  builder.addNativeAspectClass(jackAspect);
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidSdkRule());
  builder.addRuleDefinition(new BazelAndroidToolsDefaultsJarRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidBaseRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidAaptBaseRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidResourceSupportRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidBinaryBaseRule(androidNeverlinkAspect,dexArchiveAspect,jackAspect));
  builder.addRuleDefinition(new AndroidBinaryOnlyRule());
  builder.addRuleDefinition(new AndroidLibraryBaseRule(androidNeverlinkAspect,jackAspect));
  builder.addRuleDefinition(new BazelAndroidLibraryRule());
  builder.addRuleDefinition(new BazelAndroidBinaryRule());
  builder.addRuleDefinition(new AarImportRule());
  builder.addSkylarkAccessibleTopLevels("android_common",new AndroidSkylarkCommon());
  try {
    builder.addWorkspaceFilePrefix(ResourceFileLoader.loadResource(BazelAndroidSemantics.class,"android.WORKSPACE"));
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
