{
  builder.addBuildInfoFactory(new BazelJavaBuildInfoFactory()).addBuildInfoFactory(new CppBuildInfo()).addBuildInfoFactory(new ObjcBuildInfoFactory()).setConfigurationCollectionFactory(new BazelConfigurationCollection()).setPrerequisiteValidator(new BazelPrerequisiteValidator()).setSkylarkAccessibleJavaClasses(skylarkBuiltinJavaObects);
  for (  Class<? extends FragmentOptions> fragmentOptions : BUILD_OPTIONS) {
    builder.addConfigurationOptions(fragmentOptions);
  }
  builder.addRuleDefinition(new WorkspaceBaseRule());
  builder.addRuleDefinition(new BaseRuleClasses.BaseRule());
  builder.addRuleDefinition(new BaseRuleClasses.RuleBase());
  builder.addRuleDefinition(new BazelBaseRuleClasses.BinaryBaseRule());
  builder.addRuleDefinition(new BaseRuleClasses.TestBaseRule());
  builder.addRuleDefinition(new BazelBaseRuleClasses.ErrorRule());
  builder.addRuleDefinition(new EnvironmentRule());
  builder.addRuleDefinition(new ConfigRuleClasses.ConfigBaseRule());
  builder.addRuleDefinition(new ConfigRuleClasses.ConfigSettingRule());
  builder.addRuleDefinition(new BazelFilegroupRule());
  builder.addRuleDefinition(new BazelTestSuiteRule());
  builder.addRuleDefinition(new BazelGenRuleRule());
  builder.addRuleDefinition(new GenQueryRule());
  builder.addRuleDefinition(new BazelShRuleClasses.ShRule());
  builder.addRuleDefinition(new BazelShLibraryRule());
  builder.addRuleDefinition(new BazelShBinaryRule());
  builder.addRuleDefinition(new BazelShTestRule());
  builder.addRuleDefinition(new CcToolchainRule());
  builder.addRuleDefinition(new CcToolchainSuiteRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcLinkingRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcDeclRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcBaseRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcBinaryBaseRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcBinaryRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcTestRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcLibraryBaseRule());
  builder.addRuleDefinition(new BazelCppRuleClasses.CcLibraryRule());
  builder.addRuleDefinition(new BazelPyRuleClasses.PyBaseRule());
  builder.addRuleDefinition(new BazelPyRuleClasses.PyBinaryBaseRule());
  builder.addRuleDefinition(new BazelPyLibraryRule());
  builder.addRuleDefinition(new BazelPyBinaryRule());
  builder.addRuleDefinition(new BazelPyTestRule());
  try {
    builder.addWorkspaceFile(ResourceFileLoader.loadResource(BazelJavaRuleClasses.class,"jdk.WORKSPACE"));
    builder.addWorkspaceFile(ResourceFileLoader.loadResource(BazelAndroidSemantics.class,"android.WORKSPACE"));
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
  builder.addRuleDefinition(new BazelJavaRuleClasses.BaseJavaBinaryRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.IjarBaseRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.JavaBaseRule());
  builder.addRuleDefinition(new JavaImportBaseRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.JavaRule());
  builder.addRuleDefinition(new BazelJavaBinaryRule());
  builder.addRuleDefinition(new BazelJavaLibraryRule());
  builder.addRuleDefinition(new BazelJavaImportRule());
  builder.addRuleDefinition(new BazelJavaTestRule());
  builder.addRuleDefinition(new BazelJavaPluginRule());
  builder.addRuleDefinition(new JavaToolchainRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidSdkRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidToolsDefaultsJarRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidBaseRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidAaptBaseRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidResourceSupportRule());
  builder.addRuleDefinition(new AndroidRuleClasses.AndroidBinaryBaseRule());
  builder.addRuleDefinition(new AndroidBinaryOnlyRule());
  builder.addRuleDefinition(new AndroidLibraryBaseRule());
  builder.addRuleDefinition(new BazelAndroidLibraryRule());
  builder.addRuleDefinition(new BazelAndroidBinaryRule());
  builder.addRuleDefinition(new BazelIosTestRule());
  builder.addRuleDefinition(new ExperimentalIosTestRule());
  builder.addRuleDefinition(new IosDeviceRule());
  builder.addRuleDefinition(new ObjcBinaryRule());
  builder.addRuleDefinition(new ObjcBundleRule());
  builder.addRuleDefinition(new ObjcBundleLibraryRule());
  builder.addRuleDefinition(new ObjcFrameworkRule());
  builder.addRuleDefinition(new ObjcImportRule());
  builder.addRuleDefinition(new ObjcLibraryRule());
  builder.addRuleDefinition(new ObjcOptionsRule());
  builder.addRuleDefinition(new ObjcProtoLibraryRule());
  builder.addRuleDefinition(new ObjcXcodeprojRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CoptsRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ObjcProtoRule());
  builder.addRuleDefinition(new ObjcRuleClasses.IosTestBaseRule());
  builder.addRuleDefinition(new ObjcRuleClasses.BundlingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ReleaseBundlingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.SimulatorRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CompilingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.LinkingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ResourcesRule());
  builder.addRuleDefinition(new ObjcRuleClasses.XcodegenRule());
  builder.addRuleDefinition(new ObjcRuleClasses.AlwaysLinkRule());
  builder.addRuleDefinition(new ObjcRuleClasses.OptionsRule());
  builder.addRuleDefinition(new ObjcRuleClasses.SdkFrameworksDependerRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CompileDependencyRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ResourceToolsRule());
  builder.addRuleDefinition(new IosApplicationRule());
  builder.addRuleDefinition(new IosExtensionBinaryRule());
  builder.addRuleDefinition(new IosExtensionRule());
  builder.addRuleDefinition(new J2ObjcLibraryBaseRule());
  builder.addRuleDefinition(new BazelJ2ObjcLibraryRule());
  builder.addRuleDefinition(new BazelExtraActionRule());
  builder.addRuleDefinition(new BazelActionListenerRule());
  builder.addRuleDefinition(new BindRule());
  builder.addRuleDefinition(new HttpArchiveRule());
  builder.addRuleDefinition(new HttpJarRule());
  builder.addRuleDefinition(new LocalRepositoryRule());
  builder.addRuleDefinition(new MavenJarRule());
  builder.addRuleDefinition(new NewHttpArchiveRule());
  builder.addRuleDefinition(new NewLocalRepositoryRule());
  builder.addRuleDefinition(new AndroidSdkRepositoryRule());
  builder.addRuleDefinition(new AndroidNdkRepositoryRule());
  builder.addRuleDefinition(new AndroidRepositoryRules.AndroidLocalRepositoryRule());
  builder.addRuleDefinition(new AndroidHttpToolsRepositoryRule());
  builder.addConfigurationFragment(new BazelConfiguration.Loader());
  builder.addConfigurationFragment(new CppConfigurationLoader(Functions.<String>identity()));
  builder.addConfigurationFragment(new PythonConfigurationLoader(Functions.<String>identity()));
  builder.addConfigurationFragment(new BazelPythonConfiguration.Loader());
  builder.addConfigurationFragment(new JvmConfigurationLoader(false,JAVA_CPU_SUPPLIER));
  builder.addConfigurationFragment(new JavaConfigurationLoader());
  builder.addConfigurationFragment(new ObjcConfigurationLoader());
  builder.addConfigurationFragment(new J2ObjcConfiguration.Loader());
  builder.addConfigurationFragment(new AndroidConfiguration.Loader());
}
