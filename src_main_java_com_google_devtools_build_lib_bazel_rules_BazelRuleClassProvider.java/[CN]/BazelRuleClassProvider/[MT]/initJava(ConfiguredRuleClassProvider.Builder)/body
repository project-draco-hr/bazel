{
  builder.addConfigurationOptions(JavaOptions.class);
  builder.addConfigurationFragment(new JvmConfigurationLoader(false,JAVA_CPU_SUPPLIER));
  builder.addConfigurationFragment(new JavaConfigurationLoader());
  builder.addBuildInfoFactory(new BazelJavaBuildInfoFactory());
  builder.addRuleDefinition(new BazelJavaRuleClasses.BaseJavaBinaryRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.IjarBaseRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.JavaBaseRule());
  builder.addRuleDefinition(new ProguardLibraryRule());
  builder.addRuleDefinition(new JavaImportBaseRule());
  builder.addRuleDefinition(new BazelJavaRuleClasses.JavaRule());
  builder.addRuleDefinition(new BazelJavaBinaryRule());
  builder.addRuleDefinition(new BazelJavaLibraryRule());
  builder.addRuleDefinition(new BazelJavaImportRule());
  builder.addRuleDefinition(new BazelJavaTestRule());
  builder.addRuleDefinition(new BazelJavaPluginRule());
  builder.addRuleDefinition(new JavaToolchainRule());
  builder.addRuleDefinition(new BazelExtraActionRule());
  builder.addRuleDefinition(new BazelActionListenerRule());
  try {
    builder.addWorkspaceFilePrefix(ResourceFileLoader.loadResource(BazelJavaRuleClasses.class,"jdk.WORKSPACE"));
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
