{
  String toolsRepository=checkNotNull(builder.getToolsRepository());
  builder.addBuildInfoFactory(new ObjcBuildInfoFactory());
  builder.registerSkylarkProvider(ObjcProvider.OBJC_SKYLARK_PROVIDER_NAME,ObjcProvider.class);
  builder.addConfigurationOptions(PythonOptions.class);
  builder.addConfigurationOptions(BazelPythonConfiguration.Options.class);
  builder.addConfigurationOptions(ObjcCommandLineOptions.class);
  builder.addConfigurationOptions(J2ObjcCommandLineOptions.class);
  BazelJ2ObjcProtoAspect bazelJ2ObjcProtoAspect=new BazelJ2ObjcProtoAspect(toolsRepository);
  J2ObjcAspect j2ObjcAspect=new J2ObjcAspect(toolsRepository,bazelJ2ObjcProtoAspect);
  AndroidStudioInfoAspect androidStudioInfoAspect=new AndroidStudioInfoAspect(toolsRepository,new BazelAndroidStudioInfoSemantics());
  ObjcProtoAspect objcProtoAspect=new ObjcProtoAspect();
  BazelJavaProtoAspect bazelJavaProtoAspect=new BazelJavaProtoAspect();
  BazelJavaLiteProtoAspect bazelJavaLiteProtoAspect=new BazelJavaLiteProtoAspect();
  builder.addNativeAspectClass(bazelJ2ObjcProtoAspect);
  builder.addNativeAspectClass(j2ObjcAspect);
  builder.addNativeAspectClass(androidStudioInfoAspect);
  builder.addNativeAspectClass(objcProtoAspect);
  builder.addNativeAspectClass(bazelJavaProtoAspect);
  builder.addNativeAspectClass(bazelJavaLiteProtoAspect);
  builder.addRuleDefinition(new BazelShRuleClasses.ShRule());
  builder.addRuleDefinition(new BazelShLibraryRule());
  builder.addRuleDefinition(new BazelShBinaryRule());
  builder.addRuleDefinition(new BazelShTestRule());
  builder.addRuleDefinition(new BazelProtoLibraryRule());
  builder.addRuleDefinition(new BazelPyRuleClasses.PyBaseRule());
  builder.addRuleDefinition(new BazelPyRuleClasses.PyBinaryBaseRule());
  builder.addRuleDefinition(new BazelPyLibraryRule());
  builder.addRuleDefinition(new BazelPyBinaryRule());
  builder.addRuleDefinition(new BazelPyTestRule());
  try {
    builder.addWorkspaceFilePrefix(ResourceFileLoader.loadResource(BazelJ2ObjcLibraryRule.class,"j2objc.WORKSPACE"));
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
  builder.addRuleDefinition(new AppleCcToolchainRule());
  builder.addRuleDefinition(new IosTestRule());
  builder.addRuleDefinition(new IosDeviceRule());
  builder.addRuleDefinition(new AppleBinaryRule());
  builder.addRuleDefinition(new ObjcBinaryRule());
  builder.addRuleDefinition(new ExperimentalObjcLibraryRule());
  builder.addRuleDefinition(new ObjcBundleRule());
  builder.addRuleDefinition(new ObjcBundleLibraryRule());
  builder.addRuleDefinition(new ObjcFrameworkRule());
  builder.addRuleDefinition(new ObjcImportRule());
  builder.addRuleDefinition(new ObjcLibraryRule());
  builder.addRuleDefinition(new ObjcProtoLibraryRule());
  builder.addRuleDefinition(new ObjcXcodeprojRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CoptsRule());
  builder.addRuleDefinition(new ObjcRuleClasses.BundlingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ReleaseBundlingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.SimulatorRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CompilingRule());
  builder.addRuleDefinition(new ObjcRuleClasses.LinkingRule(objcProtoAspect));
  builder.addRuleDefinition(new ObjcRuleClasses.ResourcesRule());
  builder.addRuleDefinition(new ObjcRuleClasses.XcodegenRule());
  builder.addRuleDefinition(new ObjcRuleClasses.AlwaysLinkRule());
  builder.addRuleDefinition(new ObjcRuleClasses.SdkFrameworksDependerRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CompileDependencyRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ResourceToolsRule());
  builder.addRuleDefinition(new ObjcRuleClasses.XcrunRule());
  builder.addRuleDefinition(new ObjcRuleClasses.LibtoolRule());
  builder.addRuleDefinition(new ObjcRuleClasses.IpaRule());
  builder.addRuleDefinition(new ObjcRuleClasses.ReleaseBundlingToolsRule());
  builder.addRuleDefinition(new ObjcRuleClasses.WatchExtensionBundleRule());
  builder.addRuleDefinition(new ObjcRuleClasses.WatchApplicationBundleRule());
  builder.addRuleDefinition(new ObjcRuleClasses.CrosstoolRule());
  builder.addRuleDefinition(new AppleWatch1ExtensionRule());
  builder.addRuleDefinition(new AppleWatch2ExtensionRule());
  builder.addRuleDefinition(new AppleWatchExtensionBinaryRule());
  builder.addRuleDefinition(new IosApplicationRule());
  builder.addRuleDefinition(new IosExtensionBinaryRule());
  builder.addRuleDefinition(new IosExtensionRule());
  builder.addRuleDefinition(new IosFrameworkBinaryRule());
  builder.addRuleDefinition(new IosFrameworkRule());
  builder.addRuleDefinition(new XcodeVersionRule());
  builder.addRuleDefinition(new J2ObjcLibraryBaseRule());
  builder.addRuleDefinition(new BazelJ2ObjcLibraryRule(j2ObjcAspect));
  builder.addRuleDefinition(new GitRepositoryRule());
  builder.addRuleDefinition(new HttpArchiveRule());
  builder.addRuleDefinition(new HttpJarRule());
  builder.addRuleDefinition(new HttpFileRule());
  builder.addRuleDefinition(new MavenJarRule());
  builder.addRuleDefinition(new MavenServerRule());
  builder.addRuleDefinition(new NewHttpArchiveRule());
  builder.addRuleDefinition(new NewGitRepositoryRule());
  builder.addRuleDefinition(new NewLocalRepositoryRule());
  builder.addRuleDefinition(new AndroidSdkRepositoryRule());
  builder.addRuleDefinition(new AndroidNdkRepositoryRule());
  builder.addRuleDefinition(new BazelJavaProtoLibraryRule(bazelJavaProtoAspect));
  builder.addRuleDefinition(new BazelJavaLiteProtoLibraryRule(bazelJavaLiteProtoAspect));
  builder.addConfigurationFragment(new PythonConfigurationLoader(Functions.<String>identity()));
  builder.addConfigurationFragment(new BazelPythonConfiguration.Loader());
  builder.addConfigurationFragment(new ObjcConfigurationLoader());
  builder.addConfigurationFragment(new J2ObjcConfiguration.Loader());
  builder.addSkylarkAccessibleTopLevels("apple_common",new AppleSkylarkCommon());
}
