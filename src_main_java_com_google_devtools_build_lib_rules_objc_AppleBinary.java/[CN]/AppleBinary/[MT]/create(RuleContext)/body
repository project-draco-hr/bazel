{
  PlatformType platformType=getPlatformType(ruleContext);
  ImmutableListMultimap<BuildConfiguration,ObjcProvider> configurationToNonPropagatedObjcMap=ruleContext.getPrerequisitesByConfiguration("non_propagated_deps",Mode.SPLIT,ObjcProvider.class);
  ImmutableListMultimap<BuildConfiguration,TransitiveInfoCollection> configToDepsCollectionMap=ruleContext.getPrerequisitesByConfiguration("deps",Mode.SPLIT);
  Set<BuildConfiguration> childConfigurations=getChildConfigurations(ruleContext);
  IntermediateArtifacts ruleIntermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  NestedSetBuilder<Artifact> binariesToLipo=NestedSetBuilder.<Artifact>stableOrder();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.<Artifact>stableOrder().add(ruleIntermediateArtifacts.combinedArchitectureBinary());
  ObjcProvider.Builder objcProviderBuilder=new ObjcProvider.Builder();
  for (  BuildConfiguration childConfig : childConfigurations) {
    ProtobufSupport protoSupport=new ProtobufSupport(ruleContext,childConfig).registerGenerationActions().registerCompilationActions();
    Optional<ObjcProvider> protosObjcProvider=protoSupport.getObjcProvider();
    IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext,childConfig);
    ObjcCommon common=common(ruleContext,childConfig,intermediateArtifacts,nullToEmptyList(configToDepsCollectionMap.get(childConfig)),nullToEmptyList(configurationToNonPropagatedObjcMap.get(childConfig)),protosObjcProvider);
    ImmutableList.Builder<J2ObjcMappingFileProvider> j2ObjcMappingFileProviders=ImmutableList.builder();
    J2ObjcEntryClassProvider.Builder j2ObjcEntryClassProviderBuilder=new J2ObjcEntryClassProvider.Builder();
    for (    TransitiveInfoCollection dep : configToDepsCollectionMap.get(childConfig)) {
      if (dep.getProvider(J2ObjcMappingFileProvider.class) != null) {
        j2ObjcMappingFileProviders.add(dep.getProvider(J2ObjcMappingFileProvider.class));
      }
      if (dep.getProvider(J2ObjcEntryClassProvider.class) != null) {
        j2ObjcEntryClassProviderBuilder.addTransitive(dep.getProvider(J2ObjcEntryClassProvider.class));
      }
    }
    J2ObjcMappingFileProvider j2ObjcMappingFileProvider=J2ObjcMappingFileProvider.union(j2ObjcMappingFileProviders.build());
    J2ObjcEntryClassProvider j2ObjcEntryClassProvider=j2ObjcEntryClassProviderBuilder.build();
    binariesToLipo.add(intermediateArtifacts.strippedSingleArchitectureBinary());
    new CompilationSupport(ruleContext,childConfig).registerCompileAndArchiveActions(common).registerLinkActions(common.getObjcProvider(),j2ObjcMappingFileProvider,j2ObjcEntryClassProvider,new ExtraLinkArgs(),ImmutableList.<Artifact>of(),DsymOutputType.APP).validateAttributes();
    ruleContext.assertNoErrors();
    objcProviderBuilder.addTransitiveAndPropagate(common.getObjcProvider());
  }
  AppleConfiguration appleConfiguration=ruleContext.getFragment(AppleConfiguration.class);
  new LipoSupport(ruleContext).registerCombineArchitecturesAction(binariesToLipo.build(),ruleIntermediateArtifacts.combinedArchitectureBinary(),appleConfiguration.getMultiArchPlatform(platformType));
  RuleConfiguredTargetBuilder targetBuilder=ObjcRuleClasses.ruleConfiguredTarget(ruleContext,filesToBuild.build());
  objcProviderBuilder.add(MULTI_ARCH_LINKED_BINARIES,ruleIntermediateArtifacts.combinedArchitectureBinary());
  targetBuilder.addProvider(ObjcProvider.class,objcProviderBuilder.build());
  return targetBuilder.build();
}
