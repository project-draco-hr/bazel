{
  return new Runnable(){
    @Override public void run(){
      Map<Artifact,Pair<SkyKey,ActionExecutionValue>> fileToKeyAndValue=new HashMap<>();
      Map<Artifact,Pair<SkyKey,ActionExecutionValue>> treeArtifactsToKeyAndValue=new HashMap<>();
      for (      Pair<SkyKey,ActionExecutionValue> keyAndValue : shard) {
        ActionExecutionValue actionValue=keyAndValue.getSecond();
        if (actionValue == null) {
          dirtyKeys.add(keyAndValue.getFirst());
        }
 else {
          for (          Artifact artifact : actionValue.getAllFileValues().keySet()) {
            if (shouldCheckFile(knownModifiedOutputFiles,artifact)) {
              fileToKeyAndValue.put(artifact,keyAndValue);
            }
          }
          for (          Artifact artifact : actionValue.getAllTreeArtifactValues().keySet()) {
            treeArtifactsToKeyAndValue.put(artifact,keyAndValue);
          }
        }
      }
      List<Artifact> artifacts=ImmutableList.copyOf(fileToKeyAndValue.keySet());
      List<FileStatusWithDigest> stats;
      try {
        stats=batchStatter.batchStat(true,true,Artifact.asPathFragments(artifacts));
      }
 catch (      IOException e) {
        LoggingUtil.logToRemote(Level.WARNING,"Unable to process batch stat",e);
        outputStatJob(dirtyKeys,shard,knownModifiedOutputFiles).run();
        return;
      }
catch (      InterruptedException e) {
        return;
      }
      Preconditions.checkState(artifacts.size() == stats.size(),"artifacts.size() == %s stats.size() == %s",artifacts.size(),stats.size());
      for (int i=0; i < artifacts.size(); i++) {
        Artifact artifact=artifacts.get(i);
        FileStatusWithDigest stat=stats.get(i);
        Pair<SkyKey,ActionExecutionValue> keyAndValue=fileToKeyAndValue.get(artifact);
        ActionExecutionValue actionValue=keyAndValue.getSecond();
        SkyKey key=keyAndValue.getFirst();
        FileValue lastKnownData=actionValue.getAllFileValues().get(artifact);
        try {
          FileValue newData=ActionMetadataHandler.fileValueFromArtifact(artifact,stat,tsgm);
          if (!newData.equals(lastKnownData)) {
            updateIntraBuildModifiedCounter(stat != null ? stat.getLastChangeTime() : -1,lastKnownData.isSymlink(),newData.isSymlink());
            modifiedOutputFilesCounter.getAndIncrement();
            dirtyKeys.add(key);
          }
        }
 catch (        IOException e) {
          modifiedOutputFilesCounter.getAndIncrement();
          dirtyKeys.add(key);
        }
      }
      for (      Map.Entry<Artifact,Pair<SkyKey,ActionExecutionValue>> entry : treeArtifactsToKeyAndValue.entrySet()) {
        Artifact artifact=entry.getKey();
        if (treeArtifactIsDirty(entry.getKey(),entry.getValue().getSecond().getTreeArtifactValue(artifact))) {
          Path path=artifact.getPath();
          try {
            updateIntraBuildModifiedCounter(path.exists() ? path.getLastModifiedTime() : -1,false,path.isSymbolicLink());
          }
 catch (          IOException e) {
          }
          modifiedOutputFilesCounter.getAndIncrement();
          dirtyKeys.add(entry.getValue().getFirst());
        }
      }
    }
  }
;
}
