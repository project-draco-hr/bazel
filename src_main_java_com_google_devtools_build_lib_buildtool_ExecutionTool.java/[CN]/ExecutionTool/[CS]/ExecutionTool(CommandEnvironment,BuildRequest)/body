{
  this.env=env;
  this.runtime=env.getRuntime();
  this.request=request;
  createToolsSymlinks();
  this.actionContextProviders=getActionContextProvidersFromModules(runtime,new FilesetActionContextImpl.Provider(env.getReporter(),env.getWorkspaceName()),new SimpleActionContextProvider(new SymlinkTreeStrategy(env.getOutputService(),env.getBlazeWorkspace().getBinTools())));
  StrategyConverter strategyConverter=new StrategyConverter(actionContextProviders);
  ImmutableList<ActionContextConsumer> actionContextConsumers=getActionContextConsumersFromModules(runtime,new ActionContextConsumer(){
    @Override public Map<String,String> getSpawnActionContexts(){
      return ImmutableMap.of();
    }
    @Override public Multimap<Class<? extends ActionContext>,String> getActionContexts(){
      return ImmutableMultimap.<Class<? extends ActionContext>,String>builder().put(FilesetActionContext.class,"").put(WorkspaceStatusAction.Context.class,"").put(SymlinkTreeActionContext.class,"").build();
    }
  }
);
  for (  ActionContextConsumer consumer : actionContextConsumers) {
    for (    Map.Entry<String,String> entry : consumer.getSpawnActionContexts().entrySet()) {
      SpawnActionContext context=strategyConverter.getStrategy(SpawnActionContext.class,entry.getValue());
      if (context == null) {
        throw makeExceptionForInvalidStrategyValue(entry.getValue(),"spawn",strategyConverter.getValidValues(SpawnActionContext.class));
      }
      spawnStrategyMap.put(entry.getKey(),context);
    }
    for (    Map.Entry<Class<? extends ActionContext>,String> entry : consumer.getActionContexts().entries()) {
      ActionContext context=strategyConverter.getStrategy(entry.getKey(),entry.getValue());
      if (context == null) {
        throw makeExceptionForInvalidStrategyValue(entry.getValue(),strategyConverter.getUserFriendlyName(entry.getKey()),strategyConverter.getValidValues(entry.getKey()));
      }
      strategies.add(context);
    }
  }
  if (request.shouldRunTests()) {
    String testStrategyValue=request.getOptions(ExecutionOptions.class).testStrategy;
    ActionContext context=strategyConverter.getStrategy(TestActionContext.class,testStrategyValue);
    if (context == null) {
      throw makeExceptionForInvalidStrategyValue(testStrategyValue,"test",strategyConverter.getValidValues(TestActionContext.class));
    }
    strategies.add(context);
  }
}
