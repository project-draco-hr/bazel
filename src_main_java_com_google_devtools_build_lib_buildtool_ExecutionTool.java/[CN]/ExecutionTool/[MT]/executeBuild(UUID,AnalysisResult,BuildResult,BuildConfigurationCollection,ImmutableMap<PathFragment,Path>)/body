{
  Stopwatch timer=Stopwatch.createStarted();
  prepare(packageRoots,configurations);
  ActionGraph actionGraph=analysisResult.getActionGraph();
  ImmutableSet<Artifact> additionalArtifacts=analysisResult.getAdditionalArtifactsToBuild();
  if (getWorkspace().getFileSystem().supportsSymbolicLinks()) {
    List<BuildConfiguration> targetConfigurations=configurations.getTargetConfigurations();
    if (targetConfigurations.size() == 1) {
      OutputDirectoryLinksUtils.createOutputDirectoryLinks(runtime.getWorkspaceName(),getWorkspace(),getExecRoot(),runtime.getOutputPath(),getReporter(),targetConfigurations.get(0),request.getSymlinkPrefix());
    }
  }
  OutputService outputService=env.getOutputService();
  ModifiedFileSet modifiedOutputFiles=ModifiedFileSet.EVERYTHING_MODIFIED;
  if (outputService != null) {
    modifiedOutputFiles=outputService.startBuild(buildId,request.getBuildOptions().finalizeActions);
  }
 else {
    startLocalOutputBuild();
  }
  ActionCache actionCache=getActionCache();
  SkyframeExecutor skyframeExecutor=env.getSkyframeExecutor();
  Builder builder=createBuilder(request,executor,actionCache,skyframeExecutor,modifiedOutputFiles);
  Collection<ConfiguredTarget> configuredTargets=buildResult.getActualTargets();
  env.getEventBus().post(new ExecutionStartingEvent(configuredTargets));
  getReporter().handle(Event.progress("Building..."));
  ExplanationHandler explanationHandler=installExplanationHandler(request.getBuildOptions().explanationPath,request.getOptionsDescription());
  Set<ConfiguredTarget> builtTargets=new HashSet<>();
  boolean interrupted=false;
  try {
    Collection<AspectValue> aspects=analysisResult.getAspects();
    Iterable<Artifact> allArtifactsForProviders=Iterables.concat(additionalArtifacts,TopLevelArtifactHelper.getAllArtifactsToBuild(analysisResult.getTargetsToBuild(),analysisResult.getTopLevelContext()).getAllArtifacts(),TopLevelArtifactHelper.getAllArtifactsToBuildFromAspects(aspects,analysisResult.getTopLevelContext()).getAllArtifacts(),TopLevelArtifactHelper.getAllArtifactsToTest(analysisResult.getTargetsToTest()));
    if (request.isRunningInEmacs()) {
      request.getOutErr().printErrLn("blaze: Entering directory `" + getExecRoot() + "/'");
    }
    for (    ActionContextProvider actionContextProvider : actionContextProviders) {
      actionContextProvider.executionPhaseStarting(fileCache,actionGraph,allArtifactsForProviders);
    }
    executor.executionPhaseStarting();
    skyframeExecutor.drainChangedFiles();
    if (request.getViewOptions().discardAnalysisCache) {
      env.getView().clearAnalysisCache(analysisResult.getTargetsToBuild());
      actionGraph=null;
    }
    configureResourceManager(request);
    Profiler.instance().markPhase(ProfilePhase.EXECUTE);
    builder.buildArtifacts(env.getReporter(),additionalArtifacts,analysisResult.getParallelTests(),analysisResult.getExclusiveTests(),analysisResult.getTargetsToBuild(),analysisResult.getAspects(),executor,builtTargets,request.getBuildOptions().explanationPath != null,runtime.getLastExecutionTimeRange());
  }
 catch (  InterruptedException e) {
    interrupted=true;
    throw e;
  }
 finally {
    env.recordLastExecutionTime();
    if (request.isRunningInEmacs()) {
      request.getOutErr().printErrLn("blaze: Leaving directory `" + getExecRoot() + "/'");
    }
    if (!interrupted) {
      getReporter().handle(Event.progress("Building complete."));
    }
    env.getEventBus().post(new ExecutionFinishedEvent(ImmutableMap.<String,Long>of(),0L,skyframeExecutor.getOutputDirtyFilesAndClear(),skyframeExecutor.getModifiedFilesDuringPreviousBuildAndClear()));
    executor.executionPhaseEnding();
    for (    ActionContextProvider actionContextProvider : actionContextProviders) {
      actionContextProvider.executionPhaseEnding();
    }
    Profiler.instance().markPhase(ProfilePhase.FINISH);
    if (!interrupted) {
      saveCaches(actionCache);
    }
    try (AutoProfiler p=AutoProfiler.profiled("Show results",ProfilerTask.INFO)){
      determineSuccessfulTargets(buildResult,configuredTargets,builtTargets,timer);
      BuildResultPrinter buildResultPrinter=new BuildResultPrinter(env);
      buildResultPrinter.showBuildResult(request,buildResult,configuredTargets,analysisResult.getAspects());
      Preconditions.checkNotNull(buildResult.getSuccessfulTargets());
    }
     try (AutoProfiler p=AutoProfiler.profiled("Show artifacts",ProfilerTask.INFO)){
      if (request.getBuildOptions().showArtifacts) {
        BuildResultPrinter buildResultPrinter=new BuildResultPrinter(env);
        buildResultPrinter.showArtifacts(request,configuredTargets,analysisResult.getAspects());
      }
    }
     if (explanationHandler != null) {
      uninstallExplanationHandler(explanationHandler);
    }
    if (env.getOutputService() != null) {
      boolean isBuildSuccessful=buildResult.getSuccessfulTargets().size() == configuredTargets.size();
      env.getOutputService().finalizeBuild(isBuildSuccessful);
    }
  }
}
