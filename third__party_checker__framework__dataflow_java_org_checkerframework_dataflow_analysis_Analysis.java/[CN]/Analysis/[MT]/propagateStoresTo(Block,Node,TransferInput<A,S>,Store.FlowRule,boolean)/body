{
switch (flowRule) {
case EACH_TO_EACH:
    if (currentInput.containsTwoStores()) {
      addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.THEN,addToWorklistAgain);
      addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.ELSE,addToWorklistAgain);
    }
 else {
      addStoreBefore(succ,node,currentInput.getRegularStore(),Store.Kind.BOTH,addToWorklistAgain);
    }
  break;
case THEN_TO_BOTH:
addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.BOTH,addToWorklistAgain);
break;
case ELSE_TO_BOTH:
addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.BOTH,addToWorklistAgain);
break;
case THEN_TO_THEN:
addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.THEN,addToWorklistAgain);
break;
case ELSE_TO_ELSE:
addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.ELSE,addToWorklistAgain);
break;
}
}
