{
  ImmutableList.Builder<TransitiveInfoCollection> directDepsBuilder=ImmutableList.builder();
  for (  PrerequisiteAttr prerequisiteAttr : PREREQUISITE_ATTRS) {
    if (ruleContext.attributes().has(prerequisiteAttr.name,prerequisiteAttr.type)) {
      directDepsBuilder.addAll(ruleContext.getPrerequisites(prerequisiteAttr.name,Mode.TARGET));
    }
  }
  List<TransitiveInfoCollection> directDeps=directDepsBuilder.build();
  NestedSetBuilder<Label> dependenciesBuilder=NestedSetBuilder.stableOrder();
  for (  AndroidStudioInfoFilesProvider depProvider : AnalysisUtils.getProviders(directDeps,AndroidStudioInfoFilesProvider.class)) {
    dependenciesBuilder.addTransitive(depProvider.getExportedDeps());
  }
  for (  TransitiveInfoCollection dep : directDeps) {
    dependenciesBuilder.add(dep.getLabel());
  }
  NestedSet<Label> dependencies=dependenciesBuilder.build();
  JavaExportsProvider javaExportsProvider=base.getProvider(JavaExportsProvider.class);
  if (javaExportsProvider != null) {
    providerBuilder.exportedDepsBuilder().addTransitive(javaExportsProvider.getTransitiveExports());
  }
  if (ruleKind == Kind.ANDROID_LIBRARY) {
    JavaSourceInfoProvider sourceInfoProvider=base.getProvider(JavaSourceInfoProvider.class);
    boolean hasSources=sourceInfoProvider != null && !sourceInfoProvider.getSourceFiles().isEmpty();
    if (!hasSources) {
      for (      TransitiveInfoCollection dep : directDeps) {
        providerBuilder.exportedDepsBuilder().add(dep.getLabel());
      }
    }
  }
  List<? extends TransitiveInfoCollection> runtimeDeps=ImmutableList.of();
  NestedSetBuilder<Label> runtimeDepsBuilder=NestedSetBuilder.stableOrder();
  if (ruleContext.attributes().has("runtime_deps",BuildType.LABEL_LIST)) {
    runtimeDeps=ruleContext.getPrerequisites("runtime_deps",Mode.TARGET);
    for (    TransitiveInfoCollection dep : runtimeDeps) {
      runtimeDepsBuilder.add(dep.getLabel());
    }
  }
  @Nullable TransitiveInfoCollection resources=ruleContext.attributes().has("resources",BuildType.LABEL) ? ruleContext.getPrerequisite("resources",Mode.TARGET) : null;
  ImmutableList.Builder<TransitiveInfoCollection> prerequisitesBuilder=ImmutableList.builder();
  prerequisitesBuilder.addAll(directDeps);
  prerequisitesBuilder.addAll(runtimeDeps);
  if (resources != null) {
    prerequisitesBuilder.add(resources);
  }
  List<TransitiveInfoCollection> prerequisites=prerequisitesBuilder.build();
  for (  AndroidStudioInfoFilesProvider depProvider : AnalysisUtils.getProviders(prerequisites,AndroidStudioInfoFilesProvider.class)) {
    providerBuilder.ideInfoFilesBuilder().addTransitive(depProvider.getIdeInfoFiles());
    providerBuilder.ideInfoTextFilesBuilder().addTransitive(depProvider.getIdeInfoTextFiles());
    providerBuilder.ideResolveFilesBuilder().addTransitive(depProvider.getIdeResolveFiles());
  }
  return new DependenciesResult(dependencies,runtimeDepsBuilder.build(),resources != null ? resources.getLabel() : null);
}
