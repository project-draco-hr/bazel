{
  JavaRuleIdeInfo.Builder builder=JavaRuleIdeInfo.newBuilder();
  JavaRuleOutputJarsProvider outputJarsProvider=base.getProvider(JavaRuleOutputJarsProvider.class);
  if (outputJarsProvider != null) {
{
      LibraryArtifact.Builder jarsBuilder=LibraryArtifact.newBuilder();
      Artifact classJar=outputJarsProvider.getClassJar();
      if (classJar != null) {
        jarsBuilder.setJar(makeArtifactLocation(classJar));
      }
      Artifact srcJar=outputJarsProvider.getSrcJar();
      if (srcJar != null) {
        jarsBuilder.setSourceJar(makeArtifactLocation(srcJar));
      }
      if (jarsBuilder.hasJar() || jarsBuilder.hasSourceJar()) {
        builder.addJars(jarsBuilder.build());
      }
    }
{
      LibraryArtifact.Builder genjarsBuilder=LibraryArtifact.newBuilder();
      Artifact genClassJar=outputJarsProvider.getGenClassJar();
      if (genClassJar != null) {
        genjarsBuilder.setJar(makeArtifactLocation(genClassJar));
      }
      Artifact gensrcJar=outputJarsProvider.getGensrcJar();
      if (gensrcJar != null) {
        genjarsBuilder.setSourceJar(makeArtifactLocation(gensrcJar));
      }
      if (genjarsBuilder.hasJar() || genjarsBuilder.hasSourceJar()) {
        builder.addJars(genjarsBuilder.build());
      }
    }
  }
  return builder.build();
}
