{
  AndroidRuleIdeInfo.Builder builder=AndroidRuleIdeInfo.newBuilder();
  AndroidIdeInfoProvider provider=base.getProvider(AndroidIdeInfoProvider.class);
  if (provider.getSignedApk() != null) {
    builder.setApk(makeArtifactLocation(provider.getSignedApk()));
  }
  if (provider.getManifest() != null) {
    builder.setManifest(makeArtifactLocation(provider.getManifest()));
  }
  if (provider.getGeneratedManifest() != null) {
    builder.setGeneratedManifest(makeArtifactLocation(provider.getGeneratedManifest()));
  }
  for (  Artifact artifact : provider.getApksUnderTest()) {
    builder.addDependencyApk(makeArtifactLocation(artifact));
  }
  for (  SourceDirectory resourceDir : provider.getResourceDirs()) {
    ArtifactLocation artifactLocation=makeArtifactLocation(resourceDir);
    builder.addResources(artifactLocation);
    providerBuilder.transitiveResourcesBuilder().add(resourceDir);
  }
  builder.setJavaPackage(AndroidCommon.getJavaPackage(ruleContext));
  NestedSet<SourceDirectory> transitiveResources=providerBuilder.getTransitiveResources();
  for (  SourceDirectory transitiveResource : transitiveResources) {
    builder.addTransitiveResources(makeArtifactLocation(transitiveResource));
  }
  boolean hasIdlSources=!provider.getIdlSrcs().isEmpty();
  builder.setHasIdlSources(hasIdlSources);
  if (hasIdlSources) {
    LibraryArtifact.Builder jarBuilder=LibraryArtifact.newBuilder();
    Artifact idlClassJar=provider.getIdlClassJar();
    if (idlClassJar != null) {
      jarBuilder.setJar(makeArtifactLocation(idlClassJar));
    }
    Artifact idlSourceJar=provider.getIdlSourceJar();
    if (idlSourceJar != null) {
      jarBuilder.setSourceJar(makeArtifactLocation(idlSourceJar));
    }
    builder.setIdlJar(jarBuilder.build());
  }
  return builder.build();
}
