{
  Aspect.Builder builder=new Builder(NAME);
  AndroidStudioInfoFilesProvider.Builder providerBuilder=new AndroidStudioInfoFilesProvider.Builder();
  NestedSetBuilder<Label> dependenciesBuilder=NestedSetBuilder.stableOrder();
  ImmutableList.Builder<TransitiveInfoCollection> prerequisitesBuilder=ImmutableList.builder();
  if (ruleContext.attributes().has("deps",BuildType.LABEL_LIST)) {
    prerequisitesBuilder.addAll(ruleContext.getPrerequisites("deps",Mode.TARGET));
  }
  if (ruleContext.attributes().has("exports",BuildType.LABEL_LIST)) {
    prerequisitesBuilder.addAll(ruleContext.getPrerequisites("exports",Mode.TARGET));
  }
  List<TransitiveInfoCollection> prerequisites=prerequisitesBuilder.build();
  for (  AndroidStudioInfoFilesProvider depProvider : AnalysisUtils.getProviders(prerequisites,AndroidStudioInfoFilesProvider.class)) {
    providerBuilder.ideBuildFilesBuilder().addTransitive(depProvider.getIdeBuildFiles());
    providerBuilder.transitiveDependenciesBuilder().addTransitive(depProvider.getTransitiveDependencies());
    providerBuilder.transitiveResourcesBuilder().addTransitive(depProvider.getTransitiveResources());
  }
  for (  TransitiveInfoCollection dep : prerequisites) {
    dependenciesBuilder.add(dep.getLabel());
  }
  for (  JavaExportsProvider javaExportsProvider : AnalysisUtils.getProviders(prerequisites,JavaExportsProvider.class)) {
    dependenciesBuilder.addTransitive(javaExportsProvider.getTransitiveExports());
  }
  NestedSet<Label> directDependencies=dependenciesBuilder.build();
  providerBuilder.transitiveDependenciesBuilder().addTransitive(directDependencies);
  RuleIdeInfo.Kind ruleKind=getRuleKind(ruleContext.getRule(),base);
  AndroidStudioInfoFilesProvider provider;
  if (ruleKind != RuleIdeInfo.Kind.UNRECOGNIZED) {
    provider=createIdeBuildArtifact(base,ruleContext,ruleKind,directDependencies,providerBuilder);
  }
 else {
    provider=providerBuilder.build();
  }
  NestedSet<Artifact> ideInfoFiles=provider.getIdeBuildFiles();
  builder.addOutputGroup(IDE_BUILD,ideInfoFiles).addProvider(AndroidStudioInfoFilesProvider.class,provider);
  return builder.build();
}
