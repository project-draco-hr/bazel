{
  Artifact ideInfoFile=ideInfoArtifact(base,ruleContext,ASWB_BUILD_SUFFIX);
  Artifact ideInfoTextFile=ideInfoArtifact(base,ruleContext,ASWB_BUILD_TEXT_SUFFIX);
  providerBuilder.ideInfoFilesBuilder().add(ideInfoFile);
  providerBuilder.ideInfoTextFilesBuilder().add(ideInfoTextFile);
  NestedSetBuilder<Artifact> ideResolveArtifacts=providerBuilder.ideResolveFilesBuilder();
  RuleIdeInfo.Builder outputBuilder=RuleIdeInfo.newBuilder();
  outputBuilder.setLabel(base.getLabel().toString());
  outputBuilder.setBuildFile(ruleContext.getRule().getPackage().getBuildFile().getPath().toString());
  outputBuilder.setKind(ruleKind);
  if (ruleKind == Kind.JAVA_LIBRARY || ruleKind == Kind.JAVA_IMPORT || ruleKind == Kind.JAVA_TEST || ruleKind == Kind.JAVA_BINARY || ruleKind == Kind.ANDROID_LIBRARY || ruleKind == Kind.ANDROID_BINARY || ruleKind == Kind.ANDROID_TEST || ruleKind == Kind.ANDROID_ROBOELECTRIC_TEST) {
    outputBuilder.setJavaRuleIdeInfo(makeJavaRuleIdeInfo(base,ruleContext,ideResolveArtifacts));
  }
  if (ruleKind == Kind.ANDROID_LIBRARY || ruleKind == Kind.ANDROID_BINARY || ruleKind == Kind.ANDROID_TEST) {
    outputBuilder.setAndroidRuleIdeInfo(makeAndroidRuleIdeInfo(ruleContext,base,ideResolveArtifacts,providerBuilder));
  }
  if (ruleKind == Kind.ANDROID_SDK) {
    outputBuilder.setAndroidSdkRuleInfo(makeAndroidSdkRuleInfo(base.getProvider(AndroidSdkProvider.class)));
  }
  AndroidStudioInfoFilesProvider provider=providerBuilder.build();
  outputBuilder.addAllDependencies(transform(directDependencies,LABEL_TO_STRING));
  outputBuilder.addAllTransitiveDependencies(transform(provider.getTransitiveDependencies(),LABEL_TO_STRING));
  outputBuilder.addAllTags(base.getTarget().getAssociatedRule().getRuleTags());
  final RuleIdeInfo ruleIdeInfo=outputBuilder.build();
  ruleContext.registerAction(makeProtoWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoFile));
  ruleContext.registerAction(makeProtoTextWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoTextFile));
  return provider;
}
