{
  CRuleIdeInfo.Builder builder=CRuleIdeInfo.newBuilder();
  Collection<Artifact> sourceFiles=getSources(ruleContext);
  for (  Artifact sourceFile : sourceFiles) {
    builder.addSource(makeArtifactLocation(sourceFile));
  }
  Collection<Artifact> exportedHeaderFiles=getExportedHeaders(ruleContext);
  for (  Artifact exportedHeaderFile : exportedHeaderFiles) {
    builder.addExportedHeader(makeArtifactLocation(exportedHeaderFile));
  }
  builder.addAllRuleInclude(getIncludes(ruleContext));
  builder.addAllRuleDefine(getDefines(ruleContext));
  builder.addAllRuleCopt(getCopts(ruleContext));
  CppCompilationContext cppCompilationContext=base.getProvider(CppCompilationContext.class);
  if (cppCompilationContext != null) {
    ImmutableList<PathFragment> transitiveIncludeDirectories=cppCompilationContext.getIncludeDirs();
    for (    PathFragment pathFragment : transitiveIncludeDirectories) {
      builder.addTransitiveIncludeDirectory(pathFragment.getSafePathString());
    }
    ImmutableList<PathFragment> transitiveQuoteIncludeDirectories=cppCompilationContext.getQuoteIncludeDirs();
    for (    PathFragment pathFragment : transitiveQuoteIncludeDirectories) {
      builder.addTransitiveQuoteIncludeDirectory(pathFragment.getSafePathString());
    }
    ImmutableList<String> transitiveDefines=cppCompilationContext.getDefines();
    for (    String transitiveDefine : transitiveDefines) {
      builder.addTransitiveDefine(transitiveDefine);
    }
    ImmutableList<PathFragment> transitiveSystemIncludeDirectories=cppCompilationContext.getSystemIncludeDirs();
    for (    PathFragment pathFragment : transitiveSystemIncludeDirectories) {
      builder.addTransitiveSystemIncludeDirectory(pathFragment.getSafePathString());
    }
  }
  return builder.build();
}
