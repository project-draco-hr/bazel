{
  CRuleIdeInfo.Builder builder=CRuleIdeInfo.newBuilder();
  Collection<Artifact> sourceFiles=getSources(ruleContext);
  for (  Artifact sourceFile : sourceFiles) {
    builder.addSource(makeArtifactLocation(sourceFile));
  }
  ideResolveArtifacts.addTransitive(cppCompilationContext.getDeclaredIncludeSrcs());
  builder.addAllRuleInclude(getIncludes(ruleContext));
  builder.addAllRuleDefine(getDefines(ruleContext));
  builder.addAllRuleCopt(getCopts(ruleContext));
  ImmutableList<PathFragment> transitiveIncludeDirectories=cppCompilationContext.getIncludeDirs();
  for (  PathFragment pathFragment : transitiveIncludeDirectories) {
    builder.addTransitiveIncludeDirectory(pathFragment.getSafePathString());
  }
  ImmutableList<PathFragment> transitiveQuoteIncludeDirectories=cppCompilationContext.getQuoteIncludeDirs();
  for (  PathFragment pathFragment : transitiveQuoteIncludeDirectories) {
    builder.addTransitiveQuoteIncludeDirectory(pathFragment.getSafePathString());
  }
  ImmutableList<String> transitiveDefines=cppCompilationContext.getDefines();
  for (  String transitiveDefine : transitiveDefines) {
    builder.addTransitiveDefine(transitiveDefine);
  }
  ImmutableList<PathFragment> transitiveSystemIncludeDirectories=cppCompilationContext.getSystemIncludeDirs();
  for (  PathFragment pathFragment : transitiveSystemIncludeDirectories) {
    builder.addTransitiveSystemIncludeDirectory(pathFragment.getSafePathString());
  }
  CcLinkParamsProvider ccLinkParams=base.getProvider(CcLinkParamsProvider.class);
  if (ccLinkParams != null) {
    for (    LinkerInput lib : ccLinkParams.getCcLinkParams(true,false).getLibraries()) {
      ideCompileArtifacts.add(lib.getArtifact());
    }
  }
  androidStudioInfoSemantics.augmentCppRuleInfo(builder,base,ruleContext,cppCompilationContext,ideResolveArtifacts);
  return builder.build();
}
