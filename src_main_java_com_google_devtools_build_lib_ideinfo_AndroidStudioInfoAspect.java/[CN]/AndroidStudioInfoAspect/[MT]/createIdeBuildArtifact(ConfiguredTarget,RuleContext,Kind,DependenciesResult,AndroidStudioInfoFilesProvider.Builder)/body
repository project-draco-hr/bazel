{
  Artifact ideInfoFile=derivedArtifact(base,ruleContext,ASWB_BUILD_SUFFIX);
  Artifact ideInfoTextFile=derivedArtifact(base,ruleContext,ASWB_BUILD_TEXT_SUFFIX);
  providerBuilder.ideInfoFilesBuilder().add(ideInfoFile);
  providerBuilder.ideInfoTextFilesBuilder().add(ideInfoTextFile);
  NestedSetBuilder<Artifact> ideResolveArtifacts=providerBuilder.ideResolveFilesBuilder();
  RuleIdeInfo.Builder outputBuilder=RuleIdeInfo.newBuilder();
  outputBuilder.setLabel(base.getLabel().toString());
  outputBuilder.setBuildFile(ruleContext.getRule().getPackage().getBuildFile().getPath().toString());
  outputBuilder.setBuildFileArtifactLocation(makeArtifactLocation(ruleContext.getRule().getPackage()));
  if (ruleKind != Kind.UNRECOGNIZED) {
    outputBuilder.setKind(ruleKind);
  }
  outputBuilder.setKindString(ruleContext.getRule().getRuleClass());
  JavaRuleOutputJarsProvider outputJarsProvider=base.getProvider(JavaRuleOutputJarsProvider.class);
  if (outputJarsProvider != null && !androidStudioInfoSemantics.suppressJavaRuleInfo(base)) {
    Artifact packageManifest=createPackageManifest(base,ruleContext);
    if (packageManifest != null) {
      providerBuilder.ideInfoFilesBuilder().add(packageManifest);
      ruleContext.registerAction(makePackageManifestAction(ruleContext,packageManifest,getJavaSources(ruleContext)));
    }
    JavaRuleIdeInfo javaRuleIdeInfo=makeJavaRuleIdeInfo(base,ruleContext,outputJarsProvider,ideResolveArtifacts,packageManifest);
    outputBuilder.setJavaRuleIdeInfo(javaRuleIdeInfo);
  }
  if (isCppRule(base)) {
    CppCompilationContext cppCompilationContext=base.getProvider(CppCompilationContext.class);
    if (cppCompilationContext != null) {
      CRuleIdeInfo cRuleIdeInfo=makeCRuleIdeInfo(base,ruleContext,cppCompilationContext,ideResolveArtifacts);
      outputBuilder.setCRuleIdeInfo(cRuleIdeInfo);
    }
  }
  CcToolchainProvider ccToolchainProvider=base.getProvider(CcToolchainProvider.class);
  if (ccToolchainProvider != null) {
    CppConfiguration cppConfiguration=ccToolchainProvider.getCppConfiguration();
    if (cppConfiguration != null) {
      CToolchainIdeInfo cToolchainIdeInfo=makeCToolchainIdeInfo(ruleContext,cppConfiguration);
      if (cToolchainIdeInfo != null) {
        outputBuilder.setCToolchainIdeInfo(cToolchainIdeInfo);
      }
    }
  }
  AndroidIdeInfoProvider androidIdeInfoProvider=base.getProvider(AndroidIdeInfoProvider.class);
  if (androidIdeInfoProvider != null) {
    outputBuilder.setAndroidRuleIdeInfo(makeAndroidRuleIdeInfo(androidIdeInfoProvider,dependenciesResult,ideResolveArtifacts));
  }
  if (TargetUtils.isTestRule(base.getTarget())) {
    TestInfo.Builder builder=TestInfo.newBuilder();
    String attr=NonconfigurableAttributeMapper.of(base.getTarget().getAssociatedRule()).get("size",Type.STRING);
    if (attr != null) {
      builder.setSize(attr);
    }
    outputBuilder.setTestInfo(builder);
  }
  JavaToolchainProvider javaToolchainProvider=base.getProvider(JavaToolchainProvider.class);
  if (javaToolchainProvider != null) {
    outputBuilder.setJavaToolchainIdeInfo(JavaToolchainIdeInfo.newBuilder().setSourceVersion(javaToolchainProvider.getSourceVersion()).setTargetVersion(javaToolchainProvider.getTargetVersion()));
  }
  androidStudioInfoSemantics.augmentRuleInfo(outputBuilder,base,ruleContext,ideResolveArtifacts);
  AndroidStudioInfoFilesProvider provider=providerBuilder.build();
  outputBuilder.addAllDependencies(transform(dependenciesResult.deps,LABEL_TO_STRING));
  outputBuilder.addAllRuntimeDeps(transform(dependenciesResult.runtimeDeps,LABEL_TO_STRING));
  outputBuilder.addAllTags(base.getTarget().getAssociatedRule().getRuleTags());
  final RuleIdeInfo ruleIdeInfo=outputBuilder.build();
  ruleContext.registerAction(makeProtoWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoFile));
  ruleContext.registerAction(makeProtoTextWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoTextFile));
  return provider;
}
