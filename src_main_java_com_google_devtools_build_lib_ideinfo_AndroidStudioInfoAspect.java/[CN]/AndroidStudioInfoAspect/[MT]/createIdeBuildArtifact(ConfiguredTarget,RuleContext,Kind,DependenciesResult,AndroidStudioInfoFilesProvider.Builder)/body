{
  Artifact ideInfoFile=derivedArtifact(base,ruleContext,ASWB_BUILD_SUFFIX);
  Artifact ideInfoTextFile=derivedArtifact(base,ruleContext,ASWB_BUILD_TEXT_SUFFIX);
  Artifact packageManifest=createPackageManifest(base,ruleContext,ruleKind);
  providerBuilder.ideInfoFilesBuilder().add(ideInfoFile);
  providerBuilder.ideInfoTextFilesBuilder().add(ideInfoTextFile);
  if (packageManifest != null) {
    providerBuilder.ideInfoFilesBuilder().add(packageManifest);
  }
  NestedSetBuilder<Artifact> ideResolveArtifacts=providerBuilder.ideResolveFilesBuilder();
  RuleIdeInfo.Builder outputBuilder=RuleIdeInfo.newBuilder();
  outputBuilder.setLabel(base.getLabel().toString());
  outputBuilder.setBuildFile(ruleContext.getRule().getPackage().getBuildFile().getPath().toString());
  outputBuilder.setBuildFileArtifactLocation(makeArtifactLocation(ruleContext.getRule().getPackage()));
  outputBuilder.setKind(ruleKind);
  if (ruleKind == Kind.JAVA_LIBRARY || ruleKind == Kind.JAVA_IMPORT || ruleKind == Kind.JAVA_TEST || ruleKind == Kind.JAVA_BINARY || ruleKind == Kind.ANDROID_LIBRARY || ruleKind == Kind.ANDROID_BINARY || ruleKind == Kind.ANDROID_TEST || ruleKind == Kind.ANDROID_ROBOELECTRIC_TEST || ruleKind == Kind.PROTO_LIBRARY || ruleKind == Kind.JAVA_PLUGIN) {
    JavaRuleIdeInfo javaRuleIdeInfo=makeJavaRuleIdeInfo(base,ruleContext,ideResolveArtifacts,packageManifest);
    outputBuilder.setJavaRuleIdeInfo(javaRuleIdeInfo);
  }
  if (ruleKind == Kind.CC_BINARY || ruleKind == Kind.CC_LIBRARY || ruleKind == Kind.CC_TEST || ruleKind == Kind.CC_INC_LIBRARY) {
    CRuleIdeInfo cRuleIdeInfo=makeCRuleIdeInfo(base,ruleContext);
    outputBuilder.setCRuleIdeInfo(cRuleIdeInfo);
  }
  if (ruleKind == Kind.CC_TOOLCHAIN) {
    CToolchainIdeInfo cToolchainIdeInfo=makeCToolchainIdeInfo(base,ruleContext);
    if (cToolchainIdeInfo != null) {
      outputBuilder.setCToolchainIdeInfo(cToolchainIdeInfo);
    }
  }
  if (ruleKind == Kind.ANDROID_LIBRARY || ruleKind == Kind.ANDROID_BINARY || ruleKind == Kind.ANDROID_TEST || ruleKind == Kind.ANDROID_RESOURCES) {
    outputBuilder.setAndroidRuleIdeInfo(makeAndroidRuleIdeInfo(base,dependenciesResult,ideResolveArtifacts));
  }
  AndroidStudioInfoFilesProvider provider=providerBuilder.build();
  outputBuilder.addAllDependencies(transform(dependenciesResult.deps,LABEL_TO_STRING));
  outputBuilder.addAllRuntimeDeps(transform(dependenciesResult.runtimeDeps,LABEL_TO_STRING));
  outputBuilder.addAllTags(base.getTarget().getAssociatedRule().getRuleTags());
  final RuleIdeInfo ruleIdeInfo=outputBuilder.build();
  ruleContext.registerAction(makeProtoWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoFile));
  ruleContext.registerAction(makeProtoTextWriteAction(ruleContext.getActionOwner(),ruleIdeInfo,ideInfoTextFile));
  if (packageManifest != null) {
    ruleContext.registerAction(makePackageManifestAction(ruleContext,packageManifest,getJavaSources(ruleContext)));
  }
  return provider;
}
