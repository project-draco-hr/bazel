{
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  CompilationArtifacts compilationArtifacts=CompilationSupport.compilationArtifacts(ruleContext);
  ObjcCommon.Builder builder=new ObjcCommon.Builder(ruleContext).setCompilationAttributes(new CompilationAttributes(ruleContext)).setResourceAttributes(new ResourceAttributes(ruleContext)).setCompilationArtifacts(compilationArtifacts).addDefines(ruleContext.getTokenizedStringListAttr("defines")).addDepObjcProviders(ruleContext.getPrerequisites("deps",Mode.TARGET,ObjcProvider.class)).addDepCcHeaderProviders(ruleContext.getPrerequisites("deps",Mode.TARGET,CppCompilationContext.class)).addDepCcLinkProviders(ruleContext).addDepObjcProviders(ruleContext.getPrerequisites("bundles",Mode.TARGET,ObjcProvider.class)).addNonPropagatedDepObjcProviders(ruleContext.getPrerequisites("non_propagated_deps",Mode.TARGET,ObjcProvider.class)).setIntermediateArtifacts(intermediateArtifacts).setAlwayslink(false).setHasModuleMap().addExtraImportLibraries(ObjcRuleClasses.j2ObjcLibraries(ruleContext)).setLinkedBinary(intermediateArtifacts.strippedSingleArchitectureBinary());
  if (ObjcRuleClasses.objcConfiguration(ruleContext).generateDebugSymbols()) {
    builder.setBreakpadFile(intermediateArtifacts.breakpadSym());
  }
  return builder.build();
}
