{
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  Optional<ObjcProvider> protosObjcProvider=Optional.absent();
  Optional<XcodeProvider> protosXcodeProvider=Optional.absent();
  if (objcConfiguration.experimentalAutoTopLevelUnionObjCProtos()) {
    ProtobufSupport protoSupport=new ProtobufSupport(ruleContext).registerGenerationActions().registerCompilationActions();
    protosObjcProvider=Optional.of(protoSupport.getObjcProvider());
    protosXcodeProvider=Optional.of(protoSupport.getXcodeProvider());
  }
  ObjcCommon common=common(ruleContext,protosObjcProvider);
  ObjcProvider objcProvider=common.getObjcProvider();
  assertLibraryOrSources(objcProvider,ruleContext);
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder().addPropagatedDependencies(protosXcodeProvider.asSet());
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.<Artifact>stableOrder().add(intermediateArtifacts.strippedSingleArchitectureBinary());
  new ResourceSupport(ruleContext).validateAttributes().addXcodeSettings(xcodeProviderBuilder);
  ruleContext.assertNoErrors();
  J2ObjcMappingFileProvider j2ObjcMappingFileProvider=J2ObjcMappingFileProvider.union(ruleContext.getPrerequisites("deps",Mode.TARGET,J2ObjcMappingFileProvider.class));
  J2ObjcEntryClassProvider j2ObjcEntryClassProvider=new J2ObjcEntryClassProvider.Builder().addTransitive(ruleContext.getPrerequisites("deps",Mode.TARGET,J2ObjcEntryClassProvider.class)).build();
  CompilationSupport compilationSupport=new CompilationSupport(ruleContext).registerCompileAndArchiveActions(common).registerFullyLinkAction(common.getObjcProvider()).addXcodeSettings(xcodeProviderBuilder,common).registerLinkActions(objcProvider,j2ObjcMappingFileProvider,j2ObjcEntryClassProvider,getExtraLinkArgs(ruleContext),ImmutableList.<Artifact>of(),DsymOutputType.APP).validateAttributes();
  Optional<XcTestAppProvider> xcTestAppProvider;
  Optional<RunfilesSupport> maybeRunfilesSupport=Optional.absent();
switch (hasReleaseBundlingSupport) {
case YES:
    AppleConfiguration appleConfiguration=ruleContext.getFragment(AppleConfiguration.class);
  ReleaseBundlingSupport releaseBundlingSupport=new ReleaseBundlingSupport(ruleContext,objcProvider,LinkedBinary.LOCAL_AND_DEPENDENCIES,ReleaseBundlingSupport.APP_BUNDLE_DIR_FORMAT,objcConfiguration.getMinimumOs());
releaseBundlingSupport.registerActions(DsymOutputType.APP).addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild,DsymOutputType.APP).validateResources().validateAttributes();
xcTestAppProvider=Optional.of(releaseBundlingSupport.xcTestAppProvider());
if (appleConfiguration.getMultiArchPlatform(PlatformType.IOS) == Platform.IOS_SIMULATOR) {
Artifact runnerScript=intermediateArtifacts.runnerScript();
Artifact ipaFile=ruleContext.getImplicitOutputArtifact(ReleaseBundlingSupport.IPA);
releaseBundlingSupport.registerGenerateRunnerScriptAction(runnerScript,ipaFile);
maybeRunfilesSupport=Optional.of(releaseBundlingSupport.runfilesSupport(runnerScript));
}
break;
case NO:
xcTestAppProvider=Optional.absent();
break;
default :
throw new AssertionError();
}
XcodeSupport xcodeSupport=new XcodeSupport(ruleContext).addXcodeSettings(xcodeProviderBuilder,objcProvider,productType).addDependencies(xcodeProviderBuilder,new Attribute("bundles",Mode.TARGET)).addDependencies(xcodeProviderBuilder,new Attribute("deps",Mode.TARGET)).addNonPropagatedDependencies(xcodeProviderBuilder,new Attribute("non_propagated_deps",Mode.TARGET)).addFilesToBuild(filesToBuild);
if (productType != XcodeProductType.LIBRARY_STATIC) {
xcodeSupport.generateCompanionLibXcodeTarget(xcodeProviderBuilder);
}
XcodeProvider xcodeProvider=xcodeProviderBuilder.build();
xcodeSupport.registerActions(xcodeProvider);
RuleConfiguredTargetBuilder targetBuilder=ObjcRuleClasses.ruleConfiguredTarget(ruleContext,filesToBuild.build()).addProvider(XcodeProvider.class,xcodeProvider).addProvider(ObjcProvider.class,objcProvider).addProvider(InstrumentedFilesProvider.class,compilationSupport.getInstrumentedFilesProvider(common));
if (xcTestAppProvider.isPresent()) {
targetBuilder.addProvider(XcTestAppProvider.class,xcTestAppProvider.get());
}
if (maybeRunfilesSupport.isPresent()) {
RunfilesSupport runfilesSupport=maybeRunfilesSupport.get();
targetBuilder.setRunfilesSupport(runfilesSupport,runfilesSupport.getExecutable());
}
configureTarget(targetBuilder,ruleContext);
return targetBuilder.build();
}
