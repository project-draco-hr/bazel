{
  ObjcCommon common=common(ruleContext);
  OptionsProvider optionsProvider=optionsProvider(ruleContext);
  ObjcProvider objcProvider=common.getObjcProvider();
  if (!hasLibraryOrSources(objcProvider)) {
    ruleContext.ruleError(REQUIRES_AT_LEAST_ONE_LIBRARY_OR_SOURCE_FILE);
    return null;
  }
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.<Artifact>stableOrder().add(ObjcRuleClasses.intermediateArtifacts(ruleContext).singleArchitectureBinary());
  new CompilationSupport(ruleContext).registerJ2ObjcCompileAndArchiveActions(optionsProvider,objcProvider).registerCompileAndArchiveActions(common,optionsProvider).addXcodeSettings(xcodeProviderBuilder,common,optionsProvider).registerLinkActions(objcProvider,extraLinkArgs,new ExtraLinkInputs()).validateAttributes();
  Optional<XcTestAppProvider> xcTestAppProvider;
switch (hasReleaseBundlingSupport) {
case YES:
    ReleaseBundlingSupport releaseBundlingSupport=new ReleaseBundlingSupport(ruleContext,objcProvider,optionsProvider,LinkedBinary.LOCAL_AND_DEPENDENCIES,"Payload/%s.app");
  releaseBundlingSupport.registerActions().addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild).validateAttributes();
xcTestAppProvider=Optional.of(releaseBundlingSupport.xcTestAppProvider());
break;
case NO:
xcTestAppProvider=Optional.absent();
break;
default :
throw new AssertionError();
}
new ResourceSupport(ruleContext).registerActions(common.getStoryboards()).validateAttributes().addXcodeSettings(xcodeProviderBuilder);
XcodeSupport xcodeSupport=new XcodeSupport(ruleContext).addXcodeSettings(xcodeProviderBuilder,objcProvider,productType).addDependencies(xcodeProviderBuilder,"bundles").addDependencies(xcodeProviderBuilder,"deps").addDependencies(xcodeProviderBuilder,"non_propagated_deps").addFilesToBuild(filesToBuild);
XcodeProvider xcodeProvider=xcodeProviderBuilder.build();
xcodeSupport.registerActions(xcodeProvider);
return common.configuredTarget(filesToBuild.build(),Optional.of(xcodeProvider),Optional.of(objcProvider),xcTestAppProvider,Optional.<J2ObjcSrcsProvider>absent());
}
