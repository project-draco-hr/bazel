{
  ObjcCommon common=common(ruleContext);
  OptionsProvider optionsProvider=optionsProvider(ruleContext);
  ObjcProvider objcProvider=common.getObjcProvider();
  if (!hasLibraryOrSources(objcProvider)) {
    ruleContext.ruleError(REQUIRES_AT_LEAST_ONE_LIBRARY_OR_SOURCE_FILE);
    return null;
  }
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.<Artifact>stableOrder().add(intermediateArtifacts.singleArchitectureBinary());
  new CompilationSupport(ruleContext).registerJ2ObjcCompileAndArchiveActions(optionsProvider,objcProvider).registerCompileAndArchiveActions(common,optionsProvider).addXcodeSettings(xcodeProviderBuilder,common,optionsProvider).registerLinkActions(objcProvider,extraLinkArgs,ImmutableList.<Artifact>of()).validateAttributes();
  Optional<XcTestAppProvider> xcTestAppProvider;
  Optional<RunfilesSupport> maybeRunfilesSupport=Optional.absent();
switch (hasReleaseBundlingSupport) {
case YES:
    ReleaseBundlingSupport releaseBundlingSupport=new ReleaseBundlingSupport(ruleContext,objcProvider,optionsProvider,LinkedBinary.LOCAL_AND_DEPENDENCIES,ReleaseBundlingSupport.APP_BUNDLE_DIR_FORMAT);
  releaseBundlingSupport.registerActions().addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild).validateResources().validateAttributes();
ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
xcTestAppProvider=Optional.of(releaseBundlingSupport.xcTestAppProvider());
if (objcConfiguration.getBundlingPlatform() == Platform.SIMULATOR) {
Artifact runnerScript=intermediateArtifacts.runnerScript();
Artifact ipaFile=ruleContext.getImplicitOutputArtifact(ReleaseBundlingSupport.IPA);
releaseBundlingSupport.registerGenerateRunnerScriptAction(runnerScript,ipaFile);
maybeRunfilesSupport=Optional.of(releaseBundlingSupport.runfilesSupport(runnerScript));
}
break;
case NO:
xcTestAppProvider=Optional.absent();
break;
default :
throw new AssertionError();
}
new ResourceSupport(ruleContext).validateAttributes().addXcodeSettings(xcodeProviderBuilder);
XcodeSupport xcodeSupport=new XcodeSupport(ruleContext).addXcodeSettings(xcodeProviderBuilder,objcProvider,productType).addDependencies(xcodeProviderBuilder,new Attribute("bundles",Mode.TARGET)).addDependencies(xcodeProviderBuilder,new Attribute("deps",Mode.TARGET)).addNonPropagatedDependencies(xcodeProviderBuilder,new Attribute("non_propagated_deps",Mode.TARGET)).addFilesToBuild(filesToBuild);
if (productType != XcodeProductType.LIBRARY_STATIC) {
xcodeSupport.generateCompanionLibXcodeTarget(xcodeProviderBuilder);
}
XcodeProvider xcodeProvider=xcodeProviderBuilder.build();
xcodeSupport.registerActions(xcodeProvider);
RuleConfiguredTargetBuilder target=common.configuredTargetBuilder(filesToBuild.build(),Optional.of(xcodeProvider),Optional.of(objcProvider),xcTestAppProvider,Optional.<J2ObjcSrcsProvider>absent());
for (RunfilesSupport runfilesSupport : maybeRunfilesSupport.asSet()) {
target.setRunfilesSupport(runfilesSupport,runfilesSupport.getExecutable());
}
return target.build();
}
