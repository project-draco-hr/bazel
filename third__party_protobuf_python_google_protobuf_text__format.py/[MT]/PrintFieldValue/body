def PrintFieldValue(field, value, out, indent=0, as_utf8=False, as_one_line=False, pointy_brackets=False, use_index_order=False, float_format=None):
    'Print a single field value (not including name).  For repeated fields,\n  the value should be a single element.'
    if pointy_brackets:
        openb = '<'
        closeb = '>'
    else:
        openb = '{'
        closeb = '}'
    if (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE):
        if as_one_line:
            out.write((' %s ' % openb))
            PrintMessage(value, out, indent, as_utf8, as_one_line, pointy_brackets=pointy_brackets, use_index_order=use_index_order, float_format=float_format)
            out.write(closeb)
        else:
            out.write((' %s\n' % openb))
            PrintMessage(value, out, (indent + 2), as_utf8, as_one_line, pointy_brackets=pointy_brackets, use_index_order=use_index_order, float_format=float_format)
            out.write(((' ' * indent) + closeb))
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_ENUM):
        enum_value = field.enum_type.values_by_number.get(value, None)
        if (enum_value is not None):
            out.write(enum_value.name)
        else:
            out.write(str(value))
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_STRING):
        out.write('"')
        if isinstance(value, six.text_type):
            out_value = value.encode('utf-8')
        else:
            out_value = value
        if (field.type == descriptor.FieldDescriptor.TYPE_BYTES):
            out_as_utf8 = False
        else:
            out_as_utf8 = as_utf8
        out.write(text_encoding.CEscape(out_value, out_as_utf8))
        out.write('"')
    elif (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_BOOL):
        if value:
            out.write('true')
        else:
            out.write('false')
    elif ((field.cpp_type in _FLOAT_TYPES) and (float_format is not None)):
        out.write('{1:{0}}'.format(float_format, value))
    else:
        out.write(str(value))
