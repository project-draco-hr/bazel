{
  assertEquals("@foo",RepositoryName.create("@foo").toString());
  assertThat(RepositoryName.create("").toString()).isEmpty();
  assertEquals("@foo/bar",RepositoryName.create("@foo/bar").toString());
  assertEquals("@foo.bar",RepositoryName.create("@foo.bar").toString());
  try {
    RepositoryName.create("@");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("empty workspace name");
  }
  try {
    RepositoryName.create("@abc/");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("workspace names cannot start nor end with '/'");
  }
  try {
    RepositoryName.create("@/abc");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("workspace names cannot start nor end with '/'");
  }
  try {
    RepositoryName.create("@a//////b");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("workspace names cannot contain multiple '/'s in a row");
  }
  try {
    RepositoryName.create("@foo@");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("workspace names may contain only A-Z, a-z, 0-9, '-', '_', '.', and '/'");
  }
  try {
    RepositoryName.create("x");
    fail();
  }
 catch (  TargetParsingException expected) {
    assertThat(expected.getMessage()).contains("workspace name must start with '@'");
  }
}
