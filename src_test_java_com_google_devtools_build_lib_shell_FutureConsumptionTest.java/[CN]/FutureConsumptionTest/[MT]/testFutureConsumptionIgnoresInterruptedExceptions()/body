{
  OutErrConsumers outErr=Consumers.createStreamingConsumers(DEV_NULL,DEV_NULL);
  final AtomicBoolean inputFinished=new AtomicBoolean(false);
  InputStream outInput=new InputStream(){
    @Override public int read(){
      if (inputFinished.get()) {
        return -1;
      }
      return 0;
    }
  }
;
  ByteArrayInputStream errInput=new ByteArrayInputStream(new byte[0]);
  outErr.registerInputs(outInput,errInput,false);
  final Thread testThread=Thread.currentThread();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      testThread.interrupt();
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      inputFinished.set(true);
    }
  }
.start();
  outErr.waitForCompletion();
  assertTrue(Thread.interrupted());
}
