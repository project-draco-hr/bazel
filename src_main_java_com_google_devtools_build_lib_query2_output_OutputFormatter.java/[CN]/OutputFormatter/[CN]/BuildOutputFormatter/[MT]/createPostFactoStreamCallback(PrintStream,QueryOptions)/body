{
  return new OutputFormatterCallback<Target>(){
    private final Set<Label> printed=CompactHashSet.create();
    private void outputRule(    Rule rule,    PrintStream out){
      final String lineTerm=options.getLineTerminator();
      out.printf("# %s%s",rule.getLocation(),lineTerm);
      out.printf("%s(%s",rule.getRuleClass(),lineTerm);
      out.printf("  name = \"%s\",%s",rule.getName(),lineTerm);
      for (      Attribute attr : rule.getAttributes()) {
        Pair<Iterable<Object>,AttributeValueSource> values=getPossibleAttributeValuesAndSources(rule,attr);
        if (Iterables.size(values.first) != 1) {
          continue;
        }
        if (values.second != AttributeValueSource.RULE) {
          continue;
        }
        Object value=Iterables.getOnlyElement(values.first);
        out.printf("  %s = ",attr.getPublicName());
        if (value instanceof Label) {
          value=((Label)value).getDefaultCanonicalForm();
        }
 else         if (value instanceof License) {
          List<String> licenseTypes=new ArrayList<String>();
          for (          License.LicenseType licenseType : ((License)value).getLicenseTypes()) {
            licenseTypes.add(licenseType.toString().toLowerCase());
          }
          value=licenseTypes;
        }
 else         if (value instanceof List<?> && EvalUtils.isImmutable(value)) {
          value=new ArrayList<>((List<?>)value);
        }
        StringBuilder builder=new StringBuilder();
        Printer.write(builder,value);
        out.print(builder);
        out.printf(",%s",lineTerm);
      }
      out.printf(")\n%s",lineTerm);
    }
    @Override protected void processOutput(    Iterable<Target> partialResult) throws IOException, InterruptedException {
      for (      Target target : partialResult) {
        Rule rule=target.getAssociatedRule();
        if (rule == null || printed.contains(rule.getLabel())) {
          continue;
        }
        outputRule(rule,out);
        printed.add(rule.getLabel());
      }
    }
  }
;
}
