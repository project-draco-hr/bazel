{
  return builder.requiresConfigurationFragments(JavaConfiguration.class).add(attr("source_version",STRING).mandatory()).add(attr("target_version",STRING).mandatory()).add(attr("bootclasspath",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE)).add(attr("extclasspath",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE)).add(attr("encoding",STRING).mandatory()).add(attr("xlint",STRING_LIST).value(ImmutableList.<String>of())).add(attr("misc",STRING_LIST).value(ImmutableList.<String>of())).add(attr("jvm_opts",STRING_LIST).value(ImmutableList.<String>of("-client"))).add(attr("javac",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE)).add(attr("javabuilder",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE).exec()).add(attr("singlejar",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE).exec()).add(attr("genclass",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE).exec()).add(attr("ijar",LABEL_LIST).mandatory().cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE).exec()).add(attr("header_compiler",LABEL_LIST).cfg(HOST).allowedFileTypes(FileTypeSet.ANY_FILE).exec()).add(attr("compatible_javacopts",STRING_LIST_DICT).undocumented("internal").value(ImmutableMap.<String,List<String>>of())).build();
}
