{
  Optional<String> prefix=descriptor.prefix();
  boolean foundPrefix=false;
  try (InputStream decompressorStream=getDecompressorStream(descriptor)){
    TarArchiveInputStream tarStream=new TarArchiveInputStream(decompressorStream);
    TarArchiveEntry entry;
    while ((entry=tarStream.getNextTarEntry()) != null) {
      StripPrefixedPath entryPath=StripPrefixedPath.maybeDeprefix(entry.getName(),prefix);
      foundPrefix=foundPrefix || entryPath.foundPrefix();
      if (entryPath.skip()) {
        continue;
      }
      Path filename=descriptor.repositoryPath().getRelative(entryPath.getPathFragment());
      FileSystemUtils.createDirectoryAndParents(filename.getParentDirectory());
      if (entry.isDirectory()) {
        FileSystemUtils.createDirectoryAndParents(filename);
      }
 else {
        if (entry.isSymbolicLink() || entry.isLink()) {
          StripPrefixedPath linkPath=StripPrefixedPath.maybeDeprefix(entry.getLinkName(),prefix);
          PathFragment linkName=linkPath.getPathFragment();
          if (linkName.isAbsolute()) {
            linkName=linkName.relativeTo(PathFragment.ROOT_DIR);
            linkName=descriptor.repositoryPath().getRelative(linkName).asFragment();
          }
          if (entry.isSymbolicLink()) {
            FileSystemUtils.ensureSymbolicLink(filename,linkName);
          }
 else {
            FileSystemUtils.createHardLink(filename,descriptor.repositoryPath().getRelative(linkName));
          }
        }
 else {
          Files.copy(tarStream,filename.getPathFile().toPath(),StandardCopyOption.REPLACE_EXISTING);
          filename.chmod(entry.getMode());
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  if (prefix.isPresent() && !foundPrefix) {
    throw new RepositoryFunctionException(new IOException("Prefix " + prefix.get() + " was given, but not found in the archive"),Transience.PERSISTENT);
  }
  return descriptor.repositoryPath();
}
