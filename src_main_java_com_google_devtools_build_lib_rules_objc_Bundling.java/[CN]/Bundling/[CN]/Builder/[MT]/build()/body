{
  Preconditions.checkNotNull(intermediateArtifacts,"intermediateArtifacts");
  Optional<Artifact> actoolzipOutput=Optional.absent();
  if (!Iterables.isEmpty(objcProvider.get(ASSET_CATALOG))) {
    actoolzipOutput=Optional.of(intermediateArtifacts.actoolzipOutput());
  }
  Optional<Artifact> combinedArchitectureBinary=Optional.absent();
  if (!Iterables.isEmpty(objcProvider.get(LIBRARY)) || !Iterables.isEmpty(objcProvider.get(IMPORTED_LIBRARY))) {
    combinedArchitectureBinary=Optional.of(intermediateArtifacts.combinedArchitectureBinary());
  }
  NestedSet<Artifact> mergeZips=NestedSetBuilder.<Artifact>stableOrder().addAll(actoolzipOutput.asSet()).addTransitive(objcProvider.get(MERGE_ZIP)).build();
  NestedSet<Artifact> bundleContentArtifacts=NestedSetBuilder.<Artifact>stableOrder().addTransitive(nestedBundleContentArtifacts(objcProvider.get(NESTED_BUNDLE))).addAll(combinedArchitectureBinary.asSet()).addAll(infoplistMerging.getPlistWithEverything().asSet()).addTransitive(mergeZips).addAll(BundleableFile.toArtifacts(extraBundleFiles)).addAll(BundleableFile.toArtifacts(objcProvider.get(BUNDLE_FILE))).addAll(Xcdatamodel.outputZips(objcProvider.get(XCDATAMODEL))).build();
  return new Bundling(name,bundleDirFormat,combinedArchitectureBinary,extraBundleFiles,objcProvider,infoplistMerging,actoolzipOutput,bundleContentArtifacts,mergeZips,primaryBundleId,fallbackBundleId);
}
