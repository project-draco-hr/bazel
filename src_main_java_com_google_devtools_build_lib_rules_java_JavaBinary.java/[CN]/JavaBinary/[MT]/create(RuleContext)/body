{
  final JavaCommon common=new JavaCommon(ruleContext,semantics);
  DeployArchiveBuilder deployArchiveBuilder=new DeployArchiveBuilder(semantics,ruleContext);
  Runfiles.Builder runfilesBuilder=new Runfiles.Builder(ruleContext.getWorkspaceName());
  List<String> jvmFlags=new ArrayList<>();
  common.initializeJavacOpts();
  JavaTargetAttributes.Builder attributesBuilder=common.initCommon();
  attributesBuilder.addClassPathResources(ruleContext.getPrerequisiteArtifacts("classpath_resources",Mode.TARGET).list());
  List<String> userJvmFlags=common.getJvmFlags();
  ruleContext.checkSrcsSamePackage(true);
  boolean createExecutable=ruleContext.attributes().get("create_executable",Type.BOOLEAN);
  List<TransitiveInfoCollection> deps=Lists.newArrayList(common.targetsTreatedAsDeps(ClasspathType.COMPILE_ONLY));
  semantics.checkRule(ruleContext,common);
  String mainClass=semantics.getMainClass(ruleContext,common);
  String originalMainClass=mainClass;
  if (ruleContext.hasErrors()) {
    return null;
  }
  JavaCompilationHelper helper=new JavaCompilationHelper(ruleContext,semantics,common.getJavacOpts(),attributesBuilder);
  helper.addLibrariesToAttributes(deps);
  helper.addProvidersToAttributes(common.compilationArgsFromSources(),false);
  attributesBuilder.addNativeLibraries(collectNativeLibraries(common.targetsTreatedAsDeps(ClasspathType.BOTH)));
  if (ruleContext.getRule().isAttrDefined("deploy_env",BuildType.LABEL_LIST)) {
    for (    JavaRuntimeClasspathProvider envTarget : ruleContext.getPrerequisites("deploy_env",Mode.TARGET,JavaRuntimeClasspathProvider.class)) {
      attributesBuilder.addExcludedArtifacts(envTarget.getRuntimeClasspath());
    }
  }
  Artifact srcJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_SOURCE_JAR);
  Artifact classJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_CLASS_JAR);
  ImmutableList<Artifact> srcJars=ImmutableList.of(srcJar);
  CppConfiguration cppConfiguration=ruleContext.getConfiguration().getFragment(CppConfiguration.class);
  boolean stripAsDefault=cppConfiguration.useFission();
  Artifact launcher=semantics.getLauncher(ruleContext,common,deployArchiveBuilder,runfilesBuilder,jvmFlags,attributesBuilder,stripAsDefault);
  DeployArchiveBuilder unstrippedDeployArchiveBuilder=null;
  Artifact unstrippedLauncher=null;
  if (stripAsDefault) {
    unstrippedDeployArchiveBuilder=new DeployArchiveBuilder(semantics,ruleContext);
    unstrippedLauncher=semantics.getLauncher(ruleContext,common,unstrippedDeployArchiveBuilder,runfilesBuilder,jvmFlags,attributesBuilder,false);
  }
  JavaCompilationArtifacts.Builder javaArtifactsBuilder=new JavaCompilationArtifacts.Builder();
  Artifact instrumentationMetadata=helper.createInstrumentationMetadata(classJar,javaArtifactsBuilder);
  NestedSetBuilder<Artifact> filesBuilder=NestedSetBuilder.stableOrder();
  Artifact executable=null;
  if (createExecutable) {
    executable=ruleContext.createOutputArtifact();
    filesBuilder.add(classJar).add(executable);
    if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
      mainClass=semantics.addCoverageSupport(helper,attributesBuilder,executable,instrumentationMetadata,javaArtifactsBuilder,mainClass);
    }
  }
 else {
    filesBuilder.add(classJar);
  }
  JavaTargetAttributes attributes=helper.getAttributes();
  List<Artifact> nativeLibraries=attributes.getNativeLibraries();
  if (!nativeLibraries.isEmpty()) {
    jvmFlags.add("-Djava.library.path=" + JavaCommon.javaLibraryPath(nativeLibraries,ruleContext.getRule().getWorkspaceName()));
  }
  JavaConfiguration javaConfig=ruleContext.getFragment(JavaConfiguration.class);
  if (attributes.hasMessages()) {
    helper.addTranslations(semantics.translate(ruleContext,javaConfig,attributes.getMessages()));
  }
  if (attributes.hasSourceFiles() || attributes.hasSourceJars() || attributes.hasResources()|| attributes.hasClassPathResources()) {
    javaArtifactsBuilder.addRuntimeJar(classJar);
  }
  javaArtifactsBuilder.addRuntimeJars(attributes.getJarFiles());
  Artifact outputDepsProto=helper.createOutputDepsProtoArtifact(classJar,javaArtifactsBuilder);
  common.setJavaCompilationArtifacts(javaArtifactsBuilder.build());
  Artifact manifestProtoOutput=helper.createManifestProtoOutput(classJar);
  Artifact genSourceJar=null;
  Artifact genClassJar=null;
  if (helper.usesAnnotationProcessing()) {
    genClassJar=helper.createGenJar(classJar);
    genSourceJar=helper.createGensrcJar(classJar);
    helper.createGenJarAction(classJar,manifestProtoOutput,genClassJar);
  }
  helper.createCompileAction(classJar,manifestProtoOutput,genSourceJar,outputDepsProto,instrumentationMetadata);
  helper.createSourceJarAction(srcJar,genSourceJar);
  common.setClassPathFragment(new ClasspathConfiguredFragment(common.getJavaCompilationArtifacts(),attributes,false));
  Iterable<Artifact> dynamicRuntimeActionInputs=CppHelper.getToolchain(ruleContext).getDynamicRuntimeLinkInputs();
  Iterables.addAll(jvmFlags,semantics.getJvmFlags(ruleContext,common,launcher,userJvmFlags));
  if (ruleContext.hasErrors()) {
    return null;
  }
  if (createExecutable) {
    semantics.createStubAction(ruleContext,common,jvmFlags,executable,mainClass,common.getJavaBinSubstitution(launcher));
  }
  NestedSet<Artifact> transitiveSourceJars=collectTransitiveSourceJars(common,srcJar);
  helper.createSourceJarAction(ImmutableMap.<PathFragment,Artifact>of(),transitiveSourceJars.toCollection(),ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_DEPLOY_SOURCE_JAR));
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  semantics.addProviders(ruleContext,common,jvmFlags,classJar,srcJar,genClassJar,genSourceJar,ImmutableMap.<Artifact,Artifact>of(),helper,filesBuilder,builder);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  collectDefaultRunfiles(runfilesBuilder,ruleContext,common,filesToBuild,launcher,dynamicRuntimeActionInputs);
  Runfiles defaultRunfiles=runfilesBuilder.build();
  RunfilesSupport runfilesSupport=createExecutable ? runfilesSupport=RunfilesSupport.withExecutable(ruleContext,defaultRunfiles,executable,semantics.getExtraArguments(ruleContext,common)) : null;
  RunfilesProvider runfilesProvider=RunfilesProvider.withData(defaultRunfiles,new Runfiles.Builder(ruleContext.getWorkspaceName()).merge(runfilesSupport).build());
  ImmutableList<String> deployManifestLines=getDeployManifestLines(ruleContext,originalMainClass);
  Artifact deployJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_DEPLOY_JAR);
  Artifact unstrippedDeployJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_UNSTRIPPED_BINARY_DEPLOY_JAR);
  deployArchiveBuilder.setOutputJar(deployJar).setJavaStartClass(mainClass).setDeployManifestLines(deployManifestLines).setAttributes(attributes).addRuntimeJars(common.getJavaCompilationArtifacts().getRuntimeJars()).setIncludeBuildData(true).setRunfilesMiddleman(runfilesSupport == null ? null : runfilesSupport.getRunfilesMiddleman()).setCompression(COMPRESSED).setLauncher(launcher);
  deployArchiveBuilder.build();
  if (stripAsDefault) {
    unstrippedDeployArchiveBuilder.setOutputJar(unstrippedDeployJar).setJavaStartClass(mainClass).setDeployManifestLines(deployManifestLines).setAttributes(attributes).addRuntimeJars(common.getJavaCompilationArtifacts().getRuntimeJars()).setIncludeBuildData(true).setRunfilesMiddleman(runfilesSupport == null ? null : runfilesSupport.getRunfilesMiddleman()).setCompression(COMPRESSED).setLauncher(unstrippedLauncher);
    unstrippedDeployArchiveBuilder.build();
  }
 else {
    ruleContext.registerAction(new FileWriteAction(ruleContext.getActionOwner(),unstrippedDeployJar,"",false));
  }
  common.addTransitiveInfoProviders(builder,filesToBuild,classJar);
  common.addGenJarsProvider(builder,genClassJar,genSourceJar);
  return builder.setFilesToBuild(filesToBuild).add(JavaRuleOutputJarsProvider.class,new JavaRuleOutputJarsProvider(classJar,null,srcJar)).add(RunfilesProvider.class,runfilesProvider).setRunfilesSupport(runfilesSupport,executable).add(JavaRuntimeClasspathProvider.class,new JavaRuntimeClasspathProvider(common.getRuntimeClasspath())).add(JavaSourceInfoProvider.class,JavaSourceInfoProvider.fromJavaTargetAttributes(attributes,semantics)).add(JavaSourceJarsProvider.class,new JavaSourceJarsProvider(transitiveSourceJars,srcJars)).addOutputGroup(JavaSemantics.SOURCE_JARS_OUTPUT_GROUP,transitiveSourceJars).build();
}
