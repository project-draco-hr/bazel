{
  builder.addArtifacts((Iterable<Artifact>)filesToBuild);
  builder.addArtifacts(common.getJavaCompilationArtifacts().getRuntimeJars());
  if (launcher != null) {
    final TransitiveInfoCollection defaultLauncher=JavaHelper.launcherForTarget(semantics,ruleContext);
    final Artifact defaultLauncherArtifact=JavaHelper.launcherArtifactForTarget(semantics,ruleContext);
    if (!defaultLauncherArtifact.equals(launcher)) {
      builder.addArtifact(launcher);
      Runfiles runfiles=defaultLauncher.getProvider(RunfilesProvider.class).getDefaultRunfiles();
      NestedSetBuilder<Artifact> unconditionalArtifacts=NestedSetBuilder.compileOrder();
      for (      Artifact a : runfiles.getUnconditionalArtifacts()) {
        if (!a.equals(defaultLauncherArtifact)) {
          unconditionalArtifacts.add(a);
        }
      }
      builder.addTransitiveArtifacts(unconditionalArtifacts.build());
      builder.addSymlinks(runfiles.getSymlinks());
      builder.addRootSymlinks(runfiles.getRootSymlinks());
      builder.addPruningManifests(runfiles.getPruningManifests());
    }
 else {
      builder.addTarget(defaultLauncher,RunfilesProvider.DEFAULT_RUNFILES);
    }
  }
  semantics.addRunfilesForBinary(ruleContext,launcher,builder);
  builder.addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES);
  builder.add(ruleContext,JavaRunfilesProvider.TO_RUNFILES);
  List<? extends TransitiveInfoCollection> runtimeDeps=ruleContext.getPrerequisites("runtime_deps",Mode.TARGET);
  builder.addTargets(runtimeDeps,JavaRunfilesProvider.TO_RUNFILES);
  builder.addTargets(runtimeDeps,RunfilesProvider.DEFAULT_RUNFILES);
  semantics.addDependenciesForRunfiles(ruleContext,builder);
  if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    Artifact instrumentedJar=common.getJavaCompilationArtifacts().getInstrumentedJar();
    if (instrumentedJar != null) {
      builder.addArtifact(instrumentedJar);
    }
  }
  builder.addArtifacts((Iterable<Artifact>)common.getRuntimeClasspath());
  TransitiveInfoCollection javabaseTarget=ruleContext.getPrerequisite(":jvm",Mode.HOST);
  if (javabaseTarget != null) {
    builder.addArtifacts((Iterable<Artifact>)javabaseTarget.getProvider(FileProvider.class).getFilesToBuild());
    for (    Artifact lib : dynamicRuntimeActionInputs) {
      PathFragment path=CPP_RUNTIMES.getRelative(lib.getExecPath().getBaseName());
      builder.addSymlink(path,lib);
    }
  }
}
