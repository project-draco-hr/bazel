{
  if (Iterables.isEmpty(aspects)) {
    return base;
  }
  OutputGroupProvider mergedOutputGroupProvider=OutputGroupProvider.merge(getAllProviders(base,aspects,OutputGroupProvider.class));
  SkylarkProviders mergedSkylarkProviders=SkylarkProviders.merge(getAllProviders(base,aspects,SkylarkProviders.class));
  ExtraActionArtifactsProvider mergedExtraActionProviders=ExtraActionArtifactsProvider.merge(getAllProviders(base,aspects,ExtraActionArtifactsProvider.class));
  TransitiveInfoProviderMap.Builder aspectProviders=TransitiveInfoProviderMap.builder();
  if (mergedOutputGroupProvider != null) {
    aspectProviders.add(mergedOutputGroupProvider);
  }
  if (mergedSkylarkProviders != null) {
    aspectProviders.add(mergedSkylarkProviders);
  }
  if (mergedExtraActionProviders != null) {
    aspectProviders.add(mergedExtraActionProviders);
  }
  for (  ConfiguredAspect aspect : aspects) {
    for (    Map.Entry<Class<? extends TransitiveInfoProvider>,TransitiveInfoProvider> entry : aspect.getProviders().entrySet()) {
      Class<? extends TransitiveInfoProvider> providerClass=entry.getKey();
      if (OutputGroupProvider.class.equals(providerClass) || SkylarkProviders.class.equals(providerClass) || ExtraActionArtifactsProvider.class.equals(providerClass)) {
        continue;
      }
      if (base.getProvider(providerClass) != null || aspectProviders.contains(providerClass)) {
        throw new IllegalStateException("Provider " + providerClass + " provided twice");
      }
      aspectProviders.add(entry.getValue());
    }
  }
  return new MergedConfiguredTarget(base,aspectProviders.build());
}
