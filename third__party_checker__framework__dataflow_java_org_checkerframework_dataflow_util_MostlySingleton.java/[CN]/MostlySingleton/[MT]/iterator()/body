{
switch (state) {
case EMPTY:
    return Collections.emptyIterator();
case SINGLETON:
  return new Iterator<T>(){
    private boolean hasNext=true;
    @Override public boolean hasNext(){
      return hasNext;
    }
    @Override public T next(){
      if (hasNext) {
        hasNext=false;
        return value;
      }
      throw new NoSuchElementException();
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
case ANY:
return set.iterator();
default :
throw new AssertionError();
}
}
