{
  scratch.file("test/aspect.bzl","def _impl(target, ctx):","   return struct()","def _rule_impl(ctx):","   return struct()","MyAspectMismatch = aspect(","    implementation=_impl,","    attrs = { 'my_attr' : attr.string(values=['aaa']) },",")","my_rule = rule(","    implementation=_rule_impl,","    attrs = { 'deps' : attr.label_list(aspects=[MyAspectMismatch]),","              'my_attr' : attr.int() },",")");
  scratch.file("test/BUILD","load('//test:aspect.bzl', 'my_rule')","my_rule(name = 'xxx', my_attr = 4)");
  reporter.removeHandler(failFastHandler);
  try {
    AnalysisResult result=update(ImmutableList.<String>of(),"//test:xxx");
    assertThat(keepGoing()).isTrue();
    assertThat(result.hasError()).isTrue();
  }
 catch (  Exception e) {
  }
  assertContainsEvent("Aspect //test:aspect.bzl%MyAspectMismatch requires rule my_rule to specify attribute " + "'my_attr' with type string.");
}
