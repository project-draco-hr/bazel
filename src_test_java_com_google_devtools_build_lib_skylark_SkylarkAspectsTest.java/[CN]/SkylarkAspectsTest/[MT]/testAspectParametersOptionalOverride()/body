{
  scratch.file("test/aspect.bzl","def _impl(target, ctx):","   if (ctx.attr.my_attr == 'a'):","       fail('Rule is not overriding default, still has value ' + ctx.attr.my_attr)","   return struct()","def _rule_impl(ctx):","   return struct()","MyAspectOptOverride = aspect(","    implementation=_impl,","    attrs = { 'my_attr' : attr.string(values=['a', 'b'], default='a') },",")","my_rule = rule(","    implementation=_rule_impl,","    attrs = { 'deps' : attr.label_list(aspects=[MyAspectOptOverride]),","              'my_attr' : attr.string() },",")");
  scratch.file("test/BUILD","load('//test:aspect.bzl', 'my_rule')","my_rule(name = 'xxx', my_attr = 'b')");
  AnalysisResult result=update(ImmutableList.<String>of(),"//test:xxx");
  assertThat(result.hasError()).isFalse();
}
