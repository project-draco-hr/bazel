{
  scratch.file("test/aspect.bzl","def _aspect_impl(target,ctx):","  f = ctx.new_file('dummy.txt')","  ctx.action(outputs = [f], command='echo xxx > $(location f)', mnemonic='AspectAction')","  return struct()","my_aspect = aspect(implementation = _aspect_impl)");
  scratch.file("test/BUILD","extra_action(","    name = 'xa',","    cmd = 'echo $(EXTRA_ACTION_FILE) > $(output file.xa)',","    out_templates = ['file.xa'],",")","action_listener(","    name = 'al',","    mnemonics = [ 'AspectAction' ],","    extra_actions = [ ':xa' ])","java_library(name = 'xxx')");
  useConfiguration("--experimental_action_listener=//test:al");
  AnalysisResult analysisResult=update(ImmutableList.<String>of("test/aspect.bzl%my_aspect"),"//test:xxx");
  assertThat(Iterables.transform(analysisResult.getAdditionalArtifactsToBuild(),new Function<Artifact,String>(){
    @Override public String apply(    Artifact artifact){
      return artifact.getFilename();
    }
  }
)).contains("file.xa");
}
