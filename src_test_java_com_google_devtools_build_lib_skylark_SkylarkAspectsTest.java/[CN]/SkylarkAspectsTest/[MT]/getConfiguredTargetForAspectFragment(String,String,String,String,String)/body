{
  scratch.file("test/aspect.bzl","def _aspect_impl(target, ctx):","   return struct(result = str(" + fullFieldName + "))","","def _rule_impl(ctx):","   return struct(stuff = '...')","","MyAspect = aspect(","   implementation=_aspect_impl,","   attr_aspects=['deps'],","   fragments=[" + fragments + "],","   host_fragments=[" + hostFragments + "],",")","my_rule = rule(","   implementation=_rule_impl,","   attrs = { 'attr' : ","             attr.label_list(mandatory=True, allow_files=True, aspects = [MyAspect]) },","   fragments=[" + ruleFragments + "],","   host_fragments=[" + ruleHostFragments + "],",")");
  scratch.file("test/BUILD","load('/test/aspect', 'my_rule')","exports_files(['zzz'])","my_rule(","     name = 'yyy',","     attr = ['zzz'],",")","my_rule(","     name = 'xxx',","     attr = ['yyy'],",")");
  AnalysisResult result=update(ImmutableList.of("test/aspect.bzl%MyAspect"),"//test:xxx");
  if (result.hasError()) {
    assertThat(keepGoing()).isTrue();
    throw new ViewCreationFailedException("Analysis failed");
  }
  return getConfiguredTarget("//test:xxx");
}
