{
  scratch.file("test/aspect.bzl","def _impl(target, ctx):","   print('This aspect does nothing')","   return struct()","MyAspect = aspect(implementation=_impl, fragments=['jvm'], host_fragments=['cpp'])");
  scratch.file("test/BUILD","java_library(name = 'xxx',)");
  AnalysisResult analysisResult=update(ImmutableList.of("//test:xxx"),ImmutableList.of("test/aspect.bzl%MyAspect"),false,LOADING_PHASE_THREADS,true,new EventBus());
  AspectValue aspectValue=Iterables.getOnlyElement(analysisResult.getAspects());
  AspectKey aspectKey=aspectValue.getKey();
  AspectDefinition aspectDefinition=aspectKey.getAspect().getDefinition();
  assertThat(aspectDefinition.getConfigurationFragmentPolicy().isLegalConfigurationFragment(Jvm.class,ConfigurationTransition.NONE)).isTrue();
  assertThat(aspectDefinition.getConfigurationFragmentPolicy().isLegalConfigurationFragment(Jvm.class,ConfigurationTransition.HOST)).isFalse();
  assertThat(aspectDefinition.getConfigurationFragmentPolicy().isLegalConfigurationFragment(CppConfiguration.class,ConfigurationTransition.NONE)).isFalse();
  assertThat(aspectDefinition.getConfigurationFragmentPolicy().isLegalConfigurationFragment(CppConfiguration.class,ConfigurationTransition.HOST)).isTrue();
}
