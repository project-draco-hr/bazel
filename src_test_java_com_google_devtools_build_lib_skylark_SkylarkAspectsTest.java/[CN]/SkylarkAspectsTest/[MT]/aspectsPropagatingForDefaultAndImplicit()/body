{
  scratch.file("test/aspect.bzl","def _impl(target, ctx):","   s = set([target.label])","   c = set([ctx.rule.kind])","   a = ctx.rule.attr","   if hasattr(a, '_stl') and a._stl:","       s += a._stl.target_labels","       c += a._stl.rule_kinds","   if hasattr(a, '_stl_default') and a._stl_default:","       s += a._stl_default.target_labels","       c += a._stl_default.rule_kinds","   return struct(target_labels = s, rule_kinds = c)","","def _rule_impl(ctx):","   pass","","my_rule = rule(implementation = _rule_impl,","   attrs = { '_stl' : attr.label(default = Label('//test:xxx')) },",")","MyAspect = aspect(","   implementation=_impl,","   attr_aspects=['_stl', '_stl_default'],",")");
  scratch.file("test/BUILD","load('/test/aspect', 'my_rule')","cc_library(","     name = 'xxx',",")","my_rule(","     name = 'yyy',",")");
  AnalysisResult analysisResult=update(ImmutableList.of("test/aspect.bzl%MyAspect"),"//test:yyy");
  AspectValue aspectValue=analysisResult.getAspects().iterator().next();
  SkylarkProviders skylarkProviders=aspectValue.getConfiguredAspect().getProvider(SkylarkProviders.class);
  assertThat(skylarkProviders).isNotNull();
  Object names=skylarkProviders.getValue("target_labels");
  assertThat(names).isInstanceOf(SkylarkNestedSet.class);
  assertThat(transform((SkylarkNestedSet)names,new Function<Object,String>(){
    @Nullable @Override public String apply(    Object o){
      assertThat(o).isInstanceOf(Label.class);
      return ((Label)o).getName();
    }
  }
)).containsExactly("stl","xxx","yyy");
}
