{
  AndroidSdkProvider sdk=AndroidSdkProvider.fromRuleContext(ruleContext);
  Set<Artifact> preprocessedIdls=new LinkedHashSet<>();
  List<String> preprocessedArgs=new ArrayList<>();
  for (  String idlImport : transitiveIdlImportData.getTransitiveIdlImportRoots()) {
    preprocessedArgs.add("-I" + idlImport);
  }
  preprocessedArgs.add("-p" + sdk.getFrameworkAidl().getExecPathString());
  String ruleName=ruleContext.getRule().getName();
  for (  Artifact idl : idls) {
    PathFragment preprocessedPath=new PathFragment(ruleName + "_aidl").getRelative(idl.getRootRelativePath());
    Artifact preprocessed=ruleContext.getPackageRelativeArtifact(preprocessedPath,ruleContext.getConfiguration().getGenfilesDirectory());
    preprocessedIdls.add(preprocessed);
    preprocessedArgs.add("-p" + preprocessed.getExecPathString());
    createAndroidIdlPreprocessAction(ruleContext,idl,preprocessed);
  }
  MiddlemanFactory middlemanFactory=ruleContext.getAnalysisEnvironment().getMiddlemanFactory();
  Artifact preprocessedIdlsMiddleman=middlemanFactory.createAggregatingMiddleman(ruleContext.getActionOwner(),"AndroidIDLMiddleman",preprocessedIdls,ruleContext.getConfiguration().getMiddlemanDirectory());
  for (  Artifact idl : translatedIdlSources.keySet()) {
    createAndroidIdlAction(ruleContext,idl,transitiveIdlImportData.getTransitiveIdlImports(),preprocessedIdlsMiddleman,translatedIdlSources.get(idl),preprocessedArgs);
  }
}
