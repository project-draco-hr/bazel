{
  AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
  PathFragment buildFile=new PathFragment(mapper.get("build_file",Type.STRING));
  Path buildFileTarget=workspaceDirectory.getRelative(buildFile);
  if (!buildFileTarget.exists()) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),String.format("In %s the 'build_file' attribute does not specify an existing file " + "(%s does not exist)",rule,buildFileTarget)),Transience.PERSISTENT);
  }
  RootedPath rootedBuild;
  if (buildFile.isAbsolute()) {
    rootedBuild=RootedPath.toRootedPath(buildFileTarget.getParentDirectory(),new PathFragment(buildFileTarget.getBaseName()));
  }
 else {
    rootedBuild=RootedPath.toRootedPath(workspaceDirectory,buildFile);
  }
  SkyKey buildFileKey=FileValue.key(rootedBuild);
  FileValue buildFileValue;
  try {
    buildFileValue=(FileValue)env.getValueOrThrow(buildFileKey,IOException.class,FileSymlinkException.class,InconsistentFilesystemException.class);
    if (buildFileValue == null) {
      return null;
    }
  }
 catch (  IOException|FileSymlinkException|InconsistentFilesystemException e) {
    throw new RepositoryFunctionException(new IOException("Cannot lookup " + buildFile + ": "+ e.getMessage()),Transience.TRANSIENT);
  }
  Path buildFilePath=directoryValue.realRootedPath().asPath().getRelative("BUILD");
  if (createSymbolicLink(buildFilePath,buildFileTarget,env) == null) {
    return null;
  }
  return RepositoryValue.createNew(directoryValue,buildFileValue);
}
