def _MakeMethodDescriptor(self, method_proto, service_name, package, scope, index):
    'Creates a method descriptor from a MethodDescriptorProto.\n\n    Args:\n      method_proto: The proto describing the method.\n      service_name: The name of the containing service.\n      package: Optional package name to look up for types.\n      scope: Scope containing available types.\n      index: Index of the method in the service.\n\n    Returns:\n      An initialized MethodDescriptor object.\n    '
    full_name = '.'.join((service_name, method_proto.name))
    input_type = self._GetTypeFromScope(package, method_proto.input_type, scope)
    output_type = self._GetTypeFromScope(package, method_proto.output_type, scope)
    return descriptor.MethodDescriptor(name=method_proto.name, full_name=full_name, index=index, containing_service=None, input_type=input_type, output_type=output_type, options=method_proto.options)
