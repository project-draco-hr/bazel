{
  compilerDebug("Calling compiled function " + getLocationPathAndLine() + " "+ getName());
  try {
    Profiler.instance().startTask(ProfilerTask.SKYLARK_USER_COMPILED_FN,getLocationPathAndLine() + "#" + getName());
    env.enterScope(this,ast,definitionGlobals);
    return method.get().invoke(null,ImmutableList.builder().add(arguments).add(env).build().toArray());
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException("Compiler created code that could not be accessed reflectively.",e);
  }
catch (  InvocationTargetException e) {
    compilerDebug("Error running compiled version",e.getCause());
    return null;
  }
 finally {
    Profiler.instance().completeTask(ProfilerTask.SKYLARK_USER_COMPILED_FN);
    env.exitScope();
  }
}
