{
  AspectDescriptor simpleAspect=new AspectDescriptor(new NativeAspectClass<>(SimpleAspect.class));
  AspectDescriptor attributeAspect=new AspectDescriptor(new NativeAspectClass<>(AttributeAspect.class));
  ImmutableSet<AspectDescriptor> twoAspects=ImmutableSet.of(simpleAspect,attributeAspect);
  Dependency hostDep=Dependency.withTransitionAndAspects(Label.parseAbsolute("//a"),ConfigurationTransition.HOST,twoAspects);
  assertThat(hostDep.getLabel()).isEqualTo(Label.parseAbsolute("//a"));
  assertThat(hostDep.hasStaticConfiguration()).isFalse();
  assertThat(hostDep.getAspects()).containsExactlyElementsIn(twoAspects);
  assertThat(hostDep.getTransition()).isEqualTo(ConfigurationTransition.HOST);
  try {
    hostDep.getConfiguration();
    fail("withTransitionAndAspects-created Dependencies should throw ISE on getConfiguration()");
  }
 catch (  IllegalStateException ex) {
  }
  try {
    hostDep.getAspectConfigurations();
    fail("withTransitionAndAspects-created Dependencies should throw ISE on " + "getAspectConfigurations()");
  }
 catch (  IllegalStateException ex) {
  }
}
