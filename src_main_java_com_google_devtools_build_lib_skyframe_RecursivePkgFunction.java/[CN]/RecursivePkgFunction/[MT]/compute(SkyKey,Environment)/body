{
  RootedPath rootedPath=(RootedPath)skyKey.argument();
  Path root=rootedPath.getRoot();
  PathFragment rootRelativePath=rootedPath.getRelativePath();
  SkyKey fileKey=FileValue.key(rootedPath);
  FileValue fileValue=(FileValue)env.getValue(fileKey);
  if (fileValue == null) {
    return null;
  }
  if (!fileValue.isDirectory()) {
    return new RecursivePkgValue(NestedSetBuilder.<String>emptySet(ORDER));
  }
  if (fileValue.isSymlink()) {
    return new RecursivePkgValue(NestedSetBuilder.<String>emptySet(ORDER));
  }
  PackageIdentifier packageId=PackageIdentifier.createInDefaultRepo(rootRelativePath.getPathString());
  PackageLookupValue pkgLookupValue=(PackageLookupValue)env.getValue(PackageLookupValue.key(packageId));
  if (pkgLookupValue == null) {
    return null;
  }
  NestedSetBuilder<String> packages=new NestedSetBuilder<>(ORDER);
  if (pkgLookupValue.packageExists()) {
    if (pkgLookupValue.getRoot().equals(root)) {
      try {
        PackageValue pkgValue=(PackageValue)env.getValueOrThrow(PackageValue.key(packageId),NoSuchPackageException.class);
        if (pkgValue == null) {
          return null;
        }
        packages.add(pkgValue.getPackage().getName());
      }
 catch (      NoSuchPackageException e) {
        env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
        if (e.getPackage() != null) {
          packages.add(e.getPackage().getName());
        }
      }
    }
  }
  DirectoryListingValue dirValue=(DirectoryListingValue)env.getValue(DirectoryListingValue.key(rootedPath));
  if (dirValue == null) {
    return null;
  }
  List<SkyKey> childDeps=Lists.newArrayList();
  for (  Dirent dirent : dirValue.getDirents()) {
    if (dirent.getType() != Type.DIRECTORY) {
      continue;
    }
    String basename=dirent.getName();
    if (rootRelativePath.equals(PathFragment.EMPTY_FRAGMENT) && PathPackageLocator.DEFAULT_TOP_LEVEL_EXCLUDES.contains(basename)) {
      continue;
    }
    SkyKey req=RecursivePkgValue.key(RootedPath.toRootedPath(root,rootRelativePath.getRelative(basename)));
    childDeps.add(req);
  }
  Map<SkyKey,SkyValue> childValueMap=env.getValues(childDeps);
  if (env.valuesMissing()) {
    return null;
  }
  for (  SkyValue childValue : childValueMap.values()) {
    if (childValue != null) {
      packages.addTransitive(((RecursivePkgValue)childValue).getPackages());
    }
  }
  return new RecursivePkgValue(packages.build());
}
