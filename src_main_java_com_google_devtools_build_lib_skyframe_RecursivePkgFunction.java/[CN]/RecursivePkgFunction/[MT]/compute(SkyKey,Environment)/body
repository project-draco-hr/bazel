{
  RecursivePkgKey recursivePkgKey=(RecursivePkgKey)skyKey.argument();
  RootedPath rootedPath=recursivePkgKey.getRootedPath();
  Path root=rootedPath.getRoot();
  PathFragment rootRelativePath=rootedPath.getRelativePath();
  Set<PathFragment> excludedPaths=recursivePkgKey.getExcludedPaths();
  SkyKey fileKey=FileValue.key(rootedPath);
  FileValue fileValue=null;
  try {
    fileValue=(FileValue)env.getValueOrThrow(fileKey,InconsistentFilesystemException.class,FileSymlinkCycleException.class,IOException.class);
  }
 catch (  InconsistentFilesystemException|FileSymlinkCycleException|IOException e) {
    return reportErrorAndReturn(e,rootRelativePath,env.getListener());
  }
  if (fileValue == null) {
    return null;
  }
  if (!fileValue.isDirectory()) {
    return RecursivePkgValue.EMPTY;
  }
  if (fileValue.isSymlink()) {
    return RecursivePkgValue.EMPTY;
  }
  PackageIdentifier packageId=PackageIdentifier.createInDefaultRepo(rootRelativePath.getPathString());
  PackageLookupValue pkgLookupValue;
  try {
    pkgLookupValue=(PackageLookupValue)env.getValueOrThrow(PackageLookupValue.key(packageId),NoSuchPackageException.class,InconsistentFilesystemException.class);
  }
 catch (  NoSuchPackageException|InconsistentFilesystemException e) {
    return reportErrorAndReturn(e,rootRelativePath,env.getListener());
  }
  if (pkgLookupValue == null) {
    return null;
  }
  NestedSetBuilder<String> packages=new NestedSetBuilder<>(ORDER);
  if (pkgLookupValue.packageExists()) {
    if (pkgLookupValue.getRoot().equals(root)) {
      try {
        PackageValue pkgValue=(PackageValue)env.getValueOrThrow(PackageValue.key(packageId),NoSuchPackageException.class);
        if (pkgValue == null) {
          return null;
        }
        packages.add(pkgValue.getPackage().getName());
      }
 catch (      NoSuchPackageException e) {
        env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
        if (e.getPackage() != null) {
          packages.add(e.getPackage().getName());
        }
      }
    }
  }
  DirectoryListingValue dirValue=(DirectoryListingValue)env.getValue(DirectoryListingValue.key(rootedPath));
  if (dirValue == null) {
    return null;
  }
  List<SkyKey> childDeps=Lists.newArrayList();
  for (  Dirent dirent : dirValue.getDirents()) {
    if (dirent.getType() != Type.DIRECTORY) {
      continue;
    }
    String basename=dirent.getName();
    if (rootRelativePath.equals(PathFragment.EMPTY_FRAGMENT) && PathPackageLocator.DEFAULT_TOP_LEVEL_EXCLUDES.contains(basename)) {
      continue;
    }
    PathFragment subdirectory=rootRelativePath.getRelative(basename);
    if (excludedPaths.contains(subdirectory)) {
      continue;
    }
    ImmutableSet.Builder<PathFragment> excludedSubdirectoriesBeneathThisSubdirectory=ImmutableSet.builder();
    for (    PathFragment excludedPath : excludedPaths) {
      if (excludedPath.startsWith(subdirectory)) {
        excludedSubdirectoriesBeneathThisSubdirectory.add(excludedPath);
      }
    }
    SkyKey req=RecursivePkgValue.key(RootedPath.toRootedPath(root,subdirectory),excludedSubdirectoriesBeneathThisSubdirectory.build());
    childDeps.add(req);
  }
  Map<SkyKey,SkyValue> childValueMap=env.getValues(childDeps);
  if (env.valuesMissing()) {
    return null;
  }
  for (  SkyValue childValue : childValueMap.values()) {
    if (childValue != null) {
      packages.addTransitive(((RecursivePkgValue)childValue).getPackages());
    }
  }
  return RecursivePkgValue.create(packages);
}
