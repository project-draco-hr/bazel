{
  List<Field> instanceFields=new ArrayList<>();
  for (Class<?> clazz=instance.getClass(); !clazz.equals(TestCase.class) && !clazz.equals(Object.class); clazz=clazz.getSuperclass()) {
    for (    Field field : clazz.getDeclaredFields()) {
      if (Modifier.isStatic(field.getModifiers())) {
        continue;
      }
      if (field.getType().isPrimitive()) {
        continue;
      }
      if (Modifier.isFinal(field.getModifiers())) {
        String msg="Please make field \"" + field + "\" non-final, or, if "+ "it's very simple and truly immutable and not too "+ "big, make it static.";
        throw new AssertionError(msg);
      }
      instanceFields.add(field);
    }
  }
  AccessibleObject.setAccessible(instanceFields.toArray(new Field[0]),true);
  for (  Field field : instanceFields) {
    field.set(instance,null);
  }
}
