{
  Set<RuleDocumentation> binaryDocs=new TreeSet<>();
  Set<RuleDocumentation> libraryDocs=new TreeSet<>();
  Set<RuleDocumentation> testDocs=new TreeSet<>();
  Set<RuleDocumentation> generateDocs=new TreeSet<>();
  Set<RuleDocumentation> otherDocs=new TreeSet<>();
  for (  RuleDocumentation doc : docEntries) {
    RuleClass ruleClass=ruleClassProvider.getRuleClassMap().get(doc.getRuleName());
    if (ruleClass.isDocumented()) {
      if (doc.isLanguageSpecific()) {
switch (doc.getRuleType()) {
case BINARY:
          binaryDocs.add(doc);
        break;
case LIBRARY:
      libraryDocs.add(doc);
    break;
case TEST:
  testDocs.add(doc);
break;
case OTHER:
otherDocs.add(doc);
break;
}
}
 else {
otherDocs.add(doc);
}
}
}
bw.write("\n");
bw.write(SourceFileReader.readTemplateContents(DocgenConsts.HEADER_TEMPLATE,generateBEHeaderMapping(docEntries)));
Map<String,String> sectionMapping=ImmutableMap.of(DocgenConsts.VAR_SECTION_BINARY,getRuleDocs(binaryDocs),DocgenConsts.VAR_SECTION_LIBRARY,getRuleDocs(libraryDocs),DocgenConsts.VAR_SECTION_TEST,getRuleDocs(testDocs),DocgenConsts.VAR_SECTION_GENERATE,getRuleDocs(generateDocs),DocgenConsts.VAR_SECTION_OTHER,getRuleDocs(otherDocs));
bw.write("\n");
bw.write(SourceFileReader.readTemplateContents(DocgenConsts.BODY_TEMPLATE,sectionMapping));
}
