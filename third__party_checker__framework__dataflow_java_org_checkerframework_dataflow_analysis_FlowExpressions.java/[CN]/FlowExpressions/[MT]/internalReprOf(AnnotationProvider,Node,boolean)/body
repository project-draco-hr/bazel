{
  Receiver receiver=null;
  if (receiverNode instanceof FieldAccessNode) {
    FieldAccessNode fan=(FieldAccessNode)receiverNode;
    if (fan.getFieldName().equals("this")) {
      receiver=new ThisReference(fan.getReceiver().getType());
    }
 else     if (fan.getFieldName().equals("class")) {
      receiver=new ClassName(fan.getReceiver().getType());
    }
 else {
      receiver=internalReprOfFieldAccess(provider,fan);
    }
  }
 else   if (receiverNode instanceof ExplicitThisLiteralNode) {
    receiver=new ThisReference(receiverNode.getType());
  }
 else   if (receiverNode instanceof ThisLiteralNode) {
    receiver=new ThisReference(receiverNode.getType());
  }
 else   if (receiverNode instanceof SuperNode) {
    receiver=new ThisReference(receiverNode.getType());
  }
 else   if (receiverNode instanceof LocalVariableNode) {
    LocalVariableNode lv=(LocalVariableNode)receiverNode;
    receiver=new LocalVariable(lv);
  }
 else   if (receiverNode instanceof ArrayAccessNode) {
    ArrayAccessNode a=(ArrayAccessNode)receiverNode;
    receiver=internalReprOfArrayAccess(provider,a);
  }
 else   if (receiverNode instanceof StringConversionNode) {
    return internalReprOf(provider,((StringConversionNode)receiverNode).getOperand());
  }
 else   if (receiverNode instanceof WideningConversionNode) {
    return internalReprOf(provider,((WideningConversionNode)receiverNode).getOperand());
  }
 else   if (receiverNode instanceof NarrowingConversionNode) {
    return internalReprOf(provider,((NarrowingConversionNode)receiverNode).getOperand());
  }
 else   if (receiverNode instanceof ClassNameNode) {
    ClassNameNode cn=(ClassNameNode)receiverNode;
    receiver=new ClassName(cn.getType());
  }
 else   if (receiverNode instanceof ValueLiteralNode) {
    ValueLiteralNode vn=(ValueLiteralNode)receiverNode;
    receiver=new ValueLiteral(vn.getType(),vn);
  }
 else   if (receiverNode instanceof ArrayCreationNode) {
    ArrayCreationNode an=(ArrayCreationNode)receiverNode;
    receiver=new ArrayCreation(an.getType(),an.getDimensions(),an.getInitializers());
  }
 else   if (receiverNode instanceof MethodInvocationNode) {
    MethodInvocationNode mn=(MethodInvocationNode)receiverNode;
    ExecutableElement invokedMethod=TreeUtils.elementFromUse(mn.getTree());
    boolean considerDeterministic=false;
    if (invokedMethod.toString().equals("valueOf(long)") && mn.getTarget().getReceiver().toString().equals("Long")) {
      Node arg=mn.getArgument(0);
      if (arg instanceof ValueLiteralNode) {
        considerDeterministic=true;
      }
    }
    if (PurityUtils.isDeterministic(provider,invokedMethod) || allowNonDeterministic || considerDeterministic) {
      List<Receiver> parameters=new ArrayList<>();
      for (      Node p : mn.getArguments()) {
        parameters.add(internalReprOf(provider,p));
      }
      Receiver methodReceiver;
      if (ElementUtils.isStatic(invokedMethod)) {
        methodReceiver=new ClassName(mn.getTarget().getReceiver().getType());
      }
 else {
        methodReceiver=internalReprOf(provider,mn.getTarget().getReceiver());
      }
      receiver=new MethodCall(mn.getType(),invokedMethod,methodReceiver,parameters);
    }
  }
  if (receiver == null) {
    receiver=new Unknown(receiverNode.getType());
  }
  return receiver;
}
