{
  Path pathEntry=root.getRelative("pathEntry");
  DiffAwarenessFactoryStub factory1=new DiffAwarenessFactoryStub();
  DiffAwarenessStub diffAwareness1=new DiffAwarenessStub(ImmutableList.<ModifiedFileSet>of(),1);
  factory1.inject(pathEntry,diffAwareness1);
  DiffAwarenessFactoryStub factory2=new DiffAwarenessFactoryStub();
  ModifiedFileSet diff2=ModifiedFileSet.builder().modify(new PathFragment("file2")).build();
  DiffAwarenessStub diffAwareness2=new DiffAwarenessStub(ImmutableList.of(diff2,DiffAwarenessStub.BROKEN_DIFF));
  factory2.inject(pathEntry,diffAwareness2);
  DiffAwarenessFactoryStub factory3=new DiffAwarenessFactoryStub();
  ModifiedFileSet diff3=ModifiedFileSet.builder().modify(new PathFragment("file3")).build();
  DiffAwarenessStub diffAwareness3=new DiffAwarenessStub(ImmutableList.of(diff3));
  factory3.inject(pathEntry,diffAwareness3);
  DiffAwarenessManager manager=new DiffAwarenessManager(ImmutableList.of(factory1,factory2,factory3));
  ProcessableModifiedFileSet processableDiff=manager.getDiff(events.reporter(),pathEntry);
  events.assertNoWarningsOrErrors();
  assertEquals("Expected EVERYTHING_MODIFIED on first call to getDiff for diffAwareness1",ModifiedFileSet.EVERYTHING_MODIFIED,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  events.assertContainsEventWithFrequency("error in getCurrentView",1);
  assertEquals("Expected EVERYTHING_MODIFIED because of broken getCurrentView",ModifiedFileSet.EVERYTHING_MODIFIED,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  factory1.remove(pathEntry);
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  assertEquals("Expected EVERYTHING_MODIFIED on first call to getDiff for diffAwareness2",ModifiedFileSet.EVERYTHING_MODIFIED,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  assertEquals(diff2,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  events.assertContainsEventWithFrequency("error in getDiff",1);
  assertEquals("Expected EVERYTHING_MODIFIED because of broken getDiff",ModifiedFileSet.EVERYTHING_MODIFIED,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  factory2.remove(pathEntry);
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  assertEquals("Expected EVERYTHING_MODIFIED on first call to getDiff for diffAwareness3",ModifiedFileSet.EVERYTHING_MODIFIED,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
  processableDiff=manager.getDiff(events.reporter(),pathEntry);
  assertEquals(diff3,processableDiff.getModifiedFileSet());
  processableDiff.markProcessed();
}
