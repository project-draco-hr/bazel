{
  Executor executor=actionExecutionContext.getExecutor();
  if (executor.reportsSubcommands()) {
    executor.reportSubcommand(Label.print(spawn.getOwner().getLabel()) + " [" + spawn.getResourceOwner().prettyPrint()+ "]",spawn.asShellCommand(executor.getExecRoot()));
  }
  List<String> args=new ArrayList<>();
  if (OS.getCurrent() != OS.WINDOWS) {
    args.add(processWrapper.getPathString());
    args.add("-1");
    args.add("0");
    args.add("-");
    args.add("-");
  }
  args.addAll(spawn.getArguments());
  String cwd=executor.getExecRoot().getPathString();
  Command cmd=new Command(args.toArray(new String[]{}),spawn.getEnvironment(),new File(cwd));
  FileOutErr outErr=actionExecutionContext.getFileOutErr();
  try {
    cmd.execute(new byte[]{},Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true);
  }
 catch (  CommandException e) {
    String message=CommandFailureUtils.describeCommandFailure(verboseFailures,spawn.getArguments(),spawn.getEnvironment(),cwd);
    throw new UserExecException(String.format("%s: %s",message,e));
  }
}
