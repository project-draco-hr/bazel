{
  byte[] content=nodes.get(node);
  int[] intHolder=new int[1];
  int contentOffset=VarInt.getVarInt(content,0,intHolder);
  contentOffset=VarInt.getVarInt(content,contentOffset,intHolder);
  int skyKeyLen=intHolder[0];
  int remainingKeyLen=key.length - offset;
  int minKeyLen=remainingKeyLen > skyKeyLen ? skyKeyLen : remainingKeyLen;
  for (int i=(offset > 0 ? 1 : 0); i < minKeyLen; i++) {
    if (key[offset + i] != content[contentOffset + i]) {
      return createIfNotFound ? addBranch(node,key,offset,i) : NOT_FOUND;
    }
  }
  if (remainingKeyLen > minKeyLen) {
    contentOffset+=skyKeyLen;
    while (contentOffset < content.length) {
      if (key[offset + skyKeyLen] == content[contentOffset]) {
        VarInt.getVarInt(content,contentOffset + 1,intHolder);
        return findOrCreateIndexInternal(intHolder[0],key,offset + skyKeyLen,createIfNotFound);
      }
 else {
        contentOffset=VarInt.getVarInt(content,contentOffset + 1,intHolder);
      }
    }
    return createIfNotFound ? addChildNode(node,key,offset + skyKeyLen) : NOT_FOUND;
  }
 else   if (skyKeyLen > minKeyLen) {
    return createIfNotFound ? splitNodeSuffix(node,minKeyLen) : NOT_FOUND;
  }
 else {
    return node;
  }
}
