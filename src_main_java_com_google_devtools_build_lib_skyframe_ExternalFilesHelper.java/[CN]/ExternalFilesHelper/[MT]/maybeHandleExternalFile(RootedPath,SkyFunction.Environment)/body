{
  if (isInternal(rootedPath,pkgLocator.get())) {
    return;
  }
  externalFileSeen=true;
  if (externalFileAction == ExternalFileAction.ERROR_OUT) {
    throw new FileOutsidePackageRootsException(rootedPath);
  }
  Path outputBase=pkgLocator.get().getOutputBase();
  Path relativeExternal=pkgLocator.get().getOutputBase().getRelative(Label.EXTERNAL_PATH_PREFIX);
  if (outputBase != null && !rootedPath.asPath().startsWith(relativeExternal)) {
    return;
  }
  PathFragment repositoryPath=rootedPath.asPath().relativeTo(relativeExternal);
  if (repositoryPath.segmentCount() == 0) {
    return;
  }
  String repositoryName=repositoryPath.getSegment(0);
  try {
    RepositoryFunction.getRule(repositoryName,env);
  }
 catch (  RepositoryFunction.RepositoryNotFoundException ex) {
  }
catch (  RepositoryFunction.RepositoryFunctionException ex) {
    throw new IllegalStateException("Repository " + repositoryName + " cannot be resolved for path "+ rootedPath,ex);
  }
}
