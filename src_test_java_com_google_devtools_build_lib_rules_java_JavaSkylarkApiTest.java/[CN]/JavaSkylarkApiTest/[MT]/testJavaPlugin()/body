{
  scratch.file("java/test/extension.bzl","result = provider()","def impl(ctx):","   depj = ctx.attr.dep.java","   return [result(","             processor_classpath = depj.annotation_processing.processor_classpath,","             processor_classnames = depj.annotation_processing.processor_classnames,","          )]","my_rule = rule(impl, attrs = { 'dep' : attr.label() })");
  scratch.file("java/test/BUILD","load(':extension.bzl', 'my_rule')","java_library(name = 'plugin_dep',","    srcs = [ 'ProcessorDep.java'])","java_plugin(name = 'plugin',","    srcs = ['AnnotationProcessor.java'],","    processor_class = 'com.google.process.stuff',","    deps = [ ':plugin_dep' ])","java_library(name = 'to_be_processed',","    plugins = [':plugin'],","    srcs = ['ToBeProcessed.java'])","my_rule(name = 'my', dep = ':to_be_processed')");
  ConfiguredTarget configuredTarget=getConfiguredTarget("//java/test:my");
  SkylarkProviders provider=configuredTarget.getProvider(SkylarkProviders.class);
  SkylarkClassObject skylarkClassObject=provider.getDeclaredProvider(new Key(Label.parseAbsolute("//java/test:extension.bzl"),"result"));
  assertThat(Iterables.transform((List<?>)skylarkClassObject.getValue("processor_classpath"),new Function<Object,String>(){
    @Nullable @Override public String apply(    @Nullable Object o){
      return ((Artifact)o).getFilename();
    }
  }
)).containsExactly("libplugin.jar","libplugin_dep.jar");
  assertThat((List<?>)skylarkClassObject.getValue("processor_classnames")).containsExactly("com.google.process.stuff");
}
