{
  final Spawn base=super.getSpawn();
  return new DelegateSpawn(base){
    @Override public Iterable<? extends ActionInput> getInputFiles(){
      return Iterables.concat(base.getInputFiles(),ImmutableSet.of(extraActionInfoFile));
    }
    @Override public List<? extends ActionInput> getOutputFiles(){
      return Lists.newArrayList(Iterables.filter(getOutputs(),new Predicate<Artifact>(){
        @Override public boolean apply(        Artifact item){
          return item != extraActionInfoFile;
        }
      }
));
    }
    @Override public ImmutableMap<PathFragment,Artifact> getRunfilesManifests(){
      ImmutableMap.Builder<PathFragment,Artifact> builder=ImmutableMap.builder();
      builder.putAll(super.getRunfilesManifests());
      builder.putAll(runfilesManifests);
      return builder.build();
    }
    @Override public String getMnemonic(){
      return ExtraAction.this.getMnemonic();
    }
  }
;
}
