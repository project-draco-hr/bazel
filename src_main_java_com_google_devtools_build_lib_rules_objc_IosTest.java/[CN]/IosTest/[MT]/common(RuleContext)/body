{
  CompilationArtifacts compilationArtifacts=CompilationSupport.compilationArtifacts(ruleContext);
  if (ObjcRuleClasses.objcConfiguration(ruleContext).experimentalAutoTopLevelUnionObjCProtos()) {
    ProtoSupport protoSupport=new ProtoSupport(ruleContext,TargetType.LINKING_TARGET);
    compilationArtifacts=new CompilationArtifacts.Builder().setPchFile(compilationArtifacts.getPchFile()).setIntermediateArtifacts(ObjcRuleClasses.intermediateArtifacts(ruleContext)).addAllSources(compilationArtifacts).addAllSources(protoSupport.getCompilationArtifacts()).build();
  }
  ObjcCommon.Builder builder=new ObjcCommon.Builder(ruleContext).setCompilationAttributes(new CompilationAttributes(ruleContext)).setCompilationArtifacts(compilationArtifacts).setResourceAttributes(new ResourceAttributes(ruleContext)).addDefines(ruleContext.getTokenizedStringListAttr("defines")).addDeps(ruleContext.getPrerequisites("deps",Mode.TARGET)).addDeps(ruleContext.getPrerequisites("bundles",Mode.TARGET)).addNonPropagatedDepObjcProviders(ruleContext.getPrerequisites("non_propagated_deps",Mode.TARGET,ObjcProvider.class)).setIntermediateArtifacts(ObjcRuleClasses.intermediateArtifacts(ruleContext)).setHasModuleMap();
  if (isXcTest(ruleContext)) {
    builder.addExtraSdkFrameworks(AUTOMATIC_SDK_FRAMEWORKS_FOR_XCTEST).addDepObjcProviders(ImmutableList.of(xcTestAppProvider(ruleContext).getObjcProvider()));
  }
  ObjcConfiguration config=ruleContext.getFragment(ObjcConfiguration.class);
  if (config.runMemleaks()) {
    builder.addDepObjcProviders(ruleContext.getPrerequisites(MEMLEAKS_DEP_ATTR,Mode.TARGET,ObjcProvider.class));
  }
  return builder.build();
}
