{
  ProtobufSupport protoSupport=new ProtobufSupport(ruleContext).registerGenerationActions().registerCompilationActions();
  Optional<ObjcProvider> protosObjcProvider=protoSupport.getObjcProvider();
  Optional<XcodeProvider> protosXcodeProvider=protoSupport.getXcodeProvider();
  ObjcCommon common=common(ruleContext,protosObjcProvider);
  if (!common.getCompilationArtifacts().get().getArchive().isPresent()) {
    ruleContext.ruleError(REQUIRES_SOURCE_ERROR);
  }
  if (!ruleContext.getFragment(AppleConfiguration.class).getIosMultiCpus().isEmpty()) {
    ruleContext.ruleError(NO_MULTI_CPUS_ERROR);
  }
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder().addPropagatedDependencies(protosXcodeProvider.asSet());
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.stableOrder();
  addResourceFilesToBuild(ruleContext,common.getObjcProvider(),filesToBuild);
  XcodeProductType productType=getProductType(ruleContext);
  ExtraLinkArgs extraLinkArgs;
  Iterable<Artifact> extraLinkInputs;
  String bundleFormat;
  if (!isXcTest(ruleContext)) {
    extraLinkArgs=new ExtraLinkArgs();
    extraLinkInputs=ImmutableList.of();
    bundleFormat=ReleaseBundlingSupport.APP_BUNDLE_DIR_FORMAT;
  }
 else {
    XcodeProvider appIpaXcodeProvider=ruleContext.getPrerequisite(XCTEST_APP_ATTR,Mode.TARGET,XcodeProvider.class);
    xcodeProviderBuilder.setTestHost(appIpaXcodeProvider).setProductType(productType);
    XcTestAppProvider testApp=xcTestAppProvider(ruleContext);
    Artifact bundleLoader=testApp.getBundleLoader();
    extraLinkArgs=new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString(),"-Xlinker","-rpath","-Xlinker","@loader_path/Frameworks");
    extraLinkInputs=ImmutableList.of(bundleLoader);
    bundleFormat=ReleaseBundlingSupport.XCTEST_BUNDLE_DIR_FORMAT;
    filesToBuild.add(testApp.getIpa());
  }
  J2ObjcMappingFileProvider j2ObjcMappingFileProvider=J2ObjcMappingFileProvider.union(ruleContext.getPrerequisites("deps",Mode.TARGET,J2ObjcMappingFileProvider.class));
  J2ObjcEntryClassProvider j2ObjcEntryClassProvider=new J2ObjcEntryClassProvider.Builder().addTransitive(ruleContext.getPrerequisites("deps",Mode.TARGET,J2ObjcEntryClassProvider.class)).build();
  new CompilationSupport(ruleContext).registerLinkActions(common.getObjcProvider(),j2ObjcMappingFileProvider,j2ObjcEntryClassProvider,extraLinkArgs,extraLinkInputs,DsymOutputType.TEST).registerCompileAndArchiveActions(common).registerFullyLinkAction(common.getObjcProvider()).addXcodeSettings(xcodeProviderBuilder,common).validateAttributes();
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  new ReleaseBundlingSupport(ruleContext,common.getObjcProvider(),LinkedBinary.LOCAL_AND_DEPENDENCIES,bundleFormat,objcConfiguration.getMinimumOs()).registerActions(DsymOutputType.TEST).addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild,DsymOutputType.TEST).validateResources().validateAttributes();
  new ResourceSupport(ruleContext).validateAttributes().addXcodeSettings(xcodeProviderBuilder);
  new XcodeSupport(ruleContext).addXcodeSettings(xcodeProviderBuilder,common.getObjcProvider(),productType).addDependencies(xcodeProviderBuilder,new Attribute("bundles",Mode.TARGET)).addDependencies(xcodeProviderBuilder,new Attribute("deps",Mode.TARGET)).addNonPropagatedDependencies(xcodeProviderBuilder,new Attribute("non_propagated_deps",Mode.TARGET)).addFilesToBuild(filesToBuild).registerActions(xcodeProviderBuilder.build());
  XcodeProvider xcodeProvider=xcodeProviderBuilder.build();
  NestedSet<Artifact> filesToBuildSet=filesToBuild.build();
  Runfiles.Builder runfilesBuilder=new Runfiles.Builder(ruleContext.getWorkspaceName(),ruleContext.getConfiguration().legacyExternalRunfiles()).addRunfiles(ruleContext,RunfilesProvider.DEFAULT_RUNFILES);
  NestedSetBuilder<Artifact> filesToBuildBuilder=NestedSetBuilder.<Artifact>stableOrder().addTransitive(filesToBuildSet);
  InstrumentedFilesProvider instrumentedFilesProvider=new CompilationSupport(ruleContext).getInstrumentedFilesProvider(common);
  TestSupport testSupport=new TestSupport(ruleContext).registerTestRunnerActions().addRunfiles(runfilesBuilder,instrumentedFilesProvider).addFilesToBuild(filesToBuildBuilder);
  Artifact executable=testSupport.generatedTestScript();
  Runfiles runfiles=runfilesBuilder.build();
  RunfilesSupport runfilesSupport=RunfilesSupport.withExecutable(ruleContext,runfiles,executable);
  return new RuleConfiguredTargetBuilder(ruleContext).setFilesToBuild(filesToBuildBuilder.build()).add(XcodeProvider.class,xcodeProvider).add(RunfilesProvider.class,RunfilesProvider.simple(runfiles)).add(ExecutionInfoProvider.class,new ExecutionInfoProvider(ImmutableMap.of(ExecutionRequirements.REQUIRES_DARWIN,""))).addProvider(InstrumentedFilesProvider.class,instrumentedFilesProvider).addProviders(testSupport.getExtraProviders()).setRunfilesSupport(runfilesSupport,executable).build();
}
