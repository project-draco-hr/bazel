{
  Preconditions.checkNotNull(currentValue);
  Preconditions.checkState(!childErrors.isEmpty(),"Error value %s with no exception must depend on another error value",currentValue);
  NestedSetBuilder<SkyKey> builder=NestedSetBuilder.stableOrder();
  ImmutableList.Builder<CycleInfo> cycleBuilder=ImmutableList.builder();
  Exception firstException=null;
  SkyKey firstChildKey=null;
  boolean isCatastrophic=false;
  for (  ErrorInfo child : childErrors) {
    if (firstException == null) {
      firstException=child.getException();
      firstChildKey=child.getRootCauseOfException();
    }
    builder.addTransitive(child.rootCauses);
    cycleBuilder.addAll(CycleInfo.prepareCycles(currentValue,child.cycles));
    isCatastrophic|=child.isCatastrophic();
  }
  this.rootCauses=builder.build();
  this.exception=firstException;
  this.rootCauseOfException=firstChildKey;
  this.cycles=cycleBuilder.build();
  this.isTransient=false;
  this.isCatastrophic=isCatastrophic;
}
