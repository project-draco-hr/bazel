{
  String compressedClasspath=build.getClassPath();
  if (!build.getSourceFiles().isEmpty()) {
    compressedClasspath=build.getDependencyModule().computeStrictClasspath(build.getClassPath());
  }
  if (compressedClasspath.isEmpty()) {
    compressedClasspath=build.getClassDir();
  }
  String[] javacArguments=makeJavacArguments(build,compressedClasspath);
  StringWriter javacOutput=new StringWriter();
  PrintWriter javacOutputWriter=new PrintWriter(javacOutput);
  Result result=javacRunner.invokeJavac(build.getPlugins(),javacArguments,javacOutputWriter);
  javacOutputWriter.close();
  if (!result.isOK() && hasRecognizedError(javacOutput.toString())) {
    if (debug) {
      err.println("warning: [transitive] Target uses transitive classpath to compile.");
    }
    prepareSourceCompilation(build);
    javacArguments=makeJavacArguments(build);
    result=javacRunner.invokeJavac(build.getPlugins(),javacArguments,err);
  }
 else {
    err.print(javacOutput.getBuffer());
  }
  return result;
}
