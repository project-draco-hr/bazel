{
  Preconditions.checkNotNull(pkg);
  Preconditions.checkNotNull(filename);
  Preconditions.checkNotNull(buildFileLabel);
  Preconditions.checkNotNull(makeEnv);
  subincludes=(subincludes == null) ? Collections.<Label,Path>emptyMap() : Collections.unmodifiableMap(subincludes);
  buildFile=(InputFile)Preconditions.checkNotNull(targets.get(buildFileLabel.getName()));
  List<Rule> rules=Lists.newArrayList(getTargets(Rule.class));
  for (  final Rule rule : rules) {
    AggregatingAttributeMapper.of(rule).visitLabels(new AcceptsLabelAttribute(){
      @Override public void acceptLabelAttribute(      Label label,      Attribute attribute){
        createInputFileMaybe(label,rule.getAttributeLocation(attribute.getName()));
      }
    }
);
  }
  List<Label> allTests=new ArrayList<>();
  for (  Rule rule : rules) {
    if (TargetUtils.isTestRule(rule) && !TargetUtils.hasManualTag(rule)) {
      allTests.add(rule.getLabel());
    }
  }
  for (  Rule rule : rules) {
    AttributeMap attributes=NonconfigurableAttributeMapper.of(rule);
    if (rule.getRuleClass().equals("test_suite") && attributes.get("tests",Type.LABEL_LIST).isEmpty() && (!attributes.has("suites",Type.LABEL_LIST) || attributes.get("suites",Type.LABEL_LIST).isEmpty())) {
      rule.setAttributeValueByName("$implicit_tests",allTests);
    }
  }
  return self();
}
