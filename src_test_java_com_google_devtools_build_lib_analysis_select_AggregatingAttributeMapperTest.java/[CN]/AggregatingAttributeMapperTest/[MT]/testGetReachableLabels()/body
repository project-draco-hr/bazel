{
  Rule rule=createRule("x","main","cc_binary(","    name = 'main',","    srcs = select({","        '//conditions:a': ['a.cc'],","        '//conditions:b': ['b.cc']})","    + ","        ['always.cc']","    + ","         select({","        '//conditions:c': ['c.cc'],","        '//conditions:d': ['d.cc'],","        '" + BuildType.Selector.DEFAULT_CONDITION_KEY + "': ['default.cc'],","    }))");
  ImmutableList<Label> valueLabels=ImmutableList.of(Label.create("x","a.cc"),Label.create("x","b.cc"),Label.create("x","always.cc"),Label.create("x","c.cc"),Label.create("x","d.cc"),Label.create("x","default.cc"));
  ImmutableList<Label> keyLabels=ImmutableList.of(Label.create("conditions","a"),Label.create("conditions","b"),Label.create("conditions","c"),Label.create("conditions","d"));
  AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
  assertThat(mapper.getReachableLabels("srcs",true)).containsExactlyElementsIn(Iterables.concat(valueLabels,keyLabels));
  assertThat(mapper.getReachableLabels("srcs",false)).containsExactlyElementsIn(valueLabels);
}
