{
  String capitalizedSubtool=subtoolName.toUpperCase(Locale.US);
  if (args.length < MIN_ARGS) {
    return new ArgumentsParsing(Optional.of(String.format("Expected at least %1$d args.\n" + "Usage: java %2$s OUTZIP ARCHIVEROOT (%3$s_CMD %3$s ARGS)\n" + "Runs %4$s and zips the results.\n"+ "OUTZIP - the path to place the output zip file.\n"+ "ARCHIVEROOT - the path in the zip to place the output, or an empty\n"+ "    string for the root of the zip. e.g. 'Payload/foo.app'. If\n"+ "    this tool outputs a single file, ARCHIVEROOT is the name of\n"+ "    the only file in the zip file.\n"+ "%3$s_CMD - path to the subtool.\n"+ "    e.g. /Applications/Xcode.app/Contents/Developer/usr/bin/actool\n"+ "%3$s ARGS - the arguments to pass to %4$s besides the\n"+ "    one that specifies the output directory.\n",MIN_ARGS,wrapperName,capitalizedSubtool,subtoolName)),Optional.<Arguments>absent());
  }
  String outputZip=args[0];
  String archiveRoot=args[1];
  String subtoolCmd=args[2];
  if (archiveRoot.startsWith("/")) {
    return new ArgumentsParsing(Optional.of(String.format("Archive root cannot start with /: '%s'\n",archiveRoot)),Optional.<Arguments>absent());
  }
  subtoolCmd=subtoolCmd.replace("/iPhoneOS.platform/","/iPhoneSimulator.platform/");
  if (!Files.isRegularFile(fileSystem.getPath(subtoolCmd))) {
    return new ArgumentsParsing(Optional.of(String.format("The given %s_CMD does not exist: '%s'\n",capitalizedSubtool,subtoolCmd)),Optional.<Arguments>absent());
  }
  return new ArgumentsParsing(Optional.<String>absent(),Optional.<Arguments>of(new Arguments(outputZip,archiveRoot,subtoolCmd,ImmutableList.copyOf(args).subList(MIN_ARGS,args.length))));
}
