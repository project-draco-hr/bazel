def testMixedConstructor(self):
    proto = unittest_pb2.TestAllTypes(optional_int32=24, optional_string='optional_string', repeated_double=[1.23, 54.321], repeated_bool=[True, False, False], repeated_nested_message=[unittest_pb2.TestAllTypes.NestedMessage(bb=unittest_pb2.TestAllTypes.FOO), unittest_pb2.TestAllTypes.NestedMessage(bb=unittest_pb2.TestAllTypes.BAR)], repeated_foreign_message=[unittest_pb2.ForeignMessage(c=(-43)), unittest_pb2.ForeignMessage(c=45324), unittest_pb2.ForeignMessage(c=12)])
    self.assertEqual(24, proto.optional_int32)
    self.assertEqual('optional_string', proto.optional_string)
    self.assertEqual([1.23, 54.321], list(proto.repeated_double))
    self.assertEqual([True, False, False], list(proto.repeated_bool))
    self.assertEqual([unittest_pb2.TestAllTypes.NestedMessage(bb=unittest_pb2.TestAllTypes.FOO), unittest_pb2.TestAllTypes.NestedMessage(bb=unittest_pb2.TestAllTypes.BAR)], list(proto.repeated_nested_message))
    self.assertEqual([unittest_pb2.ForeignMessage(c=(-43)), unittest_pb2.ForeignMessage(c=45324), unittest_pb2.ForeignMessage(c=12)], list(proto.repeated_foreign_message))
