def testRepeatedComposites(self):
    proto = unittest_pb2.TestAllTypes()
    self.assertTrue((not proto.repeated_nested_message))
    self.assertEqual(0, len(proto.repeated_nested_message))
    m0 = proto.repeated_nested_message.add()
    m1 = proto.repeated_nested_message.add()
    self.assertTrue(proto.repeated_nested_message)
    self.assertEqual(2, len(proto.repeated_nested_message))
    self.assertListsEqual([m0, m1], proto.repeated_nested_message)
    self.assertIsInstance(m0, unittest_pb2.TestAllTypes.NestedMessage)
    self.assertRaises(IndexError, proto.repeated_nested_message.__getitem__, 1234)
    self.assertRaises(IndexError, proto.repeated_nested_message.__getitem__, (-1234))
    self.assertRaises(TypeError, proto.repeated_nested_message.__getitem__, 'foo')
    self.assertRaises(TypeError, proto.repeated_nested_message.__getitem__, None)
    m2 = proto.repeated_nested_message.add()
    m3 = proto.repeated_nested_message.add()
    m4 = proto.repeated_nested_message.add()
    self.assertListsEqual([m1, m2, m3], proto.repeated_nested_message[1:4])
    self.assertListsEqual([m0, m1, m2, m3, m4], proto.repeated_nested_message[:])
    self.assertListsEqual([m0, m1], proto.repeated_nested_message[:2])
    self.assertListsEqual([m2, m3, m4], proto.repeated_nested_message[2:])
    self.assertEqual(m0, proto.repeated_nested_message[0])
    self.assertListsEqual([m0], proto.repeated_nested_message[:1])
    result = []
    for i in proto.repeated_nested_message:
        result.append(i)
    self.assertListsEqual([m0, m1, m2, m3, m4], result)
    del proto.repeated_nested_message[2]
    self.assertListsEqual([m0, m1, m3, m4], proto.repeated_nested_message)
    del proto.repeated_nested_message[2:]
    self.assertListsEqual([m0, m1], proto.repeated_nested_message)
    n1 = unittest_pb2.TestAllTypes.NestedMessage(bb=1)
    n2 = unittest_pb2.TestAllTypes.NestedMessage(bb=2)
    proto.repeated_nested_message.extend([n1, n2])
    self.assertEqual(4, len(proto.repeated_nested_message))
    self.assertEqual(n1, proto.repeated_nested_message[2])
    self.assertEqual(n2, proto.repeated_nested_message[3])
    proto.ClearField('repeated_nested_message')
    self.assertTrue((not proto.repeated_nested_message))
    self.assertEqual(0, len(proto.repeated_nested_message))
    proto.repeated_nested_message.add(bb=23)
    self.assertEqual(1, len(proto.repeated_nested_message))
    self.assertEqual(23, proto.repeated_nested_message[0].bb)
