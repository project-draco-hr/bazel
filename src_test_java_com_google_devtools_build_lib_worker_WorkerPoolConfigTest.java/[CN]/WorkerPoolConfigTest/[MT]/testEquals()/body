{
  WorkerPoolConfig config1a=new WorkerPoolConfig();
  config1a.setLifo(true);
  config1a.setMaxIdlePerKey(4);
  config1a.setMaxTotalPerKey(4);
  config1a.setMinIdlePerKey(4);
  config1a.setMaxTotal(-1);
  config1a.setBlockWhenExhausted(true);
  config1a.setTestOnBorrow(true);
  config1a.setTestOnCreate(false);
  config1a.setTestOnReturn(true);
  config1a.setTimeBetweenEvictionRunsMillis(-1);
  WorkerPoolConfig config1b=new WorkerPoolConfig();
  config1b.setLifo(true);
  config1b.setMaxIdlePerKey(4);
  config1b.setMaxTotalPerKey(4);
  config1b.setMinIdlePerKey(4);
  config1b.setMaxTotal(-1);
  config1b.setBlockWhenExhausted(true);
  config1b.setTestOnBorrow(true);
  config1b.setTestOnCreate(false);
  config1b.setTestOnReturn(true);
  config1b.setTimeBetweenEvictionRunsMillis(-1);
  WorkerPoolConfig config2a=new WorkerPoolConfig();
  config2a.setLifo(true);
  config2a.setMaxIdlePerKey(1);
  config2a.setMaxTotalPerKey(1);
  config2a.setMinIdlePerKey(1);
  config2a.setMaxTotal(-1);
  config2a.setBlockWhenExhausted(true);
  config2a.setTestOnBorrow(true);
  config2a.setTestOnCreate(false);
  config2a.setTestOnReturn(true);
  config2a.setTimeBetweenEvictionRunsMillis(-1);
  WorkerPoolConfig config2b=new WorkerPoolConfig();
  config2b.setLifo(true);
  config2b.setMaxIdlePerKey(1);
  config2b.setMaxTotalPerKey(1);
  config2b.setMinIdlePerKey(1);
  config2b.setMaxTotal(-1);
  config2b.setBlockWhenExhausted(true);
  config2b.setTestOnBorrow(true);
  config2b.setTestOnCreate(false);
  config2b.setTestOnReturn(true);
  config2b.setTimeBetweenEvictionRunsMillis(-1);
  new EqualsTester().addEqualityGroup(config1a,config1b).addEqualityGroup(config2a,config2b).testEquals();
}
