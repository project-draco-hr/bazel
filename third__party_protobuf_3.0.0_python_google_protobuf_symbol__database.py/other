"A database of Python protocol buffer generated symbols.\n\nSymbolDatabase is the MessageFactory for messages generated at compile time,\nand makes it easy to create new instances of a registered type, given only the\ntype's protocol buffer symbol name.\n\nExample usage:\n\n  db = symbol_database.SymbolDatabase()\n\n  # Register symbols of interest, from one or multiple files.\n  db.RegisterFileDescriptor(my_proto_pb2.DESCRIPTOR)\n  db.RegisterMessage(my_proto_pb2.MyMessage)\n  db.RegisterEnumDescriptor(my_proto_pb2.MyEnum.DESCRIPTOR)\n\n  # The database can be used as a MessageFactory, to generate types based on\n  # their name:\n  types = db.GetMessages(['my_proto.proto'])\n  my_message_instance = types['MyMessage']()\n\n  # The database's underlying descriptor pool can be queried, so it's not\n  # necessary to know a type's filename to be able to generate it:\n  filename = db.pool.FindFileContainingSymbol('MyMessage')\n  my_message_instance = db.GetMessages([filename])['MyMessage']()\n\n  # This functionality is also provided directly via a convenience method:\n  my_message_instance = db.GetSymbol('MyMessage')()\n"
from google.protobuf import descriptor_pool
from google.protobuf import message_factory
_DEFAULT = SymbolDatabase(pool=descriptor_pool.Default())
