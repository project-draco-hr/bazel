{
  CcLinkingOutputs linkingOutputs=CcLinkingOutputs.builder().addStaticLibraries(ImmutableList.copyOf(LinkerInputs.opaqueLibrariesToLink(ArtifactCategory.STATIC_LIBRARY,Arrays.asList(getSourceArtifact("liba.a"),getSourceArtifact("libb.a"),getSourceArtifact("libc.a"),getSourceArtifact("libd.a"))))).addPicStaticLibraries(ImmutableList.copyOf(LinkerInputs.opaqueLibrariesToLink(ArtifactCategory.STATIC_LIBRARY,Arrays.asList(getSourceArtifact("liba.pic.a"),getSourceArtifact("libb.pic.a"),getSourceArtifact("libe.pic.a"),getSourceArtifact("libf.pic.a"))))).addDynamicLibraries(ImmutableList.copyOf(LinkerInputs.opaqueLibrariesToLink(ArtifactCategory.DYNAMIC_LIBRARY,Arrays.asList(getSourceArtifact("liba.so"),getSourceArtifact("libc.so"),getSourceArtifact("libe.so"),getSourceArtifact("libg.so"))))).build();
  List<Artifact> sharedLibraries1=FileType.filterList(LinkerInputs.toLibraryArtifacts(linkingOutputs.getPreferredLibraries(true,false)),CppFileTypes.SHARED_LIBRARY);
  List<Artifact> sharedLibraries2=FileType.filterList(LinkerInputs.toLibraryArtifacts(linkingOutputs.getPreferredLibraries(true,true)),CppFileTypes.SHARED_LIBRARY);
  assertEquals(sharedLibraries1,sharedLibraries2);
}
