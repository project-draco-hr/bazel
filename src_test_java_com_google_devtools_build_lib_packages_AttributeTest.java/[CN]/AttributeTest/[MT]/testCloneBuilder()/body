{
  FileTypeSet txtFiles=FileTypeSet.of(FileType.of("txt"));
  RuleClass.Builder.RuleClassNamePredicate ruleClasses=new RuleClass.Builder.RuleClassNamePredicate("mock_rule");
  Attribute parentAttr=attr("x",LABEL_LIST).allowedFileTypes(txtFiles).mandatory().aspect(TestAspects.SimpleAspect.class).build();
{
    Attribute childAttr1=parentAttr.cloneBuilder().build();
    assertEquals("x",childAttr1.getName());
    assertEquals(txtFiles,childAttr1.getAllowedFileTypesPredicate());
    assertEquals(Predicates.alwaysTrue(),childAttr1.getAllowedRuleClassesPredicate());
    assertTrue(childAttr1.isMandatory());
    assertFalse(childAttr1.isNonEmpty());
    assertThat(childAttr1.getAspects(null)).hasSize(1);
  }
{
    Attribute childAttr2=parentAttr.cloneBuilder().nonEmpty().allowedRuleClasses(ruleClasses).aspect(TestAspects.ErrorAspect.class).build();
    assertEquals("x",childAttr2.getName());
    assertEquals(txtFiles,childAttr2.getAllowedFileTypesPredicate());
    assertEquals(ruleClasses,childAttr2.getAllowedRuleClassesPredicate());
    assertTrue(childAttr2.isMandatory());
    assertTrue(childAttr2.isNonEmpty());
    assertThat(childAttr2.getAspects(null)).hasSize(2);
  }
  assertFalse(parentAttr.isNonEmpty());
  assertEquals(Predicates.alwaysTrue(),parentAttr.getAllowedRuleClassesPredicate());
}
