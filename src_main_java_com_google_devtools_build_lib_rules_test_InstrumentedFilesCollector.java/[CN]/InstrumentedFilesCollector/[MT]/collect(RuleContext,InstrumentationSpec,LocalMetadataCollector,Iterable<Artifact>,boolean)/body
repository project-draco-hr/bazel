{
  Preconditions.checkNotNull(ruleContext);
  Preconditions.checkNotNull(spec);
  if (!ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    return InstrumentedFilesProviderImpl.EMPTY;
  }
  NestedSetBuilder<Artifact> instrumentedFilesBuilder=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Artifact> metadataFilesBuilder=NestedSetBuilder.stableOrder();
  Iterable<TransitiveInfoCollection> prereqs=getAllPrerequisites(ruleContext,spec);
  for (  TransitiveInfoCollection dep : prereqs) {
    InstrumentedFilesProvider provider=dep.getProvider(InstrumentedFilesProvider.class);
    if (provider != null) {
      instrumentedFilesBuilder.addTransitive(provider.getInstrumentedFiles());
      metadataFilesBuilder.addTransitive(provider.getInstrumentationMetadataFiles());
    }
  }
  NestedSet<Artifact> localSources=NestedSetBuilder.emptySet(Order.STABLE_ORDER);
  if (shouldIncludeLocalSources(ruleContext)) {
    NestedSetBuilder<Artifact> localSourcesBuilder=NestedSetBuilder.stableOrder();
    for (    TransitiveInfoCollection dep : prereqs) {
      for (      Artifact artifact : dep.getProvider(FileProvider.class).getFilesToBuild()) {
        if (artifact.isSourceArtifact() && spec.instrumentedFileTypes.matches(artifact.getFilename())) {
          localSourcesBuilder.add(artifact);
        }
      }
    }
    localSources=localSourcesBuilder.build();
  }
  instrumentedFilesBuilder.addTransitive(localSources);
  if (localMetadataCollector != null) {
    localMetadataCollector.collectMetadataArtifacts(rootFiles,ruleContext.getAnalysisEnvironment(),metadataFilesBuilder);
  }
  NestedSet<Artifact> instrumentedFiles=instrumentedFilesBuilder.build();
  NestedSet<Artifact> baselineCoverageArtifacts;
  if (withBaselineCoverage) {
    baselineCoverageArtifacts=BaselineCoverageAction.getBaselineCoverageArtifacts(ruleContext,instrumentedFiles);
  }
 else {
    baselineCoverageArtifacts=NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER);
  }
  return new InstrumentedFilesProviderImpl(instrumentedFiles,metadataFilesBuilder.build(),baselineCoverageArtifacts,ImmutableMap.<String,String>of());
}
