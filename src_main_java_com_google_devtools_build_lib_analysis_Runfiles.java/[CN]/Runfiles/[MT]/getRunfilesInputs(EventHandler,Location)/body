{
  ConflictChecker checker=new ConflictChecker(conflictPolicy,eventHandler,location);
  Map<PathFragment,Artifact> manifest=getSymlinksAsMap(checker);
  for (  Artifact artifact : getUnconditionalArtifactsWithoutMiddlemen()) {
    checker.put(manifest,artifact.getRootRelativePath().normalize(),artifact);
  }
  for (  Runfiles.PruningManifest pruningManifest : getPruningManifests()) {
    Map<String,Artifact> allowedRunfiles=new HashMap<>();
    for (    Artifact artifact : pruningManifest.getCandidateRunfiles()) {
      allowedRunfiles.put(artifact.getRootRelativePath().getPathString(),artifact);
    }
    try (BufferedReader reader=new BufferedReader(new InputStreamReader(pruningManifest.getManifestFile().getPath().getInputStream()))){
      String line;
      while ((line=reader.readLine()) != null) {
        Artifact artifact=allowedRunfiles.get(line);
        if (artifact != null) {
          checker.put(manifest,artifact.getRootRelativePath(),artifact);
        }
      }
    }
   }
  manifest=filterListForObscuringSymlinks(eventHandler,location,manifest);
  for (  PathFragment extraPath : emptyFilesSupplier.getExtraPaths(manifest.keySet())) {
    checker.put(manifest,extraPath,null);
  }
  ManifestBuilder builder=new ManifestBuilder(suffix,legacyExternalRunfiles);
  builder.addUnderWorkspace(manifest,checker);
  if (conflictPolicy == ConflictPolicy.IGNORE) {
    checker=new ConflictChecker(ConflictPolicy.WARN,eventHandler,location);
  }
  builder.add(getRootSymlinksAsMap(checker),checker);
  return builder.build();
}
