{
  rootCauses.clear();
  lastBuildKeepGoing=false;
  EvaluationResult<TransitiveTargetValue> result=transitivePackageLoader.loadTransitiveTargets(eventHandler,targetsToVisit,labelsToVisit,keepGoing,parallelThreads);
  updateVisitedValues(result.values());
  lastBuildKeepGoing=keepGoing;
  if (!hasErrors(result)) {
    return true;
  }
  Set<Entry<SkyKey,ErrorInfo>> errors=result.errorMap().entrySet();
  if (!keepGoing) {
    Preconditions.checkState(!errors.isEmpty(),result);
    Entry<SkyKey,ErrorInfo> error=errors.iterator().next();
    ErrorInfo errorInfo=error.getValue();
    SkyKey topLevel=error.getKey();
    Label topLevelLabel=(Label)topLevel.argument();
    if (!Iterables.isEmpty(errorInfo.getCycleInfo())) {
      skyframeCyclesReporter.get().reportCycles(errorInfo.getCycleInfo(),topLevel,eventHandler);
      errorAboutLoadingFailure(topLevelLabel,null,eventHandler);
    }
 else     if (isDirectErrorFromTopLevelLabel(topLevelLabel,labelsToVisit,errorInfo)) {
      errorAboutLoadingFailure(topLevelLabel,errorInfo.getException(),eventHandler);
    }
    return false;
  }
  for (  Entry<SkyKey,ErrorInfo> errorEntry : errors) {
    SkyKey key=errorEntry.getKey();
    ErrorInfo errorInfo=errorEntry.getValue();
    Preconditions.checkState(key.functionName().equals(SkyFunctions.TRANSITIVE_TARGET),errorEntry);
    Label topLevelLabel=(Label)key.argument();
    if (!Iterables.isEmpty(errorInfo.getCycleInfo())) {
      skyframeCyclesReporter.get().reportCycles(errorInfo.getCycleInfo(),key,eventHandler);
      rootCauses.putAll(topLevelLabel,getRootCausesOfCycles(topLevelLabel,errorInfo.getCycleInfo()));
    }
    if (isDirectErrorFromTopLevelLabel(topLevelLabel,labelsToVisit,errorInfo)) {
      eventHandler.handle(Event.error(errorInfo.getException().getMessage()));
    }
    warnAboutLoadingFailure(topLevelLabel,eventHandler);
    for (    SkyKey badKey : errorInfo.getRootCauses()) {
      if (badKey.functionName().equals(SkyFunctions.PACKAGE)) {
        continue;
      }
      Preconditions.checkState(badKey.argument() instanceof Label,"%s %s %s",key,errorInfo,badKey);
      rootCauses.put(topLevelLabel,(Label)badKey.argument());
    }
  }
  for (  Label topLevelLabel : result.<Label>keyNames()) {
    SkyKey topLevelTransitiveTargetKey=TransitiveTargetValue.key(topLevelLabel);
    TransitiveTargetValue topLevelTransitiveTargetValue=result.get(topLevelTransitiveTargetKey);
    if (topLevelTransitiveTargetValue.getTransitiveRootCauses() != null) {
      rootCauses.putAll(topLevelLabel,topLevelTransitiveTargetValue.getTransitiveRootCauses());
      warnAboutLoadingFailure(topLevelLabel,eventHandler);
    }
  }
  return false;
}
