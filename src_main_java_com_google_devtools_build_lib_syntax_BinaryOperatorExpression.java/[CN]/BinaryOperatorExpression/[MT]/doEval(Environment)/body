{
  Object lval=lhs.eval(env);
  if (operator == Operator.AND) {
    if (EvalUtils.toBoolean(lval)) {
      return rhs.eval(env);
    }
 else {
      return lval;
    }
  }
  if (operator == Operator.OR) {
    if (EvalUtils.toBoolean(lval)) {
      return lval;
    }
 else {
      return rhs.eval(env);
    }
  }
  Object rval=rhs.eval(env);
switch (operator) {
case PLUS:
    return plus(lval,rval,env,getLocation());
case PIPE:
  return pipe(lval,rval,getLocation());
case MINUS:
return minus(lval,rval,getLocation());
case MULT:
return mult(lval,rval,getLocation());
case DIVIDE:
return divide(lval,rval,getLocation());
case PERCENT:
return percent(lval,rval,getLocation());
case EQUALS_EQUALS:
return lval.equals(rval);
case NOT_EQUALS:
return !lval.equals(rval);
case LESS:
return compare(lval,rval,getLocation()) < 0;
case LESS_EQUALS:
return compare(lval,rval,getLocation()) <= 0;
case GREATER:
return compare(lval,rval,getLocation()) > 0;
case GREATER_EQUALS:
return compare(lval,rval,getLocation()) >= 0;
case IN:
return in(lval,rval,getLocation());
case NOT_IN:
return !in(lval,rval,getLocation());
default :
throw new AssertionError("Unsupported binary operator: " + operator);
}
}
