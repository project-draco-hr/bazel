{
  if (lval instanceof Integer && rval instanceof Integer) {
    return ((Integer)lval).intValue() + ((Integer)rval).intValue();
  }
  if (lval instanceof String && rval instanceof String) {
    return (String)lval + (String)rval;
  }
  if (lval instanceof SelectorValue || rval instanceof SelectorValue || lval instanceof SelectorList|| rval instanceof SelectorList) {
    return SelectorList.concat(location,lval,rval);
  }
  if ((lval instanceof Tuple) && (rval instanceof Tuple)) {
    return Tuple.copyOf(Iterables.concat((Tuple)lval,(Tuple)rval));
  }
  if ((lval instanceof MutableList) && (rval instanceof MutableList)) {
    return MutableList.concat((MutableList)lval,(MutableList)rval,env);
  }
  if (lval instanceof Map<?,?> && rval instanceof Map<?,?>) {
    Map<?,?> ldict=(Map<?,?>)lval;
    Map<?,?> rdict=(Map<?,?>)rval;
    Map<Object,Object> result=new LinkedHashMap<>(ldict.size() + rdict.size());
    result.putAll(ldict);
    result.putAll(rdict);
    return ImmutableMap.copyOf(result);
  }
  if (lval instanceof SkylarkClassObject && rval instanceof SkylarkClassObject) {
    return SkylarkClassObject.concat((SkylarkClassObject)lval,(SkylarkClassObject)rval,location);
  }
  if (lval instanceof SkylarkNestedSet) {
    return new SkylarkNestedSet((SkylarkNestedSet)lval,rval,location);
  }
  throw typeException(lval,rval,Operator.PLUS,location);
}
