{
  deleteExisting();
  Map<PackageIdentifier,Set<Path>> dirRootsMap=Maps.newTreeMap();
  for (  Map.Entry<PackageIdentifier,Path> entry : packageRoots.entrySet()) {
    PackageIdentifier packageIdentifier=entry.getKey();
    PathFragment pkgDir=packageIdentifier.getPackageFragment();
    Path pkgRoot=entry.getValue();
    for (int i=0; i <= pkgDir.segmentCount(); i++) {
      PackageIdentifier dir=PackageIdentifier.create(packageIdentifier.getRepository(),pkgDir.subFragment(0,i));
      Set<Path> roots=dirRootsMap.get(dir);
      if (roots == null) {
        roots=Sets.newHashSet();
        dirRootsMap.put(dir,roots);
      }
      roots.add(pkgRoot);
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier packageIdentifier=entry.getKey();
    if (!packageRoots.containsKey(packageIdentifier)) {
      PackageIdentifier pkgDir=longestPathPrefix(packageIdentifier,packageRoots.keySet());
      if (pkgDir != null) {
        entry.getValue().add(packageRoots.get(pkgDir));
      }
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PathFragment dir=entry.getKey().getPathFragment();
    if (entry.getValue().size() > 1) {
      if (LOG_FINER) {
        LOG.finer("mkdir " + workspace.getRelative(dir));
      }
      FileSystemUtils.createDirectoryAndParents(workspace.getRelative(dir));
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier pkgId=entry.getKey();
    Path linkRoot=workspace.getRelative(pkgId.getRepository().getPathFragment());
    PathFragment dir=entry.getKey().getPackageFragment();
    Set<Path> roots=entry.getValue();
    if (roots.size() == 1) {
      if (pkgId.equals(PackageIdentifier.EMPTY_PACKAGE_IDENTIFIER)) {
        symlinkEmptyPackage(roots.iterator().next());
        continue;
      }
      if (dir.segmentCount() > 0) {
        PackageIdentifier parent=PackageIdentifier.create(pkgId.getRepository(),dir.getParentDirectory());
        if (dir.segmentCount() > 0 && dirRootsMap.get(parent).size() == 1) {
          continue;
        }
      }
      Path root=roots.iterator().next();
      if (LOG_FINER) {
        LOG.finer("ln -s " + root.getRelative(dir) + " "+ linkRoot.getRelative(dir));
      }
      linkRoot.getRelative(dir).createSymbolicLink(root.getRelative(dir));
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    Path linkRoot=workspace.getRelative(entry.getKey().getRepository().getPathFragment());
    PathFragment dir=entry.getKey().getPackageFragment();
    if (entry.getValue().size() > 1) {
      PackageIdentifier pkgDir=longestPathPrefix(entry.getKey(),packageRoots.keySet());
      if (pkgDir != null) {
        Path root=packageRoots.get(pkgDir);
        try {
          Path absdir=root.getRelative(dir);
          if (absdir.isDirectory()) {
            if (LOG_FINER) {
              LOG.finer("ln -s " + absdir + "/* "+ linkRoot.getRelative(dir)+ "/");
            }
            for (            Path target : absdir.getDirectoryEntries()) {
              PackageIdentifier dirent=PackageIdentifier.create(pkgDir.getRepository(),target.relativeTo(root));
              if (!dirRootsMap.containsKey(dirent)) {
                linkRoot.getRelative(dirent.getPackageFragment()).createSymbolicLink(target);
              }
            }
          }
 else {
            LOG.fine("Symlink planting skipping dir '" + absdir + "'");
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
}
