{
  deleteTreesBelowNotPrefixed(workspace,prefixes);
  Map<PackageIdentifier,Set<Path>> dirRootsMap=Maps.newTreeMap();
  for (  Map.Entry<PackageIdentifier,Path> entry : packageRoots.entrySet()) {
    PackageIdentifier pkgId=entry.getKey();
    Path pkgRoot=entry.getValue();
    for (int i=1; i <= pkgId.getPackageFragment().segmentCount(); i++) {
      if (pkgId.equals(Label.EXTERNAL_PACKAGE_IDENTIFIER)) {
        continue;
      }
      PackageIdentifier dir=createInRepo(pkgId,pkgId.getPackageFragment().subFragment(0,i));
      Set<Path> roots=dirRootsMap.get(dir);
      if (roots == null) {
        roots=Sets.newHashSet();
        dirRootsMap.put(dir,roots);
      }
      roots.add(pkgRoot);
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier dir=entry.getKey();
    if (!packageRoots.containsKey(dir)) {
      PackageIdentifier pkgId=longestPathPrefix(dir,packageRoots.keySet());
      if (pkgId != null) {
        entry.getValue().add(packageRoots.get(pkgId));
      }
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier dir=entry.getKey();
    if (!dir.getRepository().isMain()) {
      FileSystemUtils.createDirectoryAndParents(workspace.getRelative(dir.getRepository().getPathFragment()));
    }
    if (entry.getValue().size() > 1) {
      if (LOG_FINER) {
        LOG.finer("mkdir " + workspace.getRelative(dir.getPathFragment()));
      }
      FileSystemUtils.createDirectoryAndParents(workspace.getRelative(dir.getPathFragment()));
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier dir=entry.getKey();
    Set<Path> roots=entry.getValue();
    if (roots.size() == 1) {
      if (dir.getPackageFragment().segmentCount() > 1 && dirRootsMap.get(getParent(dir)).size() == 1) {
        continue;
      }
      Path root=roots.iterator().next();
      if (LOG_FINER) {
        LOG.finer("ln -s " + root.getRelative(dir.getPathFragment()) + " "+ workspace.getRelative(dir.getPathFragment()));
      }
      workspace.getRelative(dir.getPathFragment()).createSymbolicLink(root.getRelative(dir.getPathFragment()));
    }
  }
  for (  Map.Entry<PackageIdentifier,Set<Path>> entry : dirRootsMap.entrySet()) {
    PackageIdentifier dir=entry.getKey();
    if (entry.getValue().size() > 1) {
      PackageIdentifier pkgId=longestPathPrefix(dir,packageRoots.keySet());
      if (pkgId != null) {
        Path root=packageRoots.get(pkgId);
        try {
          Path absdir=root.getRelative(dir.getPathFragment());
          if (absdir.isDirectory()) {
            if (LOG_FINER) {
              LOG.finer("ln -s " + absdir + "/* "+ workspace.getRelative(dir.getPathFragment())+ "/");
            }
            for (            Path target : absdir.getDirectoryEntries()) {
              PathFragment p=target.relativeTo(root);
              if (!dirRootsMap.containsKey(createInRepo(pkgId,p))) {
                workspace.getRelative(p).createSymbolicLink(target);
              }
            }
          }
 else {
            LOG.fine("Symlink planting skipping dir '" + absdir + "'");
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  for (  Map.Entry<PackageIdentifier,Path> entry : packageRoots.entrySet()) {
    PackageIdentifier pkgId=entry.getKey();
    if (!pkgId.getPackageFragment().equals(PathFragment.EMPTY_FRAGMENT)) {
      continue;
    }
    Path execrootDirectory=workspace.getRelative(pkgId.getPathFragment());
    if (!execrootDirectory.exists()) {
      FileSystemUtils.createDirectoryAndParents(execrootDirectory);
    }
    Path sourceDirectory=entry.getValue().getRelative(pkgId.getPathFragment());
    for (    Path target : sourceDirectory.getDirectoryEntries()) {
      String baseName=target.getBaseName();
      Path execPath=execrootDirectory.getRelative(baseName);
      if (!baseName.startsWith(productName + "-") && !execPath.exists()) {
        execPath.createSymbolicLink(target);
      }
    }
  }
}
