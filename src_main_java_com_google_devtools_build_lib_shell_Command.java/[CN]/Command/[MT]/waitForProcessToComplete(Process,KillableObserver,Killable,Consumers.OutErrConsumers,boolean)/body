{
  log.finer("Waiting for process...");
  TerminationStatus status=waitForProcess(process,killSubprocessOnInterrupt);
  observer.stopObserving(processKillable);
  log.finer(status.toString());
  try {
    if (outErr != null) {
      if (Thread.currentThread().isInterrupted()) {
        outErr.cancel();
      }
 else {
        outErr.waitForCompletion();
      }
    }
  }
 catch (  IOException ioe) {
    CommandResult noOutputResult=new CommandResult(CommandResult.EMPTY_OUTPUT,CommandResult.EMPTY_OUTPUT,status);
    if (status.success()) {
      throw new AbnormalTerminationException(this,noOutputResult,ioe);
    }
 else {
      String message=status + "; also encountered an error while attempting to retrieve output";
      throw status.exited() ? new BadExitStatusException(this,noOutputResult,message,ioe) : new AbnormalTerminationException(this,noOutputResult,message,ioe);
    }
  }
  CommandResult result=new CommandResult(outErr != null ? outErr.getAccumulatedOut() : CommandResult.NO_OUTPUT_COLLECTED,outErr != null ? outErr.getAccumulatedErr() : CommandResult.NO_OUTPUT_COLLECTED,status);
  result.logThis();
  if (status.success()) {
    return result;
  }
 else   if (status.exited()) {
    throw new BadExitStatusException(this,result,status.toString());
  }
 else {
    throw new AbnormalTerminationException(this,result,status.toString());
  }
}
