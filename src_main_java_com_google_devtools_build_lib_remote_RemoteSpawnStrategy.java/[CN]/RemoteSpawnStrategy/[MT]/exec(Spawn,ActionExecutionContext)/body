{
  if (!spawn.isRemotable()) {
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  Executor executor=actionExecutionContext.getExecutor();
  ActionExecutionMetadata actionMetadata=spawn.getResourceOwner();
  ActionInputFileCache inputFileCache=actionExecutionContext.getActionInputFileCache();
  EventHandler eventHandler=executor.getEventHandler();
  if (remoteActionCache == null) {
    eventHandler.handle(Event.warn(spawn.getMnemonic() + " Cannot instantiate remote action cache. Running locally."));
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  Hasher hasher=Hashing.sha256().newHasher();
  Preconditions.checkNotNull(actionMetadata.getKey());
  hasher.putString(actionMetadata.getKey(),Charset.defaultCharset());
  List<ActionInput> inputs=ActionInputHelper.expandArtifacts(spawn.getInputFiles(),actionExecutionContext.getArtifactExpander());
  for (  ActionInput input : inputs) {
    hasher.putString(input.getExecPathString(),Charset.defaultCharset());
    try {
      hasher.putBytes(inputFileCache.getDigest(input));
    }
 catch (    IOException e) {
      throw new UserExecException("Failed to get digest for input.",e);
    }
  }
  String actionOutputKey=hasher.hash().toString();
  int timeout=120;
  String timeoutStr=spawn.getExecutionInfo().get("timeout");
  if (timeoutStr != null) {
    try {
      timeout=Integer.parseInt(timeoutStr);
    }
 catch (    NumberFormatException e) {
      throw new UserExecException("could not parse timeout: ",e);
    }
  }
  try {
    if (writeActionOutput(spawn.getMnemonic(),actionOutputKey,eventHandler,true)) {
      return;
    }
    FileOutErr outErr=actionExecutionContext.getFileOutErr();
    if (executeWorkRemotely(inputFileCache,spawn.getMnemonic(),actionOutputKey,spawn.getArguments(),inputs,spawn.getEnvironment(),spawn.getOutputFiles(),timeout,eventHandler,outErr)) {
      return;
    }
    standaloneStrategy.exec(spawn,actionExecutionContext);
    if (remoteActionCache != null) {
      remoteActionCache.putActionOutput(actionOutputKey,spawn.getOutputFiles());
    }
  }
 catch (  IOException e) {
    throw new UserExecException("Unexpected IO error.",e);
  }
catch (  UnsupportedOperationException e) {
    eventHandler.handle(Event.warn(spawn.getMnemonic() + " unsupported operation for action cache (" + e+ ")"));
  }
}
