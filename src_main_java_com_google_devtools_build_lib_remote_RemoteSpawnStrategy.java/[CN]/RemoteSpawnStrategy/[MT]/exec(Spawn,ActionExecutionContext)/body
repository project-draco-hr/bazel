{
  if (!spawn.isRemotable() || remoteActionCache == null) {
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  ActionKey actionKey=null;
  String mnemonic=spawn.getMnemonic();
  EventHandler eventHandler=actionExecutionContext.getExecutor().getEventHandler();
  try {
    TreeNodeRepository repository=new TreeNodeRepository(execRoot);
    List<ActionInput> inputs=ActionInputHelper.expandArtifacts(spawn.getInputFiles(),actionExecutionContext.getArtifactExpander());
    TreeNode inputRoot=repository.buildFromActionInputs(inputs);
    repository.computeMerkleDigests(inputRoot);
    Command command=buildCommand(spawn.getArguments(),spawn.getEnvironment());
    Action action=buildAction(spawn.getOutputFiles(),ContentDigests.computeDigest(command),repository.getMerkleDigest(inputRoot));
    actionKey=ContentDigests.computeActionKey(action);
    ActionResult result=remoteActionCache.getCachedActionResult(actionKey);
    boolean acceptCached=true;
    if (result != null) {
      try {
        remoteActionCache.downloadAllResults(result,execRoot);
        return;
      }
 catch (      CacheNotFoundException e) {
        acceptCached=false;
      }
    }
    if (remoteWorkExecutor == null) {
      execLocally(spawn,actionExecutionContext,actionKey);
      return;
    }
    remoteActionCache.uploadBlob(command.toByteArray());
    remoteActionCache.uploadTree(repository,execRoot,inputRoot);
    ExecuteRequest.Builder request=ExecuteRequest.newBuilder().setAction(action).setAcceptCached(acceptCached).setTotalInputFileCount(inputs.size()).setTimeoutMillis(1000 * Spawns.getTimeoutSeconds(spawn,120));
    ExecuteReply reply=remoteWorkExecutor.executeRemotely(request.build());
    ExecutionStatus status=reply.getStatus();
    result=reply.getResult();
    if (status.getSucceeded()) {
      passRemoteOutErr(result,actionExecutionContext.getFileOutErr());
      remoteActionCache.downloadAllResults(result,execRoot);
      return;
    }
    if (status.getError() == ExecutionStatus.ErrorCode.EXEC_FAILED) {
      passRemoteOutErr(result,actionExecutionContext.getFileOutErr());
      throw new UserExecException(status.getErrorDetail());
    }
    execLocally(spawn,actionExecutionContext,actionKey);
  }
 catch (  IOException e) {
    throw new UserExecException("Unexpected IO error.",e);
  }
catch (  InterruptedException e) {
    eventHandler.handle(Event.warn(mnemonic + " remote work interrupted (" + e+ ")"));
    Thread.currentThread().interrupt();
    throw e;
  }
catch (  StatusRuntimeException e) {
    eventHandler.handle(Event.warn(mnemonic + " remote work failed (" + e+ ")"));
    execLocally(spawn,actionExecutionContext,actionKey);
  }
catch (  CacheNotFoundException e) {
    eventHandler.handle(Event.warn(mnemonic + " remote work results cache miss (" + e+ ")"));
    execLocally(spawn,actionExecutionContext,actionKey);
  }
catch (  UnsupportedOperationException e) {
    eventHandler.handle(Event.warn(mnemonic + " unsupported operation for action cache (" + e+ ")"));
  }
}
