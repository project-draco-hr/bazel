'This package manipulates Docker image layer metadata.'
from collections import namedtuple
import copy
import json
import os
import os.path
import sys
from tools.build_defs.docker import utils
from third_party.py import gflags
gflags.DEFINE_string('name', None, 'The name of the current layer')
gflags.DEFINE_string('base', None, 'The parent image')
gflags.DEFINE_string('output', None, 'The output file to generate')
gflags.DEFINE_string('layer', None, 'The current layer tar')
gflags.DEFINE_list('entrypoint', None, 'Override the "Entrypoint" of the previous layer')
gflags.DEFINE_list('command', None, 'Override the "Cmd" of the previous layer')
gflags.DEFINE_string('user', None, 'The username to run commands under')
gflags.DEFINE_list('labels', None, 'Augment the "Label" of the previous layer')
gflags.DEFINE_list('ports', None, 'Augment the "ExposedPorts" of the previous layer')
gflags.DEFINE_list('volumes', None, 'Augment the "Volumes" of the previous layer')
gflags.DEFINE_string('workdir', None, 'Set the working directory for the layer')
gflags.DEFINE_list('env', None, 'Augment the "Env" of the previous layer')
FLAGS = gflags.FLAGS
_MetadataOptionsT = namedtuple('MetadataOptionsT', ['name', 'parent', 'size', 'entrypoint', 'cmd', 'env', 'labels', 'ports', 'volumes', 'workdir', 'user'])
_DOCKER_VERSION = '1.5.0'
_PROCESSOR_ARCHITECTURE = 'amd64'
_OPERATING_SYSTEM = 'linux'
if (__name__ == '__main__'):
    main(FLAGS(sys.argv))
