{
  if (linkTargetType.staticness() == Staticness.STATIC) {
    Preconditions.checkArgument(linkstamps.isEmpty(),"linkstamps may only be present on dynamic library or executable links");
    Preconditions.checkArgument(buildInfoHeaderArtifacts.isEmpty(),"build info headers may only be present on dynamic library or executable links");
  }
  ImmutableList<String> actualLinkstampCompileOptions;
  if (linkstampCompileOptions.isEmpty()) {
    actualLinkstampCompileOptions=DEFAULT_LINKSTAMP_OPTIONS;
  }
 else {
    actualLinkstampCompileOptions=ImmutableList.copyOf(Iterables.concat(DEFAULT_LINKSTAMP_OPTIONS,linkstampCompileOptions));
  }
  if (ruleContext != null) {
    if (featureConfiguration == null) {
      if (toolchain != null) {
        featureConfiguration=CcCommon.configureFeatures(ruleContext,toolchain,CcLibraryHelper.SourceCategory.CC);
      }
 else {
        featureConfiguration=CcCommon.configureFeatures(ruleContext);
      }
    }
  }
  if (variables == null) {
    variables=Variables.EMPTY;
  }
  String actionName=linkTargetType.getActionName();
  return new LinkCommandLine(actionName,configuration,owner,output,interfaceOutput,buildInfoHeaderArtifacts,linkerInputs,runtimeInputs,linkTargetType,linkStaticness,linkopts,features,linkstamps,actualLinkstampCompileOptions,CppHelper.getFdoBuildStamp(ruleContext),runtimeSolibDir,nativeDeps,useTestOnlyFlags,needWholeArchive,paramFile,interfaceSoBuilder,noWholeArchiveFlags,variables,featureConfiguration);
}
