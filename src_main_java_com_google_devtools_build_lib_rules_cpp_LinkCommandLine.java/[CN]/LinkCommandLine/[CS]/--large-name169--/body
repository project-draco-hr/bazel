{
  this.actionName=actionName;
  this.configuration=Preconditions.checkNotNull(configuration);
  this.cppConfiguration=configuration.getFragment(CppConfiguration.class);
  this.variables=variables;
  this.featureConfiguration=featureConfiguration;
  this.owner=Preconditions.checkNotNull(owner);
  this.output=output;
  this.interfaceOutput=interfaceOutput;
  if (interfaceOutput != null) {
    Preconditions.checkNotNull(this.output);
  }
  this.buildInfoHeaderArtifacts=Preconditions.checkNotNull(buildInfoHeaderArtifacts);
  this.linkerInputs=Preconditions.checkNotNull(linkerInputs);
  this.runtimeInputs=Preconditions.checkNotNull(runtimeInputs);
  this.linkTargetType=Preconditions.checkNotNull(linkTargetType);
  this.linkStaticness=Preconditions.checkNotNull(linkStaticness);
  this.linkopts=linkTargetType.isStaticLibraryLink() ? ImmutableList.<String>of() : Preconditions.checkNotNull(linkopts);
  this.features=Preconditions.checkNotNull(features);
  this.linkstamps=Preconditions.checkNotNull(linkstamps);
  this.linkstampCompileOptions=linkstampCompileOptions;
  this.fdoBuildStamp=fdoBuildStamp;
  this.runtimeSolibDir=runtimeSolibDir;
  this.nativeDeps=nativeDeps;
  this.useTestOnlyFlags=useTestOnlyFlags;
  this.paramFile=paramFile;
  this.noWholeArchiveFlags=noWholeArchiveFlags;
  this.interfaceSoBuilder=((linkTargetType == LinkTargetType.DYNAMIC_LIBRARY) && (interfaceOutput != null)) ? Preconditions.checkNotNull(interfaceSoBuilder,"cannot build interface dynamic library without builder") : null;
}
