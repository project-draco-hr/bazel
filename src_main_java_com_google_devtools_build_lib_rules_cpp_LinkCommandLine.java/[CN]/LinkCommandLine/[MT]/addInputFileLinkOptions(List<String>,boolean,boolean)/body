{
  boolean macosx=cppConfiguration.getTargetLibc().equals("macosx");
  if (globalNeedWholeArchive) {
    argv.add(macosx ? "-Wl,-all_load" : "-Wl,-whole-archive");
  }
  Set<String> libOpts=new LinkedHashSet<>();
  List<String> linkerInputs=new ArrayList<>();
  List<String> noWholeArchiveInputs=new ArrayList<>();
  PathFragment solibDir=configuration.getBinDirectory().getExecPath().getRelative(cppConfiguration.getSolibDirectory());
  String runtimeSolibName=runtimeSolibDir != null ? runtimeSolibDir.getBaseName() : null;
  boolean runtimeRpath=runtimeSolibDir != null && (linkTargetType == LinkTargetType.DYNAMIC_LIBRARY || (linkTargetType == LinkTargetType.EXECUTABLE && linkStaticness == LinkStaticness.DYNAMIC));
  String rpathRoot=null;
  List<String> runtimeRpathEntries=new ArrayList<>();
  if (output != null) {
    String origin=useTestOnlyFlags && cppConfiguration.supportsExecOrigin() ? "$EXEC_ORIGIN/" : "$ORIGIN/";
    if (runtimeRpath) {
      runtimeRpathEntries.add("-Wl,-rpath," + origin + runtimeSolibName+ "/");
    }
    if (isSharedNativeLibrary()) {
      rpathRoot="-Wl,-rpath," + origin + ":"+ origin+ cppConfiguration.getSolibDirectory()+ "/";
      if (runtimeRpath) {
        runtimeRpathEntries.add("-Wl,-rpath," + origin + "../"+ runtimeSolibName+ "/");
      }
    }
 else {
      if (runtimeRpath) {
        runtimeRpathEntries.add("-Wl,-rpath," + origin + Strings.repeat("../",output.getRootRelativePath().segmentCount() - 1)+ runtimeSolibName+ "/");
      }
      rpathRoot="-Wl,-rpath," + origin + Strings.repeat("../",output.getRootRelativePath().segmentCount() - 1)+ cppConfiguration.getSolibDirectory()+ "/";
      if (nativeDeps) {
        if (runtimeRpath) {
          runtimeRpathEntries.add("-Wl,-rpath," + origin + "../"+ runtimeSolibName+ "/");
        }
        rpathRoot+=":" + origin;
      }
    }
  }
  boolean includeSolibDir=false;
  Map<Artifact,Artifact> ltoMap=null;
  if (allLTOArtifacts != null) {
    Preconditions.checkState(cppConfiguration.useStartEndLib());
    ltoMap=new HashMap<>();
    for (    LTOBackendArtifacts l : allLTOArtifacts) {
      ltoMap.put(l.getBitcodeFile(),l.getObjectFile());
    }
  }
  for (  LinkerInput input : getLinkerInputs()) {
    if (isDynamicLibrary(input)) {
      PathFragment libDir=input.getArtifact().getExecPath().getParentDirectory();
      Preconditions.checkState(libDir.startsWith(solibDir),"Artifact '%s' is not under directory '%s'.",input.getArtifact(),solibDir);
      if (libDir.equals(solibDir)) {
        includeSolibDir=true;
      }
      addDynamicInputLinkOptions(input,linkerInputs,libOpts,solibDir,rpathRoot);
    }
 else {
      addStaticInputLinkOptions(input,linkerInputs,ltoMap);
    }
  }
  boolean includeRuntimeSolibDir=false;
  for (  LinkerInput input : runtimeInputs) {
    List<String> optionsList=globalNeedWholeArchive ? noWholeArchiveInputs : linkerInputs;
    if (isDynamicLibrary(input)) {
      PathFragment libDir=input.getArtifact().getExecPath().getParentDirectory();
      Preconditions.checkState(runtimeSolibDir != null && libDir.equals(runtimeSolibDir),"Artifact '%s' is not under directory '%s'.",input.getArtifact(),solibDir);
      includeRuntimeSolibDir=true;
      addDynamicInputLinkOptions(input,optionsList,libOpts,solibDir,rpathRoot);
    }
 else {
      addStaticInputLinkOptions(input,optionsList,ltoMap);
    }
  }
  if (includeSolibDir && rpathRoot != null) {
    argv.add(rpathRoot);
  }
  if (includeRuntimeSolibDir) {
    argv.addAll(runtimeRpathEntries);
  }
  argv.addAll(libOpts);
  for (  String option : linkerInputs) {
    if (!globalNeedWholeArchive && Link.LINK_LIBRARY_FILETYPES.matches(option)) {
      argv.add(macosx ? "-Wl,-all_load" : "-Wl,-whole-archive");
      argv.add(option);
      argv.add(macosx ? "-Wl,-noall_load" : "-Wl,-no-whole-archive");
    }
 else {
      argv.add(option);
    }
  }
  if (globalNeedWholeArchive) {
    argv.add(macosx ? "-Wl,-noall_load" : "-Wl,-no-whole-archive");
    argv.addAll(noWholeArchiveInputs);
  }
  if (includeLinkopts) {
    argv.addAll(linkopts);
  }
  if (ltoMap != null) {
    Preconditions.checkState(ltoMap.size() == 0,"Still have LTO objects left: " + ltoMap + ", command-line: "+ argv);
  }
}
