{
  List<String> argv=new ArrayList<>();
switch (linkTargetType) {
case EXECUTABLE:
    addCppArgv(argv);
  break;
case DYNAMIC_LIBRARY:
if (interfaceOutput != null) {
  argv.add(configuration.getShExecutable().getPathString());
  argv.add("-c");
  argv.add("build_iface_so=\"$0\"; impl=\"$1\"; iface=\"$2\"; cmd=\"$3\"; shift 3; " + "\"$cmd\" \"$@\" && \"$build_iface_so\" \"$impl\" \"$iface\"");
  argv.add(interfaceSoBuilder.getExecPathString());
  argv.add(output.getExecPathString());
  argv.add(interfaceOutput.getExecPathString());
}
addCppArgv(argv);
Iterables.removeIf(argv,Predicates.equalTo("-pie"));
break;
case STATIC_LIBRARY:
case PIC_STATIC_LIBRARY:
case ALWAYS_LINK_STATIC_LIBRARY:
case ALWAYS_LINK_PIC_STATIC_LIBRARY:
argv.add(cppConfiguration.getArExecutable().getPathString());
argv.addAll(cppConfiguration.getArFlags(cppConfiguration.archiveType() == Link.ArchiveType.THIN));
argv.add(output.getExecPathString());
addInputFileLinkOptions(argv,false,false);
break;
default :
throw new IllegalArgumentException();
}
if (!linkTargetType.isStaticLibraryLink() && cppConfiguration.useFission()) {
argv.add("-Wl,--gdb-index");
}
return argv;
}
