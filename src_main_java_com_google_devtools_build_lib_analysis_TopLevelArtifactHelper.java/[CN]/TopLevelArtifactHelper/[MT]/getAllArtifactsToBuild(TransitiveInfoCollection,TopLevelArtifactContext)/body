{
  NestedSetBuilder<Artifact> importantBuilder=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Artifact> allBuilder=NestedSetBuilder.stableOrder();
  TempsProvider tempsProvider=target.getProvider(TempsProvider.class);
  if (tempsProvider != null) {
    importantBuilder.addAll(tempsProvider.getTemps());
  }
  TopLevelArtifactProvider topLevelArtifactProvider=target.getProvider(TopLevelArtifactProvider.class);
  if (topLevelArtifactProvider != null) {
    for (    String outputGroup : context.outputGroups()) {
      NestedSet<Artifact> results=topLevelArtifactProvider.getOutputGroup(outputGroup);
      if (results != null) {
        if (outputGroup.startsWith(TopLevelArtifactProvider.HIDDEN_OUTPUT_GROUP_PREFIX)) {
          allBuilder.addTransitive(results);
        }
 else {
          importantBuilder.addTransitive(results);
        }
      }
    }
  }
  if (context.buildDefaultArtifacts() && !context.outputGroups().contains(TopLevelArtifactProvider.COMPILATION_PREREQUISITES) && !context.outputGroups().contains(TopLevelArtifactProvider.FILES_TO_COMPILE)) {
    FilesToRunProvider filesToRunProvider=target.getProvider(FilesToRunProvider.class);
    boolean hasRunfilesSupport=false;
    if (filesToRunProvider != null) {
      importantBuilder.addAll(filesToRunProvider.getFilesToRun());
      hasRunfilesSupport=filesToRunProvider.getRunfilesSupport() != null;
    }
    if (!hasRunfilesSupport) {
      RunfilesProvider runfilesProvider=target.getProvider(RunfilesProvider.class);
      if (runfilesProvider != null) {
        allBuilder.addTransitive(runfilesProvider.getDefaultRunfiles().getAllArtifacts());
      }
    }
    AlwaysBuiltArtifactsProvider forcedArtifacts=target.getProvider(AlwaysBuiltArtifactsProvider.class);
    if (forcedArtifacts != null) {
      allBuilder.addTransitive(forcedArtifacts.getArtifactsToAlwaysBuild());
    }
  }
  NestedSet<Artifact> importantArtifacts=importantBuilder.build();
  allBuilder.addTransitive(importantArtifacts);
  return new ArtifactsToBuild(importantArtifacts,allBuilder.build());
}
