{
  NestedSetBuilder<Artifact> importantBuilder=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Artifact> allBuilder=NestedSetBuilder.stableOrder();
  TopLevelArtifactProvider topLevelArtifactProvider=target.getProvider(TopLevelArtifactProvider.class);
  if (topLevelArtifactProvider != null) {
    for (    String outputGroup : context.outputGroups()) {
      NestedSet<Artifact> results=topLevelArtifactProvider.getOutputGroup(outputGroup);
      if (results != null) {
        if (outputGroup.startsWith(TopLevelArtifactProvider.HIDDEN_OUTPUT_GROUP_PREFIX)) {
          allBuilder.addTransitive(results);
        }
 else {
          importantBuilder.addTransitive(results);
        }
      }
    }
  }
  if (context.buildDefaultArtifacts() && !context.outputGroups().contains(TopLevelArtifactProvider.COMPILATION_PREREQUISITES) && !context.outputGroups().contains(TopLevelArtifactProvider.FILES_TO_COMPILE)) {
    FileProvider fileProvider=target.getProvider(FileProvider.class);
    if (fileProvider != null) {
      importantBuilder.addTransitive(fileProvider.getFilesToBuild());
    }
    if (topLevelArtifactProvider != null) {
      allBuilder.addTransitive(topLevelArtifactProvider.getOutputGroup(TopLevelArtifactProvider.HIDDEN_TOP_LEVEL));
    }
  }
  NestedSet<Artifact> importantArtifacts=importantBuilder.build();
  allBuilder.addTransitive(importantArtifacts);
  return new ArtifactsToBuild(importantArtifacts,allBuilder.build());
}
