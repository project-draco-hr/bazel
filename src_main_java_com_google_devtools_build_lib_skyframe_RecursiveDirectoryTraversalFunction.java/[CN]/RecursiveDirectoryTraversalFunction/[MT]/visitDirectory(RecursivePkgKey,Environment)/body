{
  RootedPath rootedPath=recursivePkgKey.getRootedPath();
  Set<PathFragment> excludedPaths=recursivePkgKey.getExcludedPaths();
  Path root=rootedPath.getRoot();
  PathFragment rootRelativePath=rootedPath.getRelativePath();
  SkyKey fileKey=FileValue.key(rootedPath);
  FileValue fileValue;
  try {
    fileValue=(FileValue)env.getValueOrThrow(fileKey,InconsistentFilesystemException.class,FileSymlinkException.class,IOException.class);
  }
 catch (  InconsistentFilesystemException|FileSymlinkException|IOException e) {
    return reportErrorAndReturn("Failed to get information about path",e,rootRelativePath,env.getListener());
  }
  if (fileValue == null) {
    return null;
  }
  if (!fileValue.isDirectory()) {
    return getEmptyReturn();
  }
  if (fileValue.isSymlink()) {
    return getEmptyReturn();
  }
  PackageIdentifier packageId=new PackageIdentifier(recursivePkgKey.getRepository(),rootRelativePath);
  PackageLookupValue pkgLookupValue;
  try {
    pkgLookupValue=(PackageLookupValue)env.getValueOrThrow(PackageLookupValue.key(packageId),NoSuchPackageException.class,InconsistentFilesystemException.class);
  }
 catch (  NoSuchPackageException|InconsistentFilesystemException e) {
    return reportErrorAndReturn("Failed to load package",e,rootRelativePath,env.getListener());
  }
  if (pkgLookupValue == null) {
    return null;
  }
  TVisitor visitor=getInitialVisitor();
  if (pkgLookupValue.packageExists()) {
    if (pkgLookupValue.getRoot().equals(root)) {
      Package pkg=null;
      try {
        PackageValue pkgValue=(PackageValue)env.getValueOrThrow(PackageValue.key(packageId),NoSuchPackageException.class);
        if (pkgValue == null) {
          return null;
        }
        pkg=pkgValue.getPackage();
        if (pkg.containsErrors()) {
          env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
        }
      }
 catch (      NoSuchPackageException e) {
        env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
      }
      if (pkg != null) {
        visitor.visitPackageValue(pkg,env);
        if (env.valuesMissing()) {
          return null;
        }
      }
    }
  }
  DirectoryListingValue dirValue;
  try {
    dirValue=(DirectoryListingValue)env.getValueOrThrow(DirectoryListingValue.key(rootedPath),InconsistentFilesystemException.class,IOException.class,FileSymlinkException.class);
  }
 catch (  InconsistentFilesystemException|IOException e) {
    return reportErrorAndReturn("Failed to list directory contents",e,rootRelativePath,env.getListener());
  }
catch (  FileSymlinkException e) {
    throw new IllegalStateException("Symlink cycle found after not being found for \"" + rootedPath + "\"");
  }
  if (dirValue == null) {
    return null;
  }
  List<SkyKey> childDeps=Lists.newArrayList();
  for (  Dirent dirent : dirValue.getDirents()) {
    if (dirent.getType() != Type.DIRECTORY) {
      continue;
    }
    String basename=dirent.getName();
    if (rootRelativePath.equals(PathFragment.EMPTY_FRAGMENT) && PathPackageLocator.DEFAULT_TOP_LEVEL_EXCLUDES.contains(basename)) {
      continue;
    }
    PathFragment subdirectory=rootRelativePath.getRelative(basename);
    if (excludedPaths.contains(subdirectory)) {
      continue;
    }
    ImmutableSet<PathFragment> excludedSubdirectoriesBeneathThisSubdirectory=PathFragment.filterPathsStartingWith(excludedPaths,subdirectory);
    RootedPath subdirectoryRootedPath=RootedPath.toRootedPath(root,subdirectory);
    childDeps.add(getSkyKeyForSubdirectory(recursivePkgKey.getRepository(),subdirectoryRootedPath,excludedSubdirectoriesBeneathThisSubdirectory));
  }
  Map<SkyKey,SkyValue> subdirectorySkyValues=env.getValues(childDeps);
  if (env.valuesMissing()) {
    return null;
  }
  return aggregateWithSubdirectorySkyValues(visitor,subdirectorySkyValues);
}
