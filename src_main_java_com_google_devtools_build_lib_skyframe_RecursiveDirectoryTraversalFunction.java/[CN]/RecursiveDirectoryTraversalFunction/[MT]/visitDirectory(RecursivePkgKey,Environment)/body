{
  RootedPath rootedPath=recursivePkgKey.getRootedPath();
  ImmutableSet<PathFragment> excludedPaths=recursivePkgKey.getExcludedPaths();
  Path root=rootedPath.getRoot();
  PathFragment rootRelativePath=rootedPath.getRelativePath();
  SkyKey fileKey=FileValue.key(rootedPath);
  FileValue fileValue;
  try {
    fileValue=(FileValue)env.getValueOrThrow(fileKey,InconsistentFilesystemException.class,FileSymlinkException.class,IOException.class);
  }
 catch (  InconsistentFilesystemException|FileSymlinkException|IOException e) {
    return reportErrorAndReturn("Failed to get information about path",e,rootRelativePath,env.getListener());
  }
  if (fileValue == null) {
    return null;
  }
  if (!fileValue.isDirectory()) {
    return getEmptyReturn();
  }
  PackageIdentifier packageId=PackageIdentifier.create(recursivePkgKey.getRepository(),rootRelativePath);
  if ((packageId.getRepository().isDefault() || packageId.getRepository().isMain()) && fileValue.isSymlink() && fileValue.getUnresolvedLinkTarget().startsWith(directories.getOutputBase().asFragment())) {
    return getEmptyReturn();
  }
  SkyKey pkgLookupKey=PackageLookupValue.key(packageId);
  SkyKey dirListingKey=DirectoryListingValue.key(rootedPath);
  Map<SkyKey,ValueOrException4<NoSuchPackageException,InconsistentFilesystemException,FileSymlinkException,IOException>> pkgLookupAndDirectoryListingDeps=env.getValuesOrThrow(ImmutableList.of(pkgLookupKey,dirListingKey),NoSuchPackageException.class,InconsistentFilesystemException.class,FileSymlinkException.class,IOException.class);
  if (env.valuesMissing()) {
    return null;
  }
  PackageLookupValue pkgLookupValue;
  try {
    pkgLookupValue=(PackageLookupValue)Preconditions.checkNotNull(pkgLookupAndDirectoryListingDeps.get(pkgLookupKey).get(),"%s %s",recursivePkgKey,pkgLookupKey);
  }
 catch (  NoSuchPackageException|InconsistentFilesystemException e) {
    return reportErrorAndReturn("Failed to load package",e,rootRelativePath,env.getListener());
  }
catch (  IOException|FileSymlinkException e) {
    throw new IllegalStateException(e);
  }
  TVisitor visitor=getInitialVisitor();
  DirectoryListingValue dirListingValue;
  try {
    dirListingValue=(DirectoryListingValue)Preconditions.checkNotNull(pkgLookupAndDirectoryListingDeps.get(dirListingKey).get(),"%s %s",recursivePkgKey,dirListingKey);
  }
 catch (  InconsistentFilesystemException|IOException e) {
    return reportErrorAndReturn("Failed to list directory contents",e,rootRelativePath,env.getListener());
  }
catch (  FileSymlinkException e) {
    throw new IllegalStateException("Symlink cycle found after not being found for \"" + rootedPath + "\"");
  }
catch (  NoSuchPackageException e) {
    throw new IllegalStateException(e);
  }
  boolean followSymlinks=shouldFollowSymlinksWhenTraversing(dirListingValue.getDirents());
  List<SkyKey> childDeps=new ArrayList<>();
  for (  Dirent dirent : dirListingValue.getDirents()) {
    Type type=dirent.getType();
    if (type != Type.DIRECTORY && (type != Type.SYMLINK || (type == Type.SYMLINK && !followSymlinks))) {
      continue;
    }
    String basename=dirent.getName();
    if (rootRelativePath.equals(PathFragment.EMPTY_FRAGMENT) && PathPackageLocator.DEFAULT_TOP_LEVEL_EXCLUDES.contains(basename)) {
      continue;
    }
    PathFragment subdirectory=rootRelativePath.getRelative(basename);
    if (excludedPaths.contains(subdirectory)) {
      continue;
    }
    ImmutableSet<PathFragment> excludedSubdirectoriesBeneathThisSubdirectory=PathFragment.filterPathsStartingWith(excludedPaths,subdirectory);
    RootedPath subdirectoryRootedPath=RootedPath.toRootedPath(root,subdirectory);
    childDeps.add(getSkyKeyForSubdirectory(recursivePkgKey.getRepository(),subdirectoryRootedPath,excludedSubdirectoriesBeneathThisSubdirectory));
  }
  Map<SkyKey,SkyValue> subdirectorySkyValues;
  if (pkgLookupValue.packageExists() && pkgLookupValue.getRoot().equals(root)) {
    SkyKey packageKey=PackageValue.key(packageId);
    Map<SkyKey,ValueOrException<NoSuchPackageException>> dependentSkyValues=env.getValuesOrThrow(Iterables.concat(childDeps,ImmutableList.of(packageKey)),NoSuchPackageException.class);
    if (env.valuesMissing()) {
      return null;
    }
    Package pkg=null;
    try {
      PackageValue pkgValue=(PackageValue)dependentSkyValues.get(packageKey).get();
      if (pkgValue == null) {
        return null;
      }
      pkg=pkgValue.getPackage();
      if (pkg.containsErrors()) {
        env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
      }
    }
 catch (    NoSuchPackageException e) {
      env.getListener().handle(Event.error("package contains errors: " + rootRelativePath.getPathString()));
    }
    if (pkg != null) {
      visitor.visitPackageValue(pkg,env);
      if (env.valuesMissing()) {
        return null;
      }
    }
    ImmutableMap.Builder<SkyKey,SkyValue> subdirectoryBuilder=ImmutableMap.builder();
    for (    Map.Entry<SkyKey,ValueOrException<NoSuchPackageException>> entry : Maps.filterKeys(dependentSkyValues,Predicates.not(Predicates.equalTo(packageKey))).entrySet()) {
      try {
        subdirectoryBuilder.put(entry.getKey(),entry.getValue().get());
      }
 catch (      NoSuchPackageException e) {
      }
    }
    subdirectorySkyValues=subdirectoryBuilder.build();
  }
 else {
    subdirectorySkyValues=env.getValues(childDeps);
  }
  if (env.valuesMissing()) {
    return null;
  }
  return aggregateWithSubdirectorySkyValues(visitor,subdirectorySkyValues);
}
