{
  String[] lines={"--output","out.jar","--source_jars","sources1.srcjar","sources2.srcjar","--temp_dir","_tmp","--processors","com.foo.MyProcessor","com.foo.OtherProcessor","--processorpath","libproc1.jar:libproc2.jar","--classpath","lib1.jar:lib2.jar","--bootclasspath","rt.jar:zipfs.jar","--javacopts","-source","8","-target","8","--sources","Source1.java","Source2.java","--output_deps","out.jdeps","--target_label","//java/com/google/test","--rule_kind","java_library"};
  TurbineOptions options=TurbineOptionsParser.parse(Iterables.concat(BASE_ARGS,Arrays.asList(lines)));
  assertThat(options.outputFile()).isEqualTo("out.jar");
  assertThat(options.sourceJars()).containsExactly("sources1.srcjar","sources2.srcjar").inOrder();
  assertThat(options.tempDir()).isEqualTo("_tmp");
  assertThat(options.processors()).containsExactly("com.foo.MyProcessor","com.foo.OtherProcessor").inOrder();
  assertThat(options.processorPath()).containsExactly("libproc1.jar","libproc2.jar").inOrder();
  assertThat(options.classPath()).containsExactly("lib1.jar","lib2.jar").inOrder();
  assertThat(options.bootClassPath()).containsExactly("rt.jar","zipfs.jar").inOrder();
  assertThat(options.javacOpts()).containsExactly("-source","8","-target","8").inOrder();
  assertThat(options.sources()).containsExactly("Source1.java","Source2.java");
  assertThat(options.outputDeps()).hasValue("out.jdeps");
  assertThat(options.targetLabel()).isEqualTo(Optional.of("//java/com/google/test"));
  assertThat(options.ruleKind()).isEqualTo(Optional.of("java_library"));
}
