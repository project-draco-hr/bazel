{
  ObjcCommon common=common(ruleContext);
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.stableOrder();
  ReleaseBundlingSupport releaseBundlingSupport=new ReleaseBundlingSupport(ruleContext,common.getObjcProvider(),optionsProvider(ruleContext),LinkedBinary.DEPENDENCIES_ONLY,bundleDirFormat,bundleMinimumOsVersion(ruleContext));
  releaseBundlingSupport.registerActions().addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild).validateResources().validateAttributes();
  XcodeSupport xcodeSupport=new XcodeSupport(ruleContext).addFilesToBuild(filesToBuild).addXcodeSettings(xcodeProviderBuilder,common.getObjcProvider(),xcodeProductType,ObjcRuleClasses.objcConfiguration(ruleContext).getDependencySingleArchitecture(),configurationDistinguisher).addDummySource(xcodeProviderBuilder);
  for (  Attribute attribute : dependencyAttributes) {
    xcodeSupport.addDependencies(xcodeProviderBuilder,attribute);
  }
  xcodeSupport.registerActions(xcodeProviderBuilder.build());
  Optional<ObjcProvider> exposedObjcProvider;
  if (exposeAsNestedBundle == ExposeAsNestedBundle.YES) {
    exposedObjcProvider=Optional.of(new ObjcProvider.Builder().add(MERGE_ZIP,ruleContext.getImplicitOutputArtifact(ReleaseBundlingSupport.IPA)).build());
  }
 else {
    exposedObjcProvider=Optional.absent();
  }
  RuleConfiguredTargetBuilder target=common.configuredTargetBuilder(filesToBuild.build(),Optional.of(xcodeProviderBuilder.build()),exposedObjcProvider,Optional.of(releaseBundlingSupport.xcTestAppProvider()),Optional.<J2ObjcSrcsProvider>absent(),Optional.<J2ObjcMappingFileProvider>absent());
  configureTarget(target,ruleContext,releaseBundlingSupport);
  return target.build();
}
