{
  Preconditions.checkState(invalidationType == InvalidationType.DELETED,key);
  if (!visitedValues.add(key)) {
    return;
  }
  final Pair<SkyKey,InvalidationType> invalidationPair=Pair.of(key,invalidationType);
  pendingVisitations.add(invalidationPair);
  executor.execute(new Runnable(){
    @Override public void run(){
      NodeEntry entry=graph.get(key);
      if (entry == null) {
        pendingVisitations.remove(invalidationPair);
        return;
      }
      if (traverseGraph) {
        for (        SkyKey reverseDep : entry.getReverseDeps()) {
          visit(reverseDep,InvalidationType.DELETED,!MUST_EXIST);
        }
        Set<SkyKey> signalingDeps=entry.isDone() ? ImmutableSet.<SkyKey>of() : entry.getTemporaryDirectDeps();
        Iterable<SkyKey> directDeps=entry.isDone() ? entry.getDirectDeps() : entry.getAllDirectDepsForIncompleteNode();
        Map<SkyKey,NodeEntry> depMap=graph.getBatch(directDeps);
        for (        Map.Entry<SkyKey,NodeEntry> directDepEntry : depMap.entrySet()) {
          NodeEntry dep=directDepEntry.getValue();
          if (dep != null) {
            if (dep.isDone() || !signalingDeps.contains(directDepEntry.getKey())) {
              dep.removeReverseDep(key);
            }
 else {
              dep.removeInProgressReverseDep(key);
            }
          }
        }
      }
      informInvalidationReceiver(key,EvaluationProgressReceiver.InvalidationState.DELETED);
      graph.remove(key);
      dirtyKeyTracker.notDirty(key);
      pendingVisitations.remove(invalidationPair);
    }
  }
);
}
