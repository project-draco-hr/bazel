{
  Preconditions.checkState(invalidationType != InvalidationType.DELETED,keys);
  final boolean isChanged=(invalidationType == InvalidationType.CHANGED);
  Set<SkyKey> setToCheck=isChanged ? changed : dirtied;
  int size=Iterables.size(keys);
  ArrayList<SkyKey> keysToGet=new ArrayList<>(size);
  for (  SkyKey key : keys) {
    if (setToCheck.add(key)) {
      keysToGet.add(key);
    }
  }
  if (supportInterruptions) {
    for (    SkyKey key : keysToGet) {
      pendingVisitations.add(Pair.of(key,invalidationType));
    }
  }
  final Map<SkyKey,? extends ThinNodeEntry> entries=graph.getBatch(keysToGet);
  for (  final SkyKey key : keysToGet) {
    executor.execute(new Runnable(){
      @Override public void run(){
        ThinNodeEntry entry=entries.get(key);
        if (entry == null) {
          Preconditions.checkState(!mustExist,"%s does not exist in the graph but was enqueued for dirtying by another " + "node",key);
          if (supportInterruptions) {
            pendingVisitations.remove(Pair.of(key,invalidationType));
          }
          return;
        }
        if (entry.isChanged() || (!isChanged && entry.isDirty())) {
          if (supportInterruptions) {
            pendingVisitations.remove(Pair.of(key,invalidationType));
          }
          return;
        }
        MarkedDirtyResult markedDirtyResult=entry.markDirty(isChanged);
        if (markedDirtyResult == null) {
          if (supportInterruptions) {
            pendingVisitations.remove(Pair.of(key,invalidationType));
          }
          return;
        }
        visit(markedDirtyResult.getReverseDepsUnsafe(),InvalidationType.DIRTIED,MUST_EXIST);
        informInvalidationReceiver(key,EvaluationProgressReceiver.InvalidationState.DIRTY);
        dirtyKeyTracker.dirty(key);
        if (supportInterruptions) {
          pendingVisitations.remove(Pair.of(key,invalidationType));
        }
      }
    }
);
  }
}
