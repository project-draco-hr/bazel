{
  if (interfaceOutput != null && (fake || linkType != LinkTargetType.DYNAMIC_LIBRARY)) {
    throw new RuntimeException("Interface output can only be used " + "with non-fake DYNAMIC_LIBRARY targets");
  }
  final ImmutableList<Artifact> buildInfoHeaderArtifacts=!linkstamps.isEmpty() ? analysisEnvironment.getBuildInfo(ruleContext,CppBuildInfo.KEY,configuration) : ImmutableList.<Artifact>of();
  boolean needWholeArchive=wholeArchive || needWholeArchive(linkStaticness,linkType,linkopts,isNativeDeps,cppConfiguration);
  NestedSet<LibraryToLink> uniqueLibraries=libraries.build();
  final Iterable<Artifact> filteredNonLibraryArtifacts=CppLinkAction.filterLinkerInputArtifacts(LinkerInputs.toLibraryArtifacts(nonLibraries));
  final Iterable<LinkerInput> linkerInputs=IterablesChain.<LinkerInput>builder().add(ImmutableList.copyOf(CppLinkAction.filterLinkerInputs(nonLibraries))).add(ImmutableIterable.from(Link.mergeInputsCmdLine(uniqueLibraries,needWholeArchive,cppConfiguration.archiveType()))).build();
  final ImmutableSet<String> features=(ruleContext == null) ? ImmutableSet.<String>of() : ruleContext.getFeatures();
  if (featureConfiguration == null) {
    if (toolchain != null) {
      featureConfiguration=CcCommon.configureFeatures(ruleContext,toolchain,CcLibraryHelper.SourceCategory.CC);
    }
 else {
      featureConfiguration=CcCommon.configureFeatures(ruleContext);
    }
  }
  final LibraryToLink outputLibrary=LinkerInputs.newInputLibrary(output,filteredNonLibraryArtifacts,this.ltoBitcodeFiles);
  final LibraryToLink interfaceOutputLibrary=(interfaceOutput == null) ? null : LinkerInputs.newInputLibrary(interfaceOutput,filteredNonLibraryArtifacts,this.ltoBitcodeFiles);
  final ImmutableMap<Artifact,Artifact> linkstampMap=mapLinkstampsToOutputs(linkstamps,ruleContext,configuration,output,linkArtifactFactory);
  PathFragment ltoOutputRootPrefix=null;
  if (isLTOIndexing && allLTOArtifacts == null) {
    ltoOutputRootPrefix=FileSystemUtils.appendExtension(outputLibrary.getArtifact().getRootRelativePath(),".lto");
    allLTOArtifacts=createLTOArtifacts(ltoOutputRootPrefix,uniqueLibraries);
  }
  final ImmutableList<Artifact> actionOutputs;
  if (isLTOIndexing) {
    ImmutableList.Builder<Artifact> builder=ImmutableList.builder();
    for (    LTOBackendArtifacts ltoA : allLTOArtifacts) {
      ltoA.addIndexingOutputs(builder);
    }
    actionOutputs=builder.build();
  }
 else {
    actionOutputs=constructOutputs(outputLibrary.getArtifact(),linkstampMap.values(),interfaceOutputLibrary == null ? null : interfaceOutputLibrary.getArtifact(),symbolCounts);
  }
  ImmutableList<LinkerInput> runtimeLinkerInputs=ImmutableList.copyOf(LinkerInputs.simpleLinkerInputs(runtimeInputs));
  Variables.Builder buildVariablesBuilder=new Variables.Builder();
  CppLinkVariablesExtension variablesExtension=isLTOIndexing ? new CppLinkVariablesExtension(linkstampMap,needWholeArchive,linkerInputs,runtimeLinkerInputs,null) : new CppLinkVariablesExtension(linkstampMap,needWholeArchive,linkerInputs,runtimeLinkerInputs,outputLibrary.getArtifact());
  variablesExtension.addVariables(buildVariablesBuilder);
  Variables buildVariables=buildVariablesBuilder.build();
  PathFragment paramRootPath=ParameterFile.derivePath(outputLibrary.getArtifact().getRootRelativePath(),(isLTOIndexing) ? "lto" : "2");
  @Nullable final Artifact paramFile=canSplitCommandLine() ? linkArtifactFactory.create(ruleContext,configuration,paramRootPath) : null;
  Preconditions.checkArgument(linkType != LinkTargetType.INTERFACE_DYNAMIC_LIBRARY,"you can't link an interface dynamic library directly");
  if (linkType != LinkTargetType.DYNAMIC_LIBRARY) {
    Preconditions.checkArgument(interfaceOutput == null,"interface output may only be non-null for dynamic library links");
  }
  if (linkType.isStaticLibraryLink()) {
    runtimeSolibDir=null;
    Preconditions.checkArgument(linkStaticness == LinkStaticness.FULLY_STATIC,"static library link must be static");
    Preconditions.checkArgument(symbolCounts == null,"the symbol counts output must be null for static links");
    Preconditions.checkArgument(!isNativeDeps,"the native deps flag must be false for static links");
    Preconditions.checkArgument(!needWholeArchive,"the need whole archive flag must be false for static links");
  }
  LinkCommandLine.Builder linkCommandLineBuilder=new LinkCommandLine.Builder(configuration,getOwner(),ruleContext).setLinkerInputs(linkerInputs).setRuntimeInputs(runtimeLinkerInputs).setLinkTargetType(linkType).setLinkStaticness(linkStaticness).setFeatures(features).setRuntimeSolibDir(linkType.isStaticLibraryLink() ? null : runtimeSolibDir).setNativeDeps(isNativeDeps).setUseTestOnlyFlags(useTestOnlyFlags).setParamFile(paramFile).setToolchain(toolchain).setBuildVariables(buildVariables).setFeatureConfiguration(featureConfiguration);
  if (needWholeArchive) {
    linkCommandLineBuilder.setNoWholeArchiveFlags(variablesExtension.getNoWholeArchiveInputs());
  }
  if (!isLTOIndexing) {
    linkCommandLineBuilder.setOutput(outputLibrary.getArtifact()).setInterfaceOutput(interfaceOutput).setBuildInfoHeaderArtifacts(buildInfoHeaderArtifacts).setInterfaceSoBuilder(getInterfaceSoBuilder()).setLinkstamps(linkstampMap).setLinkopts(ImmutableList.copyOf(linkopts)).addLinkstampCompileOptions(linkstampOptions);
  }
 else {
    List<String> opts=new ArrayList<>(linkopts);
    opts.add("-flto=thin");
    opts.add("-Wl,-plugin-opt,thinlto-index-only");
    opts.add("-Wl,-plugin-opt,thinlto-emit-imports-files");
    opts.add("-Wl,-plugin-opt,thinlto-prefix-replace=" + configuration.getBinDirectory().getExecPathString() + ";"+ configuration.getBinDirectory().getExecPath().getRelative(ltoOutputRootPrefix).toString());
    linkCommandLineBuilder.setLinkopts(ImmutableList.copyOf(opts));
  }
  LinkCommandLine linkCommandLine=linkCommandLineBuilder.build();
  NestedSetBuilder<Artifact> dependencyInputsBuilder=NestedSetBuilder.stableOrder();
  dependencyInputsBuilder.addTransitive(crosstoolInputs);
  if (runtimeMiddleman != null) {
    dependencyInputsBuilder.add(runtimeMiddleman);
  }
  if (!isLTOIndexing) {
    dependencyInputsBuilder.addAll(buildInfoHeaderArtifacts);
    dependencyInputsBuilder.addAll(linkstamps);
    dependencyInputsBuilder.addTransitive(compilationInputs.build());
  }
  Iterable<Artifact> expandedInputs=LinkerInputs.toLibraryArtifacts(Link.mergeInputsDependencies(uniqueLibraries,needWholeArchive,cppConfiguration.archiveType()));
  Iterable<Artifact> expandedNonLibraryInputs=LinkerInputs.toLibraryArtifacts(nonLibraries);
  if (!isLTOIndexing && allLTOArtifacts != null) {
    Map<Artifact,Artifact> ltoMapping=new HashMap<>();
    for (    LTOBackendArtifacts a : allLTOArtifacts) {
      ltoMapping.put(a.getBitcodeFile(),a.getObjectFile());
    }
    List<Artifact> renamedInputs=new ArrayList<>();
    for (    Artifact a : expandedInputs) {
      Artifact renamed=ltoMapping.get(a);
      renamedInputs.add(renamed == null ? a : renamed);
    }
    expandedInputs=renamedInputs;
    List<Artifact> renamedNonLibraryInputs=new ArrayList<>();
    for (    Artifact a : expandedNonLibraryInputs) {
      Artifact renamed=ltoMapping.get(a);
      renamedNonLibraryInputs.add(renamed == null ? a : renamed);
    }
    expandedNonLibraryInputs=renamedNonLibraryInputs;
  }
 else   if (isLTOIndexing && allLTOArtifacts != null) {
    for (    LTOBackendArtifacts a : allLTOArtifacts) {
      List<String> argv=new ArrayList<>();
      argv.addAll(cppConfiguration.getLinkOptions());
      argv.addAll(featureConfiguration.getCommandLine(getActionName(),Variables.EMPTY));
      argv.addAll(cppConfiguration.getCompilerOptions(features));
      a.setCommandLine(argv);
    }
  }
  IterablesChain.Builder<Artifact> inputsBuilder=IterablesChain.<Artifact>builder().add(ImmutableList.copyOf(expandedNonLibraryInputs)).add(dependencyInputsBuilder.build()).add(ImmutableIterable.from(expandedInputs));
  if (linkCommandLine.getParamFile() != null) {
    inputsBuilder.add(ImmutableList.of(linkCommandLine.getParamFile()));
    Action parameterFileWriteAction=new ParameterFileWriteAction(getOwner(),paramFile,linkCommandLine.paramCmdLine(),ParameterFile.ParameterFileType.UNQUOTED,ISO_8859_1);
    analysisEnvironment.registerAction(parameterFileWriteAction);
  }
  Map<String,String> toolchainEnv=featureConfiguration.getEnvironmentVariables(getActionName(),buildVariables);
  ImmutableSet.Builder<String> executionRequirements=ImmutableSet.<String>builder();
  if (featureConfiguration.actionIsConfigured(getActionName())) {
    executionRequirements.addAll(featureConfiguration.getToolForAction(getActionName()).getExecutionRequirements());
  }
  return new CppLinkAction(getOwner(),inputsBuilder.deduplicate().build(),actionOutputs,cppConfiguration,outputLibrary,interfaceOutputLibrary,fake,isLTOIndexing,allLTOArtifacts,linkCommandLine,toolchainEnv,executionRequirements.build());
}
