{
  Preconditions.checkState(!(input.getArtifactCategory() == ArtifactCategory.DYNAMIC_LIBRARY));
  Preconditions.checkState(ltoMap == null || linkerParamsFile != null);
  if (Link.useStartEndLib(input,cppConfiguration.archiveType())) {
    Iterable<Artifact> archiveMembers=input.getObjectFiles();
    if (!Iterables.isEmpty(archiveMembers)) {
      List<String> nonLTOArchiveMembers=new ArrayList<>();
      for (      Artifact member : archiveMembers) {
        if (ltoMap != null && ltoMap.remove(member) != null) {
          continue;
        }
        nonLTOArchiveMembers.add(member.getExecPathString());
      }
      if (!nonLTOArchiveMembers.isEmpty()) {
        standardOptions.add("-Wl,--start-lib");
        standardOptions.addAll(nonLTOArchiveMembers);
        standardOptions.add("-Wl,--end-lib");
      }
    }
  }
 else {
    List<String> options=inputNeedsWholeArchive(input) ? wholeArchiveOptions : standardOptions;
    Artifact inputArtifact=input.getArtifact();
    if (ltoMap != null && ltoMap.remove(inputArtifact) != null) {
      return;
    }
    if (input.isFake()) {
      options.add(Link.FAKE_OBJECT_PREFIX + inputArtifact.getExecPathString());
    }
 else {
      options.add(inputArtifact.getExecPathString());
    }
  }
}
