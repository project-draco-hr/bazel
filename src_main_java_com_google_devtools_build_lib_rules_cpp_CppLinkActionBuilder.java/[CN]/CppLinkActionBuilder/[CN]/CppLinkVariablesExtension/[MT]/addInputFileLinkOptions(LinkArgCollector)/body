{
  Set<String> libOpts=new LinkedHashSet<>();
  List<String> linkerInputParameters=new ArrayList<>();
  List<String> noWholeArchiveInputs=new ArrayList<>();
  PathFragment solibDir=configuration.getBinDirectory(ruleContext.getRule().getRepository()).getExecPath().getRelative(cppConfiguration.getSolibDirectory());
  String runtimeSolibName=runtimeSolibDir != null ? runtimeSolibDir.getBaseName() : null;
  boolean runtimeRpath=runtimeSolibDir != null && (linkType == LinkTargetType.DYNAMIC_LIBRARY || (linkType == LinkTargetType.EXECUTABLE && linkStaticness == LinkStaticness.DYNAMIC));
  String rpathRoot=null;
  List<String> runtimeRpathEntries=new ArrayList<>();
  if (output != null) {
    String origin=useTestOnlyFlags && cppConfiguration.supportsExecOrigin() ? "$EXEC_ORIGIN/" : "$ORIGIN/";
    if (runtimeRpath) {
      runtimeRpathEntries.add("-Wl,-rpath," + origin + runtimeSolibName+ "/");
    }
    if (isSharedNativeLibrary()) {
      rpathRoot="-Wl,-rpath," + origin + ":"+ origin+ cppConfiguration.getSolibDirectory()+ "/";
      if (runtimeRpath) {
        runtimeRpathEntries.add("-Wl,-rpath," + origin + "../"+ runtimeSolibName+ "/");
      }
    }
 else {
      if (runtimeRpath) {
        runtimeRpathEntries.add("-Wl,-rpath," + origin + Strings.repeat("../",output.getRootRelativePath().segmentCount() - 1)+ runtimeSolibName+ "/");
      }
      rpathRoot="-Wl,-rpath," + origin + Strings.repeat("../",output.getRootRelativePath().segmentCount() - 1)+ cppConfiguration.getSolibDirectory()+ "/";
      if (isNativeDeps) {
        if (runtimeRpath) {
          runtimeRpathEntries.add("-Wl,-rpath," + origin + "../"+ runtimeSolibName+ "/");
        }
        rpathRoot+=":" + origin;
      }
    }
  }
  boolean includeSolibDir=false;
  Map<Artifact,Artifact> ltoMap=null;
  if (!isLTOIndexing && (allLTOArtifacts != null)) {
    Preconditions.checkState(cppConfiguration.useStartEndLib());
    ltoMap=new HashMap<>();
    for (    LTOBackendArtifacts l : allLTOArtifacts) {
      ltoMap.put(l.getBitcodeFile(),l.getObjectFile());
    }
  }
  for (  LinkerInput input : linkerInputs) {
    if (isDynamicLibrary(input)) {
      PathFragment libDir=input.getArtifact().getExecPath().getParentDirectory();
      Preconditions.checkState(libDir.startsWith(solibDir),"Artifact '%s' is not under directory '%s'.",input.getArtifact(),solibDir);
      if (libDir.equals(solibDir)) {
        includeSolibDir=true;
      }
      addDynamicInputLinkOptions(input,linkerInputParameters,libOpts,solibDir,rpathRoot);
    }
 else {
      addStaticInputLinkOptions(input,linkerInputParameters,ltoMap);
    }
  }
  boolean includeRuntimeSolibDir=false;
  for (  LinkerInput input : runtimeLinkerInputs) {
    List<String> optionsList=needWholeArchive ? noWholeArchiveInputs : linkerInputParameters;
    if (isDynamicLibrary(input)) {
      PathFragment libDir=input.getArtifact().getExecPath().getParentDirectory();
      Preconditions.checkState(runtimeSolibDir != null && libDir.equals(runtimeSolibDir),"Artifact '%s' is not under directory '%s'.",input.getArtifact(),solibDir);
      includeRuntimeSolibDir=true;
      addDynamicInputLinkOptions(input,optionsList,libOpts,solibDir,rpathRoot);
    }
 else {
      addStaticInputLinkOptions(input,optionsList,ltoMap);
    }
  }
  if (includeSolibDir && rpathRoot != null) {
    linkArgCollector.setRpathRoot(rpathRoot);
  }
  if (includeRuntimeSolibDir) {
    linkArgCollector.setRpathEntries(runtimeRpathEntries);
  }
  linkArgCollector.setLibopts(libOpts);
  ImmutableList.Builder<String> wholeArchiveInputParams=ImmutableList.builder();
  ImmutableList.Builder<String> standardArchiveInputParams=ImmutableList.builder();
  for (  String param : linkerInputParameters) {
    if (!wholeArchive && Link.LINK_LIBRARY_FILETYPES.matches(param) && !needWholeArchive) {
      wholeArchiveInputParams.add(param);
    }
 else {
      standardArchiveInputParams.add(param);
    }
  }
  linkArgCollector.setLinkerInputParams(standardArchiveInputParams.build());
  linkArgCollector.setWholeArchiveLinkerInputParams(wholeArchiveInputParams.build());
  linkArgCollector.setNoWholeArchiveInputs(noWholeArchiveInputs);
  if (ltoMap != null) {
    Preconditions.checkState(ltoMap.isEmpty(),"Still have LTO objects left: %s",ltoMap);
  }
}
