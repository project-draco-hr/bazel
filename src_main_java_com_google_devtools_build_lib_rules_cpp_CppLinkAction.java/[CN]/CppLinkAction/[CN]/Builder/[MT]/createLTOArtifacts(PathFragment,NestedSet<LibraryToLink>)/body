{
  Set<Artifact> compiled=new LinkedHashSet<>();
  for (  LibraryToLink lib : uniqueLibraries) {
    Iterables.addAll(compiled,lib.getLTOBitcodeFiles());
  }
  NestedSetBuilder<Artifact> bitcodeBuilder=NestedSetBuilder.stableOrder();
  for (  LibraryToLink lib : uniqueLibraries) {
    if (!lib.containsObjectFiles()) {
      continue;
    }
    for (    Artifact a : lib.getObjectFiles()) {
      if (compiled.contains(a)) {
        bitcodeBuilder.add(a);
      }
    }
  }
  for (  LinkerInput input : nonLibraries) {
    if (CppFileTypes.OBJECT_FILE.matches(input.getArtifact().getExecPath()) || CppFileTypes.PIC_OBJECT_FILE.matches(input.getArtifact().getExecPath())) {
      bitcodeBuilder.add(input.getArtifact());
    }
  }
  NestedSet<Artifact> allBitcode=bitcodeBuilder.build();
  ImmutableList.Builder<LTOBackendArtifacts> ltoOutputs=ImmutableList.builder();
  for (  Artifact a : allBitcode) {
    LTOBackendArtifacts ltoArtifacts=new LTOBackendArtifacts(ltoOutputRootPrefix,a,allBitcode,ruleContext,linkArtifactFactory);
    ltoOutputs.add(ltoArtifacts);
  }
  return ltoOutputs.build();
}
