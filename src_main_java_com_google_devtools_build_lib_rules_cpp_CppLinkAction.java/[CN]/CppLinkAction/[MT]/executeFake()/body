{
  final Collection<Artifact> linkstampOutputs=getLinkCommandLine().getLinkstamps().values();
  final String outputPrefix="$TEST_TMPDIR/";
  List<String> escapedLinkArgv=escapeLinkArgv(linkCommandLine.getRawLinkArgv(),linkstampOutputs,outputPrefix);
  StringBuilder s=new StringBuilder();
  Joiner.on('\n').appendTo(s,"# This is a fake target file, automatically generated.","# Do not edit by hand!","echo $0 is a fake target file and not meant to be executed.","exit 0","EOS","","makefile_dir=.","");
  try {
    for (    LinkerInput linkerInput : getLinkCommandLine().getLinkerInputs()) {
      Artifact objectFile=linkerInput.getArtifact();
      if ((CppFileTypes.OBJECT_FILE.matches(objectFile.getFilename()) || CppFileTypes.PIC_OBJECT_FILE.matches(objectFile.getFilename())) && linkerInput.isFake()) {
        s.append(FileSystemUtils.readContentAsLatin1(objectFile.getPath()));
      }
    }
    s.append(getOutputFile().getBaseName()).append(": ");
    for (    Artifact linkstamp : linkstampOutputs) {
      s.append("mkdir -p " + outputPrefix + linkstamp.getExecPath().getParentDirectory()+ " && ");
    }
    Joiner.on(' ').appendTo(s,ShellEscaper.escapeAll(linkCommandLine.finalizeAlreadyEscapedWithLinkstampCommands(escapedLinkArgv,outputPrefix)));
    s.append('\n');
    if (getOutputFile().exists()) {
      getOutputFile().setWritable(true);
    }
    FileSystemUtils.writeContent(getOutputFile(),ISO_8859_1,s.toString());
    getOutputFile().setExecutable(true);
    for (    Artifact linkstamp : linkstampOutputs) {
      FileSystemUtils.touchFile(linkstamp.getPath());
    }
  }
 catch (  IOException e) {
    throw new ActionExecutionException("failed to create fake link command for rule '" + getOwner().getLabel() + ": "+ e.getMessage(),this,false);
  }
}
