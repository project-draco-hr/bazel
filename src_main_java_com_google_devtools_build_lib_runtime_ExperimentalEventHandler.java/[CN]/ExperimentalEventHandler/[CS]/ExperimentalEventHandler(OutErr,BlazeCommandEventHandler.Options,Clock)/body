{
  this.outErr=outErr;
  this.cursorControl=options.useCursorControl();
  this.terminal=new AnsiTerminal(outErr.getErrorStream());
  this.terminalWidth=(options.terminalColumns > 0 ? options.terminalColumns : 80);
  this.showProgress=options.showProgress;
  this.progressInTermTitle=options.progressInTermTitle;
  this.showTimestamp=options.showTimestamp;
  this.clock=clock;
  this.debugAllEvents=options.experimentalUiDebugAllEvents;
  this.stateTracker=this.cursorControl ? new ExperimentalStateTracker(clock,this.terminalWidth - 2) : new ExperimentalStateTracker(clock);
  this.stateTracker.setSampleSize(options.experimentalUiActionsShown);
  this.numLinesProgressBar=0;
  if (this.cursorControl) {
    this.minimalDelayMillis=Math.round(options.showProgressRateLimit * 1000);
  }
 else {
    this.minimalDelayMillis=Math.max(Math.round(options.showProgressRateLimit * 1000),NO_CURSES_MINIMAL_PROGRESS_RATE_LIMIT);
  }
  this.minimalUpdateInterval=Math.max(this.minimalDelayMillis,MAXIMAL_UPDATE_DELAY_MILLIS);
  this.stdoutBuffer=new byte[]{};
  this.stderrBuffer=new byte[]{};
  ignoreRefreshLimitOnce();
}
