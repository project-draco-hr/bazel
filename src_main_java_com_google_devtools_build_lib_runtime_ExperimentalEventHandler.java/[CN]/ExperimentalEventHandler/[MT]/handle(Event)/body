{
  try {
    if (debugAllEvents) {
      clearProgressBar();
      terminal.flush();
      outErr.getOutputStream().write((event + "\n").getBytes(StandardCharsets.UTF_8));
      outErr.getOutputStream().flush();
      addProgressBar();
      terminal.flush();
    }
 else {
switch (event.getKind()) {
case STDOUT:
case STDERR:
        OutputStream stream=event.getKind() == EventKind.STDOUT ? outErr.getOutputStream() : outErr.getErrorStream();
      if (buildComplete) {
        stream.write(event.getMessageBytes());
        stream.flush();
      }
 else {
        byte[] message=event.getMessageBytes();
        int eolIndex=Bytes.lastIndexOf(message,(byte)'\n');
        if (eolIndex >= 0) {
          clearProgressBar();
          terminal.flush();
          stream.write(event.getKind() == EventKind.STDOUT ? stdoutBuffer : stderrBuffer);
          stream.write(Arrays.copyOf(message,eolIndex + 1));
          byte[] restMessage=Arrays.copyOfRange(message,eolIndex + 1,message.length);
          if (event.getKind() == EventKind.STDOUT) {
            stdoutBuffer=restMessage;
          }
 else {
            stderrBuffer=restMessage;
          }
          stream.flush();
          if (cursorControl) {
            addProgressBar();
          }
          terminal.flush();
        }
 else {
          if (event.getKind() == EventKind.STDOUT) {
            stdoutBuffer=Bytes.concat(stdoutBuffer,message);
          }
 else {
            stderrBuffer=Bytes.concat(stderrBuffer,message);
          }
        }
      }
    break;
case ERROR:
case FAIL:
case WARNING:
case INFO:
case SUBCOMMAND:
  if (!buildComplete) {
    clearProgressBar();
  }
outErr.getOutputStream().write(stdoutBuffer);
outErr.getOutputStream().flush();
stdoutBuffer=new byte[]{};
outErr.getErrorStream().write(stderrBuffer);
outErr.getErrorStream().flush();
stderrBuffer=new byte[]{};
crlf();
setEventKindColor(event.getKind());
terminal.writeString(event.getKind() + ": ");
terminal.resetTerminal();
if (event.getLocation() != null) {
terminal.writeString(event.getLocation() + ": ");
}
if (event.getMessage() != null) {
terminal.writeString(event.getMessage());
}
crlf();
if (!buildComplete) {
addProgressBar();
}
terminal.flush();
break;
case PROGRESS:
if (stateTracker.progressBarTimeDependent()) {
refresh();
}
break;
case START:
case FINISH:
case PASS:
case TIMEOUT:
case DEPCHECKER:
break;
}
}
}
 catch (IOException e) {
LOG.warning("IO Error writing to output stream: " + e);
}
}
