{
  try {
    if (debugAllEvents) {
      clearProgressBar();
      terminal.flush();
      outErr.getOutputStream().write((event + "\n").getBytes(StandardCharsets.UTF_8));
      outErr.getOutputStream().flush();
      addProgressBar();
      terminal.flush();
    }
 else {
switch (event.getKind()) {
case STDOUT:
case STDERR:
        if (!buildComplete) {
          clearProgressBar();
          terminal.flush();
        }
      OutputStream stream=event.getKind() == EventKind.STDOUT ? outErr.getOutputStream() : outErr.getErrorStream();
    stream.write(event.getMessageBytes());
  if (!buildComplete) {
    stream.write(new byte[]{10,13});
  }
stream.flush();
if (!buildComplete) {
if (cursorControl) {
  addProgressBar();
}
terminal.flush();
}
break;
case ERROR:
case WARNING:
case INFO:
case SUBCOMMAND:
if (!buildComplete) {
clearProgressBar();
}
setEventKindColor(event.getKind());
terminal.writeString(event.getKind() + ": ");
terminal.resetTerminal();
if (event.getLocation() != null) {
terminal.writeString(event.getLocation() + ": ");
}
if (event.getMessage() != null) {
terminal.writeString(event.getMessage());
}
crlf();
if (!buildComplete) {
addProgressBar();
}
terminal.flush();
break;
case PROGRESS:
if (stateTracker.progressBarTimeDependent()) {
refresh();
}
}
}
}
 catch (IOException e) {
LOG.warning("IO Error writing to output stream: " + e);
}
}
