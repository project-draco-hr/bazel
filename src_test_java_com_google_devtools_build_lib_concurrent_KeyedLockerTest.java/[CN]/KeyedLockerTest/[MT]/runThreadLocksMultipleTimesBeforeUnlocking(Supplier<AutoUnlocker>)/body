{
  final AtomicReference<Long> currentThreadIdRef=new AtomicReference<>(new Long(-1L));
  final AtomicInteger count=new AtomicInteger(0);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      Long currentThreadId=Thread.currentThread().getId();
      try (AutoUnlocker unlocker1=lockFn.get()){
        currentThreadIdRef.set(currentThreadId);
        try (AutoUnlocker unlocker2=lockFn.get()){
          assertEquals(currentThreadId,currentThreadIdRef.get());
          try (AutoUnlocker unlocker3=lockFn.get()){
            assertEquals(currentThreadId,currentThreadIdRef.get());
            try (AutoUnlocker unlocker4=lockFn.get()){
              assertEquals(currentThreadId,currentThreadIdRef.get());
              try (AutoUnlocker unlocker5=lockFn.get()){
                assertEquals(currentThreadId,currentThreadIdRef.get());
                count.incrementAndGet();
              }
             }
           }
         }
       }
     }
  }
;
  for (int i=0; i < NUM_EXECUTOR_THREADS; i++) {
    executorService.submit(wrapper.wrap(runnable));
  }
  boolean interrupted=ExecutorUtil.interruptibleShutdown(executorService);
  Throwables.propagateIfPossible(wrapper.getFirstThrownError());
  if (interrupted) {
    Thread.currentThread().interrupt();
    throw new InterruptedException();
  }
  assertEquals(NUM_EXECUTOR_THREADS,count.get());
}
