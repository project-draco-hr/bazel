{
  TraversalRequest traversal=(TraversalRequest)skyKey.argument();
  try {
    FileInfo rootInfo=lookUpFileInfo(env,traversal);
    if (!rootInfo.type.exists()) {
      if (rootInfo.type.isSymlink()) {
        return resultForDanglingSymlink(traversal.path,rootInfo);
      }
 else {
        return RecursiveFilesystemTraversalValue.EMPTY;
      }
    }
    if (rootInfo.type.isFile()) {
      if (traversal.pattern == null || traversal.pattern.matcher(rootInfo.realPath.getRelativePath().getPathString()).matches()) {
        return resultForFileRoot(traversal.path,rootInfo);
      }
 else {
        return RecursiveFilesystemTraversalValue.EMPTY;
      }
    }
    PkgLookupResult pkgLookupResult=checkIfPackage(env,traversal,rootInfo);
    traversal=pkgLookupResult.traversal;
    if (pkgLookupResult.isConflicting()) {
      throw new RecursiveFilesystemTraversalFunctionException(new GeneratedPathConflictException(traversal));
    }
 else     if (pkgLookupResult.isPackage() && !traversal.skipTestingForSubpackage) {
      String msg=traversal.errorInfo + " crosses package boundary into package rooted at " + traversal.path.getRelativePath().getPathString();
switch (traversal.crossPkgBoundaries) {
case CROSS:
        env.getListener().handle(Event.warn(null,msg));
      break;
case DONT_CROSS:
    return RecursiveFilesystemTraversalValue.EMPTY;
case REPORT_ERROR:
  throw new RecursiveFilesystemTraversalFunctionException(new CannotCrossPackageBoundaryException(msg));
default :
throw new IllegalStateException(traversal.toString());
}
}
Collection<SkyKey> dependentKeys=createRecursiveTraversalKeys(env,traversal);
return resultForDirectory(traversal,rootInfo,traverseChildren(env,dependentKeys));
}
 catch (MissingDepException e) {
return null;
}
}
