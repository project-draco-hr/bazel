{
  ImmutableList.Builder<String> dirsToSign=new ImmutableList.Builder<>();
  String bundleDir=ShellUtils.shellEscape(bundling.getBundleDir());
  if (objcProvider.is(USES_SWIFT)) {
    dirsToSign.add(bundleDir + "/Frameworks/*");
  }
  dirsToSign.add(bundleDir);
  StringBuilder codesignCommandLineBuilder=new StringBuilder();
  for (  String dir : dirsToSign.build()) {
    codesignCommandLineBuilder.append(codesignCommand(entitlements,"${t}/" + dir)).append(" && ");
  }
  String shellCommand="set -e && " + "t=$(mktemp -d -t signing_intermediate) && " + "trap \"rm -rf ${t}\" EXIT && "+ "signed_ipa=${PWD}/" + ipaOutput.getShellEscapedExecPathString() + " && "+ "/usr/bin/unzip -qq "+ ipaUnsigned.getShellEscapedExecPathString()+ " -d ${t} && "+ codesignCommandLineBuilder.toString()+ "cd ${t} && /usr/bin/zip -q -r \"${signed_ipa}\" .";
  ruleContext.registerAction(ObjcRuleClasses.spawnBashOnDarwinActionBuilder(ruleContext,shellCommand).setMnemonic("IosSignBundle").setProgressMessage("Signing iOS bundle: " + ruleContext.getLabel()).addInput(ipaUnsigned).addInput(attributes.provisioningProfile()).addInput(entitlements).addOutput(ipaOutput).build(ruleContext));
  return this;
}
