{
  Stopwatch timer=Stopwatch.createStarted();
  SkyKey key=TargetPatternPhaseValue.key(ImmutableList.copyOf(targetPatterns),targetPatternEvaluator.getOffset(),options.compileOneDependency,options.buildTestsOnly,determineTests,TestFilter.forOptions(options,eventHandler,ruleClassNames));
  EvaluationResult<TargetPatternPhaseValue> evalResult=buildDriver.evaluate(ImmutableList.of(key),keepGoing,10,eventHandler);
  if (evalResult.hasError()) {
    ErrorInfo errorInfo=evalResult.getError(key);
    if (!Iterables.isEmpty(errorInfo.getCycleInfo())) {
      String errorMessage="cycles detected during target parsing";
      getCyclesReporter().reportCycles(errorInfo.getCycleInfo(),key,eventHandler);
      throw new TargetParsingException(errorMessage);
    }
    if (errorInfo.getException() != null) {
      Exception e=errorInfo.getException();
      Throwables.propagateIfInstanceOf(e,TargetParsingException.class);
      if (!keepGoing) {
        throw new TargetParsingException(e.getMessage());
      }
      throw new IllegalStateException("Unexpected Exception type from TargetPatternPhaseValue " + "for '" + targetPatterns + "'' with root causes: "+ Iterables.toString(errorInfo.getRootCauses()),e);
    }
  }
  long time=timer.stop().elapsed(TimeUnit.MILLISECONDS);
  TargetPatternPhaseValue patternParsingValue=evalResult.get(key);
  eventBus.post(new TargetParsingCompleteEvent(patternParsingValue.getOriginalTargets(),patternParsingValue.getFilteredTargets(),patternParsingValue.getTestFilteredTargets(),time));
  if (callback != null) {
    callback.notifyTargets(patternParsingValue.getTargets());
  }
  eventBus.post(new LoadingPhaseCompleteEvent(patternParsingValue.getTargets(),patternParsingValue.getTestSuiteTargets(),packageManager.getStatistics(),0));
  return patternParsingValue.toLoadingResult();
}
