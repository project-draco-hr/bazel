{
  checkActive();
  if (skyframeBuildView == null) {
    return ImmutableList.of();
  }
  final List<SkyKey> skyKeys=new ArrayList<>();
  for (  Dependency key : keys) {
    skyKeys.add(ConfiguredTargetValue.key(key.getLabel(),key.getConfiguration()));
    for (    Class<? extends ConfiguredAspectFactory> aspect : key.getAspects()) {
      skyKeys.add(AspectValue.key(key.getLabel(),key.getConfiguration(),aspect));
    }
  }
  EvaluationResult<SkyValue> result;
  try {
    result=callUninterruptibly(new Callable<EvaluationResult<SkyValue>>(){
      @Override public EvaluationResult<SkyValue> call() throws Exception {
synchronized (valueLookupLock) {
          try {
            skyframeBuildView.enableAnalysis(true);
            return buildDriver.evaluate(skyKeys,false,DEFAULT_THREAD_COUNT,errorEventListener);
          }
  finally {
            skyframeBuildView.enableAnalysis(false);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  ImmutableList.Builder<ConfiguredTarget> cts=ImmutableList.builder();
  DependentNodeLoop:   for (  Dependency key : keys) {
    SkyKey configuredTargetKey=ConfiguredTargetValue.key(key.getLabel(),key.getConfiguration());
    if (result.get(configuredTargetKey) == null) {
      continue;
    }
    ConfiguredTarget configuredTarget=((ConfiguredTargetValue)result.get(configuredTargetKey)).getConfiguredTarget();
    List<Aspect> aspects=new ArrayList<>();
    for (    Class<? extends ConfiguredAspectFactory> aspect : key.getAspects()) {
      SkyKey aspectKey=AspectValue.key(key.getLabel(),key.getConfiguration(),aspect);
      if (result.get(aspectKey) == null) {
        continue DependentNodeLoop;
      }
      aspects.add(((AspectValue)result.get(aspectKey)).getAspect());
    }
    cts.add(RuleConfiguredTarget.mergeAspects(configuredTarget,aspects));
  }
  return cts.build();
}
