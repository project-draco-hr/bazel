{
  if (Iterables.isEmpty(modifiedSourceFiles)) {
    return new ImmutableDiff(ImmutableList.<SkyKey>of(),ImmutableMap.<SkyKey,SkyValue>of());
  }
  Iterable<SkyKey> dirtyFileStateSkyKeys=Iterables.transform(modifiedSourceFiles,new Function<PathFragment,SkyKey>(){
    @Override public SkyKey apply(    PathFragment pathFragment){
      Preconditions.checkState(!pathFragment.isAbsolute(),"found absolute PathFragment: %s",pathFragment);
      return FileStateValue.key(RootedPath.toRootedPath(pathEntry,pathFragment));
    }
  }
);
  FilesystemValueChecker fsvc=new FilesystemValueChecker(tsgm,null);
  Map<SkyKey,SkyValue> valuesMap=memoizingEvaluator.getValues();
  Differencer.DiffWithDelta diff=fsvc.getNewAndOldValues(valuesMap,dirtyFileStateSkyKeys,new FileDirtinessChecker());
  Set<SkyKey> valuesToInvalidate=new HashSet<>();
  Map<SkyKey,SkyValue> valuesToInject=new HashMap<>();
  for (  Map.Entry<SkyKey,Delta> entry : diff.changedKeysWithNewAndOldValues().entrySet()) {
    SkyKey key=entry.getKey();
    Preconditions.checkState(key.functionName().equals(SkyFunctions.FILE_STATE),key);
    RootedPath rootedPath=(RootedPath)key.argument();
    Delta delta=entry.getValue();
    FileStateValue oldValue=(FileStateValue)delta.getOldValue();
    FileStateValue newValue=(FileStateValue)delta.getNewValue();
    if (newValue != null) {
      valuesToInject.put(key,newValue);
    }
 else {
      valuesToInvalidate.add(key);
    }
    SkyKey dirListingStateKey=parentDirectoryListingStateKey(rootedPath);
    boolean changedType=false;
    if (newValue == null) {
      changedType=true;
    }
 else     if (oldValue != null) {
      changedType=!oldValue.getType().equals(newValue.getType());
    }
 else {
      DirectoryListingStateValue oldDirListingStateValue=(DirectoryListingStateValue)valuesMap.get(dirListingStateKey);
      if (oldDirListingStateValue != null) {
        String baseName=rootedPath.getRelativePath().getBaseName();
        Dirent oldDirent=oldDirListingStateValue.getDirents().maybeGetDirent(baseName);
        changedType=(oldDirent == null) || !compatibleFileTypes(oldDirent.getType(),newValue.getType());
      }
 else {
        changedType=true;
      }
    }
    if (changedType) {
      valuesToInvalidate.add(dirListingStateKey);
    }
  }
  for (  SkyKey key : diff.changedKeysWithoutNewValues()) {
    Preconditions.checkState(key.functionName().equals(SkyFunctions.FILE_STATE),key);
    RootedPath rootedPath=(RootedPath)key.argument();
    valuesToInvalidate.add(parentDirectoryListingStateKey(rootedPath));
  }
  return new ImmutableDiff(valuesToInvalidate,valuesToInject);
}
