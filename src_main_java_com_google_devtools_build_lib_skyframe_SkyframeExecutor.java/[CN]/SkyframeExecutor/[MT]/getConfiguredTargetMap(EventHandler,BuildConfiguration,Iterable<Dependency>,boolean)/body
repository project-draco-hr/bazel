{
  checkActive();
  Map<Dependency,BuildConfiguration> configs;
  if (originalConfig != null) {
    if (useOriginalConfig) {
      configs=new HashMap<>();
      configs.put(Iterables.getOnlyElement(keys),originalConfig);
    }
 else {
      configs=getConfigurations(eventHandler,originalConfig.getOptions(),keys);
    }
  }
 else {
    configs=new HashMap<>();
    for (    Dependency key : keys) {
      configs.put(key,null);
    }
  }
  final List<SkyKey> skyKeys=new ArrayList<>();
  for (  Dependency key : keys) {
    skyKeys.add(ConfiguredTargetValue.key(key.getLabel(),configs.get(key)));
    for (    AspectWithParameters aspect : key.getAspects()) {
      skyKeys.add(ConfiguredTargetFunction.createAspectKey(key.getLabel(),configs.get(key),aspect));
    }
  }
  EvaluationResult<SkyValue> result=evaluateSkyKeys(eventHandler,skyKeys);
  ImmutableMap.Builder<Dependency,ConfiguredTarget> cts=ImmutableMap.builder();
  DependentNodeLoop:   for (  Dependency key : keys) {
    SkyKey configuredTargetKey=ConfiguredTargetValue.key(key.getLabel(),configs.get(key));
    if (result.get(configuredTargetKey) == null) {
      continue;
    }
    ConfiguredTarget configuredTarget=((ConfiguredTargetValue)result.get(configuredTargetKey)).getConfiguredTarget();
    List<Aspect> aspects=new ArrayList<>();
    for (    AspectWithParameters aspect : key.getAspects()) {
      SkyKey aspectKey=ConfiguredTargetFunction.createAspectKey(key.getLabel(),configs.get(key),aspect);
      if (result.get(aspectKey) == null) {
        continue DependentNodeLoop;
      }
      aspects.add(((AspectValue)result.get(aspectKey)).getAspect());
    }
    cts.put(key,RuleConfiguredTarget.mergeAspects(configuredTarget,aspects));
  }
  return cts.build();
}
