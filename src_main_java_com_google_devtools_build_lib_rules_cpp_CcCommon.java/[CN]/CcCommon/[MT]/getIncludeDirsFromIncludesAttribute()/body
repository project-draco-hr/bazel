{
  List<PathFragment> result=new ArrayList<>();
  PathFragment packageFragment=ruleContext.getLabel().getPackageIdentifier().getPathFragment();
  for (  String includesAttr : ruleContext.attributes().get("includes",Type.STRING_LIST)) {
    includesAttr=ruleContext.expandMakeVariables("includes",includesAttr);
    if (includesAttr.startsWith("/")) {
      ruleContext.attributeWarning("includes","ignoring invalid absolute path '" + includesAttr + "'");
      continue;
    }
    PathFragment includesPath=packageFragment.getRelative(includesAttr).normalize();
    if (!includesPath.isNormalized()) {
      ruleContext.attributeError("includes","Path references a path above the execution root.");
    }
    if (!includesPath.startsWith(packageFragment)) {
      ruleContext.attributeWarning("includes","'" + includesAttr + "' resolves to '"+ includesPath+ "' not below the relative path of its package '"+ packageFragment+ "'. This will be an error in the future");
    }
    result.add(includesPath);
    result.add(ruleContext.getConfiguration().getGenfilesFragment().getRelative(includesPath));
  }
  return result;
}
