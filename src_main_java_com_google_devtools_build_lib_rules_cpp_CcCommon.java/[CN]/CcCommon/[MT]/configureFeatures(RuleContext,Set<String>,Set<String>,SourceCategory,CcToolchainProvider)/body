{
  ImmutableSet.Builder<String> unsupportedFeaturesBuilder=ImmutableSet.builder();
  unsupportedFeaturesBuilder.addAll(ruleSpecificUnsupportedFeatures);
  if (!toolchain.supportsHeaderParsing()) {
    unsupportedFeaturesBuilder.add(CppRuleClasses.PARSE_HEADERS);
    unsupportedFeaturesBuilder.add(CppRuleClasses.PREPROCESS_HEADERS);
  }
  if (toolchain.getCppCompilationContext().getCppModuleMap() == null) {
    unsupportedFeaturesBuilder.add(CppRuleClasses.MODULE_MAPS);
  }
  Set<String> unsupportedFeatures=unsupportedFeaturesBuilder.build();
  ImmutableSet.Builder<String> requestedFeatures=ImmutableSet.builder();
  for (  String feature : Iterables.concat(ImmutableSet.of(toolchain.getCompilationMode().toString()),DEFAULT_FEATURES,ruleContext.getFeatures())) {
    if (!unsupportedFeatures.contains(feature)) {
      requestedFeatures.add(feature);
    }
  }
  requestedFeatures.addAll(ruleSpecificRequestedFeatures);
  requestedFeatures.addAll(sourceCategory.getActionConfigSet());
  FeatureConfiguration configuration=toolchain.getFeatures().getFeatureConfiguration(requestedFeatures.build());
  for (  String feature : unsupportedFeatures) {
    if (configuration.isEnabled(feature)) {
      ruleContext.ruleError("The C++ toolchain '" + ruleContext.getPrerequisite(":cc_toolchain",Mode.TARGET).getLabel() + "' unconditionally implies feature '"+ feature+ "', which is unsupported by this rule. "+ "This is most likely a misconfiguration in the C++ toolchain.");
    }
  }
  return configuration;
}
