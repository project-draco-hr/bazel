{
  Map<Artifact,Label> map=Maps.newLinkedHashMap();
  Iterable<? extends TransitiveInfoCollection> providers=ruleContext.getPrerequisitesIf("srcs",Mode.TARGET,FileProvider.class);
  for (  TransitiveInfoCollection provider : providers) {
    for (    Artifact artifact : provider.getProvider(FileProvider.class).getFilesToBuild()) {
      Label oldLabel=map.put(artifact,provider.getLabel());
      boolean isHeader=CppFileTypes.CPP_HEADER.matches(artifact.getExecPath());
      if (!isHeader && SourceCategory.CC_AND_OBJC.getSourceTypes().matches(artifact.getExecPathString()) && oldLabel != null && !oldLabel.equals(provider.getLabel())) {
        ruleContext.attributeError("srcs",String.format("Artifact '%s' is duplicated (through '%s' and '%s')",artifact.getExecPathString(),oldLabel,provider.getLabel()));
      }
    }
  }
  ImmutableList.Builder<Pair<Artifact,Label>> result=ImmutableList.builder();
  for (  Map.Entry<Artifact,Label> entry : map.entrySet()) {
    result.add(Pair.of(entry.getKey(),entry.getValue()));
  }
  return result.build();
}
