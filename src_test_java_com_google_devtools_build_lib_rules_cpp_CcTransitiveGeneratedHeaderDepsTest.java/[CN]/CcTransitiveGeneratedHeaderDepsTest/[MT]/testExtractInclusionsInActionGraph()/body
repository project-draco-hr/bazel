{
  ConfiguredTarget fooLib=setupWithOptions("--extract_generated_inclusions");
  Set<Artifact> middlemen=fooLib.getProvider(CppCompilationContext.class).getCompilationPrerequisites();
  assertEquals(joinLines("middleman-0","  middleman-1","    bargen.h.includes","    bargen2.h.includes","    bargen.h","    bargen2.h","    middleman-2","      bazgen.h.includes","      bazgen.h","    middleman-3","      boogen.h.includes","      boogen.h","  middleman-3","    boogen.h.includes","    boogen.h",""),new MiddlemenRenderer(middlemen).toString());
  List<Artifact> nonMiddlemen=new ArrayList<>();
  getRealArtifacts(middlemen,nonMiddlemen);
  assertThat(nonMiddlemen).isNotEmpty();
  Iterable<Artifact> includes=Iterables.filter(nonMiddlemen,new Predicate<Artifact>(){
    @Override public boolean apply(    Artifact artifact){
      return artifact.getExecPathString().endsWith(".h.includes");
    }
  }
);
  assertThat(includes).isNotEmpty();
  for (  Artifact file : nonMiddlemen) {
    assertNotNull(file.getExecPathString(),getGeneratingAction(file));
    assertFalse(file.getExecPathString(),file.isSourceArtifact());
  }
  Iterable<Artifact> pregreppedArtifacts=Iterables.transform(fooLib.getProvider(CppCompilationContext.class).getPregreppedHeaders().toCollection(),Pair.<Artifact,Artifact>secondFunction());
  Iterable<String> pregreppedFiles=Iterables.transform(pregreppedArtifacts,new Function<Artifact,String>(){
    @Override public String apply(    Artifact input){
      return input.getPath().getBaseName();
    }
  }
);
  assertThat(pregreppedFiles).containsExactly("bargen.h.includes","bargen2.h.includes","bazgen.h.includes","boogen.h.includes");
}
