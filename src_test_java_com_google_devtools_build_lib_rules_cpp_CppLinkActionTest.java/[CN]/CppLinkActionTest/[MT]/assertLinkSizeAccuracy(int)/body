{
  ImmutableList.Builder<Artifact> objects=ImmutableList.builder();
  for (int i=0; i < inputs; i++) {
    objects.add(getOutputArtifact("object" + i + ".o"));
  }
  CppLinkAction linkAction=createLinkBuilder(Link.LinkTargetType.EXECUTABLE,"binary2",objects.build(),ImmutableList.<LibraryToLink>of(),new FeatureConfiguration(),false).setFake(true).build();
  ResourceSet resources=linkAction.estimateResourceConsumptionLocal();
  assertTrue(resources.getMemoryMb() >= CppLinkAction.MIN_STATIC_LINK_RESOURCES.getMemoryMb());
  assertTrue(resources.getCpuUsage() >= CppLinkAction.MIN_STATIC_LINK_RESOURCES.getCpuUsage());
  assertTrue(resources.getIoUsage() >= CppLinkAction.MIN_STATIC_LINK_RESOURCES.getIoUsage());
  final int linkSize=Iterables.size(linkAction.getLinkCommandLine().getLinkerInputs());
  ResourceSet scaledSet=ResourceSet.createWithRamCpuIo(CppLinkAction.LINK_RESOURCES_PER_INPUT.getMemoryMb() * linkSize,CppLinkAction.LINK_RESOURCES_PER_INPUT.getCpuUsage() * linkSize,CppLinkAction.LINK_RESOURCES_PER_INPUT.getIoUsage() * linkSize);
  assertTrue(resources.getMemoryMb() == CppLinkAction.MIN_STATIC_LINK_RESOURCES.getMemoryMb() || resources.getMemoryMb() == scaledSet.getMemoryMb());
  assertTrue(resources.getCpuUsage() == CppLinkAction.MIN_STATIC_LINK_RESOURCES.getCpuUsage() || resources.getCpuUsage() == scaledSet.getCpuUsage());
  assertTrue(resources.getIoUsage() == CppLinkAction.MIN_STATIC_LINK_RESOURCES.getIoUsage() || resources.getIoUsage() == scaledSet.getIoUsage());
}
