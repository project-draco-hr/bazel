{
  if (operator == TokenKind.PLUS || operator == TokenKind.UNION) {
    for (    QueryExpression operand : operands) {
      env.eval(operand,context,callback);
    }
    return;
  }
  final Set<T> lhsValue=QueryUtil.evalAll(env,context,operands.get(0));
  if (operator == TokenKind.EXCEPT || operator == TokenKind.MINUS) {
    for (int i=1; i < operands.size(); i++) {
      env.eval(operands.get(i),context,new Callback<T>(){
        @Override public void process(        Iterable<T> partialResult) throws QueryException, InterruptedException {
          for (          T target : partialResult) {
            lhsValue.remove(target);
          }
        }
      }
);
    }
    callback.process(lhsValue);
    return;
  }
  Preconditions.checkState(operator == TokenKind.INTERSECT || operator == TokenKind.CARET,operator);
  for (int i=1; i < operands.size(); i++) {
    lhsValue.retainAll(QueryUtil.evalAll(env,context,operands.get(i)));
  }
  callback.process(lhsValue);
}
