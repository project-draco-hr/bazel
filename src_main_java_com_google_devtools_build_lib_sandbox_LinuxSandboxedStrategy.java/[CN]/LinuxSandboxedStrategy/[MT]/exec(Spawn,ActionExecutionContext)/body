{
  Executor executor=actionExecutionContext.getExecutor();
  if (spawn.getOwner().getLabel() == null || spawn.getArguments().get(0).contains("build-runfiles")) {
    standaloneStrategy.exec(spawn,actionExecutionContext);
    return;
  }
  if (executor.reportsSubcommands()) {
    executor.reportSubcommand(Label.print(spawn.getOwner().getLabel()) + " [" + spawn.getResourceOwner().prettyPrint()+ "]",spawn.asShellCommand(executor.getExecRoot()));
  }
  FileOutErr outErr=actionExecutionContext.getFileOutErr();
  String execId=uuid + "-" + Integer.toString(execCounter.getAndIncrement());
  Path sandboxPath=execRoot.getRelative(Constants.PRODUCT_NAME + "-sandbox").getRelative(execId);
  ImmutableMultimap<Path,Path> mounts;
  try {
    mounts=getMounts(spawn,sandboxPath,actionExecutionContext);
  }
 catch (  IOException e) {
    throw new UserExecException("Could not prepare mounts for sandbox execution",e);
  }
  int timeout=getTimeout(spawn);
  try {
    final NamespaceSandboxRunner runner=new NamespaceSandboxRunner(execRoot,sandboxPath,mounts,verboseFailures);
    try {
      runner.run(spawn.getArguments(),spawn.getEnvironment(),blazeDirs.getExecRoot().getPathFile(),outErr,spawn.getOutputFiles(),timeout);
    }
  finally {
      backgroundWorkers.execute(new Runnable(){
        @Override public void run(){
          try {
            while (!Thread.currentThread().isInterrupted()) {
              try {
                runner.cleanup();
                return;
              }
 catch (              IOException e2) {
                Thread.sleep(250);
              }
            }
          }
 catch (          InterruptedException e) {
          }
        }
      }
);
    }
  }
 catch (  CommandException e) {
    EventHandler handler=actionExecutionContext.getExecutor().getEventHandler();
    handler.handle(Event.error("Sandboxed execution failed: " + spawn.getOwner().getLabel() + "."));
    throw new UserExecException("Error during execution of spawn",e);
  }
catch (  IOException e) {
    EventHandler handler=actionExecutionContext.getExecutor().getEventHandler();
    handler.handle(Event.error("I/O error during sandboxed execution:\n" + Throwables.getStackTraceAsString(e)));
    throw new UserExecException("Could not execute spawn",e);
  }
}
