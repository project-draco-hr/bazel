{
  OptionsProvider options=parseOptions(blazeModules,args);
  for (  BlazeModule module : blazeModules) {
    module.globalInit(options);
  }
  BlazeServerStartupOptions startupOptions=options.getOptions(BlazeServerStartupOptions.class);
  String productName=startupOptions.productName.toLowerCase(Locale.US);
  if (startupOptions.oomMoreEagerlyThreshold != 100) {
    new RetainedHeapLimiter(startupOptions.oomMoreEagerlyThreshold).install();
  }
  if (startupOptions.oomMoreEagerly) {
    new OomSignalHandler();
  }
  PathFragment workspaceDirectory=startupOptions.workspaceDirectory;
  PathFragment installBase=startupOptions.installBase;
  PathFragment outputBase=startupOptions.outputBase;
  OsUtils.maybeForceJNI(installBase);
  if (installBase == null || !installBase.isAbsolute()) {
    throw new IllegalArgumentException("Bad --install_base option specified: '" + installBase + "'");
  }
  if (outputBase != null && !outputBase.isAbsolute()) {
    throw new IllegalArgumentException("Bad --output_base option specified: '" + outputBase + "'");
  }
  PathFragment outputPathFragment=BlazeDirectories.outputPathFromOutputBase(outputBase,workspaceDirectory,startupOptions.deepExecRoot,productName);
  FileSystem fs=null;
  for (  BlazeModule module : blazeModules) {
    FileSystem moduleFs=module.getFileSystem(options,outputPathFragment);
    if (moduleFs != null) {
      Preconditions.checkState(fs == null,"more than one module returns a file system");
      fs=moduleFs;
    }
  }
  if (fs == null) {
    fs=fileSystemImplementation();
  }
  Path.setFileSystemForSerialization(fs);
  SubprocessBuilder.setSubprocessFactory(subprocessFactoryImplementation());
  Path installBasePath=fs.getPath(installBase);
  Path outputBasePath=fs.getPath(outputBase);
  Path workspaceDirectoryPath=null;
  if (!workspaceDirectory.equals(PathFragment.EMPTY_FRAGMENT)) {
    workspaceDirectoryPath=fs.getPath(workspaceDirectory);
  }
  if (fs instanceof UnixFileSystem) {
    ((UnixFileSystem)fs).setRootsWithAllowedHardlinks(Iterables.filter(Arrays.asList(installBasePath,outputBasePath,workspaceDirectoryPath),Predicates.notNull()));
  }
  ServerDirectories serverDirectories=new ServerDirectories(installBasePath,outputBasePath,startupOptions.installMD5);
  Clock clock=BlazeClock.instance();
  BlazeRuntime.Builder runtimeBuilder=new BlazeRuntime.Builder().setProductName(productName).setServerDirectories(serverDirectories).setStartupOptionsProvider(options).setClock(clock).setEventBusExceptionHandler(startupOptions.fatalEventBusExceptions || !BlazeVersionInfo.instance().isReleasedBlaze() ? new BlazeRuntime.BugReportingExceptionHandler() : new BlazeRuntime.RemoteExceptionHandler());
  if (System.getenv("TEST_TMPDIR") != null && System.getenv("NO_CRASH_ON_LOGGING_IN_TEST") == null) {
    LoggingUtil.installRemoteLogger(getTestCrashLogger());
  }
  runtimeBuilder.addBlazeModule(new BuiltinCommandModule());
  for (  BlazeModule blazeModule : blazeModules) {
    runtimeBuilder.addBlazeModule(blazeModule);
  }
  BlazeRuntime runtime=runtimeBuilder.build();
  BlazeDirectories directories=new BlazeDirectories(serverDirectories,workspaceDirectoryPath,startupOptions.deepExecRoot,productName);
  BinTools binTools;
  try {
    binTools=BinTools.forProduction(directories);
  }
 catch (  IOException e) {
    throw new AbruptExitException("Cannot enumerate embedded binaries: " + e.getMessage(),ExitCode.LOCAL_ENVIRONMENTAL_ERROR);
  }
  runtime.initWorkspace(directories,binTools);
  AutoProfiler.setClock(runtime.getClock());
  BugReport.setRuntime(runtime);
  return runtime;
}
