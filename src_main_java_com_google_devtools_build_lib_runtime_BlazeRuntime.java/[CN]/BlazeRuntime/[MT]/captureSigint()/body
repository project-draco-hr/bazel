{
  final Thread mainThread=Thread.currentThread();
  final AtomicInteger numInterrupts=new AtomicInteger();
  final Runnable interruptWatcher=new Runnable(){
    @Override public void run(){
      int count=0;
      while (true) {
        count++;
        Uninterruptibles.sleepUninterruptibly(10,TimeUnit.SECONDS);
        LOG.warning("Slow interrupt number " + count + " in batch mode");
        ThreadUtils.warnAboutSlowInterrupt();
      }
    }
  }
;
  new InterruptSignalHandler(){
    @Override protected void onSignal(){
      LOG.info("User interrupt");
      OutErr.SYSTEM_OUT_ERR.printErrLn("Blaze received an interrupt");
      mainThread.interrupt();
      int curNumInterrupts=numInterrupts.incrementAndGet();
      if (curNumInterrupts == 1) {
        Thread interruptWatcherThread=new Thread(interruptWatcher,"interrupt-watcher");
        interruptWatcherThread.setDaemon(true);
        interruptWatcherThread.start();
      }
 else       if (curNumInterrupts == 2) {
        LOG.warning("Second --batch interrupt: Reverting to JVM SIGINT handler");
        uninstall();
      }
    }
  }
;
}
