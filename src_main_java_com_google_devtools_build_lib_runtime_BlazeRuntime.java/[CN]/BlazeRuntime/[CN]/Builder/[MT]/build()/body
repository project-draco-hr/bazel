{
  Preconditions.checkNotNull(productName);
  Preconditions.checkNotNull(directories);
  Preconditions.checkNotNull(startupOptionsProvider);
  Clock clock=(this.clock == null) ? BlazeClock.instance() : this.clock;
  UUID instanceId=(this.instanceId == null) ? UUID.randomUUID() : this.instanceId;
  Preconditions.checkNotNull(clock);
  for (  BlazeModule module : blazeModules) {
    module.blazeStartup(startupOptionsProvider,BlazeVersionInfo.instance(),instanceId,directories,clock);
  }
  QueryEnvironmentFactory queryEnvironmentFactory=null;
  for (  BlazeModule module : blazeModules) {
    QueryEnvironmentFactory queryEnvFactory=module.getQueryEnvironmentFactory();
    if (queryEnvFactory != null) {
      Preconditions.checkState(queryEnvironmentFactory == null,"At most one query environment factory supported. But found two: %s and %s",queryEnvFactory,queryEnvironmentFactory);
      queryEnvironmentFactory=queryEnvFactory;
    }
  }
  if (queryEnvironmentFactory == null) {
    queryEnvironmentFactory=new QueryEnvironmentFactory();
  }
  ConfiguredRuleClassProvider.Builder ruleClassBuilder=new ConfiguredRuleClassProvider.Builder();
  for (  BlazeModule module : blazeModules) {
    module.initializeRuleClasses(ruleClassBuilder);
  }
  Map<String,String> platformRegexps=null;
{
    ImmutableMap.Builder<String,String> builder=new ImmutableMap.Builder<>();
    for (    BlazeModule module : blazeModules) {
      builder.putAll(module.getPlatformSetRegexps());
    }
    platformRegexps=builder.build();
    if (platformRegexps.isEmpty()) {
      platformRegexps=null;
    }
  }
  Function<RuleClass,AttributeContainer> attributeContainerFactory=null;
  for (  BlazeModule module : blazeModules) {
    Function<RuleClass,AttributeContainer> attrContainerFactory=module.getAttributeContainerSupplier();
    if (attrContainerFactory != null) {
      Preconditions.checkState(attributeContainerFactory == null,"At most one attribute container supplier supported. But found two: %s and %s",attrContainerFactory,attributeContainerFactory);
      attributeContainerFactory=attrContainerFactory;
    }
  }
  if (attributeContainerFactory == null) {
    attributeContainerFactory=AttributeContainer.ATTRIBUTE_CONTAINER_FACTORY;
  }
  ConfiguredRuleClassProvider ruleClassProvider=ruleClassBuilder.build();
  List<PackageFactory.EnvironmentExtension> extensions=new ArrayList<>();
  for (  BlazeModule module : blazeModules) {
    extensions.add(module.getPackageEnvironmentExtension());
  }
  Package.Builder.Helper packageBuilderHelper=null;
  for (  BlazeModule module : blazeModules) {
    Package.Builder.Helper candidateHelper=module.getPackageBuilderHelper(ruleClassProvider,directories.getFileSystem());
    if (candidateHelper != null) {
      Preconditions.checkState(packageBuilderHelper == null,"more than one module defines a package builder helper");
      packageBuilderHelper=candidateHelper;
    }
  }
  if (packageBuilderHelper == null) {
    packageBuilderHelper=Package.Builder.DefaultHelper.INSTANCE;
  }
  PackageFactory packageFactory=new PackageFactory(ruleClassProvider,platformRegexps,attributeContainerFactory,extensions,BlazeVersionInfo.instance().getVersion(),packageBuilderHelper);
  if (configurationFactory == null) {
    configurationFactory=new ConfigurationFactory(ruleClassProvider.getConfigurationCollectionFactory(),ruleClassProvider.getConfigurationFragments());
  }
  ProjectFile.Provider projectFileProvider=null;
  for (  BlazeModule module : blazeModules) {
    ProjectFile.Provider candidate=module.createProjectFileProvider();
    if (candidate != null) {
      Preconditions.checkState(projectFileProvider == null,"more than one module defines a project file provider");
      projectFileProvider=candidate;
    }
  }
  invocationPolicy=createInvocationPolicyFromModules(invocationPolicy,blazeModules);
  BlazeRuntime runtime=new BlazeRuntime(queryEnvironmentFactory,packageFactory,ruleClassProvider,configurationFactory,clock,startupOptionsProvider,ImmutableList.copyOf(blazeModules),eventBusExceptionHandler,projectFileProvider,invocationPolicy,commands,productName);
  runtime.initWorkspace(directories,binTools);
  return runtime;
}
