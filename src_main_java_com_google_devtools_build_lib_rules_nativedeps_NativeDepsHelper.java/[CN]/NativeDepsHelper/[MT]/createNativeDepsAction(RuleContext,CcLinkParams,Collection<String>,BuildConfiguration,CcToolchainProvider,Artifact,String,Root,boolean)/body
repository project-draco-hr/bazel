{
  Preconditions.checkState(ruleContext.isLegalFragment(CppConfiguration.class),"%s does not have access to CppConfiguration",ruleContext.getRule().getRuleClass());
  List<String> linkopts=new ArrayList<>(extraLinkOpts);
  linkopts.addAll(linkParams.flattenedLinkopts());
  Map<Artifact,NestedSet<Artifact>> linkstamps=CppHelper.resolveLinkstamps(ruleContext,linkParams);
  List<Artifact> buildInfoArtifacts=linkstamps.isEmpty() ? ImmutableList.<Artifact>of() : ruleContext.getAnalysisEnvironment().getBuildInfo(ruleContext,CppBuildInfo.KEY,configuration);
  boolean shareNativeDeps=configuration.getFragment(CppConfiguration.class).shareNativeDeps();
  NestedSet<LibraryToLink> linkerInputs=linkParams.getLibraries();
  Artifact sharedLibrary;
  if (shareNativeDeps) {
    PathFragment sharedPath=getSharedNativeDepsPath(LinkerInputs.toLibraryArtifacts(linkerInputs),linkopts,linkstamps.keySet(),buildInfoArtifacts,ruleContext.getFeatures());
    libraryIdentifier=sharedPath.getPathString();
    sharedLibrary=ruleContext.getShareableArtifact(sharedPath.replaceName(sharedPath.getBaseName() + ".so"),configuration.getBinDirectory(ruleContext.getRule().getRepository()));
  }
 else {
    sharedLibrary=nativeDeps;
  }
  CppLinkActionBuilder builder=new CppLinkActionBuilder(ruleContext,sharedLibrary,configuration,toolchain);
  if (useDynamicRuntime) {
    builder.setRuntimeInputs(ArtifactCategory.DYNAMIC_LIBRARY,toolchain.getDynamicRuntimeLinkMiddleman(),toolchain.getDynamicRuntimeLinkInputs());
  }
 else {
    builder.setRuntimeInputs(ArtifactCategory.DYNAMIC_LIBRARY,toolchain.getStaticRuntimeLinkMiddleman(),toolchain.getStaticRuntimeLinkInputs());
  }
  CppLinkAction linkAction=builder.setLinkArtifactFactory(SHAREABLE_LINK_ARTIFACT_FACTORY).setCrosstoolInputs(toolchain.getLink()).addLibraries(linkerInputs).setLinkType(LinkTargetType.DYNAMIC_LIBRARY).setLinkStaticness(LinkStaticness.MOSTLY_STATIC).setLibraryIdentifier(libraryIdentifier).addLinkopts(linkopts).setNativeDeps(true).addLinkstamps(linkstamps).build();
  ruleContext.registerAction(linkAction);
  Artifact linkerOutput=linkAction.getPrimaryOutput();
  if (shareNativeDeps) {
    List<Artifact> runtimeSymlinks;
    if (useDynamicRuntime) {
      runtimeSymlinks=new LinkedList<>();
      for (      final Artifact runtimeInput : toolchain.getDynamicRuntimeLinkInputs()) {
        final Artifact runtimeSymlink=ruleContext.getPackageRelativeArtifact(getRuntimeLibraryPath(ruleContext,runtimeInput),bindirIfShared);
        ruleContext.registerAction(new SymlinkAction(ruleContext.getActionOwner(),runtimeInput,runtimeSymlink,null));
        runtimeSymlinks.add(runtimeSymlink);
      }
    }
 else {
      runtimeSymlinks=ImmutableList.of();
    }
    ruleContext.registerAction(new SymlinkAction(ruleContext.getActionOwner(),linkerOutput,nativeDeps,null));
    return new NativeDepsRunfiles(nativeDeps,runtimeSymlinks);
  }
  return new NativeDepsRunfiles(linkerOutput,ImmutableList.<Artifact>of());
}
