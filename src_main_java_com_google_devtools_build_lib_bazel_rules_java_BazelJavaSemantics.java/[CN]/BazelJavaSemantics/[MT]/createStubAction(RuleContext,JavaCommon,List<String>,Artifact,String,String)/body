{
  Preconditions.checkState(ruleContext.getConfiguration().hasFragment(Jvm.class));
  Preconditions.checkNotNull(jvmFlags);
  Preconditions.checkNotNull(executable);
  Preconditions.checkNotNull(javaStartClass);
  Preconditions.checkNotNull(javaExecutable);
  List<Substitution> arguments=new ArrayList<>();
  String workspaceName=ruleContext.getWorkspaceName();
  final String workspacePrefix=workspaceName + (workspaceName.isEmpty() ? "" : "/");
  final boolean isRunfilesEnabled=ruleContext.getConfiguration().runfilesEnabled();
  arguments.add(Substitution.of("%workspace_prefix%",workspacePrefix));
  arguments.add(Substitution.of("%javabin%",javaExecutable));
  arguments.add(Substitution.of("%needs_runfiles%",ruleContext.getFragment(Jvm.class).getJavaExecutable().isAbsolute() ? "0" : "1"));
  arguments.add(new ComputedSubstitution("%classpath%"){
    @Override public String getValue(){
      StringBuilder buffer=new StringBuilder();
      Iterable<Artifact> jars=javaCommon.getRuntimeClasspath();
      char delimiter=File.pathSeparatorChar;
      appendRunfilesRelativeEntries(buffer,jars,workspacePrefix,delimiter,isRunfilesEnabled);
      return buffer.toString();
    }
  }
);
  arguments.add(Substitution.of("%java_start_class%",ShellEscaper.escapeString(javaStartClass)));
  arguments.add(Substitution.ofSpaceSeparatedList("%jvm_flags%",ImmutableList.copyOf(jvmFlags)));
  ruleContext.registerAction(new TemplateExpansionAction(ruleContext.getActionOwner(),executable,STUB_SCRIPT,arguments,true));
}
