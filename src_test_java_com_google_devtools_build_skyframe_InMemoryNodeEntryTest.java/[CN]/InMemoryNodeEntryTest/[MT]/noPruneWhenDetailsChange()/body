{
  NodeEntry entry=new InMemoryNodeEntry();
  entry.addReverseDepAndCheckIfDone(null);
  SkyKey dep=key("dep");
  addTemporaryDirectDep(entry,dep);
  entry.signalDep();
  setValue(entry,new IntegerValue(5),null,0L);
  assertFalse(entry.isDirty());
  assertTrue(entry.isDone());
  entry.markDirty(false);
  assertTrue(entry.isDirty());
  assertFalse(entry.isChanged());
  assertFalse(entry.isDone());
  assertTrue(entry.isReady());
  SkyKey parent=key("parent");
  entry.addReverseDepAndCheckIfDone(parent);
  assertEquals(NodeEntry.DirtyState.CHECK_DEPENDENCIES,entry.getDirtyState());
  assertThat(entry.getNextDirtyDirectDeps()).containsExactly(dep);
  addTemporaryDirectDep(entry,dep);
  entry.signalDep(IntVersion.of(1L));
  assertEquals(NodeEntry.DirtyState.NEEDS_REBUILDING,entry.getDirtyState());
  assertThatNodeEntry(entry).hasTemporaryDirectDepsThat().containsExactly(dep);
  ReifiedSkyFunctionException exception=new ReifiedSkyFunctionException(new GenericFunctionException(new SomeErrorException("oops"),Transience.PERSISTENT),key("cause"));
  entry.markRebuilding();
  setValue(entry,new IntegerValue(5),ErrorInfo.fromException(exception,false),1L);
  assertTrue(entry.isDone());
  assertEquals("Version increments when setValue changes",IntVersion.of(1),entry.getVersion());
}
