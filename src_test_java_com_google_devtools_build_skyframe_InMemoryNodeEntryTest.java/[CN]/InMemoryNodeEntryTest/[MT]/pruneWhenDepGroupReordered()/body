{
  NodeEntry entry=new InMemoryNodeEntry();
  entry.addReverseDepAndCheckIfDone(null);
  SkyKey dep=key("dep");
  SkyKey dep1InGroup=key("dep1InGroup");
  SkyKey dep2InGroup=key("dep2InGroup");
  addTemporaryDirectDep(entry,dep);
  addTemporaryDirectDeps(entry,dep1InGroup,dep2InGroup);
  entry.signalDep();
  entry.signalDep();
  entry.signalDep();
  setValue(entry,new IntegerValue(5),null,0L);
  assertFalse(entry.isDirty());
  assertTrue(entry.isDone());
  entry.markDirty(false);
  assertTrue(entry.isDirty());
  assertFalse(entry.isChanged());
  assertFalse(entry.isDone());
  assertTrue(entry.isReady());
  entry.addReverseDepAndCheckIfDone(null);
  assertEquals(NodeEntry.DirtyState.CHECK_DEPENDENCIES,entry.getDirtyState());
  assertThat(entry.getNextDirtyDirectDeps()).containsExactly(dep);
  addTemporaryDirectDep(entry,dep);
  entry.signalDep(IntVersion.of(1L));
  assertEquals(NodeEntry.DirtyState.NEEDS_REBUILDING,entry.getDirtyState());
  assertThatNodeEntry(entry).hasTemporaryDirectDepsThat().containsExactly(dep);
  assertThat(entry.markRebuildingAndGetAllRemainingDirtyDirectDeps()).containsExactly(dep1InGroup,dep2InGroup);
  addTemporaryDirectDeps(entry,dep2InGroup,dep1InGroup);
  assertFalse(entry.signalDep());
  assertTrue(entry.signalDep());
  setValue(entry,new IntegerValue(5),null,1L);
  assertTrue(entry.isDone());
  assertEquals("Version does not change when dep group reordered",IntVersion.of(0),entry.getVersion());
}
