{
  Preconditions.checkNotNull(shouldScanIncludes);
  NestedSetBuilder<Artifact> realMandatoryInputsBuilder=NestedSetBuilder.compileOrder();
  realMandatoryInputsBuilder.addTransitive(mandatoryInputsBuilder.build());
  if (tempOutputFile == null && !shouldScanIncludes) {
    realMandatoryInputsBuilder.addTransitive(context.getDeclaredIncludeSrcs());
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.USE_HEADER_MODULES) && (!shouldScanIncludes || !featureConfiguration.isEnabled(CppRuleClasses.PRUNE_HEADER_MODULES))) {
    realMandatoryInputsBuilder.addTransitive(context.getTransitiveModules(usePic));
  }
  realMandatoryInputsBuilder.addTransitive(context.getAdditionalInputs());
  realMandatoryInputsBuilder.add(sourceFile);
  boolean fake=tempOutputFile != null;
  ImmutableSet<String> executionRequirements=ImmutableSet.of();
  if (featureConfiguration.actionIsConfigured(getActionName())) {
    executionRequirements=featureConfiguration.getToolForAction(getActionName()).getExecutionRequirements();
  }
  if (fake) {
    return new FakeCppCompileAction(owner,ImmutableList.copyOf(features),featureConfiguration,variables,sourceFile,shouldScanIncludes,usePic,sourceLabel,realMandatoryInputsBuilder.build(),outputFile,tempOutputFile,dotdFile,configuration,cppConfiguration,context,actionContext,ImmutableList.copyOf(copts),getNocoptPredicate(nocopts),ruleContext);
  }
 else {
    NestedSet<Artifact> realMandatoryInputs=realMandatoryInputsBuilder.build();
    return new CppCompileAction(owner,ImmutableList.copyOf(features),featureConfiguration,variables,sourceFile,shouldScanIncludes,usePic,sourceLabel,realMandatoryInputs,outputFile,dotdFile,gcnoFile,dwoFile,optionalSourceFile,configuration,cppConfiguration,context,actionContext,ImmutableList.copyOf(copts),getNocoptPredicate(nocopts),specialInputsHandler,getLipoScannables(realMandatoryInputs),actionClassId,executionRequirements,getActionName(),ruleContext);
  }
}
