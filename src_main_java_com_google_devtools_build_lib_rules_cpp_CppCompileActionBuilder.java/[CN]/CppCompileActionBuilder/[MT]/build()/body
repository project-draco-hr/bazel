{
  NestedSetBuilder<Artifact> realMandatoryInputsBuilder=NestedSetBuilder.compileOrder();
  realMandatoryInputsBuilder.addTransitive(mandatoryInputsBuilder.build());
  if (tempOutputFile == null && configuration != null && !configuration.getFragment(CppConfiguration.class).shouldScanIncludes()) {
    realMandatoryInputsBuilder.addTransitive(context.getDeclaredIncludeSrcs());
  }
  realMandatoryInputsBuilder.addTransitive(context.getAdditionalInputs());
  realMandatoryInputsBuilder.addTransitive(pluginInputsBuilder.build());
  realMandatoryInputsBuilder.add(sourceFile);
  boolean fake=tempOutputFile != null;
  if (fake) {
    return new FakeCppCompileAction(owner,ImmutableList.copyOf(features),featureConfiguration,sourceFile,sourceLabel,realMandatoryInputsBuilder.build(),outputFile,tempOutputFile,dotdFile,configuration,cppConfiguration,context,ImmutableList.copyOf(copts),ImmutableList.copyOf(pluginOpts),getNocoptPredicate(nocopts),extraSystemIncludePrefixes,enableLayeringCheck,fdoBuildStamp);
  }
 else {
    NestedSet<Artifact> realMandatoryInputs=realMandatoryInputsBuilder.build();
    return new CppCompileAction(owner,ImmutableList.copyOf(features),featureConfiguration,sourceFile,sourceLabel,realMandatoryInputs,outputFile,dotdFile,gcnoFile,getDwoFile(outputFile,analysisEnvironment,cppConfiguration),optionalSourceFile,configuration,cppConfiguration,context,actionContext,ImmutableList.copyOf(copts),ImmutableList.copyOf(pluginOpts),getNocoptPredicate(nocopts),extraSystemIncludePrefixes,enableLayeringCheck,fdoBuildStamp,includeResolver,getLipoScannables(realMandatoryInputs),actionClassId,compileHeaderModules);
  }
}
