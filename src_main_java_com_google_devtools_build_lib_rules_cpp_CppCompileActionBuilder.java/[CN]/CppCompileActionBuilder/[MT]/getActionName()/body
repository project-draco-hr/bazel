{
  PathFragment sourcePath=sourceFile.getExecPath();
  if (CppFileTypes.CPP_MODULE_MAP.matches(sourcePath)) {
    return CppCompileAction.CPP_MODULE_COMPILE;
  }
 else   if (CppFileTypes.CPP_HEADER.matches(sourcePath)) {
    if (featureConfiguration.isEnabled(CppRuleClasses.PARSE_HEADERS)) {
      return CppCompileAction.CPP_HEADER_PARSING;
    }
 else     if (featureConfiguration.isEnabled(CppRuleClasses.PREPROCESS_HEADERS)) {
      return CppCompileAction.CPP_HEADER_PREPROCESSING;
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (CppFileTypes.C_SOURCE.matches(sourcePath)) {
    return CppCompileAction.C_COMPILE;
  }
 else   if (CppFileTypes.CPP_SOURCE.matches(sourcePath)) {
    return CppCompileAction.CPP_COMPILE;
  }
 else   if (CppFileTypes.OBJC_SOURCE.matches(sourcePath)) {
    return CppCompileAction.OBJC_COMPILE;
  }
 else   if (CppFileTypes.OBJCPP_SOURCE.matches(sourcePath)) {
    return CppCompileAction.OBJCPP_COMPILE;
  }
 else   if (CppFileTypes.ASSEMBLER.matches(sourcePath)) {
    return CppCompileAction.ASSEMBLE;
  }
 else   if (CppFileTypes.ASSEMBLER_WITH_C_PREPROCESSOR.matches(sourcePath)) {
    return CppCompileAction.PREPROCESS_ASSEMBLE;
  }
  throw new IllegalStateException();
}
