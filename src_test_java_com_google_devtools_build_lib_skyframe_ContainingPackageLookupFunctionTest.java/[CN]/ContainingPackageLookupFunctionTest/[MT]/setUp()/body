{
  AtomicReference<PathPackageLocator> pkgLocator=new AtomicReference<>(new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory)));
  deletedPackages=new AtomicReference<>(ImmutableSet.<PackageIdentifier>of());
  ExternalFilesHelper externalFilesHelper=new ExternalFilesHelper(pkgLocator,false,new BlazeDirectories(rootDirectory,rootDirectory,rootDirectory));
  Map<SkyFunctionName,SkyFunction> skyFunctions=new HashMap<>();
  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages));
  skyFunctions.put(SkyFunctions.CONTAINING_PACKAGE_LOOKUP,new ContainingPackageLookupFunction());
  skyFunctions.put(SkyFunctions.BLACKLISTED_PACKAGE_PREFIXES,new BlacklistedPackagePrefixesFunction());
  skyFunctions.put(SkyFunctions.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),externalFilesHelper));
  skyFunctions.put(SkyFunctions.FILE,new FileFunction(pkgLocator));
  RecordingDifferencer differencer=new RecordingDifferencer();
  evaluator=new InMemoryMemoizingEvaluator(skyFunctions,differencer);
  driver=new SequentialBuildDriver(evaluator);
  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());
  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());
  PrecomputedValue.BLACKLISTED_PACKAGE_PREFIXES_FILE.set(differencer,PathFragment.EMPTY_FRAGMENT);
}
