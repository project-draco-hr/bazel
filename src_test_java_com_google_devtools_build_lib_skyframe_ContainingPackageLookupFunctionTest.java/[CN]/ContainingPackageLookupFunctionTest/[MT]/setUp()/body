{
  super.setUp();
  AtomicReference<PathPackageLocator> pkgLocator=new AtomicReference<>(new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory)));
  deletedPackages=new AtomicReference<>(ImmutableSet.<PackageIdentifier>of());
  ExternalFilesHelper externalFilesHelper=new ExternalFilesHelper(pkgLocator);
  TimestampGranularityMonitor tsgm=new TimestampGranularityMonitor(BlazeClock.instance());
  Map<SkyFunctionName,SkyFunction> skyFunctions=new HashMap<>();
  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages));
  skyFunctions.put(SkyFunctions.CONTAINING_PACKAGE_LOOKUP,new ContainingPackageLookupFunction());
  skyFunctions.put(SkyFunctions.FILE_STATE,new FileStateFunction(tsgm,externalFilesHelper));
  skyFunctions.put(SkyFunctions.FILE,new FileFunction(pkgLocator,tsgm,externalFilesHelper));
  RecordingDifferencer differencer=new RecordingDifferencer();
  evaluator=new InMemoryMemoizingEvaluator(skyFunctions,differencer);
  driver=new SequentialBuildDriver(evaluator);
  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());
  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());
  PrecomputedValue.BLACKLISTED_PKG_PREFIXES.set(differencer,ImmutableSet.<PathFragment>of());
}
