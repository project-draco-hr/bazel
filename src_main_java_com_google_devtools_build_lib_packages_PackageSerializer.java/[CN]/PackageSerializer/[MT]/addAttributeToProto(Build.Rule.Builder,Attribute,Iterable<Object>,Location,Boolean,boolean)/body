{
  com.google.devtools.build.lib.packages.Type<?> type=attr.getType();
  Build.Attribute.Builder attrPb=Build.Attribute.newBuilder();
  attrPb.setName(attr.getName());
  attrPb.setType(ProtoUtils.getDiscriminatorFromType(type));
  if (location != null) {
    attrPb.setParseableLocation(serializeLocation(location));
  }
  if (explicitlySpecified != null) {
    attrPb.setExplicitlySpecified(explicitlySpecified);
  }
  Object singleAttributeValue=Iterables.size(values) == 1 ? Iterables.getOnlyElement(values) : null;
  if (type == INTEGER) {
    if (singleAttributeValue != null) {
      attrPb.setIntValue((Integer)singleAttributeValue);
    }
  }
 else   if (type == STRING || type == LABEL || type == NODEP_LABEL || type == OUTPUT) {
    if (singleAttributeValue != null) {
      attrPb.setStringValue(singleAttributeValue.toString());
    }
  }
 else   if (type == STRING_LIST || type == LABEL_LIST || type == NODEP_LABEL_LIST || type == OUTPUT_LIST || type == DISTRIBUTIONS) {
    for (    Object value : values) {
      for (      Object entry : (Collection<?>)value) {
        attrPb.addStringListValue(entry.toString());
      }
    }
  }
 else   if (type == INTEGER_LIST) {
    for (    Object value : values) {
      for (      Integer entry : (Collection<Integer>)value) {
        attrPb.addIntListValue(entry);
      }
    }
  }
 else   if (type == BOOLEAN) {
    if (singleAttributeValue != null) {
      if ((Boolean)singleAttributeValue) {
        attrPb.setStringValue("true");
        attrPb.setBooleanValue(true);
      }
 else {
        attrPb.setStringValue("false");
        attrPb.setBooleanValue(false);
      }
      attrPb.setIntValue((Boolean)singleAttributeValue ? 1 : 0);
    }
  }
 else   if (type == TRISTATE) {
    if (singleAttributeValue != null) {
switch ((TriState)singleAttributeValue) {
case AUTO:
        attrPb.setIntValue(-1);
      attrPb.setStringValue("auto");
    attrPb.setTristateValue(Build.Attribute.Tristate.AUTO);
  break;
case NO:
attrPb.setIntValue(0);
attrPb.setStringValue("no");
attrPb.setTristateValue(Build.Attribute.Tristate.NO);
break;
case YES:
attrPb.setIntValue(1);
attrPb.setStringValue("yes");
attrPb.setTristateValue(Build.Attribute.Tristate.YES);
break;
default :
throw new AssertionError("Expected AUTO/NO/YES to cover all possible cases");
}
}
}
 else if (type == LICENSE) {
if (singleAttributeValue != null) {
License license=(License)singleAttributeValue;
Build.License.Builder licensePb=Build.License.newBuilder();
for (License.LicenseType licenseType : license.getLicenseTypes()) {
licensePb.addLicenseType(licenseType.toString());
}
for (Label exception : license.getExceptions()) {
licensePb.addException(exception.toString());
}
attrPb.setLicense(licensePb);
}
}
 else if (type == STRING_DICT) {
for (Object value : values) {
Map<String,String> dict=(Map<String,String>)value;
for (Map.Entry<String,String> keyValueList : dict.entrySet()) {
Build.StringDictEntry entry=Build.StringDictEntry.newBuilder().setKey(keyValueList.getKey()).setValue(keyValueList.getValue()).build();
attrPb.addStringDictValue(entry);
}
}
}
 else if (type == STRING_DICT_UNARY) {
for (Object value : values) {
Map<String,String> dict=(Map<String,String>)value;
for (Map.Entry<String,String> dictEntry : dict.entrySet()) {
Build.StringDictUnaryEntry entry=Build.StringDictUnaryEntry.newBuilder().setKey(dictEntry.getKey()).setValue(dictEntry.getValue()).build();
attrPb.addStringDictUnaryValue(entry);
}
}
}
 else if (type == STRING_LIST_DICT) {
for (Object value : values) {
Map<String,List<String>> dict=(Map<String,List<String>>)value;
for (Map.Entry<String,List<String>> dictEntry : dict.entrySet()) {
Build.StringListDictEntry.Builder entry=Build.StringListDictEntry.newBuilder().setKey(dictEntry.getKey());
for (Object dictEntryValue : dictEntry.getValue()) {
entry.addValue(dictEntryValue.toString());
}
attrPb.addStringListDictValue(entry);
}
}
}
 else if (type == LABEL_LIST_DICT) {
for (Object value : values) {
Map<String,List<Label>> dict=(Map<String,List<Label>>)value;
for (Map.Entry<String,List<Label>> dictEntry : dict.entrySet()) {
Build.LabelListDictEntry.Builder entry=Build.LabelListDictEntry.newBuilder().setKey(dictEntry.getKey());
for (Object dictEntryValue : dictEntry.getValue()) {
entry.addValue(dictEntryValue.toString());
}
attrPb.addLabelListDictValue(entry);
}
}
}
 else if (type == FILESET_ENTRY_LIST) {
for (Object value : values) {
List<FilesetEntry> filesetEntries=(List<FilesetEntry>)value;
for (FilesetEntry filesetEntry : filesetEntries) {
Build.FilesetEntry.Builder filesetEntryPb=Build.FilesetEntry.newBuilder().setSource(filesetEntry.getSrcLabel().toString()).setDestinationDirectory(filesetEntry.getDestDir().getPathString()).setSymlinkBehavior(symlinkBehaviorToPb(filesetEntry.getSymlinkBehavior())).setStripPrefix(filesetEntry.getStripPrefix()).setFilesPresent(filesetEntry.getFiles() != null);
if (filesetEntry.getFiles() != null) {
for (Label file : filesetEntry.getFiles()) {
filesetEntryPb.addFile(file.toString());
}
}
if (filesetEntry.getExcludes() != null) {
for (String exclude : filesetEntry.getExcludes()) {
filesetEntryPb.addExclude(exclude);
}
}
attrPb.addFilesetListValue(filesetEntryPb);
}
}
}
 else {
throw new AssertionError("Unknown type: " + type);
}
if (includeGlobs) {
for (Object value : values) {
if (value instanceof GlobList<?>) {
GlobList<?> globList=(GlobList<?>)value;
for (GlobCriteria criteria : globList.getCriteria()) {
Build.GlobCriteria.Builder criteriaPb=Build.GlobCriteria.newBuilder().setGlob(criteria.isGlob());
for (String include : criteria.getIncludePatterns()) {
criteriaPb.addInclude(include);
}
for (String exclude : criteria.getExcludePatterns()) {
criteriaPb.addExclude(exclude);
}
attrPb.addGlobCriteria(criteriaPb);
}
}
}
}
rulePb.addAttribute(attrPb);
}
