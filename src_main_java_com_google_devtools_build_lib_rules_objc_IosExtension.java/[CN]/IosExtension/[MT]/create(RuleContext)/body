{
  ObjcCommon common=common(ruleContext);
  XcodeProvider.Builder xcodeProviderBuilder=new XcodeProvider.Builder();
  NestedSetBuilder<Artifact> filesToBuild=NestedSetBuilder.stableOrder();
  ReleaseBundlingSupport releaseBundlingSupport=new ReleaseBundlingSupport(ruleContext,common.getObjcProvider(),optionsProvider(ruleContext),LinkedBinary.DEPENDENCIES_ONLY,"PlugIns/%s.appex");
  releaseBundlingSupport.registerActions().addXcodeSettings(xcodeProviderBuilder).addFilesToBuild(filesToBuild).validateAttributes();
  new XcodeSupport(ruleContext).addFilesToBuild(filesToBuild).addXcodeSettings(xcodeProviderBuilder,common.getObjcProvider(),XcodeProductType.EXTENSION).addDependencies(xcodeProviderBuilder,"binary").registerActions(xcodeProviderBuilder.build());
  ObjcProvider nestedBundleProvider=new ObjcProvider.Builder().add(MERGE_ZIP,ruleContext.getImplicitOutputArtifact(ReleaseBundlingSupport.IPA)).build();
  return common.configuredTarget(filesToBuild.build(),Optional.of(xcodeProviderBuilder.build()),Optional.of(nestedBundleProvider),Optional.<XcTestAppProvider>absent(),Optional.<J2ObjcSrcsProvider>absent());
}
