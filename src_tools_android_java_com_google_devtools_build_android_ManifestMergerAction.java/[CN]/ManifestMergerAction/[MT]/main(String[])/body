{
  OptionsParser optionsParser=OptionsParser.newOptionsParser(Options.class);
  optionsParser.parseAndExitUponError(args);
  options=optionsParser.getOptions(Options.class);
  final AndroidResourceProcessor resourceProcessor=new AndroidResourceProcessor(stdLogger);
  try {
    Path mergedManifest;
    if (options.mergeType == MergeType.APPLICATION) {
      Path tmp=Files.createTempDirectory("manifest_merge_tmp");
      tmp.toFile().deleteOnExit();
      ImmutableMap.Builder<Path,String> mergeeManifests=ImmutableMap.builder();
      for (      Entry<Path,String> mergeeManifest : options.mergeeManifests.entrySet()) {
        mergeeManifests.put(removePermissions(mergeeManifest.getKey(),tmp),mergeeManifest.getValue());
      }
      mergedManifest=resourceProcessor.mergeManifest(options.manifest,mergeeManifests.build(),options.mergeType,options.manifestValues,options.manifestOutput,options.log);
    }
 else {
      mergedManifest=resourceProcessor.writeManifestPackage(options.manifest,options.customPackage,options.manifestOutput);
    }
    if (!mergedManifest.equals(options.manifestOutput)) {
      Files.copy(options.manifest,options.manifestOutput,StandardCopyOption.REPLACE_EXISTING);
    }
    Files.setLastModifiedTime(options.manifestOutput,FileTime.fromMillis(0L));
  }
 catch (  IOException e) {
    logger.log(SEVERE,"Error during merging manifests",e);
    throw e;
  }
 finally {
    resourceProcessor.shutdown();
  }
}
