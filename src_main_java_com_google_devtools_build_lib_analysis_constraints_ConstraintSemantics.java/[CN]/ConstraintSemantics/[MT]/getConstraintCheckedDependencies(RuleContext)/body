{
  Set<TransitiveInfoCollection> depsToCheck=new LinkedHashSet<>();
  Set<TransitiveInfoCollection> selectOnlyDeps=new LinkedHashSet<>();
  Set<TransitiveInfoCollection> depsOutsideSelects=new LinkedHashSet<>();
  AttributeMap attributes=ruleContext.attributes();
  for (  String attr : attributes.getAttributeNames()) {
    Attribute attrDef=attributes.getAttributeDefinition(attr);
    Type<?> attrType=attributes.getAttributeType(attr);
    if (!attrDef.checkConstraintsOverride()) {
      if ((attrType != BuildType.LABEL && attrType != BuildType.LABEL_LIST) || RuleClass.isConstraintAttribute(attr) || attr.equals("visibility")|| !DependencyFilter.NO_IMPLICIT_DEPS.apply(ruleContext.getRule(),attrDef)|| attrDef.getConfigurationTransition() == Attribute.ConfigurationTransition.HOST) {
        continue;
      }
    }
    Set<Label> selectOnlyDepsForThisAttribute=getDepsOnlyInSelects(ruleContext,attr,attrType);
    for (    TransitiveInfoCollection dep : ruleContext.getPrerequisites(attr,RuleConfiguredTarget.Mode.DONT_CHECK)) {
      if (dep instanceof OutputFileConfiguredTarget) {
        dep=((OutputFileConfiguredTarget)dep).getGeneratingRule();
      }
      if (dep.getProvider(SupportedEnvironmentsProvider.class) != null) {
        depsToCheck.add(dep);
        if (!selectOnlyDepsForThisAttribute.contains(dep.getLabel())) {
          depsOutsideSelects.add(dep);
        }
      }
    }
  }
  for (  TransitiveInfoCollection dep : depsToCheck) {
    if (!depsOutsideSelects.contains(dep)) {
      selectOnlyDeps.add(dep);
    }
  }
  return new DepsToCheck(depsToCheck,selectOnlyDeps);
}
