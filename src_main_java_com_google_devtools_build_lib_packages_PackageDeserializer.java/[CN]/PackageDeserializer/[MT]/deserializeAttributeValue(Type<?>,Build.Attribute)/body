{
switch (attrPb.getType()) {
case INTEGER:
    return attrPb.hasIntValue() ? new Integer(attrPb.getIntValue()) : null;
case STRING:
  if (!attrPb.hasStringValue()) {
    return null;
  }
 else   if (expectedType == Type.NODEP_LABEL) {
    return deserializeLabel(attrPb.getStringValue());
  }
 else {
    return attrPb.getStringValue();
  }
case LABEL:
case OUTPUT:
return attrPb.hasStringValue() ? deserializeLabel(attrPb.getStringValue()) : null;
case STRING_LIST:
if (expectedType == Type.NODEP_LABEL_LIST) {
return deserializeGlobs(deserializeLabels(attrPb.getStringListValueList()),attrPb);
}
 else {
return deserializeGlobs(ImmutableList.copyOf(attrPb.getStringListValueList()),attrPb);
}
case LABEL_LIST:
case OUTPUT_LIST:
return deserializeGlobs(deserializeLabels(attrPb.getStringListValueList()),attrPb);
case DISTRIBUTION_SET:
return deserializeDistribs(attrPb.getStringListValueList());
case LICENSE:
return attrPb.hasLicense() ? deserializeLicense(attrPb.getLicense()) : null;
case STRING_DICT:
{
ImmutableMap.Builder<String,String> builder=ImmutableMap.builder();
for (Build.StringDictEntry entry : attrPb.getStringDictValueList()) {
builder.put(entry.getKey(),entry.getValue());
}
return builder.build();
}
case STRING_DICT_UNARY:
{
ImmutableMap.Builder<String,String> builder=ImmutableMap.builder();
for (StringDictUnaryEntry entry : attrPb.getStringDictUnaryValueList()) {
builder.put(entry.getKey(),entry.getValue());
}
return builder.build();
}
case FILESET_ENTRY_LIST:
return deserializeFilesetEntries(attrPb.getFilesetListValueList());
case LABEL_LIST_DICT:
{
ImmutableMap.Builder<String,List<Label>> builder=ImmutableMap.builder();
for (Build.LabelListDictEntry entry : attrPb.getLabelListDictValueList()) {
builder.put(entry.getKey(),deserializeLabels(entry.getValueList()));
}
return builder.build();
}
case STRING_LIST_DICT:
{
ImmutableMap.Builder<String,List<String>> builder=ImmutableMap.builder();
for (Build.StringListDictEntry entry : attrPb.getStringListDictValueList()) {
builder.put(entry.getKey(),ImmutableList.copyOf(entry.getValueList()));
}
return builder.build();
}
case BOOLEAN:
return attrPb.hasBooleanValue() ? attrPb.getBooleanValue() : null;
case TRISTATE:
return attrPb.hasStringValue() ? deserializeTriStateValue(attrPb.getStringValue()) : null;
default :
throw new PackageDeserializationException("Invalid discriminator: " + attrPb.getType());
}
}
