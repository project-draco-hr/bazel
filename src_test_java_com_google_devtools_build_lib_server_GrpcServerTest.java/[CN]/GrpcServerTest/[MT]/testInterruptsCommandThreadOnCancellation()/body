{
  final CountDownLatch safety=new CountDownLatch(1);
  final AtomicBoolean interrupted=new AtomicBoolean(false);
  TestThread victim=new TestThread(){
    @Override public void runTest() throws Exception {
      try {
        safety.await();
        fail("Test thread finished unexpectedly");
      }
 catch (      InterruptedException e) {
        interrupted.set(true);
      }
    }
  }
;
  victim.setDaemon(true);
  victim.start();
  MockObserver observer=new MockObserver();
  GrpcServerImpl.GrpcSink sink=new GrpcServerImpl.GrpcSink(observer,executor);
  sink.setCommandThread(victim);
  observer.cancelled.set(true);
  observer.onCancelHandler.run();
  assertThat(sink.offer(runResponse())).isFalse();
  assertThat(sink.finish()).isTrue();
  safety.countDown();
  victim.joinAndAssertState(1000);
  assertThat(interrupted.get()).isTrue();
}
