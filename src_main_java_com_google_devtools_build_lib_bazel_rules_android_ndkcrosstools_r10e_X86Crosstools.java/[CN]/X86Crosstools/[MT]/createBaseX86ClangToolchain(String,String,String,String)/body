{
  String gccToolchain=ndkPaths.createGccToolchainPath(String.format("%s-linux-android-%s",x86Arch,gccVersion));
  String llvmTriple=llvmArch + "-none-linux-android";
  return CToolchain.newBuilder().setCompiler("clang" + clangVersion).addCompilerFlag("-gcc-toolchain").addCompilerFlag(gccToolchain).addCompilerFlag("-target").addCompilerFlag(llvmTriple).addCompilerFlag("-ffunction-sections").addCompilerFlag("-funwind-tables").addCompilerFlag("-fstack-protector-strong").addCompilerFlag("-fPIC").addCompilerFlag("-Wno-invalid-command-line-argument").addCompilerFlag("-Wno-unused-command-line-argument").addCompilerFlag("-no-canonical-prefixes").addCompilerFlag("-fno-canonical-system-headers").addLinkerFlag("-gcc-toolchain").addLinkerFlag(gccToolchain).addLinkerFlag("-target").addLinkerFlag(llvmTriple).addLinkerFlag("-no-canonical-prefixes").addCompilationModeFlags(CompilationModeFlags.newBuilder().setMode(CompilationMode.OPT).addCompilerFlag("-O2").addCompilerFlag("-g").addCompilerFlag("-DNDEBUG").addCompilerFlag("-fomit-frame-pointer").addCompilerFlag("-fstrict-aliasing")).addCompilationModeFlags(CompilationModeFlags.newBuilder().setMode(CompilationMode.DBG).addCompilerFlag("-O0").addCompilerFlag("-g").addCompilerFlag("-fno-omit-frame-pointer").addCompilerFlag("-fnostrict-aliasing"));
}
