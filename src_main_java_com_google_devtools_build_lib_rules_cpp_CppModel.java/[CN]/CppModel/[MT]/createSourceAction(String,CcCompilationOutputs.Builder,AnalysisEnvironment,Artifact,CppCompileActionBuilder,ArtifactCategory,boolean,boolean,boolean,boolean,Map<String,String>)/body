{
  PathFragment ccRelativeName=semantics.getEffectiveSourcePath(sourceArtifact);
  if (cppConfiguration.isLipoOptimization()) {
    LipoContextProvider lipoProvider=Preconditions.checkNotNull(CppHelper.getLipoContextProvider(ruleContext),outputName);
    builder.setContext(CppCompilationContext.mergeForLipo(lipoProvider.getLipoContext(),context));
  }
  boolean generatePicAction=getGeneratePicActions();
  boolean generateNoPicAction=getGenerateNoPicActions();
  Preconditions.checkState(generatePicAction || generateNoPicAction);
  if (fake) {
    boolean usePic=!generateNoPicAction;
    createFakeSourceAction(outputName,result,env,builder,outputCategory,addObject,ccRelativeName,sourceArtifact.getExecPath(),usePic,generateDotd);
  }
 else {
    if (generatePicAction) {
      String picOutputBase=CppHelper.getCompileArtifactName(ruleContext,ArtifactCategory.PIC_FILE,outputName);
      CppCompileActionBuilder picBuilder=copyAsPicBuilder(builder,picOutputBase,outputCategory,generateDotd);
      String gcnoFileName=CppHelper.getCompileArtifactName(ruleContext,ArtifactCategory.COVERAGE_DATA_FILE,picOutputBase);
      Artifact gcnoFile=enableCoverage ? CppHelper.getCompileOutputArtifact(ruleContext,gcnoFileName) : null;
      Artifact dwoFile=generateDwo ? getDwoFile(picBuilder.getOutputFile()) : null;
      setupCompileBuildVariables(picBuilder,true,ccRelativeName,sourceArtifact.getExecPath(),gcnoFile,dwoFile,sourceSpecificBuildVariables);
      if (maySaveTemps) {
        result.addTemps(createTempsActions(sourceArtifact,outputName,picBuilder,true,generateDotd,ccRelativeName));
      }
      picBuilder.setGcnoFile(gcnoFile);
      picBuilder.setDwoFile(dwoFile);
      semantics.finalizeCompileActionBuilder(ruleContext,picBuilder);
      CppCompileAction picAction=picBuilder.build();
      env.registerAction(picAction);
      if (addObject) {
        result.addPicObjectFile(picAction.getOutputFile());
        if (featureConfiguration.isEnabled(CppRuleClasses.THIN_LTO) && CppFileTypes.LTO_SOURCE.matches(sourceArtifact.getFilename())) {
          result.addLTOBitcodeFile(picAction.getOutputFile());
        }
      }
      if (dwoFile != null) {
        result.addPicDwoFile(dwoFile);
      }
      if (cppConfiguration.isLipoContextCollector() && !generateNoPicAction) {
        result.addLipoScannable(picAction);
      }
    }
    if (generateNoPicAction) {
      Artifact noPicOutputFile=CppHelper.getCompileOutputArtifact(ruleContext,CppHelper.getCompileArtifactName(ruleContext,outputCategory,outputName));
      builder.setOutputs(outputCategory,outputName,generateDotd);
      String gcnoFileName=CppHelper.getCompileArtifactName(ruleContext,ArtifactCategory.COVERAGE_DATA_FILE,outputName);
      Artifact gcnoFile=!cppConfiguration.isLipoOptimization() && enableCoverage ? CppHelper.getCompileOutputArtifact(ruleContext,gcnoFileName) : null;
      Artifact noPicDwoFile=generateDwo ? getDwoFile(noPicOutputFile) : null;
      setupCompileBuildVariables(builder,false,ccRelativeName,sourceArtifact.getExecPath(),gcnoFile,noPicDwoFile,sourceSpecificBuildVariables);
      if (maySaveTemps) {
        result.addTemps(createTempsActions(sourceArtifact,outputName,builder,false,generateDotd,ccRelativeName));
      }
      builder.setGcnoFile(gcnoFile);
      builder.setDwoFile(noPicDwoFile);
      semantics.finalizeCompileActionBuilder(ruleContext,builder);
      CppCompileAction compileAction=builder.build();
      env.registerAction(compileAction);
      Artifact objectFile=compileAction.getOutputFile();
      if (addObject) {
        result.addObjectFile(objectFile);
        if (featureConfiguration.isEnabled(CppRuleClasses.THIN_LTO) && CppFileTypes.LTO_SOURCE.matches(sourceArtifact.getFilename())) {
          result.addLTOBitcodeFile(objectFile);
        }
      }
      if (noPicDwoFile != null) {
        result.addDwoFile(noPicDwoFile);
      }
      if (cppConfiguration.isLipoContextCollector()) {
        result.addLipoScannable(compileAction);
      }
    }
  }
}
