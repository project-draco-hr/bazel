{
  Preconditions.checkState(linkType.isStaticLibraryLink(),"can only handle static links");
  CcLinkingOutputs.Builder result=new CcLinkingOutputs.Builder();
  if (cppConfiguration.isLipoContextCollector()) {
    return result.build();
  }
  AnalysisEnvironment env=ruleContext.getAnalysisEnvironment();
  boolean usePicForBinaries=CppHelper.usePic(ruleContext,true);
  boolean usePicForSharedLibs=CppHelper.usePic(ruleContext,false);
  Artifact linkedArtifact=CppHelper.getLinkedArtifact(ruleContext,linkType);
  CppLinkAction maybePicAction=newLinkActionBuilder(linkedArtifact).addNonLibraryInputs(ccOutputs.getObjectFiles(usePicForBinaries)).addNonLibraryInputs(ccOutputs.getHeaderTokenFiles()).addLTOBitcodeFiles(ccOutputs.getLtoBitcodeFiles()).setLinkType(linkType).setLinkStaticness(LinkStaticness.FULLY_STATIC).setFeatureConfiguration(featureConfiguration).setBuildVariables(linkBuildVariables()).build();
  env.registerAction(maybePicAction);
  result.addStaticLibrary(maybePicAction.getOutputLibrary());
  if (!usePicForBinaries && usePicForSharedLibs) {
    LinkTargetType picLinkType=(linkType == LinkTargetType.ALWAYS_LINK_STATIC_LIBRARY) ? LinkTargetType.ALWAYS_LINK_PIC_STATIC_LIBRARY : LinkTargetType.PIC_STATIC_LIBRARY;
    Artifact picArtifact=CppHelper.getLinkedArtifact(ruleContext,picLinkType);
    CppLinkAction picAction=newLinkActionBuilder(picArtifact).addNonLibraryInputs(ccOutputs.getObjectFiles(true)).addNonLibraryInputs(ccOutputs.getHeaderTokenFiles()).addLTOBitcodeFiles(ccOutputs.getLtoBitcodeFiles()).setLinkType(picLinkType).setLinkStaticness(LinkStaticness.FULLY_STATIC).setFeatureConfiguration(featureConfiguration).setBuildVariables(linkBuildVariables()).build();
    env.registerAction(picAction);
    result.addPicStaticLibrary(picAction.getOutputLibrary());
  }
  if (!createDynamicLibrary) {
    return result.build();
  }
  Artifact soImpl;
  if (soImplArtifact == null) {
    soImpl=CppHelper.getLinkedArtifact(ruleContext,LinkTargetType.DYNAMIC_LIBRARY);
  }
 else {
    soImpl=soImplArtifact;
  }
  List<String> sonameLinkopts=ImmutableList.of();
  Artifact soInterface=null;
  if (cppConfiguration.useInterfaceSharedObjects() && allowInterfaceSharedObjects) {
    soInterface=CppHelper.getLinkedArtifact(ruleContext,LinkTargetType.INTERFACE_DYNAMIC_LIBRARY);
    sonameLinkopts=ImmutableList.of("-Wl,-soname=" + SolibSymlinkAction.getDynamicLibrarySoname(soImpl.getRootRelativePath(),false));
  }
  CppLinkAction.Builder linkActionBuilder=newLinkActionBuilder(soImpl).setInterfaceOutput(soInterface).addNonLibraryInputs(ccOutputs.getObjectFiles(usePicForSharedLibs)).addNonLibraryInputs(ccOutputs.getHeaderTokenFiles()).addLTOBitcodeFiles(ccOutputs.getLtoBitcodeFiles()).setLinkType(LinkTargetType.DYNAMIC_LIBRARY).setLinkStaticness(LinkStaticness.DYNAMIC).addLinkopts(linkopts).addLinkopts(sonameLinkopts).setRuntimeInputs(CppHelper.getToolchain(ruleContext).getDynamicRuntimeLinkMiddleman(),CppHelper.getToolchain(ruleContext).getDynamicRuntimeLinkInputs()).setFeatureConfiguration(featureConfiguration).setBuildVariables(linkBuildVariables());
  if (!ccOutputs.getLtoBitcodeFiles().isEmpty() && featureConfiguration.isEnabled(CppRuleClasses.THIN_LTO)) {
    linkActionBuilder.setLTOIndexing(true);
    CppLinkAction indexAction=linkActionBuilder.build();
    env.registerAction(indexAction);
    for (    LTOBackendArtifacts ltoArtifacts : indexAction.getAllLTOBackendArtifacts()) {
      ltoArtifacts.scheduleLTOBackendAction(ruleContext,usePicForSharedLibs);
    }
    linkActionBuilder.setLTOIndexing(false);
  }
  CppLinkAction action=linkActionBuilder.build();
  env.registerAction(action);
  LibraryToLink dynamicLibrary=action.getOutputLibrary();
  LibraryToLink interfaceLibrary=action.getInterfaceOutputLibrary();
  if (interfaceLibrary == null) {
    interfaceLibrary=dynamicLibrary;
  }
  if (neverLink) {
    result.addDynamicLibrary(interfaceLibrary);
    result.addExecutionDynamicLibrary(dynamicLibrary);
  }
 else {
    LibraryToLink libraryLink=SolibSymlinkAction.getDynamicLibrarySymlink(ruleContext,interfaceLibrary.getArtifact(),false,false,ruleContext.getConfiguration());
    result.addDynamicLibrary(libraryLink);
    LibraryToLink implLibraryLink=SolibSymlinkAction.getDynamicLibrarySymlink(ruleContext,dynamicLibrary.getArtifact(),false,false,ruleContext.getConfiguration());
    result.addExecutionDynamicLibrary(implLibraryLink);
  }
  return result.build();
}
