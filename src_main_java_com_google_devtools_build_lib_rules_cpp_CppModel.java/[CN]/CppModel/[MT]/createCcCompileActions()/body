{
  CcCompilationOutputs.Builder result=new CcCompilationOutputs.Builder();
  Preconditions.checkNotNull(context);
  AnalysisEnvironment env=ruleContext.getAnalysisEnvironment();
  if (shouldProvideHeaderModules()) {
    Artifact moduleMapArtifact=context.getCppModuleMap().getArtifact();
    Label moduleMapLabel=Label.parseAbsoluteUnchecked(context.getCppModuleMap().getName());
    CppCompileActionBuilder builder=initializeCompileAction(moduleMapArtifact,moduleMapLabel,true);
    createSourceAction(FileSystemUtils.removeExtension(semantics.getEffectiveSourcePath(moduleMapArtifact)).getPathString(),result,env,moduleMapArtifact,builder,ArtifactCategory.CPP_MODULE,false,false,false,CppFileTypes.mustProduceDotdFile(moduleMapArtifact.getFilename()),ImmutableMap.<String,String>of());
  }
  for (  CppSource source : sourceFiles) {
    Artifact sourceArtifact=source.getSource();
    Label sourceLabel=source.getLabel();
    String outputName=FileSystemUtils.removeExtension(semantics.getEffectiveSourcePath(sourceArtifact)).getPathString();
    CppCompileActionBuilder builder=initializeCompileAction(sourceArtifact,sourceLabel,false);
    builder.setSemantics(semantics);
    if (CppFileTypes.CPP_HEADER.matches(source.getSource().getExecPath())) {
      createHeaderAction(outputName,result,env,builder,CppFileTypes.mustProduceDotdFile(sourceArtifact.getFilename()));
    }
 else {
      createSourceAction(outputName,result,env,sourceArtifact,builder,ArtifactCategory.OBJECT_FILE,true,isCodeCoverageEnabled(),cppConfiguration.useFission(),CppFileTypes.mustProduceDotdFile(sourceArtifact.getFilename()),source.getBuildVariables());
    }
  }
  compilationOutputs=result.build();
  return compilationOutputs;
}
