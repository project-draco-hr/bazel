{
  CcToolchainFeatures.Variables.Builder buildVariables=new CcToolchainFeatures.Variables.Builder();
  CppCompilationContext builderContext=builder.getContext();
  CppModuleMap cppModuleMap=builderContext.getCppModuleMap();
  Artifact sourceFile=builder.getSourceFile();
  Artifact outputFile=builder.getOutputFile();
  String realOutputFilePath;
  buildVariables.addVariable("source_file",sourceFile.getExecPathString());
  buildVariables.addVariable("output_file",outputFile.getExecPathString());
  if (fake) {
    realOutputFilePath=builder.getTempOutputFile().getPathString();
  }
 else {
    realOutputFilePath=builder.getOutputFile().getExecPathString();
  }
  if (FileType.contains(outputFile,CppFileTypes.ASSEMBLER,CppFileTypes.PIC_ASSEMBLER)) {
    buildVariables.addVariable("output_assembly_file",realOutputFilePath);
  }
 else   if (FileType.contains(outputFile,CppFileTypes.PREPROCESSED_C,CppFileTypes.PREPROCESSED_CPP,CppFileTypes.PIC_PREPROCESSED_C,CppFileTypes.PIC_PREPROCESSED_CPP)) {
    buildVariables.addVariable("output_preprocess_file",realOutputFilePath);
  }
 else {
    buildVariables.addVariable("output_object_file",realOutputFilePath);
  }
  DotdFile dotdFile=CppFileTypes.mustProduceDotdFile(sourceFile.getPath().toString()) ? Preconditions.checkNotNull(builder.getDotdFile()) : null;
  if (dotdFile != null) {
    buildVariables.addVariable("dependency_file",dotdFile.getSafeExecPath().getPathString());
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.MODULE_MAPS) && cppModuleMap != null) {
    buildVariables.addVariable("module_name",cppModuleMap.getName());
    buildVariables.addVariable("module_map_file",cppModuleMap.getArtifact().getExecPathString());
    CcToolchainFeatures.Variables.ValueSequence.Builder sequence=new CcToolchainFeatures.Variables.ValueSequence.Builder();
    for (    Artifact artifact : builderContext.getDirectModuleMaps()) {
      sequence.addValue(artifact.getExecPathString());
    }
    buildVariables.addSequence("dependent_module_map_files",sequence.build());
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.USE_HEADER_MODULES)) {
    buildVariables.addSequenceVariable("module_files",getHeaderModulePaths(builder,usePic));
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.INCLUDE_PATHS)) {
    buildVariables.addSequenceVariable("include_paths",getSafePathStrings(builderContext.getIncludeDirs()));
    buildVariables.addSequenceVariable("quote_include_paths",getSafePathStrings(builderContext.getQuoteIncludeDirs()));
    buildVariables.addSequenceVariable("system_include_paths",getSafePathStrings(builderContext.getSystemIncludeDirs()));
  }
  if (featureConfiguration.isEnabled(CppRuleClasses.PREPROCESSOR_DEFINES)) {
    String fdoBuildStamp=CppHelper.getFdoBuildStamp(ruleContext);
    ImmutableList<String> defines;
    if (fdoBuildStamp != null) {
      defines=ImmutableList.<String>builder().addAll(builderContext.getDefines()).add(CppConfiguration.FDO_STAMP_MACRO + "=\"" + CppHelper.getFdoBuildStamp(ruleContext)+ "\"").build();
    }
 else {
      defines=builderContext.getDefines();
    }
    buildVariables.addSequenceVariable("preprocessor_defines",defines);
  }
  if (usePic) {
    if (!featureConfiguration.isEnabled(CppRuleClasses.PIC)) {
      ruleContext.ruleError("PIC compilation is requested but the toolchain does not support it");
    }
    buildVariables.addVariable("pic","");
  }
  if (ccRelativeName != null) {
    CppHelper.getFdoSupport(ruleContext).configureCompilation(builder,buildVariables,ruleContext,ccRelativeName,autoFdoImportPath,usePic,featureConfiguration);
  }
  if (gcnoFile != null) {
    buildVariables.addVariable("gcov_gcno_file",gcnoFile.getExecPathString());
  }
  if (dwoFile != null) {
    buildVariables.addVariable("per_object_debug_info_file",dwoFile.getExecPathString());
  }
  buildVariables.addAllVariables(CppHelper.getToolchain(ruleContext).getBuildVariables());
  for (  VariablesExtension extension : variablesExtensions) {
    extension.addVariables(buildVariables);
  }
  CcToolchainFeatures.Variables variables=buildVariables.build();
  builder.setVariables(variables);
}
