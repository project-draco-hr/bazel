{
  Artifact result=null;
  Artifact linuxDefault=CppHelper.getLinuxLinkedArtifact(ruleContext,linkTargetType);
  try {
    String maybePicName=ruleContext.getLabel().getName();
    if (linkTargetType.picness() == Picness.PIC) {
      maybePicName=CppHelper.getArtifactNameForCategory(ruleContext,ArtifactCategory.PIC_FILE,maybePicName);
    }
    String linkedName=CppHelper.getArtifactNameForCategory(ruleContext,linkTargetType.getLinkerOutput(),maybePicName);
    PathFragment artifactFragment=new PathFragment(ruleContext.getLabel().getName()).getParentDirectory().getRelative(linkedName);
    result=ruleContext.getBinArtifact(artifactFragment);
  }
 catch (  ExpansionException e) {
    ruleContext.throwWithRuleError(e.getMessage());
  }
  if (!result.equals(linuxDefault)) {
    ruleContext.registerAction(new FailAction(ruleContext.getActionOwner(),ImmutableList.of(linuxDefault),String.format("the given toolchain supports creation of %s instead of %s",linuxDefault.getExecPathString(),result.getExecPathString())));
  }
  return result;
}
