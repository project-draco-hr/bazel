{
  Preconditions.checkArgument(!keepGoing);
  boolean ok=true;
  Map<String,ResolvedTargets<Target>> preloadedPatterns=Maps.newHashMapWithExpectedSize(patterns.size());
  Map<SkyKey,String> patternKeys=Maps.newHashMapWithExpectedSize(patterns.size());
  for (  String pattern : patterns) {
    checkValidPatternType(pattern);
    patternKeys.put(TargetPatternValue.key(pattern,FilteringPolicies.NO_FILTER,""),pattern);
  }
  Set<SkyKey> packageKeys=new HashSet<>();
  Map<String,ResolvedTargets<Label>> resolvedLabelsMap=Maps.newHashMapWithExpectedSize(patterns.size());
synchronized (this) {
    for (    Map.Entry<SkyKey,ValueOrException<TargetParsingException>> entry : env.getValuesOrThrow(patternKeys.keySet(),TargetParsingException.class).entrySet()) {
      TargetPatternValue patternValue=(TargetPatternValue)entry.getValue().get();
      if (patternValue == null) {
        ok=false;
      }
 else {
        ResolvedTargets<Label> resolvedLabels=patternValue.getTargets();
        resolvedLabelsMap.put(patternKeys.get(entry.getKey()),resolvedLabels);
        for (        Label label : Iterables.concat(resolvedLabels.getTargets(),resolvedLabels.getFilteredTargets())) {
          packageKeys.add(PackageValue.key(label.getPackageIdentifier()));
        }
      }
    }
  }
  if (!ok) {
    throw new SkyframeRestartQueryException();
  }
  Map<PackageIdentifier,Package> packages=Maps.newHashMapWithExpectedSize(packageKeys.size());
synchronized (this) {
    for (    Map.Entry<SkyKey,ValueOrException<NoSuchPackageException>> entry : env.getValuesOrThrow(packageKeys,NoSuchPackageException.class).entrySet()) {
      PackageIdentifier pkgName=(PackageIdentifier)entry.getKey().argument();
      Package pkg;
      try {
        PackageValue packageValue=(PackageValue)entry.getValue().get();
        if (packageValue == null) {
          ok=false;
          continue;
        }
        pkg=packageValue.getPackage();
      }
 catch (      NoSuchPackageException nspe) {
        continue;
      }
      Preconditions.checkNotNull(pkg,pkgName);
      packages.put(pkgName,pkg);
    }
  }
  if (!ok) {
    throw new SkyframeRestartQueryException();
  }
  for (  Map.Entry<String,ResolvedTargets<Label>> entry : resolvedLabelsMap.entrySet()) {
    String pattern=entry.getKey();
    ResolvedTargets<Label> resolvedLabels=resolvedLabelsMap.get(pattern);
    ResolvedTargets.Builder<Target> builder=ResolvedTargets.builder();
    for (    Label label : resolvedLabels.getTargets()) {
      builder.add(getExistingTarget(label,packages));
    }
    for (    Label label : resolvedLabels.getFilteredTargets()) {
      builder.remove(getExistingTarget(label,packages));
    }
    preloadedPatterns.put(pattern,builder.build());
  }
  return preloadedPatterns;
}
