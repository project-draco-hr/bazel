{
  DigraphQueryEvalResult<Target> queryResult;
  OutputFormatter formatter;
  AggregateAllCallback<Target> targets=new AggregateAllCallback<>();
  try {
    Set<Setting> settings=queryOptions.toSettings();
    settings.add(Setting.NO_NODEP_DEPS);
    ImmutableList<OutputFormatter> outputFormatters=QUERY_OUTPUT_FORMATTERS.get(ruleContext.getAnalysisEnvironment().getSkyframeEnv());
    formatter=OutputFormatter.getFormatter(Preconditions.checkNotNull(outputFormatters),queryOptions.outputFormat);
    BlazeQueryEnvironment queryEnvironment=(BlazeQueryEnvironment)QUERY_ENVIRONMENT_FACTORY.create(null,null,packageProvider,evaluator,false,ruleContext.attributes().get("strict",Type.BOOLEAN),!QueryOutputUtils.shouldStreamResults(queryOptions,formatter),ImmutableList.<String>of(),4,labelFilter,getEventHandler(ruleContext),settings,ImmutableList.<QueryFunction>of(),QueryExpressionEvalListener.NullListener.<Target>instance(),null);
    queryResult=(DigraphQueryEvalResult<Target>)queryEnvironment.evaluateQuery(query,targets);
  }
 catch (  SkyframeRestartQueryException e) {
    return null;
  }
catch (  QueryException e) {
    ruleContext.ruleError("query failed: " + e.getMessage());
    return null;
  }
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  PrintStream printStream=new PrintStream(outputStream);
  try {
    QueryOutputUtils.output(queryOptions,queryResult,targets.getResult(),formatter,printStream,queryOptions.aspectDeps.createResolver(packageProvider,getEventHandler(ruleContext)));
  }
 catch (  ClosedByInterruptException e) {
    throw new InterruptedException(e.getMessage());
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
  printStream.flush();
  return outputStream.toByteArray();
}
