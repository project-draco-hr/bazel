{
  NestedSetBuilder<Label> validTargets=NestedSetBuilder.stableOrder();
  NestedSetBuilder<PackageIdentifier> packageNames=NestedSetBuilder.stableOrder();
  for (  Target target : scope) {
    SkyKey key=TransitiveTargetValue.key(target.getLabel());
    TransitiveTargetValue transNode=(TransitiveTargetValue)env.getValue(key);
    if (transNode == null) {
      return null;
    }
    validTargets.addTransitive(transNode.getTransitiveTargets());
    packageNames.addTransitive(transNode.getTransitiveSuccessfulPackages());
  }
  ImmutableMap.Builder<PackageIdentifier,Package> packageMapBuilder=ImmutableMap.builder();
  for (  PackageIdentifier pkgId : packageNames.build()) {
    PackageValue pkg=(PackageValue)env.getValue(PackageValue.key(pkgId));
    Preconditions.checkNotNull(pkg,"package %s not preloaded",pkgId);
    Preconditions.checkState(!pkg.getPackage().containsErrors(),pkgId);
    packageMapBuilder.put(pkg.getPackage().getPackageIdentifier(),pkg.getPackage());
  }
  ImmutableMap<PackageIdentifier,Package> packageMap=packageMapBuilder.build();
  ImmutableMap.Builder<Label,Target> validTargetsMapBuilder=ImmutableMap.builder();
  for (  Label label : validTargets.build()) {
    try {
      Target target=packageMap.get(label.getPackageIdentifier()).getTarget(label.getName());
      validTargetsMapBuilder.put(label,target);
    }
 catch (    NoSuchTargetException e) {
      throw new IllegalStateException(e);
    }
  }
  return Pair.of(packageMap,validTargetsMapBuilder.build());
}
