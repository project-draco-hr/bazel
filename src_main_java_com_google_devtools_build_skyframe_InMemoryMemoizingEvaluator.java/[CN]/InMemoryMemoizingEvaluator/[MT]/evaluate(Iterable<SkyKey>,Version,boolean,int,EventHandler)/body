{
  IntVersion intVersion=(IntVersion)version;
  Preconditions.checkState((lastGraphVersion == null && intVersion.getVal() == 0) || version.equals(lastGraphVersion.next()),"InMemoryGraph supports only monotonically increasing Integer versions: %s %s",lastGraphVersion,version);
  setAndCheckEvaluateState(true,roots);
  try {
    Diff diff=differencer.getDiff(lastGraphVersion,version);
    valuesToInject.putAll(diff.changedKeysWithNewValues());
    invalidate(diff.changedKeysWithoutNewValues());
    pruneInjectedValues(valuesToInject);
    invalidate(valuesToInject.keySet());
    performInvalidation();
    injectValues(intVersion);
    Receiver<Collection<SkyKey>> lazyDeletingReceiver=new Receiver<Collection<SkyKey>>(){
      @Override public void accept(      Collection<SkyKey> skyKeys){
        valuesToDelete.addAll(skyKeys);
      }
    }
;
    ParallelEvaluator evaluator=new ParallelEvaluator(graph,intVersion,skyFunctions,eventHandler,emittedEventState,DEFAULT_STORED_EVENT_FILTER,keepGoing,numThreads,progressReceiver,dirtyKeyTracker,lazyDeletingReceiver);
    EvaluationResult<T> result=evaluator.eval(roots);
    return EvaluationResult.<T>builder().mergeFrom(result).setWalkableGraph(new DelegatingWalkableGraph(graph)).build();
  }
  finally {
    lastGraphVersion=intVersion;
    setAndCheckEvaluateState(false,roots);
  }
}
