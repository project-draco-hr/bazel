{
  Splitter splitter=Splitter.on('.');
  Iterable<String> folders=splitter.split(packageName);
  File packageDir=outFolder;
  for (  String folder : folders) {
    packageDir=new File(packageDir,folder);
  }
  File rClassFile=new File(packageDir,SdkConstants.FN_COMPILED_RESOURCE_CLASS);
  Files.createParentDirs(rClassFile);
  Table<String,String,SymbolEntry> symbols=getAllSymbols();
  if (symbols.isEmpty()) {
    return;
  }
  String packageWithSlashes=packageName.replaceAll("\\.","/");
  String rClassName=packageWithSlashes + "/R";
  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  classWriter.visit(JAVA_VERSION,Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_SUPER,rClassName,null,SUPER_CLASS,null);
  classWriter.visitSource(SdkConstants.FN_RESOURCE_CLASS,null);
  writeConstructor(classWriter);
  Table<String,String,SymbolEntry> values=getSymbols(symbolValues);
  Set<String> rowSet=symbols.rowKeySet();
  List<String> rowList=new ArrayList<>(rowSet);
  Collections.sort(rowList);
  for (  String row : rowList) {
    String innerClassName=rClassName + "$" + row;
    classWriter.visitInnerClass(innerClassName,rClassName,row,Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_STATIC);
  }
  classWriter.visitEnd();
  Files.write(classWriter.toByteArray(),rClassFile);
  for (  String row : rowList) {
    writeInnerClass(symbols,values,packageDir,rClassName,row);
  }
}
