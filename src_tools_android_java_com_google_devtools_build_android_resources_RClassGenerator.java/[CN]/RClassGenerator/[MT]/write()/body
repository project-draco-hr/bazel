{
  Iterable<String> folders=PACKAGE_SPLITTER.split(packageName);
  Path packageDir=outFolder;
  for (  String folder : folders) {
    packageDir=packageDir.resolve(folder);
  }
  Files.createDirectories(packageDir);
  if (initializers.isEmpty()) {
    return;
  }
  Path rClassFile=packageDir.resolve(SdkConstants.FN_COMPILED_RESOURCE_CLASS);
  String packageWithSlashes=packageName.replaceAll("\\.","/");
  String rClassName=packageWithSlashes + "/R";
  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  classWriter.visit(JAVA_VERSION,Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_SUPER,rClassName,null,SUPER_CLASS,null);
  classWriter.visitSource(SdkConstants.FN_RESOURCE_CLASS,null);
  writeConstructor(classWriter);
  for (  ResourceType resourceType : initializers.keySet()) {
    String innerClassName=rClassName + "$" + resourceType;
    classWriter.visitInnerClass(innerClassName,rClassName,resourceType.toString(),Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_STATIC);
  }
  classWriter.visitEnd();
  Files.write(rClassFile,classWriter.toByteArray());
  for (  Map.Entry<ResourceType,List<FieldInitializer>> entry : initializers.entrySet()) {
    writeInnerClass(entry.getValue(),packageDir,rClassName,entry.getKey().toString());
  }
}
