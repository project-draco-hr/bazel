{
  if (strippedRelativePath.isAbsolute()) {
    throw new IOException(String.format("Failed to extract %s, zipped paths cannot be absolute",strippedRelativePath));
  }
  Path outputPath=destinationDirectory.getRelative(strippedRelativePath);
  int permissions=getPermissions(entry.getExternalAttributes(),entry.getName());
  FileSystemUtils.createDirectoryAndParents(outputPath.getParentDirectory());
  boolean isDirectory=(permissions & S_IFDIR) == S_IFDIR;
  boolean isSymlink=(permissions & S_IFLNK) == S_IFLNK;
  if (isDirectory) {
    FileSystemUtils.createDirectoryAndParents(outputPath);
  }
 else   if (isSymlink) {
    Preconditions.checkState(entry.getSize() < MAX_PATH_LENGTH);
    byte buffer[]=new byte[(int)entry.getSize()];
    int read=reader.getInputStream(entry).read(buffer);
    Preconditions.checkState(read == buffer.length);
    PathFragment target=new PathFragment(new String(buffer,Charset.defaultCharset())).normalize();
    if (!target.isNormalized()) {
      throw new IOException("Zip entries cannot refer to files outside of their directory: " + reader.getFilename() + " has a symlink to "+ target);
    }
    if (target.isAbsolute()) {
      target=target.relativeTo(PathFragment.ROOT_DIR);
      target=destinationDirectory.getRelative(target).asFragment();
    }
    outputPath.createSymbolicLink(target);
  }
 else {
    File outputFile=outputPath.getPathFile();
    try (InputStream input=reader.getInputStream(entry)){
      Files.copy(input,outputFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    }
     outputPath.chmod(permissions);
  }
}
