{
  PathFragment relativePath=rootedPath.getRelativePath();
  RootedPath realRootedPath=rootedPath;
  FileValue parentFileValue=null;
  if (!relativePath.equals(PathFragment.EMPTY_FRAGMENT)) {
    RootedPath parentRootedPath=RootedPath.toRootedPath(rootedPath.getRoot(),relativePath.getParentDirectory());
    parentFileValue=(FileValue)env.getValue(FileValue.key(parentRootedPath));
    if (parentFileValue == null) {
      return null;
    }
    PathFragment baseName=new PathFragment(relativePath.getBaseName());
    RootedPath parentRealRootedPath=parentFileValue.realRootedPath();
    realRootedPath=RootedPath.toRootedPath(parentRealRootedPath.getRoot(),parentRealRootedPath.getRelativePath().getRelative(baseName));
    if (!parentFileValue.exists()) {
      return Pair.<RootedPath,FileStateValue>of(realRootedPath,FileStateValue.NONEXISTENT_FILE_STATE_NODE);
    }
  }
  FileStateValue realFileStateValue=(FileStateValue)env.getValue(FileStateValue.key(realRootedPath));
  if (realFileStateValue == null) {
    return null;
  }
  if (realFileStateValue.getType() != FileStateValue.Type.NONEXISTENT && parentFileValue != null && !parentFileValue.isDirectory()) {
    String type=realFileStateValue.getType().toString().toLowerCase();
    String message=type + " " + rootedPath.asPath()+ " exists but its parent "+ "path "+ parentFileValue.realRootedPath().asPath()+ " isn't an existing directory.";
    throw new FileFunctionException(new InconsistentFilesystemException(message),Transience.TRANSIENT);
  }
  return Pair.of(realRootedPath,realFileStateValue);
}
