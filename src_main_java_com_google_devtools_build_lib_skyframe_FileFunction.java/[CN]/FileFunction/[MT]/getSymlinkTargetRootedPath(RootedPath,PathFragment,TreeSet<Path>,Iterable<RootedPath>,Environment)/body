{
  RootedPath symlinkTargetRootedPath;
  if (symlinkTarget.isAbsolute()) {
    Path path=rootedPath.asPath().getFileSystem().getRootDirectory().getRelative(symlinkTarget);
    symlinkTargetRootedPath=RootedPath.toRootedPathMaybeUnderRoot(path,pkgLocator.get().getPathEntries());
  }
 else {
    Path path=rootedPath.asPath();
    Path symlinkTargetPath;
    if (path.getParentDirectory() != null) {
      RootedPath parentRootedPath=RootedPath.toRootedPathMaybeUnderRoot(path.getParentDirectory(),pkgLocator.get().getPathEntries());
      FileValue parentFileValue=(FileValue)env.getValue(FileValue.key(parentRootedPath));
      if (parentFileValue == null) {
        return null;
      }
      symlinkTargetPath=parentFileValue.realRootedPath().asPath().getRelative(symlinkTarget);
    }
 else {
      symlinkTargetPath=path.getRelative(symlinkTarget);
    }
    symlinkTargetRootedPath=RootedPath.toRootedPathMaybeUnderRoot(symlinkTargetPath,pkgLocator.get().getPathEntries());
  }
  Path symlinkTargetPath=symlinkTargetRootedPath.asPath();
  SkyKey uniquenessKey=null;
  FileSymlinkException fse=null;
  Path seenFloorPath=orderedSeenPaths.floor(symlinkTargetPath);
  Path seenCeilingPath=orderedSeenPaths.ceiling(symlinkTargetPath);
  if (orderedSeenPaths.contains(symlinkTargetPath)) {
    Pair<ImmutableList<RootedPath>,ImmutableList<RootedPath>> pathAndChain=CycleUtils.splitIntoPathAndChain(isPathPredicate(symlinkTargetRootedPath.asPath()),symlinkChain);
    FileSymlinkCycleException fsce=new FileSymlinkCycleException(pathAndChain.getFirst(),pathAndChain.getSecond());
    uniquenessKey=FileSymlinkCycleUniquenessValue.key(fsce.getCycle());
    fse=fsce;
  }
 else   if (seenFloorPath != null && symlinkTargetPath.startsWith(seenFloorPath)) {
    Pair<ImmutableList<RootedPath>,ImmutableList<RootedPath>> pathAndChain=CycleUtils.splitIntoPathAndChain(isPathPredicate(seenFloorPath),ImmutableList.copyOf(Iterables.concat(symlinkChain,ImmutableList.of(symlinkTargetRootedPath))));
    uniquenessKey=FileSymlinkInfiniteExpansionUniquenessValue.key(pathAndChain.getSecond());
    fse=new FileSymlinkInfiniteExpansionException(pathAndChain.getFirst(),pathAndChain.getSecond());
  }
 else   if (seenCeilingPath != null && seenCeilingPath.startsWith(symlinkTargetPath)) {
    Pair<ImmutableList<RootedPath>,ImmutableList<RootedPath>> pathAndChain=CycleUtils.splitIntoPathAndChain(isPathPredicate(seenCeilingPath),ImmutableList.copyOf(Iterables.concat(symlinkChain,ImmutableList.of(symlinkTargetRootedPath))));
    uniquenessKey=FileSymlinkInfiniteExpansionUniquenessValue.key(pathAndChain.getSecond());
    fse=new FileSymlinkInfiniteExpansionException(pathAndChain.getFirst(),pathAndChain.getSecond());
  }
  if (uniquenessKey != null) {
    if (env.getValue(uniquenessKey) == null) {
      return null;
    }
    throw new FileFunctionException(Preconditions.checkNotNull(fse,rootedPath));
  }
  return resolveFromAncestors(symlinkTargetRootedPath,env);
}
