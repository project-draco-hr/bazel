{
  RootedPath rootedPath=(RootedPath)skyKey.argument();
  RootedPath realRootedPath=null;
  FileStateValue realFileStateValue=null;
  PathFragment relativePath=rootedPath.getRelativePath();
  if (!relativePath.equals(PathFragment.EMPTY_FRAGMENT)) {
    Pair<RootedPath,FileStateValue> resolvedState=resolveFromAncestors(rootedPath,env);
    if (resolvedState == null) {
      return null;
    }
    realRootedPath=resolvedState.getFirst();
    realFileStateValue=resolvedState.getSecond();
  }
  FileStateValue fileStateValue=(FileStateValue)env.getValue(FileStateValue.key(rootedPath));
  if (fileStateValue == null) {
    return null;
  }
  if (realFileStateValue == null) {
    realRootedPath=rootedPath;
    realFileStateValue=fileStateValue;
  }
 else   if (rootedPath.equals(realRootedPath) && !fileStateValue.equals(realFileStateValue)) {
    String message=String.format("Some filesystem operations implied %s was a %s but others made us think it was a %s",rootedPath.asPath().getPathString(),fileStateValue.prettyPrint(),realFileStateValue.prettyPrint());
    throw new FileFunctionException(new InconsistentFilesystemException(message),Transience.TRANSIENT);
  }
  ArrayList<RootedPath> symlinkChain=new ArrayList<>();
  TreeSet<Path> orderedSeenPaths=Sets.newTreeSet();
  while (realFileStateValue.getType().equals(FileStateValue.Type.SYMLINK)) {
    symlinkChain.add(realRootedPath);
    orderedSeenPaths.add(realRootedPath.asPath());
    if (externalFilesHelper.shouldAssumeImmutable(realRootedPath)) {
      try {
        Path realPath=rootedPath.asPath().resolveSymbolicLinks();
        realRootedPath=RootedPath.toRootedPathMaybeUnderRoot(realPath,pkgLocator.get().getPathEntries());
        realFileStateValue=FileStateValue.create(realRootedPath,tsgm);
      }
 catch (      IOException e) {
        RootedPath root=RootedPath.toRootedPath(rootedPath.asPath().getFileSystem().getRootDirectory(),rootedPath.asPath().getFileSystem().getRootDirectory());
        return FileValue.value(rootedPath,fileStateValue,root,FileStateValue.NONEXISTENT_FILE_STATE_NODE);
      }
catch (      InconsistentFilesystemException e) {
        throw new FileFunctionException(e,Transience.TRANSIENT);
      }
    }
 else {
      Pair<RootedPath,FileStateValue> resolvedState=getSymlinkTargetRootedPath(realRootedPath,realFileStateValue.getSymlinkTarget(),orderedSeenPaths,symlinkChain,env);
      if (resolvedState == null) {
        return null;
      }
      realRootedPath=resolvedState.getFirst();
      realFileStateValue=resolvedState.getSecond();
    }
  }
  return FileValue.value(rootedPath,fileStateValue,realRootedPath,realFileStateValue);
}
