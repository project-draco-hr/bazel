{
  return new Function<Rule,AspectParameters>(){
    @Nullable @Override public AspectParameters apply(    Rule rule){
      AttributeMap ruleAttrs=RawAttributeMapper.of(rule);
      AspectParameters.Builder builder=new AspectParameters.Builder();
      for (      Attribute aspectAttr : attributes) {
        if (!Attribute.isImplicit(aspectAttr.getName())) {
          String param=aspectAttr.getName();
          Attribute ruleAttr=ruleAttrs.getAttributeDefinition(param);
          if (paramAttributes.contains(aspectAttr.getName())) {
            Preconditions.checkArgument(ruleAttr != null,String.format("Cannot apply aspect %s to %s that does not define attribute '%s'.",getName(),rule.getTargetKind(),param));
            Preconditions.checkArgument(ruleAttr.getType() == Type.STRING,String.format("Cannot apply aspect %s to %s with non-string attribute '%s'.",getName(),rule.getTargetKind(),param));
          }
          if (ruleAttr != null && ruleAttr.getType() == aspectAttr.getType()) {
            builder.addAttribute(param,(String)ruleAttrs.get(param,ruleAttr.getType()));
          }
        }
      }
      return builder.build();
    }
  }
;
}
