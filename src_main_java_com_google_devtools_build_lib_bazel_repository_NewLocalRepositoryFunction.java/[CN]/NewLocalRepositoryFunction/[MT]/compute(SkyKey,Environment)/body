{
  RepositoryName repositoryName=(RepositoryName)skyKey.argument();
  Rule rule=RepositoryFunction.getRule(repositoryName,NewLocalRepositoryRule.NAME,env);
  if (rule == null) {
    return null;
  }
  Path repositoryDirectory=getExternalRepositoryDirectory().getRelative(rule.getName());
  try {
    FileSystemUtils.deleteTree(repositoryDirectory);
    FileSystemUtils.createDirectoryAndParents(repositoryDirectory);
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  FileValue directoryValue=getRepositoryDirectory(repositoryDirectory,env);
  if (directoryValue == null) {
    return null;
  }
  createWorkspaceFile(repositoryDirectory,rule);
  AggregatingAttributeMapper mapper=AggregatingAttributeMapper.of(rule);
  String path=mapper.get("path",Type.STRING);
  PathFragment pathFragment=new PathFragment(path);
  if (!pathFragment.isAbsolute()) {
    throw new RepositoryFunctionException(new EvalException(rule.getLocation(),"In " + rule + " the 'path' attribute must specify an absolute path"),Transience.PERSISTENT);
  }
  FileSystem fs=getOutputBase().getFileSystem();
  Path targetDirectory=fs.getPath(pathFragment);
  try {
    for (    Path target : targetDirectory.getDirectoryEntries()) {
      Path symlinkPath=repositoryDirectory.getRelative(target.getBaseName());
      if (createSymbolicLink(symlinkPath,target,env) == null) {
        return null;
      }
    }
  }
 catch (  IOException e) {
    throw new RepositoryFunctionException(e,Transience.TRANSIENT);
  }
  if (createBuildFile(rule,getWorkspace(),repositoryDirectory,env) == null) {
    return null;
  }
  return new RepositoryValue(repositoryDirectory,directoryValue);
}
