{
  Map<PathFragment,Artifact> symlinks=new LinkedHashMap<>();
  for (  Map.Entry<String,Iterable<Artifact>> entry : nativeLibs.entrySet()) {
    String arch=entry.getKey();
    for (    Artifact lib : entry.getValue()) {
      symlinks.put(new PathFragment(arch + "/" + lib.getExecPath().getBaseName()),lib);
    }
  }
  if (symlinks.isEmpty()) {
    return null;
  }
  Artifact inputManifest=AndroidBinary.getDxArtifact(ruleContext,"native_symlinks.manifest");
  ruleContext.registerAction(new SourceManifestAction.Builder(ruleContext.getWorkspaceName(),ManifestType.SOURCE_SYMLINKS,ruleContext.getActionOwner(),inputManifest,ruleContext.getConfiguration().legacyExternalRunfiles()).addRootSymlinks(symlinks).build());
  Artifact outputManifest=AndroidBinary.getDxArtifact(ruleContext,"native_symlinks/MANIFEST");
  Artifact nativeLibsMiddleman=ruleContext.getAnalysisEnvironment().getMiddlemanFactory().createRunfilesMiddleman(ruleContext.getActionOwner(),null,symlinks.values(),ruleContext.getConfiguration().getMiddlemanDirectory(),"android_native_libs");
  ruleContext.registerAction(new SymlinkTreeAction(ruleContext.getActionOwner(),inputManifest,nativeLibsMiddleman,outputManifest,false,ruleContext.getConfiguration().getShExecutable(),ruleContext.getConfiguration().getLocalShellEnvironment()));
  return outputManifest;
}
