def testFieldPresence(self):
    message = unittest_pb2.TestAllTypes()
    self.assertFalse(message.HasField('optional_int32'))
    self.assertFalse(message.HasField('optional_bool'))
    self.assertFalse(message.HasField('optional_nested_message'))
    with self.assertRaises(ValueError):
        message.HasField('field_doesnt_exist')
    with self.assertRaises(ValueError):
        message.HasField('repeated_int32')
    with self.assertRaises(ValueError):
        message.HasField('repeated_nested_message')
    self.assertEqual(0, message.optional_int32)
    self.assertEqual(False, message.optional_bool)
    self.assertEqual(0, message.optional_nested_message.bb)
    message.optional_int32 = 0
    message.optional_bool = False
    message.optional_nested_message.bb = 0
    self.assertTrue(message.HasField('optional_int32'))
    self.assertTrue(message.HasField('optional_bool'))
    self.assertTrue(message.HasField('optional_nested_message'))
    message.optional_int32 = 5
    message.optional_bool = True
    message.optional_nested_message.bb = 15
    self.assertTrue(message.HasField('optional_int32'))
    self.assertTrue(message.HasField('optional_bool'))
    self.assertTrue(message.HasField('optional_nested_message'))
    message.ClearField('optional_int32')
    message.ClearField('optional_bool')
    message.ClearField('optional_nested_message')
    self.assertFalse(message.HasField('optional_int32'))
    self.assertFalse(message.HasField('optional_bool'))
    self.assertFalse(message.HasField('optional_nested_message'))
    self.assertEqual(0, message.optional_int32)
    self.assertEqual(False, message.optional_bool)
    self.assertEqual(0, message.optional_nested_message.bb)
