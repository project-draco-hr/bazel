def testMergeFrom(self):
    msg = map_unittest_pb2.TestMap()
    msg.map_int32_int32[12] = 34
    msg.map_int32_int32[56] = 78
    msg.map_int64_int64[22] = 33
    msg.map_int32_foreign_message[111].c = 5
    msg.map_int32_foreign_message[222].c = 10
    msg2 = map_unittest_pb2.TestMap()
    msg2.map_int32_int32[12] = 55
    msg2.map_int64_int64[88] = 99
    msg2.map_int32_foreign_message[222].c = 15
    msg2.MergeFrom(msg)
    self.assertEqual(34, msg2.map_int32_int32[12])
    self.assertEqual(78, msg2.map_int32_int32[56])
    self.assertEqual(33, msg2.map_int64_int64[22])
    self.assertEqual(99, msg2.map_int64_int64[88])
    self.assertEqual(5, msg2.map_int32_foreign_message[111].c)
    self.assertEqual(10, msg2.map_int32_foreign_message[222].c)
    as_dict = {}
    for key in msg2.map_int32_foreign_message:
        self.assertFalse((key in as_dict))
        as_dict[key] = msg2.map_int32_foreign_message[key].c
    self.assertEqual({111: 5, 222: 10, }, as_dict)
    del msg2.map_int32_int32[12]
    self.assertFalse((12 in msg2.map_int32_int32))
    del msg2.map_int32_foreign_message[222]
    self.assertFalse((222 in msg2.map_int32_foreign_message))
