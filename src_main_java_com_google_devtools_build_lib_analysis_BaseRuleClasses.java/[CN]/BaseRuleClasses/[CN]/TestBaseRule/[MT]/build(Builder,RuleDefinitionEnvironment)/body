{
  return builder.add(attr("size",STRING).value("medium").taggable().nonconfigurable("policy decision: should be consistent across configurations")).add(attr("timeout",STRING).taggable().nonconfigurable("policy decision: should be consistent across configurations").value(new Attribute.ComputedDefault(){
    @Override public Object getDefault(    AttributeMap rule){
      TestSize size=TestSize.getTestSize(rule.get("size",Type.STRING));
      if (size != null) {
        String timeout=size.getDefaultTimeout().toString();
        if (timeout != null) {
          return timeout;
        }
      }
      return "illegal";
    }
  }
)).add(attr("flaky",BOOLEAN).value(false).taggable().nonconfigurable("policy decision: should be consistent across configurations")).add(attr("shard_count",INTEGER).value(-1)).add(attr("local",BOOLEAN).value(false).taggable().nonconfigurable("policy decision: should be consistent across configurations")).add(attr("args",STRING_LIST).nonconfigurable("policy decision: should be consistent across configurations")).add(attr("$test_runtime",LABEL_LIST).cfg(HOST).value(ImmutableList.of(env.getLabel("//tools/test:runtime")))).add(attr(":gcov",LABEL_LIST).cfg(HOST).value(GCOV)).add(attr(":coverage_support",LABEL_LIST).cfg(HOST).value(COVERAGE_SUPPORT)).add(attr(":coverage_report_generator",LABEL_LIST).cfg(HOST).value(COVERAGE_REPORT_GENERATOR)).add(attr(":run_under",LABEL).cfg(DATA).value(RUN_UNDER).skipPrereqValidatorCheck()).build();
}
