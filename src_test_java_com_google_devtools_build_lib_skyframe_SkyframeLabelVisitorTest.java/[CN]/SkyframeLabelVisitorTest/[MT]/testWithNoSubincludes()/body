{
  preprocessorFactorySupplier.inject(new SubincludePreprocessor(scratch.getFileSystem(),getSkyframeExecutor().getPackageManager()));
  getSkyframeExecutor().preparePackageLoading(new PathPackageLocator(outputBase,ImmutableList.of(rootDirectory)),ConstantRuleVisibility.PRIVATE,true,7,loadingMock.getDefaultsPackageContent(),UUID.randomUUID(),new TimestampGranularityMonitor(BlazeClock.instance()));
  this.visitor=getSkyframeExecutor().pkgLoader();
  scratch.file("pkg/BUILD","sh_library(name = 'x', deps = ['z'])","sh_library(name = 'z')");
  assertLabelsVisited(ImmutableSet.of("//pkg:x","//pkg:z"),ImmutableSet.of("//pkg:x"),!EXPECT_ERROR,!KEEP_GOING);
  assertLabelsVisited(ImmutableSet.of("//pkg:x","//pkg:z"),ImmutableSet.of("//pkg:x"),!EXPECT_ERROR,!KEEP_GOING);
  scratch.file("hassub/BUILD","subinclude('//sub:sub')");
  scratch.file("sub/BUILD","exports_files(['sub'])");
  scratch.file("sub/sub","sh_library(name='zzz')");
  assertLabelsVisited(ImmutableSet.of("//hassub:zzz"),ImmutableSet.of("//hassub:zzz"),!EXPECT_ERROR,!KEEP_GOING);
}
