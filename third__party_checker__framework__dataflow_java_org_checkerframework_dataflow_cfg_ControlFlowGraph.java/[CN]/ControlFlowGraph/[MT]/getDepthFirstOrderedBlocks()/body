{
  List<Block> dfsOrderResult=new LinkedList<>();
  Set<Block> visited=new HashSet<>();
  Deque<Block> worklist=new LinkedList<>();
  worklist.add(entryBlock);
  while (!worklist.isEmpty()) {
    Block cur=worklist.getLast();
    if (visited.contains(cur)) {
      dfsOrderResult.add(cur);
      worklist.removeLast();
    }
 else {
      visited.add(cur);
      Deque<Block> successors=getSuccessors(cur);
      successors.removeAll(visited);
      worklist.addAll(successors);
    }
  }
  Collections.reverse(dfsOrderResult);
  return dfsOrderResult;
}
