def main(args):
    parser = optparse.OptionParser(usage='Usage: %prog ARCHIVE OUTPUT')
    parser.add_option('--no-prefix', dest='no_prefix', action='store_true', help='Do not remove a prefix from paths in the archive.')
    (options, args) = parser.parse_args(args)
    if (len(args) != 2):
        parser.print_help()
        return 1
    (archive, output) = args
    if (not os.path.exists(archive)):
        return 0
    if archive.endswith('.zip'):
        entries = IterateZip(archive)
    elif archive.endswith('.tar.gz'):
        entries = IterateTar(archive)
    else:
        raise ValueError(archive)
    try:
        if os.path.exists(output):
            print ('Removing %s' % (output,))
            shutil.rmtree(output)
        print ('Extracting %s to %s' % (archive, output))
        prefix = None
        num_extracted = 0
        for (path, mode, inp) in entries:
            if (('\\' in path) or path.startswith('/')):
                raise ValueError(path)
            if (not options.no_prefix):
                (new_prefix, rest) = path.split('/', 1)
                if (prefix is None):
                    prefix = new_prefix
                if (prefix != new_prefix):
                    raise ValueError((prefix, new_prefix))
            else:
                rest = path
            fixed_path = CheckedJoin(output, rest)
            if (not os.path.isdir(os.path.dirname(fixed_path))):
                os.makedirs(os.path.dirname(fixed_path))
            with open(fixed_path, 'wb') as out:
                shutil.copyfileobj(inp, out)
            if (mode is not None):
                os.chmod(fixed_path, mode)
            num_extracted += 1
            if ((num_extracted % 100) == 0):
                print ('Extracted %d files...' % (num_extracted,))
    finally:
        entries.close()
    if ((num_extracted % 100) == 0):
        print ('Done. Extracted %d files.' % (num_extracted,))
    return 0
