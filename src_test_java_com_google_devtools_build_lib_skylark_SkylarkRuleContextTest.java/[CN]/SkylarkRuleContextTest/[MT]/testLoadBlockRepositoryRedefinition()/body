{
  reporter.removeHandler(failFastHandler);
  scratch.file("/bar/WORKSPACE");
  scratch.file("/bar/bar.txt");
  scratch.file("/bar/BUILD","filegroup(name = 'baz', srcs = ['bar.txt'])");
  scratch.file("/baz/WORKSPACE");
  scratch.file("/baz/baz.txt");
  scratch.file("/baz/BUILD","filegroup(name = 'baz', srcs = ['baz.txt'])");
  scratch.overwriteFile("WORKSPACE","local_repository(name = 'foo', path = '/bar')","local_repository(name = 'foo', path = '/baz')");
  invalidatePackages(false);
  assertThat((List<Label>)getConfiguredTarget("@foo//:baz").getTarget().getAssociatedRule().getAttributeContainer().getAttr("srcs")).contains(Label.parseAbsolute("@foo//:baz.txt"));
  scratch.overwriteFile("BUILD");
  scratch.overwriteFile("bar.bzl","dummy = 1");
  scratch.overwriteFile("WORKSPACE","local_repository(name = 'foo', path = '/bar')","load('//:bar.bzl', 'dummy')","local_repository(name = 'foo', path = '/baz')");
  try {
    invalidatePackages(false);
    createRuleContext("@foo//:baz");
    fail("Should have failed because repository 'foo' is overloading after a load!");
  }
 catch (  Exception ex) {
    assertContainsEvent("ERROR /workspace/WORKSPACE:3:1: Cannot redefine repository after any load statement " + "in the WORKSPACE file (for repository 'foo')");
  }
}
