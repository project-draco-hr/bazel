{
  if (pattern.isEmpty()) {
    return "pattern cannot be empty";
  }
  if (pattern.charAt(0) == '/') {
    return "pattern cannot be absolute";
  }
  for (int i=0; i < pattern.length(); i++) {
    char c=pattern.charAt(i);
switch (c) {
case '(':
case ')':
case '{':
case '}':
case '[':
case ']':
      return "illegal character '" + c + "'";
  }
}
Iterable<String> segments=Splitter.on('/').split(pattern);
for (String segment : segments) {
  if (segment.isEmpty()) {
    return "empty segment not permitted";
  }
  if (segment.equals(".") || segment.equals("..")) {
    return "segment '" + segment + "' not permitted";
  }
  if (segment.contains("**") && !segment.equals("**")) {
    return "recursive wildcard must be its own segment";
  }
}
return null;
}
