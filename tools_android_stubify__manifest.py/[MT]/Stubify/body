def Stubify(manifest_string):
    'Does the stubification on an XML string.\n\n  Args:\n    manifest_string: the input manifest as a string.\n  Returns:\n    A tuple of (output manifest, old application class, app package)\n  Raises:\n    Exception: if something goes wrong\n  '
    manifest = ElementTree.fromstring(manifest_string)
    if (manifest.tag != 'manifest'):
        raise BadManifestException('invalid input manifest')
    app_list = manifest.findall('application')
    if (len(app_list) == 1):
        application = app_list[0]
    elif (len(app_list) == 0):
        application = ElementTree.Element('application')
        manifest.insert(0, application)
    else:
        raise BadManifestException('multiple <application> elements present')
    old_application = application.get(('{%s}name' % ANDROID))
    if (old_application is None):
        old_application = 'android.app.Application'
    application.set(('{%s}name' % ANDROID), STUB_APPLICATION)
    read_permission = manifest.findall(('./uses-permission[@android:name="%s"]' % READ_EXTERNAL_STORAGE), namespaces={'android': ANDROID, })
    if (not read_permission):
        read_permission = ElementTree.Element('uses-permission')
        read_permission.set(('{%s}name' % ANDROID), READ_EXTERNAL_STORAGE)
        manifest.insert(0, read_permission)
    new_manifest = ElementTree.tostring(manifest)
    app_package = manifest.get('package')
    return (new_manifest, old_application, app_package)
