{
  RuleClass ruleClass=newRuleClass("ruleA",false,false,false,false,false,false,ImplicitOutputsFunction.NONE,RuleClass.NO_CHANGE,DUMMY_CONFIGURED_TARGET_FACTORY,PredicatesWithMessage.<Rule>alwaysTrue(),PREFERRED_DEPENDENCY_PREDICATE,ImmutableSet.<Class<?>>of(),false,null,NO_EXTERNAL_BINDINGS,null,ImmutableSet.<Class<?>>of(),MissingFragmentPolicy.FAIL_ANALYSIS,true,attr("a",STRING_LIST).mandatory().build(),attr("b",STRING_LIST).mandatory().build(),attr("c",STRING_LIST).mandatory().build(),attr("baz",STRING_LIST).mandatory().build(),attr("empty",STRING_LIST).build());
  Map<String,Object> attributeValues=new LinkedHashMap<>();
  attributeValues.put("a",ImmutableList.of("a","A"));
  attributeValues.put("b",ImmutableList.of("b","B"));
  attributeValues.put("c",ImmutableList.of("c","C"));
  attributeValues.put("baz",ImmutableList.of("baz","BAZ"));
  attributeValues.put("empty",ImmutableList.<String>of());
  AttributeMap rule=RawAttributeMapper.of(createRule(ruleClass,"testrule",attributeValues,testRuleLocation));
  assertThat(substitutePlaceholderIntoTemplate("foo",rule)).containsExactly("foo");
  assertThat(substitutePlaceholderIntoTemplate("foo-%{baz}-bar",rule)).containsExactly("foo-baz-bar","foo-BAZ-bar").inOrder();
  assertThat(substitutePlaceholderIntoTemplate("%{a}-%{b}-%{c}",rule)).containsExactly("a-b-c","a-b-C","a-B-c","a-B-C","A-b-c","A-b-C","A-B-c","A-B-C").inOrder();
  assertThat(substitutePlaceholderIntoTemplate("%{a",rule)).containsExactly("%{a");
  assertThat(substitutePlaceholderIntoTemplate("%{a}}",rule)).containsExactly("a}","A}").inOrder();
  assertThat(substitutePlaceholderIntoTemplate("x%{a}y%{empty}",rule)).isEmpty();
}
