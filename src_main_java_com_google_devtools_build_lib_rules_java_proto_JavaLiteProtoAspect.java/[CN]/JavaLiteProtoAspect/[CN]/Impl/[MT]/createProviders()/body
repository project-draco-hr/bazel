{
  ImmutableMap.Builder<Class<? extends TransitiveInfoProvider>,TransitiveInfoProvider> result=ImmutableMap.builder();
  JavaCompilationArgsProvider generatedCompilationArgsProvider;
  NestedSetBuilder<Artifact> transitiveOutputJars=NestedSetBuilder.fromNestedSets(transform(getDeps(JavaProtoLibraryTransitiveFilesToBuildProvider.class),GET_JARS));
  if (supportData.hasProtoSources()) {
    Artifact sourceJar=getSourceJarArtifact();
    createProtoCompileAction(sourceJar);
    Artifact outputJar=getOutputJarArtifact();
    generatedCompilationArgsProvider=createJavaCompileAction(sourceJar,outputJar);
    NestedSet<Artifact> javaSourceJars=NestedSetBuilder.<Artifact>stableOrder().add(sourceJar).build();
    transitiveOutputJars.add(outputJar);
    result.put(JavaRuntimeJarAspectProvider.class,new JavaRuntimeJarAspectProvider(new JavaRuntimeJarProvider(ImmutableList.of(outputJar)))).put(JavaSourceJarsAspectProvider.class,new JavaSourceJarsAspectProvider(JavaSourceJarsProvider.create(NestedSetBuilder.<Artifact>emptySet(Order.STABLE_ORDER),javaSourceJars)));
  }
 else {
    generatedCompilationArgsProvider=dependencyCompilationArgs;
  }
  return result.put(JavaProtoLibraryTransitiveFilesToBuildProvider.class,new JavaProtoLibraryTransitiveFilesToBuildProvider(transitiveOutputJars.build())).put(JavaCompilationArgsAspectProvider.class,new JavaCompilationArgsAspectProvider(generatedCompilationArgsProvider)).build();
}
