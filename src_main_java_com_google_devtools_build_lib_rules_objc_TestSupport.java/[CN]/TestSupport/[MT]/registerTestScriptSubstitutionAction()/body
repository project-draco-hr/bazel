{
  Artifact testBundleIpa=testBundleIpa();
  String runMemleaks=ruleContext.getFragment(ObjcConfiguration.class).runMemleaks() ? "true" : "false";
  Map<String,String> testEnv=ruleContext.getConfiguration().getTestEnv();
  ImmutableList.Builder<Substitution> substitutions=new ImmutableList.Builder<Substitution>().add(Substitution.of("%(memleaks)s",runMemleaks)).add(Substitution.of("%(test_app_ipa)s",testBundleIpa.getRootRelativePathString())).add(Substitution.of("%(test_app_name)s",baseNameWithoutIpa(testBundleIpa))).add(Substitution.of("%(plugin_jars)s",Artifact.joinRootRelativePaths(":",plugins())));
  substitutions.add(Substitution.ofSpaceSeparatedMap("%(test_env)s",testEnv));
  Optional<Artifact> testHarnessIpa=testHarnessIpa();
  if (testHarnessIpa.isPresent()) {
    substitutions.add(Substitution.of("%(xctest_app_ipa)s",testHarnessIpa.get().getRootRelativePathString())).add(Substitution.of("%(xctest_app_name)s",baseNameWithoutIpa(testHarnessIpa.get())));
  }
 else {
    substitutions.add(Substitution.of("%(xctest_app_ipa)s","")).add(Substitution.of("%(xctest_app_name)s",""));
  }
  Artifact template;
  if (!runWithLabDevice()) {
    substitutions.addAll(substitutionsForSimulator());
    template=ruleContext.getPrerequisiteArtifact("$test_template",Mode.TARGET);
  }
 else {
    substitutions.addAll(substitutionsForLabDevice());
    template=testTemplateForLabDevice();
  }
  ruleContext.registerAction(new TemplateExpansionAction(ruleContext.getActionOwner(),template,generatedTestScript(),substitutions.build(),true));
}
