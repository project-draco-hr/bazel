{
  CppLinkActionBuilder builder=new CppLinkActionBuilder(context,binary).setCrosstoolInputs(CppHelper.getToolchain(context).getLink()).addNonCodeInputs(compilationPrerequisites);
  boolean usePic=CppHelper.usePic(context,!isLinkShared(context));
  Iterable<Artifact> objectFiles=compilationOutputs.getObjectFiles(usePic);
  if (fake) {
    builder.addFakeObjectFiles(objectFiles);
  }
 else {
    builder.addObjectFiles(objectFiles);
  }
  builder.addLTOBitcodeFiles(compilationOutputs.getLtoBitcodeFiles());
  builder.addNonCodeInputs(common.getLinkerScripts());
  for (  Artifact library : precompiledFiles.getLibraries()) {
    if (Link.SHARED_LIBRARY_FILETYPES.matches(library.getFilename())) {
      builder.addLibrary(LinkerInputs.solibLibraryToLink(common.getDynamicLibrarySymlink(library,true),library,CcLinkingOutputs.libraryIdentifierOf(library)));
    }
 else     if (Link.LINK_LIBRARY_FILETYPES.matches(library.getFilename())) {
      builder.addLibrary(LinkerInputs.precompiledLibraryToLink(library,ArtifactCategory.ALWAYSLINK_STATIC_LIBRARY));
    }
 else     if (Link.ARCHIVE_FILETYPES.matches(library.getFilename())) {
      builder.addLibrary(LinkerInputs.precompiledLibraryToLink(library,ArtifactCategory.STATIC_LIBRARY));
    }
 else {
      throw new IllegalStateException();
    }
  }
  CcLinkParams linkParams=collectCcLinkParams(context,linkStaticness != LinkStaticness.DYNAMIC,isLinkShared(context),linkopts);
  builder.addLinkParams(linkParams,context);
  return builder;
}
