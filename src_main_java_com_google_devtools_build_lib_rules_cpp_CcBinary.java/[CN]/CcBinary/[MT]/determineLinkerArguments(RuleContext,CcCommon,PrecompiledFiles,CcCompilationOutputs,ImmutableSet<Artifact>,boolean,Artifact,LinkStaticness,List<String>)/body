{
  CppLinkAction.Builder builder=new CppLinkAction.Builder(context,binary).setCrosstoolInputs(CppHelper.getToolchain(context).getLink()).addNonLibraryInputs(compilationPrerequisites);
  boolean usePic=CppHelper.usePic(context,!isLinkShared(context));
  Iterable<Artifact> objectFiles=compilationOutputs.getObjectFiles(usePic);
  if (fake) {
    builder.addFakeNonLibraryInputs(objectFiles);
  }
 else {
    builder.addNonLibraryInputs(objectFiles);
  }
  builder.addLTOBitcodeFiles(compilationOutputs.getLtoBitcodeFiles());
  builder.addNonLibraryInputs(common.getLinkerScripts());
  for (  Artifact library : precompiledFiles.getLibraries()) {
    if (SHARED_LIBRARY_FILETYPES.matches(library.getFilename())) {
      builder.addLibrary(common.getDynamicLibrarySymlink(library,true));
    }
 else {
      builder.addLibrary(LinkerInputs.opaqueLibraryToLink(library));
    }
  }
  CcLinkParams linkParams=collectCcLinkParams(context,linkStaticness != LinkStaticness.DYNAMIC,isLinkShared(context),linkopts);
  builder.addLinkParams(linkParams,context);
  return builder;
}
