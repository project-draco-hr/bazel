{
  List<Artifact> instrumentedObjectFiles=new ArrayList<>();
  instrumentedObjectFiles.addAll(ccCompilationOutputs.getObjectFiles(false));
  instrumentedObjectFiles.addAll(ccCompilationOutputs.getObjectFiles(true));
  InstrumentedFilesProvider instrumentedFilesProvider=common.getInstrumentedFilesProvider(instrumentedObjectFiles,!TargetUtils.isTestRule(ruleContext.getRule()) && !fake);
  builder.setFilesToBuild(filesToBuild).add(CppCompilationContext.class,cppCompilationContext).add(TransitiveLipoInfoProvider.class,transitiveLipoInfo).add(CcExecutionDynamicLibrariesProvider.class,new CcExecutionDynamicLibrariesProvider(collectExecutionDynamicLibraryArtifacts(ruleContext,linkingOutputs.getExecutionDynamicLibraries()))).add(CcNativeLibraryProvider.class,new CcNativeLibraryProvider(collectTransitiveCcNativeLibraries(ruleContext,linkingOutputs.getDynamicLibraries()))).add(InstrumentedFilesProvider.class,instrumentedFilesProvider).add(CppDebugFileProvider.class,new CppDebugFileProvider(dwoArtifacts.getDwoArtifacts(),dwoArtifacts.getPicDwoArtifacts())).addOutputGroup(OutputGroupProvider.TEMP_FILES,getTemps(cppConfiguration,ccCompilationOutputs)).addOutputGroup(OutputGroupProvider.FILES_TO_COMPILE,common.getFilesToCompile(ccCompilationOutputs)).addOutputGroup(OutputGroupProvider.COMPILATION_PREREQUISITES,CcCommon.collectCompilationPrerequisites(ruleContext,cppCompilationContext)).addOutputGroup(OutputGroupProvider.BASELINE_COVERAGE,instrumentedFilesProvider.getBaselineCoverageArtifacts());
}
