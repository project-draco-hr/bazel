{
  Iterable<Artifact> allInputs=getDwpInputs(context,dwoArtifactsCollector.getPicDwoArtifacts(),dwoArtifactsCollector.getDwoArtifacts());
  if (Iterables.isEmpty(allInputs)) {
    context.registerAction(new FileWriteAction(context.getActionOwner(),dwpOutput,"",false));
    return;
  }
  NestedSet<Artifact> dwpTools=CppHelper.getToolchain(context).getDwp();
  Preconditions.checkState(!dwpTools.isEmpty());
  List<SpawnAction.Builder> packagers=new ArrayList<>();
  SpawnAction.Builder currentPackager=newDwpAction(cppConfiguration,dwpTools);
  int inputsForCurrentPackager=0;
  for (  Artifact dwoInput : allInputs) {
    if (inputsForCurrentPackager == MAX_INPUTS_PER_DWP_ACTION) {
      packagers.add(currentPackager);
      currentPackager=newDwpAction(cppConfiguration,dwpTools);
      inputsForCurrentPackager=0;
    }
    currentPackager.addInputArgument(dwoInput);
    inputsForCurrentPackager++;
  }
  packagers.add(currentPackager);
  if (packagers.size() == 1) {
    context.registerAction(Iterables.getOnlyElement(packagers).addArgument("-o").addOutputArgument(dwpOutput).setMnemonic("CcGenerateDwp").build(context));
  }
 else {
    List<Artifact> intermediateOutputs=new ArrayList<>();
    int count=1;
    for (    SpawnAction.Builder packager : packagers) {
      Artifact intermediateOutput=getIntermediateDwpFile(context.getAnalysisEnvironment(),dwpOutput,count++);
      context.registerAction(packager.addArgument("-o").addOutputArgument(intermediateOutput).setMnemonic("CcGenerateIntermediateDwp").build(context));
      intermediateOutputs.add(intermediateOutput);
    }
    context.registerAction(newDwpAction(cppConfiguration,dwpTools).addInputArguments(intermediateOutputs).addArgument("-o").addOutputArgument(dwpOutput).setMnemonic("CcGenerateDwp").build(context));
  }
}
