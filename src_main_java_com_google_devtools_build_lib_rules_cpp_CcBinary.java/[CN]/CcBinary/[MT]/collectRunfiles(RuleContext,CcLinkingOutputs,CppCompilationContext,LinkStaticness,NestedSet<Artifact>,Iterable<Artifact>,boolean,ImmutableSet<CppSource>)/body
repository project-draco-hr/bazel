{
  Runfiles.Builder builder=new Runfiles.Builder(context.getWorkspaceName(),context.getConfiguration().legacyExternalRunfiles());
  Function<TransitiveInfoCollection,Runfiles> runfilesMapping=CppRunfilesProvider.runfilesFunction(linkStaticness != LinkStaticness.DYNAMIC);
  boolean linkshared=isLinkShared(context);
  builder.addTransitiveArtifacts(filesToBuild);
  builder.addArtifacts(linkingOutputs.getLibrariesForRunfiles(true));
  builder.addRunfiles(context,RunfilesProvider.DEFAULT_RUNFILES);
  builder.add(context,runfilesMapping);
  CcToolchainProvider toolchain=CppHelper.getToolchain(context);
  if (linkStaticness == LinkStaticness.DYNAMIC) {
    builder.addTransitiveArtifacts(toolchain.getDynamicRuntimeLinkInputs());
  }
  if (!linkshared) {
    TransitiveInfoCollection malloc=CppHelper.mallocForTarget(context);
    builder.addTarget(malloc,RunfilesProvider.DEFAULT_RUNFILES);
    builder.addTarget(malloc,runfilesMapping);
  }
  if (fake) {
    builder.addSymlinksToArtifacts(Iterables.filter(fakeLinkerInputs,Artifact.MIDDLEMAN_FILTER));
    builder.addTransitiveArtifacts(toolchain.getCrosstool());
    builder.addTransitiveArtifacts(toolchain.getLibcLink());
    ImmutableSet.Builder<Artifact> sourcesBuilder=ImmutableSet.<Artifact>builder();
    for (    CppSource cppSource : cAndCppSources) {
      sourcesBuilder.add(cppSource.getSource());
    }
    builder.addSymlinksToArtifacts(sourcesBuilder.build());
    builder.addSymlinksToArtifacts(cppCompilationContext.getDeclaredIncludeSrcs());
    builder.addSymlinksToArtifacts(cppCompilationContext.getAdditionalInputs());
  }
  return builder.build();
}
