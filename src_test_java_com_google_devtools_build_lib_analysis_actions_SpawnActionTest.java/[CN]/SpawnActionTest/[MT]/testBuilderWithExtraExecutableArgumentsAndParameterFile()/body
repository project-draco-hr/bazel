{
  useConfiguration("--min_param_file_size=0");
  collectingAnalysisEnvironment=new AnalysisTestUtil.CollectingAnalysisEnvironment(getTestAnalysisEnvironment());
  Artifact output=getBinArtifactWithNoOwner("output");
  Artifact paramFile=getBinArtifactWithNoOwner("output-2.params");
  Action[] actions=builder().addOutput(output).setJavaExecutable(scratchFile("/bin/java").asFragment(),jarArtifact,"MyMainClass",asList("-jvmarg")).addExecutableArguments("execArg1","execArg2").addArguments("arg1","arg2","arg3").useParameterFile(ParameterFileType.UNQUOTED).build(ActionsTestUtil.NULL_ACTION_OWNER,collectingAnalysisEnvironment,targetConfig);
  collectingAnalysisEnvironment.registerAction(actions);
  SpawnAction action=(SpawnAction)actions[0];
  if (getMutableActionGraph() != null) {
    collectingAnalysisEnvironment.registerWith(getMutableActionGraph());
  }
  assertEquals(asList("/bin/java","-Xverify:none","-jvmarg","-cp","pkg/exe.jar","MyMainClass","execArg1","execArg2","@" + paramFile.getExecPathString()),action.getSpawn().getArguments());
  assertEquals(asList("/bin/java","-Xverify:none","-jvmarg","-cp","pkg/exe.jar","MyMainClass","execArg1","execArg2","@" + paramFile.getExecPathString()),ImmutableList.copyOf(action.getArguments()));
  assertEquals(Arrays.asList("arg1","arg2","arg3"),ImmutableList.copyOf(((ParameterFileWriteAction)getGeneratingAction(paramFile)).getContents()));
}
