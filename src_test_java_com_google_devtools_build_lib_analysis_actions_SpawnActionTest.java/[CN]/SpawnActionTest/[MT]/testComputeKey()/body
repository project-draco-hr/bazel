{
  final Artifact artifactA=getSourceArtifact("a");
  final Artifact artifactB=getSourceArtifact("b");
  ActionTester.runTest(64,new ActionCombinationFactory(){
    @Override public Action generate(    int i){
      SpawnAction.Builder builder=builder();
      builder.addOutput(destinationArtifact);
      PathFragment executable=(i & 1) == 0 ? artifactA.getExecPath() : artifactB.getExecPath();
      if ((i & 2) == 0) {
        builder.setExecutable(executable);
      }
 else {
        builder.setJavaExecutable(executable,jarArtifact,"Main",ImmutableList.<String>of());
      }
      builder.setMnemonic((i & 4) == 0 ? "a" : "b");
      if ((i & 8) == 0) {
        builder.addInputManifest(artifactA,new PathFragment("a"));
      }
 else {
        builder.addInputManifest(artifactB,new PathFragment("a"));
      }
      if ((i & 16) == 0) {
        builder.addInputManifest(artifactA,new PathFragment("aa"));
      }
 else {
        builder.addInputManifest(artifactA,new PathFragment("ab"));
      }
      Map<String,String> env=new HashMap<>();
      if ((i & 32) == 0) {
        env.put("foo","bar");
      }
      builder.setEnvironment(env);
      Action[] actions=builder.build(ActionsTestUtil.NULL_ACTION_OWNER,collectingAnalysisEnvironment,targetConfig);
      collectingAnalysisEnvironment.registerAction(actions);
      return actions[0];
    }
  }
);
}
