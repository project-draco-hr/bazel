{
  final Stopwatch timer=Stopwatch.createStarted();
  OptionsParser optionsParser=OptionsParser.newOptionsParser(Options.class,AaptConfigOptions.class);
  optionsParser.parseAndExitUponError(args);
  aaptConfigOptions=optionsParser.getOptions(AaptConfigOptions.class);
  options=optionsParser.getOptions(Options.class);
  final AndroidResourceProcessor resourceProcessor=new AndroidResourceProcessor(STD_LOGGER);
  try (ScopedTemporaryDirectory scopedTmp=new ScopedTemporaryDirectory("android_resources_tmp")){
    final Path tmp=scopedTmp.getPath();
    final Path mergedAssets=tmp.resolve("merged_assets");
    final Path mergedResources=tmp.resolve("merged_resources");
    final Path filteredResources=tmp.resolve("resources-filtered");
    final Path densityManifest=tmp.resolve("manifest-filtered/AndroidManifest.xml");
    final Path processedManifest=tmp.resolve("manifest-processed/AndroidManifest.xml");
    final Path dummyManifest=tmp.resolve("manifest-aapt-dummy/AndroidManifest.xml");
    Path generatedSources=null;
    if (options.srcJarOutput != null || options.rOutput != null || options.symbolsTxtOut != null) {
      generatedSources=tmp.resolve("generated_resources");
    }
    logger.fine(String.format("Setup finished at %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
    List<DependencyAndroidData> data=ImmutableSet.<DependencyAndroidData>builder().addAll(options.directData).addAll(options.transitiveData).build().asList();
    final MergedAndroidData mergedData=resourceProcessor.mergeData(options.primaryData,options.directData,options.transitiveData,mergedResources,mergedAssets,selectPngCruncher(),options.packageType,options.symbolsTxtOut);
    logger.fine(String.format("Merging finished at %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
    final DensityFilteredAndroidData filteredData=mergedData.filter(new DensitySpecificResourceFilter(options.densities,filteredResources,mergedResources),new DensitySpecificManifestProcessor(options.densities,densityManifest));
    logger.fine(String.format("Density filtering finished at %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
    MergedAndroidData processedData=resourceProcessor.processManifest(options.packageType,options.packageForR,options.applicationId,options.versionCode,options.versionName,filteredData,processedManifest);
    if (options.manifestOutput != null) {
      resourceProcessor.copyManifestToOutput(processedData,options.manifestOutput);
    }
    if (options.packageType == Type.LIBRARY) {
      Files.createDirectories(dummyManifest.getParent());
      Files.write(dummyManifest,String.format("<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"" + " package=\"%s\">"+ "</manifest>",options.packageForR).getBytes(UTF_8));
      processedData=new MergedAndroidData(processedData.getResourceDir(),processedData.getAssetDir(),dummyManifest);
    }
    resourceProcessor.processResources(aaptConfigOptions.aapt,aaptConfigOptions.androidJar,aaptConfigOptions.buildToolsVersion,options.packageType,aaptConfigOptions.debug,options.packageForR,new FlagAaptOptions(aaptConfigOptions),aaptConfigOptions.resourceConfigs,aaptConfigOptions.splits,processedData,data,generatedSources,options.packagePath,options.proguardOutput,options.mainDexProguardOutput,options.resourcesOutput != null ? processedData.getResourceDir().resolve("values").resolve("public.xml") : null,options.dataBindingInfoOut);
    logger.fine(String.format("aapt finished at %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
    if (options.srcJarOutput != null) {
      resourceProcessor.createSrcJar(generatedSources,options.srcJarOutput,VariantConfiguration.Type.LIBRARY == options.packageType);
    }
    if (options.rOutput != null) {
      resourceProcessor.copyRToOutput(generatedSources,options.rOutput,VariantConfiguration.Type.LIBRARY == options.packageType);
    }
    if (options.resourcesOutput != null) {
      resourceProcessor.createResourcesZip(processedData.getResourceDir(),processedData.getAssetDir(),options.resourcesOutput);
    }
    logger.fine(String.format("Packaging finished at %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
  }
 catch (  MergingException e) {
    logger.log(java.util.logging.Level.SEVERE,"Error during merging resources",e);
    throw e;
  }
catch (  IOException|InterruptedException|LoggedErrorException|UnrecognizedSplitsException e) {
    logger.log(java.util.logging.Level.SEVERE,"Error during processing resources",e);
    throw e;
  }
catch (  Exception e) {
    logger.log(java.util.logging.Level.SEVERE,"Unexpected",e);
    throw e;
  }
 finally {
    resourceProcessor.shutdown();
  }
  logger.fine(String.format("Resources processed in %sms",timer.elapsed(TimeUnit.MILLISECONDS)));
}
