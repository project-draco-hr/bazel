{
  Package.LegacyBuilder pkgBuilder=new Package.LegacyBuilder(packageId,ruleClassProvider.getRunfilesPrefix());
  StoredEventHandler eventHandler=new StoredEventHandler();
  try (Mutability mutability=Mutability.create("package %s",packageId)){
    Environment pkgEnv=Environment.builder(mutability).setGlobals(Environment.BUILD).setEventHandler(eventHandler).setImportedExtensions(imports).setToolsRepository(ruleClassProvider.getToolsRepository()).setPhase(Phase.LOADING).build();
    pkgBuilder.setFilename(buildFilePath).setMakeEnv(pkgMakeEnv).setDefaultVisibility(defaultVisibility).setDefaultVisibilitySet(false).setSkylarkFileDependencies(skylarkFileDependencies).setWorkspaceName(externalPkg.getWorkspaceName());
    Event.replayEventsOn(eventHandler,pastEvents);
    PackageContext context=new PackageContext(pkgBuilder,globber,eventHandler,ruleFactory.getAttributeContainerFactory());
    buildPkgEnv(pkgEnv,context,ruleFactory);
    pkgEnv.setupDynamic(PKG_CONTEXT,context);
    pkgEnv.setupDynamic(Runtime.PKG_NAME,packageId.getPackageFragment().getPathString());
    pkgEnv.setupDynamic(Runtime.REPOSITORY_NAME,packageId.getRepository().toString());
    if (containsError) {
      pkgBuilder.setContainsErrors();
    }
    if (!validatePackageIdentifier(packageId,buildFileAST.getLocation(),eventHandler)) {
      pkgBuilder.setContainsErrors();
    }
    if (!validateAssignmentStatements(pkgEnv,buildFileAST,eventHandler)) {
      pkgBuilder.setContainsErrors();
    }
    if (buildFileAST.containsErrors()) {
      pkgBuilder.setContainsErrors();
    }
    if (!buildFileAST.exec(pkgEnv,eventHandler)) {
      pkgBuilder.setContainsErrors();
    }
  }
   pkgBuilder.addEvents(eventHandler.getEvents());
  return pkgBuilder;
}
