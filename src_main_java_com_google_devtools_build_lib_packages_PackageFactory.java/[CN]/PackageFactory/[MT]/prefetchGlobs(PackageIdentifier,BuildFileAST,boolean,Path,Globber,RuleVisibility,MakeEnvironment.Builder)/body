{
  if (wasPreprocessed && preprocessorFactory.considersGlobs()) {
    return;
  }
  try (Mutability mutability=Mutability.create("prefetchGlobs for %s",packageId)){
    Environment pkgEnv=Environment.builder(mutability).setGlobals(Environment.BUILD).setEventHandler(NullEventHandler.INSTANCE).setToolsRepository(ruleClassProvider.getToolsRepository()).setPhase(Phase.LOADING).build();
    Package.LegacyBuilder pkgBuilder=new Package.LegacyBuilder(packageId,ruleClassProvider.getRunfilesPrefix());
    pkgBuilder.setFilename(buildFilePath).setMakeEnv(pkgMakeEnv).setDefaultVisibility(defaultVisibility).setDefaultVisibilitySet(false);
    PackageContext context=new PackageContext(pkgBuilder,globber,NullEventHandler.INSTANCE);
    buildPkgEnv(pkgEnv,context,ruleFactory);
    try {
      pkgEnv.update("glob",newGlobFunction.apply(context,true));
      pkgEnv.update("FilesetEntry",Runtime.NONE);
    }
 catch (    EvalException e) {
      throw new AssertionError(e);
    }
    buildFileAST.exec(pkgEnv,NullEventHandler.INSTANCE);
  }
 }
