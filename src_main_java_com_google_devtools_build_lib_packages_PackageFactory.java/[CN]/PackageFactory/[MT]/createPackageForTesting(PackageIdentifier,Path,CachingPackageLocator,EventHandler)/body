{
  String error=LabelValidator.validatePackageName(packageId.getPackageFragment().getPathString());
  if (error != null) {
    throw new BuildFileNotFoundException(packageId,"illegal package name: '" + packageId + "' ("+ error+ ")");
  }
  ParserInputSource inputSource=maybeGetParserInputSource(buildFile,eventHandler);
  if (inputSource == null) {
    throw new BuildFileContainsErrorsException(packageId,"IOException occured");
  }
  StoredEventHandler localReporter=new StoredEventHandler();
  Globber globber=createLegacyGlobber(buildFile.getParentDirectory(),packageId,locator);
  Preprocessor.Result preprocessingResult=preprocess(packageId,buildFile,inputSource,globber,localReporter);
  ExternalPackage externalPkg=new ExternalPackage.Builder(buildFile.getRelative("WORKSPACE"),ruleClassProvider.getRunfilesPrefix()).build();
  Package result=createPackageFromPreprocessingResult(externalPkg,packageId,buildFile,preprocessingResult,localReporter.getEvents(),ImmutableList.<Statement>of(),ImmutableMap.<PathFragment,Environment>of(),ImmutableList.<Label>of(),locator,ConstantRuleVisibility.PUBLIC,globber).build();
  Event.replayEventsOn(eventHandler,result.getEvents());
  return result;
}
