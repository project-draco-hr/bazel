{
  String error=LabelValidator.validatePackageName(packageId.getPackageFragment().getPathString());
  if (error != null) {
    throw new BuildFileNotFoundException(packageId,"illegal package name: '" + packageId + "' ("+ error+ ")");
  }
  byte[] buildFileBytes=maybeGetBuildFileBytes(buildFile,eventHandler);
  if (buildFileBytes == null) {
    throw new BuildFileContainsErrorsException(packageId,"IOException occured");
  }
  Globber globber=createLegacyGlobber(buildFile.getParentDirectory(),packageId,locator);
  Preprocessor.Result preprocessingResult;
  try {
    preprocessingResult=preprocess(buildFile,packageId,buildFileBytes,globber);
  }
 catch (  IOException e) {
    eventHandler.handle(Event.error(Location.fromFile(buildFile),"preprocessing failed: " + e.getMessage()));
    throw new BuildFileContainsErrorsException(packageId,"preprocessing failed",e);
  }
  Package result=createPackageFromPreprocessingResult(externalPkg,packageId,buildFile,preprocessingResult,ImmutableList.<Statement>of(),ImmutableMap.<PathFragment,Extension>of(),ImmutableList.<Label>of(),ConstantRuleVisibility.PUBLIC,globber).build();
  Event.replayEventsOn(eventHandler,result.getEvents());
  return result;
}
