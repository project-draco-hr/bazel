{
  if (val == null) {
    return null;
  }
  if (val instanceof Boolean) {
    return val;
  }
  if (val instanceof Integer) {
    return val;
  }
  if (val instanceof String) {
    return val;
  }
  if (val instanceof TriState) {
switch ((TriState)val) {
case AUTO:
      return Integer.valueOf(-1);
case YES:
    return Integer.valueOf(1);
case NO:
  return Integer.valueOf(0);
}
}
if (val instanceof Label) {
Label l=(Label)val;
if (l.getPackageName().equals(pkg.getName())) {
return ":" + l.getName();
}
return l.getCanonicalForm();
}
if (val instanceof List) {
List<Object> l=new ArrayList<>();
for (Object o : (List)val) {
Object elt=skylarkifyValue(o,pkg);
if (elt == null) {
  continue;
}
l.add(elt);
}
return SkylarkList.Tuple.copyOf(l);
}
if (val instanceof Map) {
Map<Object,Object> m=new TreeMap<>();
for (Map.Entry<?,?> e : ((Map<?,?>)val).entrySet()) {
Object key=skylarkifyValue(e.getKey(),pkg);
Object mapVal=skylarkifyValue(e.getValue(),pkg);
if (key == null || mapVal == null) {
  continue;
}
m.put(key,mapVal);
}
return m;
}
if (val.getClass().isAnonymousClass()) {
return null;
}
if (val instanceof SkylarkValue) {
return val;
}
if (val instanceof License) {
return null;
}
if (val instanceof BuildType.SelectorList) {
return val;
}
throw new NotRepresentableException(String.format("cannot represent %s (%s) in skylark",val.toString(),val.getClass().toString()));
}
