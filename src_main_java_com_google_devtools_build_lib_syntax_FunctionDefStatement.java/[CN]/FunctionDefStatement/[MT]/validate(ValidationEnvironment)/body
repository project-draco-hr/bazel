{
  SkylarkFunctionType type=SkylarkFunctionType.of(ident.getName());
  ValidationEnvironment localEnv=new ValidationEnvironment(env,type);
  FunctionSignature sig=args.getSignature();
  FunctionSignature.Shape shape=sig.getShape();
  ImmutableList<String> names=sig.getNames();
  List<Expression> defaultExpressions=args.getDefaultValues();
  int positionals=shape.getPositionals();
  int mandatoryPositionals=shape.getMandatoryPositionals();
  int namedOnly=shape.getNamedOnly();
  int mandatoryNamedOnly=shape.getMandatoryNamedOnly();
  boolean starArg=shape.hasStarArg();
  boolean hasStar=starArg || (namedOnly > 0);
  boolean kwArg=shape.hasKwArg();
  int named=positionals + namedOnly;
  int args=named + (starArg ? 1 : 0) + (kwArg ? 1 : 0);
  int startOptionals=mandatoryPositionals;
  int endOptionals=named - mandatoryNamedOnly;
  int iStarArg=named;
  int iKwArg=args - 1;
  int j=0;
  for (int i=0; i < args; i++) {
    String name=names.get(i);
    SkylarkType argType=SkylarkType.UNKNOWN;
    if (hasStar && i == iStarArg) {
      argType=SkylarkType.of(SkylarkList.class,Object.class);
    }
 else     if (kwArg && i == iKwArg) {
      argType=SkylarkType.of(Map.class,Object.class);
    }
 else {
      if (startOptionals <= i && i < endOptionals) {
        argType=defaultExpressions.get(j++).validate(env);
        if (argType.equals(SkylarkType.NONE)) {
          argType=SkylarkType.UNKNOWN;
        }
      }
    }
    localEnv.update(name,argType,getLocation());
  }
  for (  Statement stmts : statements) {
    stmts.validate(localEnv);
  }
  env.updateFunction(ident.getName(),type,getLocation());
  type.setReturnType(SkylarkType.NONE,getLocation());
}
