{
  if (obj == null) {
    return ImmutableList.of();
  }
  if (!(obj instanceof Map<?,?>)) {
    throw new IllegalArgumentException(String.format("expected a dictionary for %s but got %s instead",what,EvalUtils.getDataTypeName(obj)));
  }
  return Iterables.transform(((Map<?,?>)obj).entrySet(),new com.google.common.base.Function<Map.Entry<?,?>,Map.Entry<KEY_TYPE,VALUE_TYPE>>(){
    @SuppressWarnings("unchecked") @Override public Map.Entry<KEY_TYPE,VALUE_TYPE> apply(    Map.Entry<?,?> input){
      if (keyType.isAssignableFrom(input.getKey().getClass()) && valueType.isAssignableFrom(input.getValue().getClass())) {
        return (Map.Entry<KEY_TYPE,VALUE_TYPE>)input;
      }
      throw new IllegalArgumentException(String.format("expected <%s, %s> type for '%s' but got <%s, %s> instead",keyType.getSimpleName(),valueType.getSimpleName(),what,EvalUtils.getDataTypeName(input.getKey()),EvalUtils.getDataTypeName(input.getValue())));
    }
  }
);
}
