{
  ConfiguredAspect.Builder builder=new ConfiguredAspect.Builder(NAME,ruleContext);
  JavaCompilationArgsProvider compilationArgsProvider=base.getProvider(JavaCompilationArgsProvider.class);
  JavaSourceInfoProvider sourceInfoProvider=base.getProvider(JavaSourceInfoProvider.class);
  ImmutableSet<Artifact> javaInputFiles=ImmutableSet.<Artifact>builder().addAll(sourceInfoProvider.getSourceFiles()).addAll(sourceInfoProvider.getSourceJars()).addAll(sourceInfoProvider.getSourceJarsForJarFiles()).build();
  XcodeProvider xcodeProvider;
  ObjcCommon common;
  if (!javaInputFiles.isEmpty()) {
    J2ObjcSource j2ObjcSource=buildJ2ObjcSource(ruleContext,javaInputFiles);
    J2ObjcMappingFileProvider depJ2ObjcMappingFileProvider=depJ2ObjcMappingFileProvider(ruleContext);
    createJ2ObjcTranspilationAction(ruleContext,depJ2ObjcMappingFileProvider.getHeaderMappingFiles(),depJ2ObjcMappingFileProvider.getClassMappingFiles(),javaInputFiles,compilationArgsProvider,j2ObjcSource);
    common=common(ruleContext,j2ObjcSource.getObjcSrcs(),j2ObjcSource.getObjcHdrs(),j2ObjcSource.getHeaderSearchPaths(),DEPENDENT_ATTRIBUTES);
    xcodeProvider=xcodeProvider(ruleContext,common,j2ObjcSource.getObjcHdrs(),j2ObjcSource.getHeaderSearchPaths(),DEPENDENT_ATTRIBUTES);
    new CompilationSupport(ruleContext).registerCompileAndArchiveActions(common).registerFullyLinkAction(common.getObjcProvider());
  }
 else {
    common=common(ruleContext,ImmutableList.<Artifact>of(),ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),DEPENDENT_ATTRIBUTES);
    xcodeProvider=xcodeProvider(ruleContext,common,ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),DEPENDENT_ATTRIBUTES);
  }
  return builder.addProvider(J2ObjcMappingFileProvider.class,j2ObjcMappingFileProvider(ruleContext,!javaInputFiles.isEmpty())).addProvider(ObjcProvider.class,common.getObjcProvider()).addProvider(XcodeProvider.class,xcodeProvider).build();
}
