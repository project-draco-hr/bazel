{
  List<TypeElement> superelems=new ArrayList<TypeElement>();
  if (type == null) {
    return superelems;
  }
  Deque<TypeElement> stack=new ArrayDeque<TypeElement>();
  stack.push(type);
  while (!stack.isEmpty()) {
    TypeElement current=stack.pop();
    TypeMirror supertypecls=current.getSuperclass();
    if (supertypecls.getKind() != TypeKind.NONE) {
      TypeElement supercls=(TypeElement)((DeclaredType)supertypecls).asElement();
      if (!superelems.contains(supercls)) {
        stack.push(supercls);
        superelems.add(supercls);
      }
    }
    for (    TypeMirror supertypeitf : current.getInterfaces()) {
      TypeElement superitf=(TypeElement)((DeclaredType)supertypeitf).asElement();
      if (!superelems.contains(superitf)) {
        stack.push(superitf);
        superelems.add(superitf);
      }
    }
  }
  TypeElement jlobject=elements.getTypeElement("java.lang.Object");
  if (!superelems.contains(jlobject)) {
    superelems.add(jlobject);
  }
  return Collections.<TypeElement>unmodifiableList(superelems);
}
