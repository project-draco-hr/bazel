{
  final int depthBound=args.size() > 1 ? args.get(1).getInteger() : Integer.MAX_VALUE;
  final Uniquifier<T> uniquifier=env.createUniquifier();
  env.eval(args.get(0).getExpression(),new Callback<T>(){
    @Override public void process(    Iterable<T> partialResult) throws QueryException, InterruptedException {
      Collection<T> current=Sets.newHashSet(partialResult);
      env.buildTransitiveClosure(expression,(Set<T>)current,depthBound);
      for (int i=0; i <= depthBound; i++) {
        ImmutableList<T> toProcess=uniquifier.unique(current);
        callback.process(toProcess);
        current=ImmutableList.copyOf(env.getFwdDeps(toProcess));
        if (current.isEmpty()) {
          break;
        }
      }
    }
  }
);
}
