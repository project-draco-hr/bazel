{
  Set<T> universeValue=args.get(0).getExpression().eval(env);
  Set<T> argumentValue=args.get(1).getExpression().eval(env);
  int depthBound=args.size() > 2 ? args.get(2).getInteger() : Integer.MAX_VALUE;
  env.buildTransitiveClosure(expression,universeValue,Integer.MAX_VALUE);
  Set<T> visited=new LinkedHashSet<>();
  Set<T> reachableFromUniverse=env.getTransitiveClosure(universeValue);
  Collection<T> current=argumentValue;
  for (int i=0; i <= depthBound; i++) {
    List<T> next=new ArrayList<>();
    for (    T node : current) {
      if (!reachableFromUniverse.contains(node)) {
        continue;
      }
      if (!visited.add(node)) {
        continue;
      }
      next.addAll(env.getReverseDeps(node));
    }
    if (next.isEmpty()) {
      break;
    }
    current=next;
  }
  return visited;
}
