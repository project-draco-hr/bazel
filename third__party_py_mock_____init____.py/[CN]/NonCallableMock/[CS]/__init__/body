def __init__(self, spec=None, wraps=None, name=None, spec_set=None, parent=None, _spec_state=None, _new_name='', _new_parent=None, **kwargs):
    if (_new_parent is None):
        _new_parent = parent
    __dict__ = self.__dict__
    __dict__['_mock_parent'] = parent
    __dict__['_mock_name'] = name
    __dict__['_mock_new_name'] = _new_name
    __dict__['_mock_new_parent'] = _new_parent
    if (spec_set is not None):
        spec = spec_set
        spec_set = True
    self._mock_add_spec(spec, spec_set)
    __dict__['_mock_children'] = {}
    __dict__['_mock_wraps'] = wraps
    __dict__['_mock_delegate'] = None
    __dict__['_mock_called'] = False
    __dict__['_mock_call_args'] = None
    __dict__['_mock_call_count'] = 0
    __dict__['_mock_call_args_list'] = _CallList()
    __dict__['_mock_mock_calls'] = _CallList()
    __dict__['method_calls'] = _CallList()
    if kwargs:
        self.configure_mock(**kwargs)
    _super(NonCallableMock, self).__init__(spec, wraps, name, spec_set, parent, _spec_state)
