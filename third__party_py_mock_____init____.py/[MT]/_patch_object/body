def _patch_object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs):
    '\n    patch.object(target, attribute, new=DEFAULT, spec=None, create=False,\n                 spec_set=None, autospec=None, new_callable=None, **kwargs)\n\n    patch the named member (`attribute`) on an object (`target`) with a mock\n    object.\n\n    `patch.object` can be used as a decorator, class decorator or a context\n    manager. Arguments `new`, `spec`, `create`, `spec_set`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. Like\n    `patch`, `patch.object` takes arbitrary keyword arguments for configuring\n    the mock object it creates.\n\n    When used as a class decorator `patch.object` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    '
    getter = (lambda : target)
    return _patch(getter, attribute, new, spec, create, spec_set, autospec, new_callable, kwargs)
