{
  List<String> targets=optionsParser.getResidue();
  ProjectFile.Provider projectFileProvider=runtime.getProjectFileProvider();
  if (projectFileProvider != null && !targets.isEmpty() && targets.get(0).startsWith(PROJECT_FILE_PREFIX)) {
    if (targets.size() > 1) {
      throw new AbruptExitException("Cannot handle more than one +<file> argument yet",ExitCode.COMMAND_LINE_ERROR);
    }
    if (!optionsParser.getOptions(CommonCommandOptions.class).allowProjectFiles) {
      throw new AbruptExitException("project file support is not enabled",ExitCode.COMMAND_LINE_ERROR);
    }
    PathFragment projectFilePath=new PathFragment(targets.get(0).substring(1));
    List<Path> packagePath=PathPackageLocator.create(runtime.getOutputBase(),optionsParser.getOptions(PackageCacheOptions.class).packagePath,runtime.getReporter(),runtime.getWorkspace(),runtime.getWorkingDirectory()).getPathEntries();
    ProjectFile projectFile=projectFileProvider.getProjectFile(packagePath,projectFilePath);
    runtime.getReporter().handle(Event.info("Using " + projectFile.getName()));
    try {
      optionsParser.parse(OptionPriority.RC_FILE,projectFile.getName(),projectFile.getCommandLineFor(command));
    }
 catch (    OptionsParsingException e) {
      throw new AbruptExitException(e.getMessage(),ExitCode.COMMAND_LINE_ERROR);
    }
    runtime.getEventBus().post(new GotProjectFileEvent(projectFile.getName()));
  }
}
