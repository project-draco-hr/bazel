{
  if (e.getName() == null) {
    throw new IllegalArgumentException("Zip entry name must not be null");
  }
  if (e.getTime() == -1) {
    throw new IllegalArgumentException("Zip entry last modified time must be set");
  }
  if (e.getCrc() == -1) {
    throw new IllegalArgumentException("Zip entry CRC-32 must be set");
  }
  if (e.getSize() == -1) {
    throw new IllegalArgumentException("Zip entry uncompressed size must be set");
  }
  if (e.getCompressedSize() == -1) {
    throw new IllegalArgumentException("Zip entry compressed size must be set");
  }
  if (e.getMethod() == null) {
    throw new IllegalArgumentException("Zip entry compression method must not be null");
  }
  if (e.getVersion() == -1) {
    throw new IllegalArgumentException("Zip entry version made by must be set");
  }
  if (e.getVersionNeeded() == -1) {
    throw new IllegalArgumentException("Zip entry version needed must be set");
  }
  bytesWritten=0;
  entry=e;
  entry.setFlag(Flag.DATA_DESCRIPTOR,false);
  entry.setLocalHeaderOffset(stream.getCount());
  stream.write(LocalFileHeader.create(entry,charset));
}
