{
  int start=token.left;
switch (token.kind) {
case INT:
{
      IntegerLiteral literal=new IntegerLiteral((Integer)token.value);
      setLocation(literal,start,token.right);
      nextToken();
      return literal;
    }
case STRING:
{
    String value=(String)token.value;
    int end=token.right;
    char quoteChar=lexer.charAt(start);
    nextToken();
    if (token.kind == TokenKind.STRING) {
      reportError(lexer.createLocation(end,token.left),"Implicit string concatenation is forbidden, use the + operator");
    }
    StringLiteral literal=new StringLiteral(value,quoteChar);
    setLocation(literal,start,end);
    return literal;
  }
case IDENTIFIER:
{
  Ident ident=parseIdent();
  if (token.kind == TokenKind.LPAREN) {
    return parseFuncallSuffix(start,null,ident);
  }
 else {
    return ident;
  }
}
case LBRACKET:
{
return parseListMaker();
}
case LBRACE:
{
return parseDictExpression();
}
case LPAREN:
{
nextToken();
if (token.kind == TokenKind.RPAREN) {
ListLiteral literal=ListLiteral.makeTuple(Collections.<Expression>emptyList());
setLocation(literal,start,token.right);
nextToken();
return literal;
}
Expression expression=parseExpression();
setLocation(expression,start,token.right);
if (token.kind == TokenKind.RPAREN) {
nextToken();
return expression;
}
expect(TokenKind.RPAREN);
int end=syncTo(EXPR_TERMINATOR_SET);
return makeErrorExpression(start,end);
}
case MINUS:
{
nextToken();
List<Argument.Passed> args=new ArrayList<>();
Expression expr=parsePrimaryWithSuffix();
args.add(setLocation(new Argument.Positional(expr),start,expr));
return makeFuncallExpression(null,new Ident("-"),args,start,token.right);
}
default :
{
syntaxError(token,"expected expression");
int end=syncTo(EXPR_TERMINATOR_SET);
return makeErrorExpression(start,end);
}
}
}
