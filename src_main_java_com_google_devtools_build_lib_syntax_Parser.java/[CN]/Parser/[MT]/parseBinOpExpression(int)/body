{
  int start=token.left;
  Expression expr=parseNonTupleExpression(prec + 1);
  for (; ; ) {
    if (!binaryOperators.containsKey(token.kind)) {
      return expr;
    }
    Operator operator=binaryOperators.get(token.kind);
    if (!operatorPrecedence.get(prec).contains(operator)) {
      return expr;
    }
    nextToken();
    Expression secondary=parseNonTupleExpression(prec + 1);
    expr=optimizeBinOpExpression(operator,expr,secondary);
    setLocation(expr,start,secondary);
  }
}
