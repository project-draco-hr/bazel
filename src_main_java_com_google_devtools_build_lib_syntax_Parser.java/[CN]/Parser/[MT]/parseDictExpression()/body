{
  int start=token.left;
  expect(TokenKind.LBRACE);
  if (token.kind == TokenKind.RBRACE) {
    DictionaryLiteral literal=DictionaryLiteral.emptyDict();
    setLocation(literal,start,token.right);
    nextToken();
    return literal;
  }
  DictionaryEntryLiteral entry=parseDictEntry();
  if (token.kind == TokenKind.FOR) {
    Expression result=parseComprehensionSuffix(new DictComprehension(entry.getKey(),entry.getValue()),TokenKind.RBRACE);
    return setLocation(result,start,token.right);
  }
  List<DictionaryEntryLiteral> entries=new ArrayList<>();
  entries.add(entry);
  if (token.kind == TokenKind.COMMA) {
    expect(TokenKind.COMMA);
    entries.addAll(parseDictEntryList());
  }
  if (token.kind == TokenKind.RBRACE) {
    DictionaryLiteral literal=new DictionaryLiteral(entries);
    setLocation(literal,start,token.right);
    nextToken();
    return literal;
  }
  expect(TokenKind.RBRACE);
  int end=syncPast(DICT_TERMINATOR_SET);
  return makeErrorExpression(start,end);
}
