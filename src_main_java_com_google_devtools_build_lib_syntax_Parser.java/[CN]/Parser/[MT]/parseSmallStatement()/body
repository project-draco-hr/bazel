{
  int start=token.left;
  if (token.kind == TokenKind.RETURN) {
    return parseReturnStatement();
  }
 else   if ((parsingMode == SKYLARK) && (token.kind == TokenKind.BREAK || token.kind == TokenKind.CONTINUE)) {
    return parseFlowStatement(token.kind);
  }
  Expression expression=parseExpression();
  if (token.kind == TokenKind.EQUALS) {
    nextToken();
    Expression rvalue=parseExpression();
    return setLocation(new AssignmentStatement(expression,rvalue),start,rvalue);
  }
 else   if (augmentedAssignmentMethods.containsKey(token.kind)) {
    Operator operator=augmentedAssignmentMethods.get(token.kind);
    nextToken();
    Expression operand=parseExpression();
    int end=operand.getLocation().getEndOffset();
    return setLocation(new AssignmentStatement(expression,setLocation(new BinaryOperatorExpression(operator,expression,operand),start,end)),start,end);
  }
 else {
    return setLocation(new ExpressionStatement(expression),start,expression);
  }
}
