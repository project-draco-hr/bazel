{
  this.name=name;
  this.id=normalize(name);
  this.binaryRules=ImmutableList.copyOf(ruleTypeMap.get(RuleType.BINARY));
  this.libraryRules=ImmutableList.copyOf(ruleTypeMap.get(RuleType.LIBRARY));
  this.testRules=ImmutableList.copyOf(ruleTypeMap.get(RuleType.TEST));
  final ImmutableList<RuleDocumentation> otherRules=ImmutableList.copyOf(ruleTypeMap.get(RuleType.OTHER));
  if (otherRules.size() >= 4) {
    this.otherRules1=ImmutableList.copyOf(otherRules.subList(0,otherRules.size() / 2));
    this.otherRules2=ImmutableList.copyOf(otherRules.subList(otherRules.size() / 2,otherRules.size()));
  }
 else {
    this.otherRules1=otherRules;
    this.otherRules2=ImmutableList.of();
  }
  rules=ImmutableList.<RuleDocumentation>builder().addAll(binaryRules).addAll(libraryRules).addAll(testRules).addAll(otherRules1).addAll(otherRules2).build();
}
