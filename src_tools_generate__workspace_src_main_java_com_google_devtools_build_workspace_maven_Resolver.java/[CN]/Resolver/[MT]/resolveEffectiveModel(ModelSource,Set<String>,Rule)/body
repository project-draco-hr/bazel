{
  DefaultModelBuildingRequest request=new DefaultModelBuildingRequest();
  request.setModelResolver(modelResolver);
  request.setModelSource(modelSource);
  Model model;
  try {
    ModelBuildingResult result=modelBuilder.build(request);
    model=result.getEffectiveModel();
  }
 catch (  ModelBuildingException|IllegalArgumentException e) {
    handler.handle(Event.error("Unable to resolve Maven model from " + modelSource.getLocation() + ": "+ e.getMessage()));
    return null;
  }
  for (  Repository repo : model.getRepositories()) {
    modelResolver.addRepository(repo);
  }
  for (  Dependency dependency : model.getDependencies()) {
    if (!dependency.getScope().equals(COMPILE_SCOPE)) {
      continue;
    }
    if (dependency.isOptional()) {
      continue;
    }
    if (exclusions.contains(dependency.getGroupId() + ":" + dependency.getArtifactId())) {
      continue;
    }
    try {
      Rule artifactRule=new Rule(getArtifact(dependency),dependency.getExclusions());
      HashSet<String> localDepExclusions=new HashSet<>(exclusions);
      localDepExclusions.addAll(artifactRule.getExclusions());
      boolean isNewDependency=addArtifact(artifactRule,model.toString());
      if (isNewDependency) {
        ModelSource depModelSource=modelResolver.resolveModel(dependency.getGroupId(),dependency.getArtifactId(),dependency.getVersion());
        if (depModelSource != null) {
          artifactRule.setRepository(depModelSource.getLocation(),handler);
          artifactRule.setSha1(downloadSha1(artifactRule));
          resolveEffectiveModel(depModelSource,localDepExclusions,artifactRule);
        }
 else {
          handler.handle(Event.error("Could not get a model for " + dependency));
        }
      }
      if (parent != null) {
        parent.addDependency(artifactRule);
        parent.getDependencies().addAll(artifactRule.getDependencies());
      }
 else {
        rootDependencies.add(artifactRule);
      }
    }
 catch (    UnresolvableModelException|InvalidArtifactCoordinateException e) {
      handler.handle(Event.error("Could not resolve dependency " + dependency.getGroupId() + ":"+ dependency.getArtifactId()+ ":"+ dependency.getVersion()+ ": "+ e.getMessage()));
    }
  }
  return model;
}
