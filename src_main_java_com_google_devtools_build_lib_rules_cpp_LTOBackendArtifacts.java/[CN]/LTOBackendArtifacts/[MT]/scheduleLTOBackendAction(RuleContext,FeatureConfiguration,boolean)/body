{
  LTOBackendAction.Builder builder=new LTOBackendAction.Builder();
  builder.addImportsInfo(bitcodeFiles,imports);
  builder.addInput(bitcodeFile);
  builder.addInput(index);
  builder.addTransitiveInputs(CppHelper.getToolchain(ruleContext).getCompile());
  builder.addOutput(objectFile);
  builder.setProgressMessage("LTO Backend Compile " + objectFile.getFilename());
  builder.setMnemonic("CcLtoBackendCompile");
  CppConfiguration cppConfiguration=ruleContext.getFragment(CppConfiguration.class);
  PathFragment compiler=cppConfiguration.getCppExecutable();
  builder.setExecutable(compiler);
  Variables.Builder buildVariablesBuilder=new Variables.Builder();
  buildVariablesBuilder.addVariable("thinlto_index",index.getExecPath().toString());
  buildVariablesBuilder.addVariable("thinlto_output_object_file",objectFile.getExecPath().toString());
  buildVariablesBuilder.addVariable("thinlto_input_bitcode_file",bitcodeFile.getExecPath().toString());
  Variables buildVariables=buildVariablesBuilder.build();
  List<String> execArgs=new ArrayList<>();
  execArgs.addAll(featureConfiguration.getCommandLine("lto-backend",buildVariables));
  if (usePic) {
    execArgs.add("-fPIC");
  }
  execArgs.addAll(commandLine);
  builder.addExecutableArguments(execArgs);
  ruleContext.registerAction(builder.build(ruleContext));
}
