{
  Path libC=temp.newFile("libc.jar").toPath();
  compileLib(libC,Collections.<Path>emptyList(),Arrays.asList(new StringJavaFileObject("C.java","interface C { String getString(); }")));
  Path libA=temp.newFile("liba.jar").toPath();
  compileLib(libA,Collections.singleton(libC),Arrays.asList(new StringJavaFileObject("A.java","interface A { C getC(); }")));
  Path depsA=writedeps("liba.jdeps",Deps.Dependencies.newBuilder().setSuccess(true).setRuleLabel("//lib:a").addDependency(Deps.Dependency.newBuilder().setPath(libC.toString()).setKind(Deps.Dependency.Kind.EXPLICIT)).build());
  Path libB=temp.newFile("libb.jar").toPath();
  compileLib(libB,Collections.<Path>emptyList(),Arrays.asList(new StringJavaFileObject("B.java","interface B {}")));
  optionsBuilder.addClassPathEntries(ImmutableList.of(libA.toString(),libB.toString(),libC.toString()));
  optionsBuilder.addAllDepsArtifacts(ImmutableList.of(depsA.toString()));
  optionsBuilder.addDirectJarToTarget(libA.toString(),JarOwner.create("//lib:a"));
  optionsBuilder.addDirectJarToTarget(libB.toString(),JarOwner.create("//lib:b"));
  optionsBuilder.addIndirectJarToTarget(libC.toString(),JarOwner.create("//lib:c"));
  optionsBuilder.setTargetLabel("//my:target");
  addSourceLines("Hello.java","class Hello {","  public static A a = null;","  public static String s = a.getC().getString();","  public static void main(String[] args) {","    B b = null;","  }","}");
  compile();
  Deps.Dependencies depsProto=getDeps();
  assertThat(depsProto.getSuccess()).isTrue();
  assertThat(depsProto.getRuleLabel()).isEqualTo("//my:target");
  assertThat(getEntries(depsProto)).containsExactlyEntriesIn(ImmutableMap.of(libA.toString(),Deps.Dependency.Kind.EXPLICIT,libB.toString(),Deps.Dependency.Kind.IMPLICIT,libC.toString(),Deps.Dependency.Kind.IMPLICIT));
}
