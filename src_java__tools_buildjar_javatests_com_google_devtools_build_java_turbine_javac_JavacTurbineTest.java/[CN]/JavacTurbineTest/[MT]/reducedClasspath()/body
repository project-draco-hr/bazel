{
  Path libD=temp.newFile("libd.jar").toPath();
  compileLib(libD,Collections.<Path>emptyList(),Arrays.asList(new StringJavaFileObject("D.java","public class D {}")));
  Path libC=temp.newFile("libc.jar").toPath();
  compileLib(libC,Collections.singleton(libD),Arrays.asList(new StringJavaFileObject("C.java","class C { static D d; }")));
  Path libB=temp.newFile("libb.jar").toPath();
  compileLib(libB,Arrays.asList(libC,libD),Arrays.asList(new StringJavaFileObject("B.java","class B { static C c; }")));
  Path libA=temp.newFile("liba.jar").toPath();
  compileLib(libA,Arrays.asList(libB,libC,libD),Arrays.asList(new StringJavaFileObject("A.java","class A { static B b; }")));
  Path depsA=writedeps("liba.jdeps",Deps.Dependencies.newBuilder().setSuccess(true).setRuleLabel("//lib:a").addDependency(Deps.Dependency.newBuilder().setPath(libB.toString()).setKind(Deps.Dependency.Kind.EXPLICIT)).build());
  optionsBuilder.addClassPathEntries(ImmutableList.of(libA.toString(),libB.toString(),libC.toString(),libD.toString()));
  optionsBuilder.addAllDepsArtifacts(ImmutableList.of(depsA.toString()));
  optionsBuilder.addDirectJarToTarget(libA.toString(),JarOwner.create("//lib:a"));
  optionsBuilder.addIndirectJarToTarget(libB.toString(),JarOwner.create("//lib:b"));
  optionsBuilder.addIndirectJarToTarget(libC.toString(),JarOwner.create("//lib:c"));
  optionsBuilder.addIndirectJarToTarget(libD.toString(),JarOwner.create("//lib:d"));
  optionsBuilder.setTargetLabel("//my:target");
  addSourceLines("Hello.java","class Hello {","  public static A a = new A();","  public static void main(String[] args) {","    A a = null;","    B b = null;","    C c = null;","    D d = null;","  }","}");
  optionsBuilder.addSources(ImmutableList.copyOf(Iterables.transform(sources,TO_STRING)));
  try (JavacTurbine turbine=new JavacTurbine(new PrintWriter(System.err),optionsBuilder.build())){
    assertThat(turbine.compile()).isEqualTo(Result.OK_WITH_REDUCED_CLASSPATH);
    Context context=turbine.context;
    JavacFileManager fm=(JavacFileManager)context.get(JavaFileManager.class);
    assertThat(fm.getLocationAsPaths(StandardLocation.CLASS_PATH)).containsExactly(libA,libB);
    Deps.Dependencies depsProto=getDeps();
    assertThat(depsProto.getSuccess()).isTrue();
    assertThat(depsProto.getRuleLabel()).isEqualTo("//my:target");
    assertThat(getEntries(depsProto)).containsExactlyEntriesIn(ImmutableMap.of(libA.toString(),Deps.Dependency.Kind.EXPLICIT,libB.toString(),Deps.Dependency.Kind.INCOMPLETE));
  }
 }
