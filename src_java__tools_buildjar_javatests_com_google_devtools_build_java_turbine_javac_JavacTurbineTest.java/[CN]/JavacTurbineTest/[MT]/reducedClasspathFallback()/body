{
  Path libD=temp.newFile("libd.jar").toPath();
  compileLib(libD,Collections.<Path>emptyList(),Arrays.asList(new StringJavaFileObject("D.java","public class D { static final int CONST = 42; }")));
  Path libC=temp.newFile("libc.jar").toPath();
  compileLib(libC,Collections.singleton(libD),Arrays.asList(new StringJavaFileObject("C.java","class C extends D {}")));
  Path libB=temp.newFile("libb.jar").toPath();
  compileLib(libB,Arrays.asList(libC,libD),Arrays.asList(new StringJavaFileObject("B.java","class B extends C {}")));
  Path libA=temp.newFile("liba.jar").toPath();
  compileLib(libA,Arrays.asList(libB,libC,libD),Arrays.asList(new StringJavaFileObject("A.java","class A extends B {}")));
  Path depsA=writedeps("liba.jdeps",Deps.Dependencies.newBuilder().setSuccess(true).setRuleLabel("//lib:a").addDependency(Deps.Dependency.newBuilder().setPath(libB.toString()).setKind(Deps.Dependency.Kind.EXPLICIT)).build());
  optionsBuilder.addClassPathEntries(ImmutableList.of(libA.toString(),libB.toString(),libC.toString(),libD.toString()));
  optionsBuilder.addAllDepsArtifacts(ImmutableList.of(depsA.toString()));
  optionsBuilder.addDirectJarToTarget(libA.toString(),"//lib:a");
  optionsBuilder.addIndirectJarToTarget(libB.toString(),"//lib:b");
  optionsBuilder.addIndirectJarToTarget(libC.toString(),"//lib:c");
  optionsBuilder.addIndirectJarToTarget(libD.toString(),"//lib:d");
  optionsBuilder.setTargetLabel("//my:target");
  addSourceLines("Hello.java","class Hello {","  public static final int CONST = A.CONST;","  public static void main(String[] args) {}","}");
  optionsBuilder.addSources(ImmutableList.copyOf(Iterables.transform(sources,TO_STRING)));
  try (JavacTurbine turbine=new JavacTurbine(optionsBuilder.build())){
    assertThat(turbine.compile()).isEqualTo(Result.OK_WITH_FULL_CLASSPATH);
    Context context=turbine.context;
    JavacFileManager fm=(JavacFileManager)context.get(JavaFileManager.class);
    assertThat(fm.getLocationAsPaths(StandardLocation.CLASS_PATH)).containsExactly(libA,libB,libC,libD);
    Deps.Dependencies depsProto=getDeps();
    assertThat(depsProto.getSuccess()).isTrue();
    assertThat(depsProto.getRuleLabel()).isEqualTo("//my:target");
    assertThat(getEntries(depsProto)).containsExactlyEntriesIn(ImmutableMap.of(libA.toString(),Deps.Dependency.Kind.EXPLICIT,libB.toString(),Deps.Dependency.Kind.IMPLICIT,libC.toString(),Deps.Dependency.Kind.IMPLICIT,libD.toString(),Deps.Dependency.Kind.IMPLICIT));
  }
 }
