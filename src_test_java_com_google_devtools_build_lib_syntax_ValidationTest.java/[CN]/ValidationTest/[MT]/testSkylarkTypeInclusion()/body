{
  assertThat(SkylarkType.INT.includes(SkylarkType.BOTTOM)).isTrue();
  assertThat(SkylarkType.BOTTOM.includes(SkylarkType.INT)).isFalse();
  assertThat(SkylarkType.TOP.includes(SkylarkType.INT)).isTrue();
  SkylarkType combo1=SkylarkType.Combination.of(SkylarkType.LIST,SkylarkType.INT);
  assertThat(SkylarkType.LIST.includes(combo1)).isTrue();
  SkylarkType union1=SkylarkType.Union.of(SkylarkType.MAP,SkylarkType.LIST,SkylarkType.STRUCT);
  assertThat(union1.includes(SkylarkType.MAP)).isTrue();
  assertThat(union1.includes(SkylarkType.STRUCT)).isTrue();
  assertThat(union1.includes(combo1)).isTrue();
  assertThat(union1.includes(SkylarkType.STRING)).isFalse();
  SkylarkType union2=SkylarkType.Union.of(SkylarkType.LIST,SkylarkType.MAP,SkylarkType.STRING,SkylarkType.INT);
  SkylarkType inter1=SkylarkType.intersection(union1,union2);
  assertThat(inter1.includes(SkylarkType.MAP)).isTrue();
  assertThat(inter1.includes(SkylarkType.LIST)).isTrue();
  assertThat(inter1.includes(combo1)).isTrue();
  assertThat(inter1.includes(SkylarkType.INT)).isFalse();
}
