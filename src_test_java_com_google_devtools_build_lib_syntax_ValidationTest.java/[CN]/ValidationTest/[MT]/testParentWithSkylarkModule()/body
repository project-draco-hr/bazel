{
  Class<?> emptyTupleClass=Tuple.empty().getClass();
  Class<?> tupleClass=Tuple.of(1,"a","b").getClass();
  Class<?> mutableListClass=new MutableList(Tuple.of(1,2,3),env).getClass();
  assertThat(mutableListClass).isEqualTo(MutableList.class);
  assertThat(MutableList.class.isAnnotationPresent(SkylarkModule.class)).isTrue();
  assertThat(EvalUtils.getParentWithSkylarkModule(MutableList.class)).isEqualTo(MutableList.class);
  assertThat(EvalUtils.getParentWithSkylarkModule(emptyTupleClass)).isEqualTo(Tuple.class);
  assertThat(EvalUtils.getParentWithSkylarkModule(tupleClass)).isEqualTo(Tuple.class);
  assertThat(EvalUtils.getParentWithSkylarkModule(tupleClass)).isEqualTo(Tuple.class);
  assertThat(ClassObject.class.isAnnotationPresent(SkylarkModule.class)).isFalse();
  assertThat(SkylarkClassObject.class.isAnnotationPresent(SkylarkModule.class)).isTrue();
  assertThat(EvalUtils.getParentWithSkylarkModule(SkylarkClassObject.class) == SkylarkClassObject.class).isTrue();
  assertThat(EvalUtils.getParentWithSkylarkModule(ClassObject.class)).isNull();
}
