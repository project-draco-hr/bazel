{
  return builder.requiresConfigurationFragments(ObjcConfiguration.class,J2ObjcConfiguration.class,AppleConfiguration.class).setImplicitOutputsFunction(ImplicitOutputsFunction.fromFunctions(ReleaseBundlingSupport.IPA,XcodeSupport.PBXPROJ)).add(attr(IosTest.TARGET_DEVICE,LABEL).allowedFileTypes().allowedRuleClasses("ios_device").value(env.getLabel(Constants.TOOLS_REPOSITORY + "//tools/objc/sim_devices:default"))).add(attr(IosTest.IS_XCTEST,BOOLEAN).value(true)).add(attr(IosTest.XCTEST_APP,LABEL).value(new ComputedDefault(IosTest.IS_XCTEST){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.get(IosTest.IS_XCTEST,Type.BOOLEAN) ? env.getLabel("//tools/objc:xctest_app") : null;
    }
  }
).allowedFileTypes().allowedRuleClasses("objc_binary","ios_application")).override(attr("infoplist",LABEL).value(new ComputedDefault(IosTest.IS_XCTEST){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.get(IosTest.IS_XCTEST,Type.BOOLEAN) ? env.getLabel("//tools/objc:xctest_infoplist") : null;
    }
  }
).allowedFileTypes(ObjcRuleClasses.PLIST_TYPE)).add(attr("ios_test_target_device",LABEL).allowedFileTypes().allowedRuleClasses("ios_lab_device")).add(attr("ios_device_arg",STRING_LIST)).add(attr("plugins",LABEL_LIST).allowedFileTypes(FileType.of("_deploy.jar"))).add(attr("$test_template",LABEL).value(env.getLabel(Constants.TOOLS_REPOSITORY + "//tools/objc:ios_test.sh.bazel_template"))).add(attr("$test_runner",LABEL).value(env.getLabel(Constants.TOOLS_REPOSITORY + "//tools/objc:testrunner"))).add(attr(IosTest.MEMLEAKS_DEP,LABEL).value(env.getLabel(Constants.TOOLS_REPOSITORY + "//tools/objc/memleaks:memleaks"))).add(attr(IosTest.MEMLEAKS_PLUGIN,LABEL).value(env.getLabel(Constants.TOOLS_REPOSITORY + "//tools/objc:memleaks_plugin"))).override(attr(":gcov",LABEL_LIST).cfg(HOST).value(new LateBoundLabelList<BuildConfiguration>(GCOV){
    @Override public List<Label> getDefault(    Rule rule,    BuildConfiguration configuration){
      if (!configuration.isCodeCoverageEnabled()) {
        return ImmutableList.of();
      }
      return GCOV;
    }
  }
)).build();
}
