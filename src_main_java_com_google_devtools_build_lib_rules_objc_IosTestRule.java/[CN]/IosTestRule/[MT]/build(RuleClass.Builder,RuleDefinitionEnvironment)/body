{
  final Label mcov=env.getToolsLabel("//tools/objc:mcov");
  return builder.requiresConfigurationFragments(ObjcConfiguration.class,J2ObjcConfiguration.class,AppleConfiguration.class).setImplicitOutputsFunction(ImplicitOutputsFunction.fromFunctions(ReleaseBundlingSupport.IPA,XcodeSupport.PBXPROJ)).add(attr(IosTest.TARGET_DEVICE,LABEL).allowedFileTypes().allowedRuleClasses("ios_device").value(env.getToolsLabel("//tools/objc/sim_devices:default"))).add(attr(IosTest.IS_XCTEST_ATTR,BOOLEAN).value(true)).add(attr(IosTest.XCTEST_APP_ATTR,LABEL).value(new ComputedDefault(IosTest.IS_XCTEST_ATTR){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.get(IosTest.IS_XCTEST_ATTR,Type.BOOLEAN) ? env.getLabel("//tools/objc:xctest_app") : null;
    }
  }
).allowedFileTypes().allowedRuleClasses("ios_application")).override(attr(BundlingRule.INFOPLIST_ATTR,LABEL).value(new ComputedDefault(IosTest.IS_XCTEST_ATTR){
    @Override public Object getDefault(    AttributeMap rule){
      return rule.get(IosTest.IS_XCTEST_ATTR,Type.BOOLEAN) ? env.getLabel("//tools/objc:xctest_infoplist") : null;
    }
  }
).allowedFileTypes(ObjcRuleClasses.PLIST_TYPE)).add(attr(IosTest.TEST_TARGET_DEVICE_ATTR,LABEL).allowedFileTypes().allowedRuleClasses("ios_lab_device")).add(attr(IosTest.DEVICE_ARG_ATTR,STRING_LIST)).add(attr(IosTest.PLUGINS_ATTR,LABEL_LIST).allowedFileTypes(FileType.of("_deploy.jar"))).add(attr(IosTest.TEST_TEMPLATE_ATTR,LABEL).value(env.getToolsLabel("//tools/objc:ios_test.sh.bazel_template"))).add(attr(IosTest.TEST_RUNNER_ATTR,LABEL).value(env.getToolsLabel("//tools/objc:testrunner"))).add(attr(IosTest.MEMLEAKS_DEP_ATTR,LABEL).value(env.getToolsLabel("//tools/objc/memleaks:memleaks"))).add(attr(IosTest.MEMLEAKS_PLUGIN_ATTR,LABEL).value(env.getToolsLabel("//tools/objc:memleaks_plugin"))).add(attr(IosTest.OBJC_GCOV_ATTR,LABEL).cfg(HOST).value(env.getToolsLabel("//tools/objc:gcov"))).add(attr(IosTest.MCOV_TOOL_ATTR,LABEL).cfg(HOST).value(new LateBoundLabel<BuildConfiguration>(mcov){
    @Override public Label resolve(    Rule rule,    AttributeMap attributes,    BuildConfiguration configuration){
      if (!configuration.isCodeCoverageEnabled()) {
        return null;
      }
      return mcov;
    }
  }
)).build();
}
