{
  Multimap<SkyKey,Map.Entry<Attribute,Dependency>> keysToEntries=LinkedListMultimap.create();
  Map<FragmentsAndTransition,List<BuildOptions>> transitionsMap=new LinkedHashMap<>();
  Set<Class<? extends BuildConfiguration.Fragment>> ctgFragments=ctgValue.getConfiguration().fragmentClasses();
  BuildOptions ctgOptions=ctgValue.getConfiguration().getOptions();
  Multimap<AttributeAndLabel,Dependency> trimmedDeps=ArrayListMultimap.create();
  for (  Map.Entry<Attribute,Dependency> depsEntry : originalDeps.entries()) {
    Dependency dep=depsEntry.getValue();
    AttributeAndLabel attributeAndLabel=new AttributeAndLabel(depsEntry.getKey(),dep.getLabel());
    if (dep.hasStaticConfiguration()) {
      trimmedDeps.put(attributeAndLabel,dep);
      continue;
    }
 else     if (dep.getTransition() == Attribute.ConfigurationTransition.NULL) {
      putOnlyEntry(trimmedDeps,attributeAndLabel,Dependency.withNullConfiguration(dep.getLabel()));
      continue;
    }
    SkyKey fragmentsKey=TransitiveTargetValue.key(dep.getLabel());
    TransitiveTargetValue transitiveDepInfo=(TransitiveTargetValue)env.getValue(fragmentsKey);
    if (transitiveDepInfo == null) {
      return null;
    }
    Set<Class<? extends BuildConfiguration.Fragment>> depFragments=transitiveDepInfo.getTransitiveConfigFragments().toSet();
    checkForMissingFragments(env,ctgValue,attributeAndLabel.attribute.getName(),dep,depFragments);
    boolean sameFragments=depFragments.equals(ctgFragments);
    Attribute.Transition transition=dep.getTransition();
    if (sameFragments) {
      if (transition == Attribute.ConfigurationTransition.NONE) {
        putOnlyEntry(trimmedDeps,attributeAndLabel,Dependency.withConfigurationAndAspects(dep.getLabel(),ctgValue.getConfiguration(),dep.getAspects()));
        continue;
      }
 else       if (transition == HostTransition.INSTANCE) {
        putOnlyEntry(trimmedDeps,attributeAndLabel,Dependency.withConfigurationAndAspects(dep.getLabel(),hostConfiguration,dep.getAspects()));
        continue;
      }
    }
    FragmentsAndTransition transitionKey=new FragmentsAndTransition(depFragments,transition);
    List<BuildOptions> toOptions=transitionsMap.get(transitionKey);
    if (toOptions == null) {
      ImmutableList.Builder<BuildOptions> toOptionsBuilder=ImmutableList.builder();
      for (      BuildOptions options : getDynamicTransitionOptions(ctgOptions,transition)) {
        if (!sameFragments) {
          options=options.trim(BuildConfiguration.getOptionsClasses(transitiveDepInfo.getTransitiveConfigFragments(),ruleClassProvider));
        }
        toOptionsBuilder.add(options);
      }
      toOptions=toOptionsBuilder.build();
      transitionsMap.put(transitionKey,toOptions);
    }
    if (sameFragments && toOptions.size() == 1 && Iterables.getOnlyElement(toOptions).equals(ctgOptions)) {
      putOnlyEntry(trimmedDeps,attributeAndLabel,Dependency.withConfigurationAndAspects(dep.getLabel(),ctgValue.getConfiguration(),dep.getAspects()));
      continue;
    }
    for (    BuildOptions options : toOptions) {
      keysToEntries.put(BuildConfigurationValue.key(depFragments,options),depsEntry);
    }
  }
  Map<SkyKey,ValueOrException<InvalidConfigurationException>> depConfigValues=env.getValuesOrThrow(keysToEntries.keySet(),InvalidConfigurationException.class);
  if (env.valuesMissing()) {
    return null;
  }
  try {
    for (    Map.Entry<SkyKey,ValueOrException<InvalidConfigurationException>> entry : depConfigValues.entrySet()) {
      SkyKey key=entry.getKey();
      BuildConfigurationValue trimmedConfig=(BuildConfigurationValue)entry.getValue().get();
      for (      Map.Entry<Attribute,Dependency> info : keysToEntries.get(key)) {
        Dependency originalDep=info.getValue();
        AttributeAndLabel attr=new AttributeAndLabel(info.getKey(),originalDep.getLabel());
        Dependency resolvedDep=Dependency.withConfigurationAndAspects(originalDep.getLabel(),trimmedConfig.getConfiguration(),originalDep.getAspects());
        if (originalDep.getTransition() instanceof Attribute.SplitTransition) {
          trimmedDeps.put(attr,resolvedDep);
        }
 else {
          putOnlyEntry(trimmedDeps,attr,resolvedDep);
        }
      }
    }
  }
 catch (  InvalidConfigurationException e) {
    throw new DependencyEvaluationException(e);
  }
  ListMultimap<Attribute,Dependency> result=ArrayListMultimap.create();
  for (  Map.Entry<Attribute,Dependency> depsEntry : originalDeps.entries()) {
    Collection<Dependency> trimmedAttrDeps=trimmedDeps.get(new AttributeAndLabel(depsEntry.getKey(),depsEntry.getValue().getLabel()));
    Verify.verify(!trimmedAttrDeps.isEmpty());
    result.putAll(depsEntry.getKey(),trimmedAttrDeps);
  }
  return result;
}
