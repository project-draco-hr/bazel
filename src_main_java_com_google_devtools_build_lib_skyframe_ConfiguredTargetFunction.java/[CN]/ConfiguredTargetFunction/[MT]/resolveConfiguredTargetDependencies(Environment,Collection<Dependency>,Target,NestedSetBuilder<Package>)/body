{
  boolean ok=!env.valuesMissing();
  String message=null;
  Iterable<SkyKey> depKeys=Iterables.transform(deps,TO_KEYS);
  Map<SkyKey,ValueOrException2<NoSuchTargetException,NoSuchPackageException>> depValuesOrExceptions=env.getValuesOrThrow(depKeys,NoSuchTargetException.class,NoSuchPackageException.class);
  Map<SkyKey,ConfiguredTarget> depValues=new HashMap<>(depValuesOrExceptions.size());
  SkyKey childKey=null;
  NoSuchThingException transitiveChildException=null;
  for (  Map.Entry<SkyKey,ValueOrException2<NoSuchTargetException,NoSuchPackageException>> entry : depValuesOrExceptions.entrySet()) {
    ConfiguredTargetKey depKey=(ConfiguredTargetKey)entry.getKey().argument();
    LabelAndConfiguration depLabelAndConfiguration=LabelAndConfiguration.of(depKey.getLabel(),depKey.getConfiguration());
    Label depLabel=depLabelAndConfiguration.getLabel();
    ConfiguredTargetValue depValue=null;
    NoSuchThingException directChildException=null;
    try {
      depValue=(ConfiguredTargetValue)entry.getValue().get();
    }
 catch (    NoSuchTargetException e) {
      if (depLabel.equals(e.getLabel())) {
        directChildException=e;
      }
 else {
        childKey=entry.getKey();
        transitiveChildException=e;
      }
    }
catch (    NoSuchPackageException e) {
      if (depLabel.getPackageIdentifier().equals(e.getPackageId())) {
        directChildException=e;
      }
 else {
        childKey=entry.getKey();
        transitiveChildException=e;
      }
    }
    if (directChildException != null) {
      message=TargetUtils.formatMissingEdge(target,depLabel,directChildException);
      env.getListener().handle(Event.error(TargetUtils.getLocationMaybe(target),message));
    }
    if (depValue == null) {
      ok=false;
    }
 else {
      depValues.put(entry.getKey(),depValue.getConfiguredTarget());
      transitivePackages.addTransitive(depValue.getTransitivePackages());
    }
  }
  if (message != null) {
    throw new DependencyEvaluationException(new NoSuchTargetException(message));
  }
  if (childKey != null) {
    throw new DependencyEvaluationException(childKey,transitiveChildException);
  }
  if (!ok) {
    return null;
  }
 else {
    return depValues;
  }
}
