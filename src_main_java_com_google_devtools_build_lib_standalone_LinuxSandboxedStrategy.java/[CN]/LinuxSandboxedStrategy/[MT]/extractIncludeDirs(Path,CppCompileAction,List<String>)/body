{
  List<PathFragment> includes=new ArrayList<>();
  includes.addAll(cppCompileAction.getQuoteIncludeDirs());
  includes.addAll(cppCompileAction.getIncludeDirs());
  includes.addAll(cppCompileAction.getSystemIncludeDirs());
  PathFragment sourceDirectory=cppCompileAction.getSourceFile().getPath().getParentDirectory().asFragment();
  includes.add(sourceDirectory);
  spawnArguments.add("-iquote");
  spawnArguments.add(sourceDirectory.toString());
  TreeSet<PathFragment> processedIncludes=new TreeSet<>();
  for (int i=0; i < includes.size(); i++) {
    PathFragment absolutePath;
    if (!includes.get(i).isAbsolute()) {
      absolutePath=execPath.getRelative(includes.get(i)).asFragment();
    }
 else {
      absolutePath=includes.get(i);
    }
    if (absolutePath.equals(execPath.asFragment())) {
      String[] subdirs=FilesystemUtils.readdir(absolutePath.toString());
      for (      String dirName : subdirs) {
        if (dirName.equals("_bin") || dirName.equals("bazel-out")) {
          continue;
        }
        PathFragment child=absolutePath.getChild(dirName);
        processedIncludes.add(child);
      }
    }
 else {
      processedIncludes.add(absolutePath);
    }
  }
  String prefix=getSandboxIncludeDir(cppCompileAction).toString();
  for (int i=0; i < spawnArguments.size(); i++) {
    if (spawnArguments.get(i).startsWith("-I")) {
      String argument=spawnArguments.get(i).substring(2);
      spawnArguments.set(i,setIncludeDirSandboxPath(execPath,argument,"-I" + prefix));
    }
    if (spawnArguments.get(i).equals("-iquote") || spawnArguments.get(i).equals("-isystem")) {
      spawnArguments.set(i + 1,setIncludeDirSandboxPath(execPath,spawnArguments.get(i + 1),prefix));
    }
  }
  return ImmutableList.copyOf(processedIncludes);
}
