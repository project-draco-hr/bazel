{
  while (!argumentDeque.isEmpty()) {
    String next=argumentDeque.pollFirst();
switch (next) {
case "--output":
      builder.setOutput(readOne(argumentDeque));
    break;
case "--source_jars":
  builder.setSourceJars(readList(argumentDeque));
break;
case "--temp_dir":
builder.setTempDir(readOne(argumentDeque));
break;
case "--processors":
builder.setProcessors(readList(argumentDeque));
break;
case "--processorpath":
builder.addProcessorPathEntries(splitClasspath(readOne(argumentDeque)));
break;
case "--classpath":
builder.addClassPathEntries(splitClasspath(readOne(argumentDeque)));
break;
case "--bootclasspath":
builder.addBootClassPathEntries(splitClasspath(readOne(argumentDeque)));
break;
case "--javacopts":
builder.addAllJavacOpts(readList(argumentDeque));
break;
case "--sources":
builder.addSources(readList(argumentDeque));
break;
case "--output_deps":
builder.setOutputDeps(readOne(argumentDeque));
break;
case "--direct_dependency":
{
String jar=readOne(argumentDeque);
String target=readOne(argumentDeque);
builder.addDirectJarToTarget(jar,target);
break;
}
case "--indirect_dependency":
{
String jar=readOne(argumentDeque);
String target=readOne(argumentDeque);
builder.addIndirectJarToTarget(jar,target);
break;
}
case "--deps_artifacts":
builder.addAllDepsArtifacts(readList(argumentDeque));
break;
case "--target_label":
builder.setTargetLabel(readOne(argumentDeque));
break;
case "--strict_java_deps":
builder.setStrictJavaDeps(readOne(argumentDeque));
break;
case "--rule_kind":
builder.setRuleKind(readOne(argumentDeque));
break;
default :
if (next.isEmpty() && !argumentDeque.isEmpty()) {
throw new IllegalArgumentException("unknown option: " + next);
}
}
}
}
