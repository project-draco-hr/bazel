{
  scratch.file("test/foo.bzl","foo_provider = provider()","unused_provider = provider()","def _impl(ctx):","    foo = foo_provider()","    return [foo]","foo_rule = rule(","    implementation = _impl,","    attrs = {","       \"srcs\": attr.label_list(allow_files=True),","    }",")");
  scratch.file("test/bar.bzl","load(':foo.bzl', 'unused_provider')","def _impl(ctx):","    dep = ctx.attr.deps[0]","    provider = dep[unused_provider]","bar_rule = rule(","    implementation = _impl,","    attrs = {","       'srcs': attr.label_list(allow_files=True),","       'deps': attr.label_list(allow_files=True),","    }",")");
  scratch.file("test/BUILD","load(':foo.bzl', 'foo_rule')","load(':bar.bzl', 'bar_rule')","foo_rule(name = 'dep_rule')","bar_rule(name = 'my_rule', deps = [':dep_rule'])");
  try {
    getConfiguredTarget("//test:my_rule");
    fail();
  }
 catch (  AssertionError expected) {
    assertThat(expected.getMessage()).contains("Object of type Target doesn't " + "contain declared provider unused_provider");
  }
}
