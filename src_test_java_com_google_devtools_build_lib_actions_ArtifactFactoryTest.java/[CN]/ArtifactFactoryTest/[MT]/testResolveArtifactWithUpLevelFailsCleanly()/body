{
  Map<PackageIdentifier,Root> packageRoots=ImmutableMap.of(PackageIdentifier.createInMainRepo(new PathFragment("")),clientRoot);
  artifactFactory.setPackageRoots(packageRoots);
  PathFragment outsideWorkspace=new PathFragment("../foo");
  PathFragment insideWorkspace=new PathFragment("../" + clientRoot.getPath().getBaseName() + "/foo");
  assertNull(artifactFactory.resolveSourceArtifact(outsideWorkspace,MAIN));
  assertNull("Up-level-containing paths that descend into the right workspace aren't allowed",artifactFactory.resolveSourceArtifact(insideWorkspace,MAIN));
  MockPackageRootResolver packageRootResolver=new MockPackageRootResolver();
  packageRootResolver.setPackageRoots(packageRoots);
  Map<PathFragment,Artifact> result=new HashMap<>();
  result.put(insideWorkspace,null);
  result.put(outsideWorkspace,null);
  assertThat(artifactFactory.resolveSourceArtifacts(ImmutableList.of(insideWorkspace,outsideWorkspace),packageRootResolver).entrySet()).containsExactlyElementsIn(result.entrySet());
}
