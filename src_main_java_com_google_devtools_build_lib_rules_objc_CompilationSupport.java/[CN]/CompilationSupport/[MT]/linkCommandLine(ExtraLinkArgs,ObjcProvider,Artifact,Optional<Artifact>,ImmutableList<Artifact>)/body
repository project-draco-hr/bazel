{
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  CustomCommandLine.Builder commandLine=CustomCommandLine.builder();
  if (objcProvider.is(USES_CPP)) {
    commandLine.addPath(CLANG_PLUSPLUS).add("-stdlib=libc++");
  }
 else {
    commandLine.addPath(CLANG);
  }
  boolean isTestTarget=TargetUtils.isTestRule(ruleContext.getRule());
  if (objcConfiguration.shouldStripBinary() && !isTestTarget) {
    commandLine.add("-dead_strip").add("-no_dead_strip_inits_and_terms");
  }
  commandLine.add(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add("-Xlinker").add("-objc_abi_version").add("-Xlinker").add("2").add("-fobjc-link-runtime").add(IosSdkCommands.DEFAULT_LINKER_FLAGS).addBeforeEach("-framework",frameworkNames(objcProvider)).addBeforeEach("-weak_framework",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK))).addFormatEach("-l%s",libraryNames(objcProvider)).addExecPath("-o",linkedBinary).addExecPaths(objcProvider.get(LIBRARY)).addExecPaths(objcProvider.get(IMPORTED_LIBRARY)).addExecPaths(ccLibraries).addBeforeEach("-force_load",Artifact.toExecPaths(objcProvider.get(FORCE_LOAD_LIBRARY))).add(extraLinkArgs).add(objcProvider.get(ObjcProvider.LINKOPT)).build();
  if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    commandLine.add(LINKER_COVERAGE_FLAGS);
  }
  if (objcProvider.is(USES_SWIFT)) {
    commandLine.add("-L").add(IosSdkCommands.swiftLibDir(objcConfiguration));
  }
  if (objcProvider.is(USES_SWIFT) || objcProvider.is(USES_FRAMEWORKS)) {
    commandLine.add("-Xlinker").add("-rpath").add("-Xlinker").add("@executable_path/Frameworks");
  }
  if (dsymBundle.isPresent()) {
    PathFragment dsymPath=FileSystemUtils.removeExtension(dsymBundle.get().getExecPath());
    commandLine.add("&&").addPath(DSYMUTIL).add(linkedBinary.getExecPathString()).add("-o " + dsymPath).add("&& zipped_bundle=${PWD}/" + dsymBundle.get().getShellEscapedExecPathString()).add("&& cd " + dsymPath).add("&& /usr/bin/zip -q -r \"${zipped_bundle}\" .");
  }
  return new SingleArgCommandLine(commandLine.build());
}
