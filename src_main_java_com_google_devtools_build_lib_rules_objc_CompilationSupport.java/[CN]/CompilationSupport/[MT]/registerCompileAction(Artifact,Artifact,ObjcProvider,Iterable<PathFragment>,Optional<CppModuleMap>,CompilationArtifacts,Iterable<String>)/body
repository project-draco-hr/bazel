{
  boolean isCPlusPlusSource=ObjcRuleClasses.CPP_SOURCES.matches(sourceFile.getExecPath());
  boolean runCodeCoverage=buildConfiguration.isCodeCoverageEnabled() && ObjcRuleClasses.isInstrumentable(sourceFile);
  boolean hasSwiftSources=compilationArtifacts.hasSwiftSources();
  DotdFile dotdFile=intermediateArtifacts.dotdFile(sourceFile);
  CustomCommandLine commandLine=compileActionCommandLine(sourceFile,objFile,objcProvider,priorityHeaders,moduleMap,compilationArtifacts.getPchFile(),Optional.of(dotdFile.artifact()),otherFlags,runCodeCoverage,isCPlusPlusSource,hasSwiftSources);
  Optional<Artifact> gcnoFile=Optional.absent();
  if (runCodeCoverage && !buildConfiguration.isLLVMCoverageMapFormatEnabled()) {
    gcnoFile=Optional.of(intermediateArtifacts.gcnoFile(sourceFile));
  }
  Optional<Artifact> swiftHeader=Optional.absent();
  if (hasSwiftSources) {
    swiftHeader=Optional.of(intermediateArtifacts.swiftHeader());
  }
  NestedSet<Artifact> moduleMapInputs=NestedSetBuilder.emptySet(Order.STABLE_ORDER);
  if (objcConfiguration.moduleMapsEnabled()) {
    moduleMapInputs=objcProvider.get(MODULE_MAP);
  }
  ruleContext.registerAction(ObjcCompileAction.Builder.createObjcCompileActionBuilderWithAppleEnv(appleConfiguration,appleConfiguration.getSingleArchPlatform()).setDotdPruningPlan(objcConfiguration.getDotdPruningPlan()).setSourceFile(sourceFile).addMandatoryInputs(swiftHeader.asSet()).addTransitiveMandatoryInputs(moduleMapInputs).addTransitiveMandatoryInputs(objcProvider.get(STATIC_FRAMEWORK_FILE)).addTransitiveMandatoryInputs(objcProvider.get(DYNAMIC_FRAMEWORK_FILE)).setDotdFile(dotdFile).addInputs(compilationArtifacts.getPrivateHdrs()).addInputs(compilationArtifacts.getPchFile().asSet()).setMnemonic("ObjcCompile").setExecutable(xcrunwrapper(ruleContext)).setCommandLine(commandLine).addOutput(objFile).addOutputs(gcnoFile.asSet()).addOutput(dotdFile.artifact()).addTransitiveInputs(objcProvider.get(HEADER)).build(ruleContext));
}
