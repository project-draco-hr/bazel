{
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  final CustomCommandLine.Builder commandLine=CustomCommandLine.builder();
  if (objcProvider.is(USES_CPP)) {
    commandLine.addPath(CLANG_PLUSPLUS).add("-stdlib=libc++");
  }
 else {
    commandLine.addPath(CLANG);
  }
  commandLine.add(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add("-Xlinker").add("-objc_abi_version").add("-Xlinker").add("2").add("-fobjc-link-runtime").add(IosSdkCommands.DEFAULT_LINKER_FLAGS).addBeforeEach("-framework",frameworkNames(objcProvider)).addBeforeEach("-weak_framework",SdkFramework.names(objcProvider.get(WEAK_SDK_FRAMEWORK))).addExecPath("-o",linkedBinary).addExecPaths(objcProvider.get(LIBRARY)).addExecPaths(objcProvider.get(IMPORTED_LIBRARY)).add(dylibPaths(objcProvider)).addBeforeEach("-force_load",Artifact.toExecPaths(objcProvider.get(FORCE_LOAD_LIBRARY))).add(extraLinkArgs).build();
  if (ruleContext.getConfiguration().isCodeCoverageEnabled()) {
    commandLine.add(LINKER_COVERAGE_FLAGS);
  }
  if (dsymBundle.isPresent()) {
    commandLine.add("&&").addPath(DSYMUTIL).add(linkedBinary.getExecPathString()).addExecPath("-o",dsymBundle.get());
  }
  return new SingleArgCommandLine(commandLine.build());
}
