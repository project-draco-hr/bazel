{
  Optional<Artifact> dsymBundleZip;
  Optional<Artifact> linkmap;
  if (objcConfiguration.generateDebugSymbols() || objcConfiguration.generateDsym()) {
    registerDsymActions(dsymOutputType);
    dsymBundleZip=Optional.of(intermediateArtifacts.tempDsymBundleZip(dsymOutputType));
    if (objcConfiguration.generateDebugSymbols()) {
      registerBreakpadAction(intermediateArtifacts.dsymSymbol(dsymOutputType));
    }
  }
 else {
    dsymBundleZip=Optional.absent();
  }
  Iterable<Artifact> prunedJ2ObjcArchives=ImmutableList.<Artifact>of();
  if (stripJ2ObjcDeadCode(j2ObjcEntryClassProvider)) {
    registerJ2ObjcDeadCodeRemovalActions(objcProvider,j2ObjcMappingFileProvider,j2ObjcEntryClassProvider);
    prunedJ2ObjcArchives=j2objcPrunedLibraries(objcProvider);
  }
  if (objcConfiguration.generateLinkmap()) {
    linkmap=Optional.of(intermediateArtifacts.linkmap());
  }
 else {
    linkmap=Optional.absent();
  }
  registerLinkAction(objcProvider,extraLinkArgs,extraLinkInputs,dsymBundleZip,prunedJ2ObjcArchives,linkmap);
  return this;
}
