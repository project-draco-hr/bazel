{
  ObjcConfiguration objcConfiguration=ObjcRuleClasses.objcConfiguration(ruleContext);
  ImmutableList.Builder<String> coverageFlags=new ImmutableList.Builder<>();
  ImmutableList.Builder<Artifact> gcnoFiles=new ImmutableList.Builder<>();
  ImmutableList.Builder<Artifact> additionalInputs=new ImmutableList.Builder<>();
  if (isCodeCoverageEnabled) {
    coverageFlags.addAll(CLANG_COVERAGE_FLAGS);
    gcnoFiles.add(intermediateArtifacts.gcnoFile(sourceFile));
  }
  CustomCommandLine.Builder commandLine=new CustomCommandLine.Builder();
  if (ObjcRuleClasses.CPP_SOURCES.matches(sourceFile.getExecPath())) {
    commandLine.add("-stdlib=libc++");
  }
  if (ObjcRuleClasses.PREPROCESSED_ASSEMBLY_SOURCES.matches(sourceFile.getExecPath())) {
    commandLine.add("-x").add("assembler-with-cpp");
  }
  if (compilationArtifacts.hasSwiftSources()) {
    commandLine.add("-I");
    commandLine.addPath(intermediateArtifacts.swiftHeader().getExecPath().getParentDirectory());
    additionalInputs.add(intermediateArtifacts.swiftHeader());
  }
  if (objcConfiguration.shouldStripBinary()) {
    commandLine.add("-g");
  }
  commandLine.add(IosSdkCommands.compileFlagsForClang(objcConfiguration)).add(IosSdkCommands.commonLinkAndCompileFlagsForClang(objcProvider,objcConfiguration)).add(objcConfiguration.getCoptsForCompilationMode()).addBeforeEachPath("-iquote",ObjcCommon.userHeaderSearchPaths(ruleContext.getConfiguration())).addBeforeEachExecPath("-include",compilationArtifacts.getPchFile().asSet()).addBeforeEachPath("-I",objcProvider.get(INCLUDE)).add(otherFlags).addFormatEach("-D%s",objcProvider.get(DEFINE)).add(coverageFlags.build()).add(objcConfiguration.getCopts()).add(attributes.copts()).add(attributes.optionsCopts()).addExecPath("-c",sourceFile).addExecPath("-o",objFile);
  ruleContext.registerAction(ObjcRuleClasses.spawnOnDarwinActionBuilder().setMnemonic("ObjcCompile").setExecutable(CLANG).setCommandLine(commandLine.build()).addInput(sourceFile).addInputs(additionalInputs.build()).addOutput(objFile).addOutputs(gcnoFiles.build()).addTransitiveInputs(objcProvider.get(HEADER)).addTransitiveInputs(objcProvider.get(FRAMEWORK_FILE)).addInputs(compilationArtifacts.getPchFile().asSet()).build(ruleContext));
}
