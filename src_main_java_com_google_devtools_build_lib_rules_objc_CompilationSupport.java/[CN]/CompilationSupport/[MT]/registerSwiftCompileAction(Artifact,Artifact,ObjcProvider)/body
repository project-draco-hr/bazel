{
  ImmutableSet.Builder<Artifact> otherSwiftSourcesBuilder=ImmutableSet.builder();
  for (  Artifact otherSourceFile : compilationArtifacts(ruleContext).getSrcs()) {
    if (ObjcRuleClasses.SWIFT_SOURCES.matches(otherSourceFile.getFilename()) && otherSourceFile != sourceFile) {
      otherSwiftSourcesBuilder.add(otherSourceFile);
    }
  }
  ImmutableSet<Artifact> otherSwiftSources=otherSwiftSourcesBuilder.build();
  CustomCommandLine.Builder commandLine=new CustomCommandLine.Builder().add(SWIFT).add("-frontend").add("-emit-object").add("-target").add(swiftTarget(appleConfiguration)).add("-sdk").add(AppleToolchain.sdkDir()).add("-enable-objc-interop").add(objcConfiguration.getSwiftCoptsForCompilationMode());
  if (objcConfiguration.generateDsym()) {
    commandLine.add("-g");
  }
  commandLine.add("-module-name").add(getModuleName()).add("-parse-as-library");
  addSource("-primary-file",commandLine,sourceFile).addExecPaths(otherSwiftSources).addExecPath("-o",objFile).addExecPath("-emit-module-path",intermediateArtifacts.swiftModuleFile(sourceFile)).add("-Xcc").add("-I.");
  for (  PathFragment directory : objcProvider.get(INCLUDE).toList()) {
    commandLine.add("-Xcc").add(String.format("-I%s",directory.toString()));
  }
  ImmutableList.Builder<Artifact> inputHeaders=ImmutableList.<Artifact>builder().addAll(attributes.hdrs()).addAll(attributes.textualHdrs());
  Optional<Artifact> bridgingHeader=attributes.bridgingHeader();
  if (bridgingHeader.isPresent()) {
    commandLine.addExecPath("-import-objc-header",bridgingHeader.get());
    inputHeaders.add(bridgingHeader.get());
  }
  if (objcConfiguration.moduleMapsEnabled()) {
    PathFragment moduleMapPath=intermediateArtifacts.moduleMap().getArtifact().getExecPath();
    commandLine.add("-I").add(moduleMapPath.getParentDirectory().toString());
    commandLine.add("-import-underlying-module");
  }
  commandLine.add(commonFrameworkFlags(objcProvider,appleConfiguration));
  ruleContext.registerAction(ObjcRuleClasses.spawnAppleEnvActionBuilder(appleConfiguration,appleConfiguration.getSingleArchPlatform()).setMnemonic("SwiftCompile").setExecutable(xcrunwrapper(ruleContext)).setCommandLine(commandLine.build()).addInput(sourceFile).addInputs(otherSwiftSources).addInputs(inputHeaders.build()).addTransitiveInputs(objcProvider.get(HEADER)).addTransitiveInputs(objcProvider.get(MODULE_MAP)).addOutput(objFile).addOutput(intermediateArtifacts.swiftModuleFile(sourceFile)).build(ruleContext));
}
