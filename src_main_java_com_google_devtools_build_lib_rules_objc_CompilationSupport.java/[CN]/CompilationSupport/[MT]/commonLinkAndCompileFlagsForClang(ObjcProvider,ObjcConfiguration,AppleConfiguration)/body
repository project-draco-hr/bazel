{
  ImmutableList.Builder<String> builder=new ImmutableList.Builder<>();
  Platform platform=appleConfiguration.getSingleArchPlatform();
switch (platform) {
case IOS_SIMULATOR:
    builder.add("-mios-simulator-version-min=" + objcConfiguration.getMinimumOsForPlatformType(platform.getType()));
  break;
case IOS_DEVICE:
builder.add("-miphoneos-version-min=" + objcConfiguration.getMinimumOsForPlatformType(platform.getType()));
break;
case WATCHOS_SIMULATOR:
builder.add("-mwatchos-simulator-version-min=" + appleConfiguration.getSdkVersionForPlatform(platform));
break;
case WATCHOS_DEVICE:
builder.add("-mwatchos-version-min=" + appleConfiguration.getSdkVersionForPlatform(platform));
break;
case TVOS_SIMULATOR:
builder.add("-mtvos-simulator-version-min=" + objcConfiguration.getMinimumOsForPlatformType(platform.getType()));
break;
case TVOS_DEVICE:
builder.add("-mtvos-version-min=" + objcConfiguration.getMinimumOsForPlatformType(platform.getType()));
break;
default :
throw new IllegalArgumentException("Unhandled platform " + platform);
}
if (objcConfiguration.generateDsym()) {
builder.add("-g");
}
return builder.add("-arch",appleConfiguration.getSingleArchitecture()).add("-isysroot",AppleToolchain.sdkDir()).addAll(commonFrameworkFlags(provider,appleConfiguration)).build();
}
