{
  J2ObjcSrcsProvider provider=J2ObjcSrcsProvider.buildFrom(ruleContext);
  Iterable<J2ObjcSource> j2ObjcSources=provider.getSrcs();
  J2ObjcConfiguration j2objcConfiguration=ruleContext.getFragment(J2ObjcConfiguration.class);
  boolean stripJ2ObjcDeadCode=j2objcConfiguration.removeDeadCode() && !provider.getEntryClasses().isEmpty();
  if (stripJ2ObjcDeadCode) {
    registerJ2ObjcDeadCodeRemovalActions(j2ObjcSources,provider.getEntryClasses());
  }
  for (  J2ObjcSource j2ObjcSource : j2ObjcSources) {
    if (j2ObjcSource.hasSourceFiles()) {
      J2ObjcSource sourceToCompile=j2ObjcSource.getSourceType() == SourceType.JAVA && stripJ2ObjcDeadCode ? j2ObjcSource.toPrunedSource(ruleContext) : j2ObjcSource;
      IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.j2objcIntermediateArtifacts(ruleContext,sourceToCompile);
      CompilationArtifacts compilationArtifact=new CompilationArtifacts.Builder().addNonArcSrcs(sourceToCompile.getObjcSrcs()).setIntermediateArtifacts(intermediateArtifacts).setPchFile(Optional.<Artifact>absent()).build();
      Optional<CppModuleMap> moduleMap;
      if (ObjcRuleClasses.objcConfiguration(ruleContext).moduleMapsEnabled()) {
        moduleMap=Optional.of(ObjcRuleClasses.intermediateArtifacts(ruleContext).moduleMap());
      }
 else {
        moduleMap=Optional.absent();
      }
      registerCompileAndArchiveActions(compilationArtifact,intermediateArtifacts,objcProvider.toJ2ObjcOnlyProvider(),moduleMap,ruleContext.getConfiguration().isCodeCoverageEnabled(),false);
    }
  }
  return this;
}
