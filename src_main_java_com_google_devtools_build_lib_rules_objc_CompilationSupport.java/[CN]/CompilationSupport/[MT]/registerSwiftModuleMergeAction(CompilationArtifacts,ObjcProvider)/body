{
  ImmutableList.Builder<Artifact> moduleFiles=new ImmutableList.Builder<>();
  for (  Artifact src : compilationArtifacts.getSrcs()) {
    if (ObjcRuleClasses.SWIFT_SOURCES.matches(src.getFilename())) {
      moduleFiles.add(intermediateArtifacts.swiftModuleFile(src));
    }
  }
  CustomCommandLine.Builder commandLine=new CustomCommandLine.Builder().add(SWIFT).add("-frontend").add("-emit-module").add("-sdk").add(AppleToolchain.sdkDir()).add("-target").add(swiftTarget(appleConfiguration)).add(objcConfiguration.getSwiftCoptsForCompilationMode());
  if (objcConfiguration.generateDebugSymbols() || objcConfiguration.generateDsym()) {
    commandLine.add("-g");
  }
  commandLine.add("-module-name").add(getModuleName()).add("-parse-as-library").addExecPaths(moduleFiles.build()).addExecPath("-o",intermediateArtifacts.swiftModule()).addExecPath("-emit-objc-header-path",intermediateArtifacts.swiftHeader()).add("-Xcc").add("-I.");
  for (  PathFragment directory : objcProvider.get(INCLUDE).toList()) {
    commandLine.add("-Xcc").add(String.format("-I%s",directory.toString()));
  }
  if (objcConfiguration.moduleMapsEnabled()) {
    PathFragment moduleMapPath=intermediateArtifacts.moduleMap().getArtifact().getExecPath();
    commandLine.add("-I").add(moduleMapPath.getParentDirectory().toString());
  }
  commandLine.add(commonFrameworkFlags(objcProvider,appleConfiguration));
  ruleContext.registerAction(ObjcRuleClasses.spawnAppleEnvActionBuilder(ruleContext,appleConfiguration.getSingleArchPlatform()).setMnemonic("SwiftModuleMerge").setExecutable(xcrunwrapper(ruleContext)).setCommandLine(commandLine.build()).addInputs(moduleFiles.build()).addTransitiveInputs(objcProvider.get(HEADER)).addTransitiveInputs(objcProvider.get(MODULE_MAP)).addOutput(intermediateArtifacts.swiftModule()).addOutput(intermediateArtifacts.swiftHeader()).build(ruleContext));
}
