{
  Artifact tempDsymBundleZip=intermediateArtifacts.tempDsymBundleZip(dsymOutputType);
  Artifact linkedBinary=objcConfiguration.shouldStripBinary() ? intermediateArtifacts.unstrippedSingleArchitectureBinary() : intermediateArtifacts.strippedSingleArchitectureBinary();
  Artifact debugSymbolFile=intermediateArtifacts.dsymSymbol(dsymOutputType);
  Artifact dsymPlist=intermediateArtifacts.dsymPlist(dsymOutputType);
  PathFragment dsymOutputDir=removeSuffix(tempDsymBundleZip.getExecPath(),".temp.zip");
  PathFragment dsymPlistZipEntry=dsymPlist.getExecPath().relativeTo(dsymOutputDir);
  PathFragment debugSymbolFileZipEntry=debugSymbolFile.getExecPath().replaceName(linkedBinary.getFilename()).relativeTo(dsymOutputDir);
  StringBuilder unzipDsymCommand=new StringBuilder().append(String.format("unzip -p %s %s > %s",tempDsymBundleZip.getExecPathString(),dsymPlistZipEntry,dsymPlist.getExecPathString())).append(String.format(" && unzip -p %s %s > %s",tempDsymBundleZip.getExecPathString(),debugSymbolFileZipEntry,debugSymbolFile.getExecPathString()));
  ruleContext.registerAction(new SpawnAction.Builder().setMnemonic("UnzipDsym").setShellCommand(unzipDsymCommand.toString()).addInput(tempDsymBundleZip).addOutput(dsymPlist).addOutput(debugSymbolFile).build(ruleContext));
  return this;
}
