{
  IntermediateArtifacts intermediateArtifacts=ObjcRuleClasses.intermediateArtifacts(ruleContext);
  Optional<Artifact> dsymBundle;
  Optional<Artifact> linkmap;
  if (ObjcRuleClasses.objcConfiguration(ruleContext).generateDebugSymbols()) {
    registerDsymActions();
    dsymBundle=Optional.of(intermediateArtifacts.dsymBundle());
  }
 else {
    dsymBundle=Optional.absent();
  }
  Iterable<Artifact> prunedJ2ObjcArchives=ImmutableList.<Artifact>of();
  if (stripJ2ObjcDeadCode()) {
    J2ObjcEntryClassProvider provider=J2ObjcEntryClassProvider.buildFrom(ruleContext);
    registerJ2ObjcDeadCodeRemovalActions(objcProvider,provider.getEntryClasses());
    prunedJ2ObjcArchives=j2objcPrunedLibraries(objcProvider);
  }
  if (ObjcRuleClasses.objcConfiguration(ruleContext).generateLinkmap()) {
    linkmap=Optional.of(intermediateArtifacts.linkmap());
  }
 else {
    linkmap=Optional.absent();
  }
  registerLinkAction(objcProvider,extraLinkArgs,extraLinkInputs,dsymBundle,prunedJ2ObjcArchives,linkmap);
  return this;
}
