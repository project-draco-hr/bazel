{
  Artifact actionInput=createSourceArtifact("foo/action-input.txt");
  Artifact actionOutput=createDerivedArtifact("foo/action-output.txt");
  AtomicInteger executionCounter=new AtomicInteger(0);
  scratch.file(actionInput.getPath().getPathString(),"foo");
  Action action=actionFactory.create(actionInput,actionOutput,executionCounter);
  registerAction(action);
  builder.buildArtifacts(reporter,ImmutableSet.of(actionOutput),null,null,null,null,executor,null,false,null,null);
  SkyKey actionKey=ActionExecutionValue.key(action);
  TrackingEvaluationProgressReceiver.EvaluatedEntry evaluatedAction=progressReceiver.getEvalutedEntry(actionKey);
  assertThat(evaluatedAction).isNotNull();
  SkyValue actionValue=evaluatedAction.value;
  maybeChangeFile(actionInput,changeActionInput);
  betweenBuilds.call();
  progressReceiver.reset();
  builder.buildArtifacts(reporter,ImmutableSet.of(actionOutput),null,null,null,null,executor,null,false,null,null);
  if (expectActionIs.dirtied()) {
    assertThat(progressReceiver.wasInvalidated(actionKey)).isTrue();
    TrackingEvaluationProgressReceiver.EvaluatedEntry newEntry=progressReceiver.getEvalutedEntry(actionKey);
    assertThat(newEntry).isNotNull();
    if (expectActionIs.actuallyClean()) {
      assertThat(newEntry.state).isEqualTo(EvaluationState.CLEAN);
      assertThat(newEntry.value).isEqualTo(actionValue);
    }
 else {
      assertThat(newEntry.state).isEqualTo(EvaluationState.BUILT);
      assertThat(newEntry.value).isNotEqualTo(actionValue);
    }
  }
 else {
    assertThat(progressReceiver.wasInvalidated(actionKey)).isFalse();
  }
  assertThat(executionCounter.get()).isEqualTo(expectActionIs.reexecuted() ? 2 : 1);
}
