def GetMessages(self, files):
    'Gets all the messages from a specified file.\n\n    This will find and resolve dependencies, failing if the descriptor\n    pool cannot satisfy them.\n\n    Args:\n      files: The file names to extract messages from.\n\n    Returns:\n      A dictionary mapping proto names to the message classes. This will include\n      any dependent messages as well as any messages defined in the same file as\n      a specified message.\n    '
    result = {}
    for file_name in files:
        file_desc = self.pool.FindFileByName(file_name)
        for (name, msg) in file_desc.message_types_by_name.items():
            if file_desc.package:
                full_name = '.'.join([file_desc.package, name])
            else:
                full_name = msg.name
            result[full_name] = self.GetPrototype(self.pool.FindMessageTypeByName(full_name))
        for (name, extension) in file_desc.extensions_by_name.items():
            if (extension.containing_type.full_name not in self._classes):
                self.GetPrototype(extension.containing_type)
            extended_class = self._classes[extension.containing_type.full_name]
            extended_class.RegisterExtension(extension)
    return result
