{
  JavaTargetAttributes.Builder attributesBuilder=common.initCommon();
  JavaCompilationHelper helper=new JavaCompilationHelper(ruleContext,semantics,common.getJavacOpts(),attributesBuilder);
  helper.addLibrariesToAttributes(common.targetsTreatedAsDeps(ClasspathType.COMPILE_ONLY));
  if (ruleContext.hasErrors()) {
    return null;
  }
  semantics.checkRule(ruleContext,common);
  JavaCompilationArtifacts.Builder javaArtifactsBuilder=new JavaCompilationArtifacts.Builder();
  if (ruleContext.hasErrors()) {
    common.setJavaCompilationArtifacts(JavaCompilationArtifacts.EMPTY);
    return null;
  }
  JavaConfiguration javaConfig=ruleContext.getFragment(JavaConfiguration.class);
  NestedSetBuilder<Artifact> filesBuilder=NestedSetBuilder.stableOrder();
  JavaTargetAttributes attributes=helper.getAttributes();
  if (attributes.hasMessages()) {
    helper.setTranslations(semantics.translate(ruleContext,javaConfig,attributes.getMessages()));
  }
  ruleContext.checkSrcsSamePackage(true);
  Artifact jar=null;
  Artifact srcJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_LIBRARY_SOURCE_JAR);
  Artifact classJar=ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_LIBRARY_CLASS_JAR);
  if (attributes.hasSourceFiles() || attributes.hasSourceJars() || attributes.hasResources()|| attributes.hasMessages()) {
    javaArtifactsBuilder.addRuntimeJar(classJar);
    jar=classJar;
  }
  filesBuilder.add(classJar);
  Artifact manifestProtoOutput=helper.createManifestProtoOutput(classJar);
  Artifact genSourceJar=null;
  Artifact genClassJar=null;
  if (helper.usesAnnotationProcessing()) {
    genClassJar=helper.createGenJar(classJar);
    genSourceJar=helper.createGensrcJar(classJar);
    helper.createGenJarAction(classJar,manifestProtoOutput,genClassJar);
  }
  Artifact outputDepsProto=helper.createOutputDepsProtoArtifact(classJar,javaArtifactsBuilder);
  helper.createCompileActionWithInstrumentation(classJar,manifestProtoOutput,genSourceJar,outputDepsProto,javaArtifactsBuilder);
  helper.createSourceJarAction(srcJar,genSourceJar);
  Artifact iJar=null;
  if ((attributes.hasSourceFiles() || attributes.hasSourceJars()) && jar != null) {
    iJar=helper.createCompileTimeJarAction(jar,javaArtifactsBuilder);
  }
  boolean neverLink=JavaCommon.isNeverLink(ruleContext);
  JavaCompilationArtifacts javaArtifacts=javaArtifactsBuilder.build();
  common.setJavaCompilationArtifacts(javaArtifacts);
  common.setClassPathFragment(new ClasspathConfiguredFragment(javaArtifacts,attributes,neverLink,helper.getBootclasspathOrDefault()));
  CppCompilationContext transitiveCppDeps=common.collectTransitiveCppDeps();
  NestedSet<Artifact> transitiveSourceJars=common.collectTransitiveSourceJars(srcJar);
  JavaCompilationArgs javaCompilationArgs=common.collectJavaCompilationArgs(false,neverLink,false);
  JavaCompilationArgs recursiveJavaCompilationArgs=common.collectJavaCompilationArgs(true,neverLink,false);
  NestedSet<Artifact> compileTimeJavaDepArtifacts=common.collectCompileTimeDependencyArtifacts(javaArtifacts.getCompileTimeDependencyArtifact());
  NestedSet<Artifact> runTimeJavaDepArtifacts=NestedSetBuilder.emptySet(Order.STABLE_ORDER);
  NestedSet<LinkerInput> transitiveJavaNativeLibraries=common.collectTransitiveJavaNativeLibraries();
  CcLinkParamsStore ccLinkParamsStore=new CcLinkParamsStore(){
    @Override protected void collect(    CcLinkParams.Builder builder,    boolean linkingStatically,    boolean linkShared){
      builder.addTransitiveTargets(common.targetsTreatedAsDeps(ClasspathType.BOTH),JavaCcLinkParamsProvider.TO_LINK_PARAMS,CcLinkParamsProvider.TO_LINK_PARAMS);
    }
  }
;
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  semantics.addProviders(ruleContext,common,ImmutableList.<String>of(),classJar,srcJar,genClassJar,genSourceJar,ImmutableMap.<Artifact,Artifact>of(),filesBuilder,builder);
  NestedSet<Artifact> filesToBuild=filesBuilder.build();
  common.addTransitiveInfoProviders(builder,filesToBuild,classJar);
  common.addGenJarsProvider(builder,genClassJar,genSourceJar);
  NestedSet<Artifact> proguardSpecs=new ProguardLibrary(ruleContext).collectProguardSpecs();
  builder.add(JavaRuleOutputJarsProvider.class,JavaRuleOutputJarsProvider.builder().addOutputJar(classJar,iJar,srcJar).setJdeps(outputDepsProto).build()).add(JavaRuntimeJarProvider.class,new JavaRuntimeJarProvider(javaArtifacts.getRuntimeJars())).add(RunfilesProvider.class,RunfilesProvider.simple(JavaCommon.getRunfiles(ruleContext,semantics,javaArtifacts,neverLink))).setFilesToBuild(filesToBuild).add(JavaNeverlinkInfoProvider.class,new JavaNeverlinkInfoProvider(neverLink)).add(CppCompilationContext.class,transitiveCppDeps).add(JavaCompilationArgsProvider.class,JavaCompilationArgsProvider.create(javaCompilationArgs,recursiveJavaCompilationArgs,compileTimeJavaDepArtifacts,runTimeJavaDepArtifacts)).add(CcLinkParamsProvider.class,new CcLinkParamsProvider(ccLinkParamsStore)).add(JavaNativeLibraryProvider.class,new JavaNativeLibraryProvider(transitiveJavaNativeLibraries)).add(JavaSourceInfoProvider.class,JavaSourceInfoProvider.fromJavaTargetAttributes(attributes,semantics)).add(JavaSourceJarsProvider.class,JavaSourceJarsProvider.create(transitiveSourceJars,ImmutableList.of(srcJar))).add(JavaPluginInfoProvider.class,JavaCommon.getTransitivePlugins(ruleContext)).add(ProguardSpecProvider.class,new ProguardSpecProvider(proguardSpecs)).addOutputGroup(JavaSemantics.SOURCE_JARS_OUTPUT_GROUP,transitiveSourceJars).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,proguardSpecs);
  if (ruleContext.hasErrors()) {
    return null;
  }
  return builder;
}
