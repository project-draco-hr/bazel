{
  createFileSystem(outputs);
  List<String> fileArgs=new ArrayList<>();
  List<String> commandLineArgs=new ArrayList<>();
  commandLineArgs.add(execRoot.getRelative("_bin/linux-sandbox").getPathString());
  if (sandboxDebug) {
    fileArgs.add("-D");
  }
  fileArgs.add("-S");
  fileArgs.add(sandboxPath.getPathString());
  fileArgs.add("-W");
  fileArgs.add(cwd.toString());
  if (timeout != -1) {
    fileArgs.add("-T");
    fileArgs.add(Integer.toString(timeout));
  }
  for (  Path createDir : createDirs) {
    fileArgs.add("-d");
    fileArgs.add(createDir.getPathString());
  }
  if (blockNetwork) {
    fileArgs.add("-n");
  }
  for (  ImmutableMap.Entry<Path,Path> mount : mounts.entrySet()) {
    fileArgs.add("-M");
    fileArgs.add(mount.getValue().getPathString());
    if (!mount.getValue().equals(mount.getKey())) {
      fileArgs.add("-m");
      fileArgs.add(mount.getKey().getPathString());
    }
  }
  FileSystemUtils.writeLinesAs(argumentsFilePath,StandardCharsets.ISO_8859_1,fileArgs);
  commandLineArgs.add("@" + argumentsFilePath.getPathString());
  commandLineArgs.add("--");
  commandLineArgs.addAll(spawnArguments);
  Command cmd=new Command(commandLineArgs.toArray(new String[0]),env,cwd);
  try {
    cmd.execute(new byte[]{},Command.NO_OBSERVER,outErr.getOutputStream(),outErr.getErrorStream(),true);
  }
 catch (  CommandException e) {
    boolean timedOut=false;
    if (e instanceof AbnormalTerminationException) {
      TerminationStatus status=((AbnormalTerminationException)e).getResult().getTerminationStatus();
      timedOut=!status.exited() && (status.getTerminatingSignal() == 14);
    }
    String message=CommandFailureUtils.describeCommandFailure(verboseFailures,commandLineArgs,env,cwd.getPath());
    String finalMsg=(sandboxDebug && verboseFailures) ? SANDBOX_TIP + message : message;
    throw new UserExecException(finalMsg,e,timedOut);
  }
 finally {
    copyOutputs(outputs);
  }
}
