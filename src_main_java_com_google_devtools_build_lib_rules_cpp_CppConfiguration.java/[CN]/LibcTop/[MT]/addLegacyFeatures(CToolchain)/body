{
  CToolchain.Builder toolchainBuilder=CToolchain.newBuilder();
  toolchainBuilder.mergeFrom(toolchain);
  Set<ArtifactCategory> definedCategories=new HashSet<>();
  for (  ArtifactNamePattern pattern : toolchainBuilder.getArtifactNamePatternList()) {
    try {
      definedCategories.add(ArtifactCategory.valueOf(pattern.getCategoryName().toUpperCase()));
    }
 catch (    IllegalArgumentException e) {
      continue;
    }
  }
  for (  ArtifactCategory category : ArtifactCategory.values()) {
    if (!definedCategories.contains(category) && category.getDefaultPattern() != null) {
      toolchainBuilder.addArtifactNamePattern(ArtifactNamePattern.newBuilder().setCategoryName(category.toString().toLowerCase()).setPattern(category.getDefaultPattern()).build());
    }
  }
  ImmutableSet.Builder<String> featuresBuilder=ImmutableSet.builder();
  for (  CToolchain.Feature feature : toolchain.getFeatureList()) {
    featuresBuilder.add(feature.getName());
  }
  Set<String> features=featuresBuilder.build();
  if (features.contains(CppRuleClasses.NO_LEGACY_FEATURES)) {
    return toolchainBuilder.build();
  }
  try {
    if (!linkActionsAreConfigured(toolchain)) {
      if (getTargetLibc().equals("macosx")) {
        TextFormat.merge(CppLinkActionConfigs.getCppLinkActionConfigs(CppLinkPlatform.MAC),toolchainBuilder);
      }
 else {
        TextFormat.merge(CppLinkActionConfigs.getCppLinkActionConfigs(CppLinkPlatform.LINUX),toolchainBuilder);
      }
    }
    if (!features.contains("dependency_file")) {
      TextFormat.merge("" + "feature {" + "  name: 'dependency_file'"+ "  flag_set {"+ "    action: 'assemble'"+ "    action: 'preprocess-assemble'"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-module-compile'"+ "    action: 'objc-compile'"+ "    action: 'objc++-compile'"+ "    action: 'c++-header-preprocessing'"+ "    action: 'c++-header-parsing'"+ "    expand_if_all_available: 'dependency_file'"+ "    flag_group {"+ "      flag: '-MD'"+ "      flag: '-MF'"+ "      flag: '%{dependency_file}'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("random_seed")) {
      TextFormat.merge("" + "feature {" + "  name: 'random_seed'"+ "  flag_set {"+ "    action: 'c++-compile'"+ "    action: 'c++-module-compile'"+ "    flag_group {"+ "      flag: '-frandom-seed=%{output_file}'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("pic")) {
      TextFormat.merge("" + "feature {" + "  name: 'pic'"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-module-compile'"+ "    action: 'preprocess-assemble'"+ "    expand_if_all_available: 'pic'"+ "    flag_group {"+ "      flag: '-fPIC'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("per_object_debug_info")) {
      TextFormat.merge("" + "feature {" + "  name: 'per_object_debug_info'"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'assemble'"+ "    action: 'preprocess-assemble'"+ "    expand_if_all_available: 'per_object_debug_info_file'"+ "    flag_group {"+ "      flag: '-gsplit-dwarf'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("preprocessor_defines")) {
      TextFormat.merge("" + "feature {" + "  name: 'preprocessor_defines'"+ "  flag_set {"+ "    action: 'preprocess-assemble'"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-header-parsing'"+ "    action: 'c++-header-preprocessing'"+ "    action: 'c++-module-compile'"+ "    flag_group {"+ "      flag: '-D%{preprocessor_defines}'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("include_paths")) {
      TextFormat.merge("" + "feature {" + "  name: 'include_paths'"+ "  flag_set {"+ "    action: 'preprocess-assemble'"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-header-parsing'"+ "    action: 'c++-header-preprocessing'"+ "    action: 'c++-module-compile'"+ "    action: 'objc-compile'"+ "    action: 'objc++-compile'"+ "    flag_group {"+ "      flag: '-iquote'"+ "      flag: '%{quote_include_paths}'"+ "    }"+ "    flag_group {"+ "      flag: '-I%{include_paths}'"+ "    }"+ "    flag_group {"+ "      flag: '-isystem'"+ "      flag: '%{system_include_paths}'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("fdo_instrument")) {
      TextFormat.merge("" + "feature {" + "  name: 'fdo_instrument'"+ "  provides: 'profile'"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-link-interface-dynamic-library'"+ "    action: 'c++-link-dynamic-library'"+ "    action: 'c++-link-executable'"+ "    flag_group {"+ "      flag: '-fprofile-generate=%{fdo_instrument_path}'"+ "      flag: '-fno-data-sections'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("fdo_optimize")) {
      TextFormat.merge("" + "feature {" + "  name: 'fdo_optimize'"+ "  provides: 'profile'"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    expand_if_all_available: 'fdo_profile_path'"+ "    flag_group {"+ "      flag: '-fprofile-use=%{fdo_profile_path}'"+ "      flag: '-Xclang-only=-Wno-profile-instr-unprofiled'"+ "      flag: '-Xclang-only=-Wno-profile-instr-out-of-date'"+ "      flag: '-fprofile-correction'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("autofdo")) {
      TextFormat.merge("" + "feature {" + "  name: 'autofdo'"+ "  provides: 'profile'"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    expand_if_all_available: 'fdo_profile_path'"+ "    flag_group {"+ "      flag: '-fauto-profile=%{fdo_profile_path}'"+ "      flag: '-fprofile-correction'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("lipo")) {
      TextFormat.merge("" + "feature {" + "  name: 'lipo'"+ "  requires { feature: 'autofdo' }"+ "  requires { feature: 'fdo_optimize' }"+ "  requires { feature: 'fdo_instrument' }"+ "  flag_set {"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    flag_group {"+ "      flag: '-fripa'"+ "    }"+ "  }"+ "}",toolchainBuilder);
    }
    if (!features.contains("coverage")) {
      String compileFlags;
      String linkerFlags;
      if (useLLVMCoverageMap) {
        compileFlags="flag_group {" + " flag: '-fprofile-instr-generate'" + " flag: '-fcoverage-mapping'"+ "}";
        linkerFlags="  flag_group {" + "  flag: '-fprofile-instr-generate'" + "}";
      }
 else {
        compileFlags="  expand_if_all_available: 'gcov_gcno_file'" + "flag_group {" + "  flag: '-fprofile-arcs'"+ "  flag: '-ftest-coverage'"+ "}";
        linkerFlags="  flag_group {" + "  flag: '-lgcov'" + "}";
      }
      TextFormat.merge("" + "feature {" + "  name: 'coverage'"+ "  provides: 'profile'"+ "  flag_set {"+ "    action: 'preprocess-assemble'"+ "    action: 'c-compile'"+ "    action: 'c++-compile'"+ "    action: 'c++-header-parsing'"+ "    action: 'c++-header-preprocessing'"+ "    action: 'c++-module-compile'" + compileFlags + "  }"+ "  flag_set {"+ "    action: 'c++-link-interface-dynamic-library'"+ "    action: 'c++-link-dynamic-library'"+ "    action: 'c++-link-executable'"+ linkerFlags+ "  }"+ "}",toolchainBuilder);
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
  return toolchainBuilder.build();
}
