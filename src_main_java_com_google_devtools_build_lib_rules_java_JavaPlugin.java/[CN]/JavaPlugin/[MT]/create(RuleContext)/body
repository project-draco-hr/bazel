{
  JavaLibrary javaLibrary=new JavaLibrary(semantics);
  JavaCommon common=new JavaCommon(ruleContext,semantics);
  RuleConfiguredTargetBuilder builder=javaLibrary.init(ruleContext,common);
  if (builder == null) {
    return null;
  }
  ImmutableSet<String> processorClasses=getProcessorClasses(ruleContext);
  NestedSet<Artifact> processorClasspath=common.getRuntimeClasspath();
  ImmutableSet<String> apiGeneratingProcessorClasses;
  NestedSet<Artifact> apiGeneratingProcessorClasspath;
  if (ruleContext.attributes().get("generates_api",Type.BOOLEAN)) {
    apiGeneratingProcessorClasses=processorClasses;
    apiGeneratingProcessorClasspath=processorClasspath;
  }
 else {
    apiGeneratingProcessorClasses=ImmutableSet.of();
    apiGeneratingProcessorClasspath=NestedSetBuilder.emptySet(Order.NAIVE_LINK_ORDER);
  }
  builder.add(JavaPluginInfoProvider.class,new JavaPluginInfoProvider(processorClasses,processorClasspath,apiGeneratingProcessorClasses,apiGeneratingProcessorClasspath));
  return builder.build();
}
