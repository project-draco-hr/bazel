{
  PackageIdentifier packageId=ruleContext.getLabel().getPackageIdentifier();
  PackageIdentifier itemPackageId=source.getOwner().getPackageIdentifier();
  if (!itemPackageId.equals(packageId)) {
    return null;
  }
  Artifact output=ruleContext.getRelatedArtifact(source.getRootRelativePath(),".pyc");
  SpawnAction.Builder builder=new SpawnAction.Builder().setResources(PY_COMPILE_RESOURCE_SET).setExecutable(pythonBinary).setProgressMessage("Compiling Python " + source.prettyPrint()).addInputArgument(ruleContext.getPrerequisiteArtifact(pythonPrecompileAttribute,Mode.HOST)).setMnemonic("PyCompile");
  TransitiveInfoCollection pythonTarget=ruleContext.getPrerequisite(hostPython2RuntimeAttribute,Mode.HOST);
  if (pythonTarget != null) {
    builder.addTransitiveInputs(pythonTarget.getProvider(FileProvider.class).getFilesToBuild());
  }
  builder.addInputArgument(source);
  builder.addOutputArgument(output);
  ruleContext.registerAction(builder.build(ruleContext));
  return output;
}
