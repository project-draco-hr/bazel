{
  ObjcProvider.Builder applicationObjcProviderBuilder=new ObjcProvider.Builder();
  ObjcProvider.Builder extensionObjcProviderBuilder=new ObjcProvider.Builder();
  ObjcProvider.Builder exposedObjcProviderBuilder=new ObjcProvider.Builder();
  XcodeProvider.Builder applicationXcodeProviderBuilder=new XcodeProvider.Builder();
  XcodeProvider.Builder extensionXcodeProviderBuilder=new XcodeProvider.Builder();
  NestedSetBuilder<Artifact> applicationFilesToBuild=NestedSetBuilder.stableOrder();
  NestedSetBuilder<Artifact> extensionfilesToBuild=NestedSetBuilder.stableOrder();
  createWatchApplicationBundle(ruleContext,applicationXcodeProviderBuilder,applicationObjcProviderBuilder,applicationFilesToBuild,exposedObjcProviderBuilder);
  createWatchExtensionBundle(ruleContext,extensionXcodeProviderBuilder,applicationXcodeProviderBuilder,extensionObjcProviderBuilder,extensionfilesToBuild);
  registerWatchApplicationUnBundlingAction(ruleContext);
  RuleConfiguredTargetBuilder targetBuilder=ObjcRuleClasses.ruleConfiguredTarget(ruleContext,extensionfilesToBuild.build()).addProvider(XcodeProvider.class,extensionXcodeProviderBuilder.build()).addProvider(InstrumentedFilesProvider.class,InstrumentedFilesCollector.forward(ruleContext,"binary"));
  exposeObjcProvider(ruleContext,targetBuilder,exposedObjcProviderBuilder);
  return targetBuilder.build();
}
