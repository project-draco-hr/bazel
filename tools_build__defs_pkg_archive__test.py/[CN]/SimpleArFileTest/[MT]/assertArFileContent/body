def assertArFileContent(self, arfile, content):
    'Assert that arfile contains exactly the entry described by `content`.\n\n    Args:\n        arfile: the path to the AR file to test.\n        content: an array describing the expected content of the AR file.\n            Each entry in that list should be a dictionary where each field\n            is a field to test in the corresponding SimpleArFileEntry. For\n            testing the presence of a file "x", then the entry could simply\n            be `{"filename": "x"}`, the missing field will be ignored.\n    '
    with archive.SimpleArFile(arfile) as f:
        current = f.next()
        i = 0
        while current:
            error_msg = ('Extraneous file at end of archive %s: %s' % (arfile, current.filename))
            self.assertTrue((i < len(content)), error_msg)
            for (k, v) in content[i].items():
                value = getattr(current, k)
                error_msg = ' '.join([('Value `%s` for key `%s` of file' % (value, k)), ('%s in archive %s does' % (current.filename, arfile)), ('not match expected value `%s`' % v)])
                self.assertEqual(value, v, error_msg)
            current = f.next()
            i += 1
        if (i < len(content)):
            self.fail(('Missing file %s in archive %s' % (content[i], arfile)))
