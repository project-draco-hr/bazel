{
  ResourceType type=getResourceType(element);
  if (type == ResourceType.ATTR) {
    return;
  }
  Resource resource=getResource(element);
  if (resource != null) {
    if (resource.type == ResourceType.DECLARE_STYLEABLE || resource.type == ResourceType.ATTR) {
      return;
    }
    if (!resource.reachable && (resource.type == ResourceType.STYLE || resource.type == ResourceType.PLURALS || resource.type == ResourceType.ARRAY)) {
      NodeList children=element.getChildNodes();
      for (int i=children.getLength() - 1; i >= 0; i--) {
        Node child=children.item(i);
        element.removeChild(child);
      }
      return;
    }
  }
  NodeList children=element.getChildNodes();
  for (int i=children.getLength() - 1; i >= 0; i--) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      stripUnused((Element)child,removed);
    }
  }
  if (resource != null && !resource.reachable) {
    removed.add(resource.getUrl());
    String name=element.getAttribute(ATTR_NAME);
    if (name.isEmpty()) {
      name=resource.name;
    }
    Node nextSibling=element.getNextSibling();
    Node parent=element.getParentNode();
    NodeList oldChildren=element.getChildNodes();
    parent.removeChild(element);
    Document document=element.getOwnerDocument();
    element=document.createElement("item");
    for (int i=0; i < oldChildren.getLength(); i++) {
      element.appendChild(oldChildren.item(i));
    }
    element.setAttribute(ATTR_NAME,name);
    element.setAttribute(ATTR_TYPE,resource.type.getName());
    String text=null;
switch (resource.type) {
case BOOL:
      text="true";
    break;
case DIMEN:
  text="0dp";
break;
case INTEGER:
text="0";
break;
}
element.setTextContent(text);
parent.insertBefore(element,nextSibling);
}
}
