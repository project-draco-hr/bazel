{
  final String pathSeparator=configuration.getHostPathSeparator();
  List<String> jcopts=new ArrayList<>(javacOpts);
  JavaConfiguration javaConfiguration=configuration.getFragment(JavaConfiguration.class);
  if (!javaConfiguration.getJavaWarns().isEmpty()) {
    jcopts.add("-Xlint:" + Joiner.on(',').join(javaConfiguration.getJavaWarns()));
  }
  if (!bootclasspathEntries.isEmpty()) {
    jcopts.add("-bootclasspath");
    jcopts.add(Artifact.joinExecPaths(pathSeparator,bootclasspathEntries));
  }
  final List<String> internedJcopts=new ArrayList<>();
  for (  String jcopt : jcopts) {
    internedJcopts.add(StringCanonicalizer.intern(jcopt));
  }
  if (strictJavaDeps == BuildConfiguration.StrictDepsMode.OFF) {
    directJars=NestedSetBuilder.emptySet(Order.NAIVE_LINK_ORDER);
    compileTimeDependencyArtifacts.clear();
  }
  if (javaConfiguration.getReduceJavaClasspath() == JavaClasspathMode.OFF) {
    compileTimeDependencyArtifacts.clear();
  }
  if (paramFile == null) {
    paramFile=artifactFactory.create(ParameterFile.derivePath(outputJar.getRootRelativePath()),configuration.getBinDirectory(targetLabel.getPackageIdentifier().getRepository()));
  }
  Iterable<Artifact> baseInputs=ImmutableIterable.from(Iterables.concat(processorPath,translations,resources.values(),sourceJars,sourceFiles,classpathResources,javabaseInputs,bootclasspathEntries,extdirInputs));
  Preconditions.checkState(javaExecutable != null,owner);
  Preconditions.checkState(javaExecutable.isAbsolute() ^ !javabaseInputs.isEmpty(),javaExecutable);
  ArrayList<Artifact> outputs=new ArrayList<>(Collections2.filter(Arrays.asList(outputJar,metadata,gensrcOutputJar,manifestProtoOutput,outputDepsProto),Predicates.notNull()));
  CustomMultiArgv commonJavaBuilderArgs=commonJavaBuilderArgs(semantics,classDirectory,sourceGenDirectory,tempDirectory,outputJar,gensrcOutputJar,manifestProtoOutput,compressJar,outputDepsProto,processorPath,processorNames,translations,resources,classpathResources,sourceJars,sourceFiles,extdirInputs,internedJcopts,ruleKind,targetLabel,pathSeparator);
  CustomCommandLine.Builder paramFileContentsBuilder=javaCompileCommandLine(commonJavaBuilderArgs,configuration,classDirectory,classpathEntries,directJars,strictJavaDeps,compileTimeDependencyArtifacts);
  semantics.buildJavaCommandLine(outputs,configuration,paramFileContentsBuilder,targetLabel);
  CommandLine paramFileContents=paramFileContentsBuilder.build();
  Action parameterFileWriteAction=new ParameterFileWriteAction(owner,paramFile,paramFileContents,ParameterFile.ParameterFileType.UNQUOTED,ISO_8859_1);
  analysisEnvironment.registerAction(parameterFileWriteAction);
  CustomMultiArgv spawnCommandLineBase=spawnCommandLineBase(javaExecutable,javaBuilderJar,langtoolsJar,instrumentationJars,javacJvmOpts,semantics.getJavaBuilderMainClass(),pathSeparator);
  CommandLine javaBuilderCommandLine=CustomCommandLine.builder().add(spawnCommandLineBase).addPaths("@%s",paramFile.getExecPath()).build();
  NestedSet<Artifact> tools=NestedSetBuilder.<Artifact>stableOrder().add(langtoolsJar).add(javaBuilderJar).addAll(instrumentationJars).build();
  CommandLine minimumCommandLineBase=null;
  if (javaConfiguration.getReduceJavaClasspath() == JavaClasspathMode.EXPERIMENTAL_BLAZE) {
    minimumCommandLineBase=CustomCommandLine.builder().add(spawnCommandLineBase).add(commonJavaBuilderArgs).build();
  }
  return new JavaCompileAction(owner,tools,baseInputs,outputs,paramFile,paramFileContents,javaBuilderCommandLine,classDirectory,outputJar,classpathEntries,bootclasspathEntries,extdirInputs,processorPath,processorNames,resources,sourceJars,sourceFiles,internedJcopts,directJars,executionInfo,strictJavaDeps,compileTimeDependencyArtifacts,minimumCommandLineBase,pathSeparator,resources.size() + classpathResources.size() + translations.size());
}
