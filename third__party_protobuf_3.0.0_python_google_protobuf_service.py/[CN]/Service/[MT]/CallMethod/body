def CallMethod(self, method_descriptor, rpc_controller, request, done):
    'Calls a method of the service specified by method_descriptor.\n\n    If "done" is None then the call is blocking and the response\n    message will be returned directly.  Otherwise the call is asynchronous\n    and "done" will later be called with the response value.\n\n    In the blocking case, RpcException will be raised on error.\n\n    Preconditions:\n    * method_descriptor.service == GetDescriptor\n    * request is of the exact same classes as returned by\n      GetRequestClass(method).\n    * After the call has started, the request must not be modified.\n    * "rpc_controller" is of the correct type for the RPC implementation being\n      used by this Service.  For stubs, the "correct type" depends on the\n      RpcChannel which the stub is using.\n\n    Postconditions:\n    * "done" will be called when the method is complete.  This may be\n      before CallMethod() returns or it may be at some point in the future.\n    * If the RPC failed, the response value passed to "done" will be None.\n      Further details about the failure can be found by querying the\n      RpcController.\n    '
    raise NotImplementedError
