{
  Target prerequisiteTarget=prerequisite.getTarget();
  Label prerequisiteLabel=prerequisiteTarget.getLabel();
  PackageIdentifier thatPackage=prerequisiteLabel.getPackageIdentifier();
  PackageIdentifier thisPackage=rule.getLabel().getPackageIdentifier();
  if (prerequisiteTarget instanceof Rule) {
    Rule prerequisiteRule=(Rule)prerequisiteTarget;
    String thisDeprecation=NonconfigurableAttributeMapper.of(rule).get("deprecation",Type.STRING);
    String thatDeprecation=NonconfigurableAttributeMapper.of(prerequisiteRule).get("deprecation",Type.STRING);
    if (shouldEmitDeprecationWarningFor(thisDeprecation,thisPackage,thatDeprecation,thatPackage)) {
      errors.ruleWarning("target '" + rule.getLabel() + "' depends on deprecated target '"+ prerequisiteLabel+ "': "+ thatDeprecation);
    }
  }
  if (prerequisiteTarget instanceof OutputFile) {
    Rule generatingRule=((OutputFile)prerequisiteTarget).getGeneratingRule();
    String thisDeprecation=NonconfigurableAttributeMapper.of(rule).get("deprecation",Type.STRING);
    String thatDeprecation=NonconfigurableAttributeMapper.of(generatingRule).get("deprecation",Type.STRING);
    if (shouldEmitDeprecationWarningFor(thisDeprecation,thisPackage,thatDeprecation,thatPackage)) {
      errors.ruleWarning("target '" + rule.getLabel() + "' depends on the output file "+ prerequisiteLabel+ " of a deprecated rule "+ generatingRule.getLabel()+ "': "+ thatDeprecation);
    }
  }
}
