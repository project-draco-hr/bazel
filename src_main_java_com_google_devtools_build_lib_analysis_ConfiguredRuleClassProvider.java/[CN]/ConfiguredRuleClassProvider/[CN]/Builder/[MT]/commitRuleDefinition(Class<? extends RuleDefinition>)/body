{
  RuleDefinition instance=checkNotNull(ruleDefinitionInstanceCache.get(definitionClass),"addRuleDefinition(new %s()) should be called before build()",definitionClass.getName());
  RuleDefinition.Metadata metadata=instance.getMetadata();
  checkArgument(ruleClassMap.get(metadata.name()) == null,metadata.name());
  List<Class<? extends RuleDefinition>> ancestors=metadata.ancestors();
  checkArgument(metadata.type() == ABSTRACT ^ metadata.factoryClass() != RuleConfiguredTargetFactory.class);
  checkArgument((metadata.type() != TEST) || ancestors.contains(BaseRuleClasses.TestBaseRule.class));
  RuleClass[] ancestorClasses=new RuleClass[ancestors.size()];
  for (int i=0; i < ancestorClasses.length; i++) {
    ancestorClasses[i]=ruleMap.get(ancestors.get(i));
    if (ancestorClasses[i] == null) {
      throw new IllegalStateException("Ancestor " + ancestors.get(i) + " of "+ metadata.name()+ " is not initialized");
    }
  }
  RuleConfiguredTargetFactory factory=null;
  if (metadata.type() != ABSTRACT) {
    factory=createFactory(metadata.factoryClass());
  }
  RuleClass.Builder builder=new RuleClass.Builder(metadata.name(),metadata.type(),false,ancestorClasses);
  builder.factory(factory);
  RuleClass ruleClass=instance.build(builder,this);
  ruleMap.put(definitionClass,ruleClass);
  ruleClassMap.put(ruleClass.getName(),ruleClass);
  ruleDefinitionMap.put(ruleClass.getName(),definitionClass);
  return ruleClass;
}
