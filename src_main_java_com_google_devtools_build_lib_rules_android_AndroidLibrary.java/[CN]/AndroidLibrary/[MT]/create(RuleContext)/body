{
  JavaSemantics javaSemantics=createJavaSemantics();
  AndroidSemantics androidSemantics=createAndroidSemantics();
  if (!AndroidSdkProvider.verifyPresence(ruleContext)) {
    return null;
  }
  checkResourceInlining(ruleContext);
  NestedSetBuilder<Aar> transitiveAars=collectTransitiveAars(ruleContext);
  NestedSet<LinkerInput> transitiveNativeLibraries=AndroidCommon.collectTransitiveNativeLibraries(AndroidCommon.collectTransitiveInfo(ruleContext,Mode.TARGET));
  NestedSet<Artifact> transitiveProguardConfigs=new ProguardLibrary(ruleContext).collectProguardSpecs();
  JavaCommon javaCommon=new JavaCommon(ruleContext,javaSemantics);
  javaSemantics.checkRule(ruleContext,javaCommon);
  AndroidCommon androidCommon=new AndroidCommon(javaCommon);
  boolean definesLocalResources=LocalResourceContainer.definesAndroidResources(ruleContext.attributes());
  if (definesLocalResources) {
    LocalResourceContainer.validateRuleContext(ruleContext);
  }
  final ResourceApk resourceApk;
  if (definesLocalResources) {
    ApplicationManifest applicationManifest=androidSemantics.getManifestForRule(ruleContext).renamePackage(ruleContext,AndroidCommon.getJavaPackage(ruleContext));
    resourceApk=applicationManifest.packWithDataAndResources(null,ruleContext,true,ResourceDependencies.fromRuleDeps(ruleContext,JavaCommon.isNeverLink(ruleContext)),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_SYMBOLS_TXT),ImmutableList.<String>of(),ImmutableList.<String>of(),false,ImmutableList.<String>of(),false,null,null,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_PROCESSED_MANIFEST),null);
    if (ruleContext.hasErrors()) {
      return null;
    }
  }
 else {
    resourceApk=ResourceApk.fromTransitiveResources(ResourceDependencies.fromRuleResourceAndDeps(ruleContext,false));
  }
  if (!ruleContext.getFragment(AndroidConfiguration.class).allowSrcsLessAndroidLibraryDeps() && !definesLocalResources && ruleContext.attributes().get("srcs",BuildType.LABEL_LIST).isEmpty()&& ruleContext.attributes().get("idl_srcs",BuildType.LABEL_LIST).isEmpty()&& !ruleContext.attributes().get("deps",BuildType.LABEL_LIST).isEmpty()) {
    ruleContext.attributeError("deps","deps not allowed without srcs; move to exports?");
  }
  JavaTargetAttributes javaTargetAttributes=androidCommon.init(javaSemantics,androidSemantics,resourceApk,false,true,false);
  if (javaTargetAttributes == null) {
    return null;
  }
  Artifact classesJar=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_CLASS_JAR);
  Artifact aarOut=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_AAR);
  final ResourceContainer primaryResources;
  final Aar aar;
  if (definesLocalResources) {
    primaryResources=resourceApk.getPrimaryResource();
    ApplicationManifest applicationManifest=androidSemantics.getManifestForRule(ruleContext);
    aar=new Aar(aarOut,applicationManifest.getManifest());
    transitiveAars.add(aar);
  }
 else   if (AndroidCommon.getAndroidResources(ruleContext) != null) {
    primaryResources=Iterables.getOnlyElement(AndroidCommon.getAndroidResources(ruleContext).getDirectAndroidResources());
    aar=new Aar(aarOut,primaryResources.getManifest());
    transitiveAars.add(aar);
  }
 else {
    aar=null;
    ApplicationManifest applicationManifest=ApplicationManifest.generatedManifest(ruleContext).renamePackage(ruleContext,AndroidCommon.getJavaPackage(ruleContext));
    String javaPackage=AndroidCommon.getJavaPackage(ruleContext);
    ResourceContainer resourceContainer=new ResourceContainer(ruleContext.getLabel(),javaPackage,null,false,null,applicationManifest.getManifest(),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_JAVA_SOURCE_JAR),ImmutableList.<Artifact>of(),ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),ImmutableList.<PathFragment>of(),ruleContext.attributes().get("exports_manifest",Type.BOOLEAN),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),null);
    primaryResources=new AndroidResourcesProcessorBuilder(ruleContext).setLibrary(true).setRTxtOut(resourceContainer.getRTxt()).setManifestOut(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_PROCESSED_MANIFEST)).setSourceJarOut(resourceContainer.getJavaSourceJar()).setJavaPackage(resourceContainer.getJavaPackage()).withPrimary(resourceContainer).withDependencies(resourceApk.getResourceDependencies()).setDebug(ruleContext.getConfiguration().getCompilationMode() != CompilationMode.OPT).build(ruleContext);
  }
  new AarGeneratorBuilder(ruleContext).withPrimary(primaryResources).withManifest(aar != null ? aar.getManifest() : primaryResources.getManifest()).withRtxt(primaryResources.getRTxt()).withClasses(classesJar).setAAROut(aarOut).build(ruleContext);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  androidCommon.addTransitiveInfoProviders(builder,androidSemantics,resourceApk,null,ImmutableList.<Artifact>of());
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,null);
  NestedSetBuilder<Artifact> transitiveResourcesJars=collectTransitiveResourceJars(ruleContext);
  if (androidCommon.getResourceClassJar() != null) {
    transitiveResourcesJars.add(androidCommon.getResourceClassJar());
  }
  builder.add(AndroidNativeLibraryProvider.class,new AndroidNativeLibraryProvider(transitiveNativeLibraries)).add(JavaNeverlinkInfoProvider.class,new JavaNeverlinkInfoProvider(androidCommon.isNeverLink())).add(JavaSourceInfoProvider.class,JavaSourceInfoProvider.fromJavaTargetAttributes(javaTargetAttributes,javaSemantics)).add(JavaSourceJarsProvider.class,androidCommon.getJavaSourceJarsProvider()).add(AndroidCcLinkParamsProvider.class,new AndroidCcLinkParamsProvider(androidCommon.getCcLinkParamsStore())).add(JavaPluginInfoProvider.class,JavaCommon.getTransitivePlugins(ruleContext)).add(ProguardSpecProvider.class,new ProguardSpecProvider(transitiveProguardConfigs)).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,transitiveProguardConfigs).add(AndroidLibraryResourceClassJarProvider.class,new AndroidLibraryResourceClassJarProvider(transitiveResourcesJars.build()));
  if (!JavaCommon.isNeverLink(ruleContext)) {
    builder.add(AndroidLibraryAarProvider.class,new AndroidLibraryAarProvider(aar,transitiveAars.build()));
  }
  return builder.build();
}
