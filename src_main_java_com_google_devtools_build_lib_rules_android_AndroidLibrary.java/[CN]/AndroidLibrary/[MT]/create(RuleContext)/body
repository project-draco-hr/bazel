{
  JavaSemantics javaSemantics=createJavaSemantics();
  AndroidSemantics androidSemantics=createAndroidSemantics();
  if (!AndroidSdkProvider.verifyPresence(ruleContext)) {
    return null;
  }
  List<? extends TransitiveInfoCollection> deps=ruleContext.getPrerequisites("deps",Mode.TARGET);
  checkResourceInlining(ruleContext);
  checkIdlRootImport(ruleContext);
  NestedSet<AndroidResourcesProvider.ResourceContainer> transitiveResources=AndroidCommon.getTransitiveResourceContainers(ruleContext,true);
  NestedSetBuilder<Aar> transitiveAars=collectTransitiveAars(ruleContext);
  NestedSet<LinkerInput> transitiveNativeLibraries=AndroidCommon.collectTransitiveNativeLibraries(deps);
  NestedSet<Artifact> transitiveProguardConfigs=collectTransitiveProguardConfigs(ruleContext);
  AndroidIdlProvider transitiveIdlImportData=collectTransitiveIdlImports(ruleContext);
  if (LocalResourceContainer.definesAndroidResources(ruleContext.attributes())) {
    try {
      if (!LocalResourceContainer.validateRuleContext(ruleContext)) {
        throw new RuleConfigurationException();
      }
      JavaCommon javaCommon=new JavaCommon(ruleContext,javaSemantics);
      AndroidCommon androidCommon=new AndroidCommon(ruleContext,javaCommon);
      ApplicationManifest applicationManifest=androidSemantics.getManifestForRule(ruleContext);
      ResourceApk resourceApk=applicationManifest.packWithDataAndResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK),ruleContext,transitiveResources,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_SYMBOLS_TXT),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),null,null,null,false,null);
      JavaTargetAttributes javaTargetAttributes=androidCommon.init(javaSemantics,androidSemantics,resourceApk,transitiveIdlImportData,false,true,AndroidRuleClasses.ANDROID_LIBRARY_GEN_JAR);
      if (javaTargetAttributes == null) {
        return null;
      }
      Artifact classesJar=mergeJarsFromSrcs(ruleContext,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_CLASS_JAR));
      Artifact aarOut=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_AAR);
      new AarGeneratorBuilder(ruleContext).withPrimary(resourceApk.getPrimaryResource()).withManifest(resourceApk.getPrimaryResource().getManifest()).withRtxt(resourceApk.getPrimaryResource().getRTxt()).withClasses(classesJar).strictResourceMerging().setAAROut(aarOut).build(ruleContext);
      Aar aar=new Aar(aarOut,applicationManifest.getManifest());
      RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
      androidCommon.addTransitiveInfoProviders(builder);
      androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,null,resourceApk,null,ImmutableList.<Artifact>of());
      return builder.add(AndroidNativeLibraryProvider.class,new AndroidNativeLibraryProvider(transitiveNativeLibraries)).add(JavaSourceJarsProvider.class,new JavaSourceJarsProvider(androidCommon.getTransitiveSourceJars(),androidCommon.getTopLevelSourceJars())).addSkylarkTransitiveInfo(JavaSkylarkApiProvider.NAME,new JavaSkylarkApiProvider()).add(JavaNeverlinkInfoProvider.class,new JavaNeverlinkInfoProvider(androidCommon.isNeverLink())).add(AndroidCcLinkParamsProvider.class,new AndroidCcLinkParamsProvider(androidCommon.getCcLinkParamsStore())).add(ProguardSpecProvider.class,new ProguardSpecProvider(transitiveProguardConfigs)).add(AndroidLibraryAarProvider.class,new AndroidLibraryAarProvider(aar,transitiveAars.add(aar).build())).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,transitiveProguardConfigs).build();
    }
 catch (    RuleConfigurationException e) {
      return null;
    }
  }
 else {
    JavaCommon javaCommon=new JavaCommon(ruleContext,javaSemantics);
    AndroidCommon androidCommon=new AndroidCommon(ruleContext,javaCommon);
    ResourceApk resourceApk=ResourceApk.fromTransitiveResources(transitiveResources);
    JavaTargetAttributes javaTargetAttributes=androidCommon.init(javaSemantics,androidSemantics,resourceApk,transitiveIdlImportData,false,true,AndroidRuleClasses.ANDROID_LIBRARY_GEN_JAR);
    if (javaTargetAttributes == null) {
      return null;
    }
    RuleConfiguredTargetBuilder targetBuilder=androidCommon.addTransitiveInfoProviders(new RuleConfiguredTargetBuilder(ruleContext));
    androidSemantics.addTransitiveInfoProviders(targetBuilder,ruleContext,javaCommon,androidCommon,null,null,null,ImmutableList.<Artifact>of());
    targetBuilder.add(AndroidNativeLibraryProvider.class,new AndroidNativeLibraryProvider(transitiveNativeLibraries)).add(JavaSourceJarsProvider.class,androidCommon.getJavaSourceJarsProvider()).add(AndroidCcLinkParamsProvider.class,new AndroidCcLinkParamsProvider(androidCommon.getCcLinkParamsStore())).addSkylarkTransitiveInfo(JavaSkylarkApiProvider.NAME,new JavaSkylarkApiProvider()).add(JavaNeverlinkInfoProvider.class,new JavaNeverlinkInfoProvider(androidCommon.isNeverLink())).add(ProguardSpecProvider.class,new ProguardSpecProvider(transitiveProguardConfigs)).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,transitiveProguardConfigs);
    Artifact aarOut=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_AAR);
    Artifact classesJar=mergeJarsFromSrcs(ruleContext,ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_CLASS_JAR));
    ResourceContainer primaryResources;
    if (AndroidCommon.getAndroidResources(ruleContext) != null) {
      primaryResources=Iterables.getOnlyElement(AndroidCommon.getAndroidResources(ruleContext).getTransitiveAndroidResources());
      Aar aar=new Aar(aarOut,primaryResources.getManifest());
      targetBuilder.add(AndroidLibraryAarProvider.class,new AndroidLibraryAarProvider(aar,transitiveAars.add(aar).build()));
    }
 else {
      ApplicationManifest applicationManifest=ApplicationManifest.generatedManifest(ruleContext);
      Artifact apk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK);
      String javaPackage;
      if (apk.getExecPath().getFirstSegment(ImmutableSet.of("java","javatests")) != PathFragment.INVALID_SEGMENT) {
        javaPackage=JavaUtil.getJavaPackageName(apk.getExecPath());
      }
 else {
        javaPackage=apk.getRootRelativePath().getPathString().replace('/','.');
      }
      if (ruleContext.attributes().isAttributeValueExplicitlySpecified("custom_package")) {
        javaPackage=ruleContext.attributes().get("custom_package",Type.STRING);
      }
      primaryResources=new ResourceContainer(ruleContext.getLabel(),javaPackage,null,false,apk,applicationManifest.getManifest(),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_JAVA_SOURCE_JAR),ImmutableList.<Artifact>of(),ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),ImmutableList.<PathFragment>of(),ruleContext.attributes().get("exports_manifest",Type.BOOLEAN),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),null);
      primaryResources=new AndroidResourcesProcessorBuilder(ruleContext).setApkOut(apk).setRTxtOut(primaryResources.getRTxt()).setSourceJarOut(primaryResources.getJavaSourceJar()).setJavaPackage(primaryResources.getJavaPackage()).withPrimary(primaryResources).withDependencies(transitiveResources).setDebug(ruleContext.getConfiguration().getCompilationMode() != CompilationMode.OPT).setWorkingDirectory(ruleContext.getUniqueDirectory("_resources")).build(ruleContext);
      targetBuilder.add(AndroidLibraryAarProvider.class,new AndroidLibraryAarProvider(null,transitiveAars.build()));
    }
    new AarGeneratorBuilder(ruleContext).withPrimary(primaryResources).withManifest(primaryResources.getManifest()).withRtxt(primaryResources.getRTxt()).withClasses(classesJar).setAAROut(aarOut).build(ruleContext);
    return targetBuilder.build();
  }
}
