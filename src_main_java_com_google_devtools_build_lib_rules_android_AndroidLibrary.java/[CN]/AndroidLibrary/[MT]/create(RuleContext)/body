{
  JavaSemantics javaSemantics=createJavaSemantics();
  AndroidSemantics androidSemantics=createAndroidSemantics();
  if (!AndroidSdkProvider.verifyPresence(ruleContext)) {
    return null;
  }
  List<? extends TransitiveInfoCollection> deps=ruleContext.getPrerequisites("deps",Mode.TARGET);
  checkResourceInlining(ruleContext);
  NestedSetBuilder<Aar> transitiveAars=collectTransitiveAars(ruleContext);
  NestedSet<LinkerInput> transitiveNativeLibraries=AndroidCommon.collectTransitiveNativeLibraries(deps);
  NestedSet<Artifact> transitiveProguardConfigs=new ProguardLibrary(ruleContext).collectProguardSpecs();
  JavaCommon javaCommon=new JavaCommon(ruleContext,javaSemantics);
  AndroidCommon androidCommon=new AndroidCommon(javaCommon);
  boolean definesLocalResources=LocalResourceContainer.definesAndroidResources(ruleContext.attributes());
  if (definesLocalResources && !LocalResourceContainer.validateRuleContext(ruleContext)) {
    return null;
  }
  final ResourceApk resourceApk;
  if (definesLocalResources) {
    ApplicationManifest applicationManifest=androidSemantics.getManifestForRule(ruleContext);
    try {
      resourceApk=applicationManifest.packWithDataAndResources(ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK),ruleContext,ResourceDependencies.fromRuleDeps(ruleContext),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_SYMBOLS_TXT),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),null,null,null,false,null);
    }
 catch (    RuleConfigurationException e) {
      return null;
    }
  }
 else {
    resourceApk=ResourceApk.fromTransitiveResources(ResourceDependencies.fromRuleResourceAndDeps(ruleContext));
  }
  JavaTargetAttributes javaTargetAttributes=androidCommon.init(javaSemantics,androidSemantics,resourceApk,false,true);
  if (javaTargetAttributes == null) {
    return null;
  }
  Artifact classesJar=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_CLASS_JAR);
  Artifact aarOut=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_LIBRARY_AAR);
  final ResourceContainer primaryResources;
  final Aar aar;
  if (definesLocalResources) {
    primaryResources=resourceApk.getPrimaryResource();
    ApplicationManifest applicationManifest=androidSemantics.getManifestForRule(ruleContext);
    aar=new Aar(aarOut,applicationManifest.getManifest());
    transitiveAars.add(aar);
  }
 else   if (AndroidCommon.getAndroidResources(ruleContext) != null) {
    primaryResources=Iterables.getOnlyElement(AndroidCommon.getAndroidResources(ruleContext).getDirectAndroidResources());
    aar=new Aar(aarOut,primaryResources.getManifest());
    transitiveAars.add(aar);
  }
 else {
    aar=null;
    ApplicationManifest applicationManifest=ApplicationManifest.generatedManifest(ruleContext);
    Artifact apk=ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_RESOURCES_APK);
    String javaPackage=AndroidCommon.getJavaPackage(ruleContext);
    ResourceContainer resourceContainer=new ResourceContainer(ruleContext.getLabel(),javaPackage,null,false,apk,applicationManifest.getManifest(),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_JAVA_SOURCE_JAR),ImmutableList.<Artifact>of(),ImmutableList.<Artifact>of(),ImmutableList.<PathFragment>of(),ImmutableList.<PathFragment>of(),ruleContext.attributes().get("exports_manifest",Type.BOOLEAN),ruleContext.getImplicitOutputArtifact(AndroidRuleClasses.ANDROID_R_TXT),null);
    primaryResources=new AndroidResourcesProcessorBuilder(ruleContext).setApkOut(apk).setRTxtOut(resourceContainer.getRTxt()).setSourceJarOut(resourceContainer.getJavaSourceJar()).setJavaPackage(resourceContainer.getJavaPackage()).withPrimary(resourceContainer).withDependencies(resourceApk.getResourceDependencies()).setDebug(ruleContext.getConfiguration().getCompilationMode() != CompilationMode.OPT).build(ruleContext);
  }
  new AarGeneratorBuilder(ruleContext).withPrimary(primaryResources).withManifest(primaryResources.getManifest()).withRtxt(primaryResources.getRTxt()).withClasses(classesJar).setAAROut(aarOut).build(ruleContext);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext);
  androidCommon.addTransitiveInfoProviders(builder,androidSemantics,resourceApk,null,ImmutableList.<Artifact>of());
  androidSemantics.addTransitiveInfoProviders(builder,ruleContext,javaCommon,androidCommon,null);
  return builder.add(AndroidNativeLibraryProvider.class,new AndroidNativeLibraryProvider(transitiveNativeLibraries)).addSkylarkTransitiveInfo(JavaSkylarkApiProvider.NAME,new JavaSkylarkApiProvider()).add(JavaNeverlinkInfoProvider.class,new JavaNeverlinkInfoProvider(androidCommon.isNeverLink())).add(JavaSourceInfoProvider.class,JavaSourceInfoProvider.fromJavaTargetAttributes(javaTargetAttributes,javaSemantics)).add(JavaSourceJarsProvider.class,androidCommon.getJavaSourceJarsProvider()).add(AndroidCcLinkParamsProvider.class,new AndroidCcLinkParamsProvider(androidCommon.getCcLinkParamsStore())).add(ProguardSpecProvider.class,new ProguardSpecProvider(transitiveProguardConfigs)).addOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL,transitiveProguardConfigs).add(AndroidLibraryAarProvider.class,new AndroidLibraryAarProvider(aar,transitiveAars.build())).build();
}
