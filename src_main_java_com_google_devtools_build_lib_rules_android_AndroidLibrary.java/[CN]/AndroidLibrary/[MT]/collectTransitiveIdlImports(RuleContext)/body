{
  NestedSetBuilder<String> rootsBuilder=NestedSetBuilder.naiveLinkOrder();
  NestedSetBuilder<Artifact> importsBuilder=NestedSetBuilder.naiveLinkOrder();
  for (  AndroidIdlProvider dep : ruleContext.getPrerequisites("deps",Mode.TARGET,AndroidIdlProvider.class)) {
    rootsBuilder.addTransitive(dep.getTransitiveIdlImportRoots());
    importsBuilder.addTransitive(dep.getTransitiveIdlImports());
  }
  Collection<Artifact> idlImports=getIdlImports(ruleContext);
  if (!hasExplicitlySpecifiedIdlImportRoot(ruleContext)) {
    for (    Artifact idlImport : idlImports) {
      PathFragment javaRoot=JavaUtil.getJavaRoot(idlImport.getExecPath());
      if (javaRoot == null) {
        ruleContext.ruleError("Cannot determine java/javatests root for import " + idlImport.getExecPathString());
      }
 else {
        rootsBuilder.add(javaRoot.toString());
      }
    }
  }
 else {
    PathFragment pkgFragment=ruleContext.getLabel().getPackageFragment();
    Set<PathFragment> idlImportRoots=new HashSet<>();
    for (    Artifact idlImport : idlImports) {
      idlImportRoots.add(idlImport.getRoot().getExecPath().getRelative(pkgFragment).getRelative(getIdlImportRoot(ruleContext)));
    }
    for (    PathFragment idlImportRoot : idlImportRoots) {
      rootsBuilder.add(idlImportRoot.toString());
    }
  }
  importsBuilder.addAll(idlImports);
  return new AndroidIdlProvider(rootsBuilder.build(),importsBuilder.build());
}
