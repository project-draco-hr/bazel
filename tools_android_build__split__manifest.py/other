'Stubifies an AndroidManifest.xml.\n\nDoes the following things:\n  - Replaces the Application class in an Android manifest with a stub one\n  - Resolve string and integer resources to their default values\n\nusage: %s [input manifest] [output manifest] [file for old application class]\n\nWrites the old application class into the file designated by the third argument.\n'
import sys
from xml.etree import ElementTree
from third_party.py import gflags
gflags.DEFINE_string('main_manifest', None, 'The main manifest of the app')
gflags.DEFINE_string('split_manifest', None, 'The output manifest')
gflags.DEFINE_string('override_package', None, 'The Android package. Override the one specified in the input manifest')
gflags.DEFINE_string('split', None, 'The name of the split')
gflags.DEFINE_boolean('hascode', False, 'Whether this split .apk has dexes')
FLAGS = gflags.FLAGS
MANIFEST_TEMPLATE = '<?xml version="1.0" encoding="utf-8"?>\n<manifest\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    android:versionCode="%(version_code)s"\n    android:versionName="%(version_name)s"\n    package="%(package)s"\n    split="%(split)s">\n  <application android:hasCode="%(hascode)s">\n  </application>\n</manifest>\n'
if (__name__ == '__main__'):
    FLAGS(sys.argv)
    main()
