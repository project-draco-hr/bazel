{
  final String source=ruleContext.attributes().get("source_version",Type.STRING);
  final String target=ruleContext.attributes().get("target_version",Type.STRING);
  final NestedSet<Artifact> bootclasspath=getArtifactList("bootclasspath",ruleContext);
  final NestedSet<Artifact> extclasspath=getArtifactList("extclasspath",ruleContext);
  final String encoding=ruleContext.attributes().get("encoding",Type.STRING);
  final List<String> xlint=ruleContext.attributes().get("xlint",Type.STRING_LIST);
  final List<String> misc=ruleContext.getTokenizedStringListAttr("misc");
  final List<String> jvmOpts=ruleContext.attributes().get("jvm_opts",Type.STRING_LIST);
  Artifact javac=getArtifact("javac",ruleContext);
  Artifact javabuilder=getArtifact("javabuilder",ruleContext);
  Artifact headerCompiler=getArtifact("header_compiler",ruleContext);
  Artifact singleJar=getArtifact("singlejar",ruleContext);
  Artifact genClass=getArtifact("genclass",ruleContext);
  FilesToRunProvider ijar=getExecutable("ijar",ruleContext);
  final JavaToolchainData toolchainData=new JavaToolchainData(source,target,execPathsOrNull(bootclasspath),execPathsOrNull(extclasspath),encoding,xlint,misc,jvmOpts);
  final JavaConfiguration configuration=ruleContext.getFragment(JavaConfiguration.class);
  JavaToolchainProvider provider=new JavaToolchainProvider(toolchainData,bootclasspath,extclasspath,configuration.getDefaultJavacFlags(),javac,javabuilder,headerCompiler,singleJar,genClass,ijar);
  RuleConfiguredTargetBuilder builder=new RuleConfiguredTargetBuilder(ruleContext).add(JavaToolchainProvider.class,provider).setFilesToBuild(new NestedSetBuilder<Artifact>(Order.STABLE_ORDER).build()).add(RunfilesProvider.class,RunfilesProvider.simple(Runfiles.EMPTY));
  return builder.build();
}
