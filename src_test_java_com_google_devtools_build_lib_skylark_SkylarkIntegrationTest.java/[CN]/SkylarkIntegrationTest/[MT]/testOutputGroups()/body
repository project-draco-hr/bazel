{
  scratch.file("test/skylark/extension.bzl","def _impl(ctx):","  f = ctx.attr.dep.output_group('_hidden_top_level" + INTERNAL_SUFFIX + "')","  return struct(result = f, ","               output_groups = { 'my_group' : f })","my_rule = rule(implementation = _impl,","    attrs = { 'dep' : attr.label() })");
  scratch.file("test/skylark/BUILD","load('/test/skylark/extension',  'my_rule')","cc_binary(name = 'lib', data = ['a.txt'])","my_rule(name='my', dep = ':lib')");
  NestedSet<Artifact> hiddenTopLevelArtifacts=getConfiguredTarget("//test/skylark:lib").getProvider(OutputGroupProvider.class).getOutputGroup(OutputGroupProvider.HIDDEN_TOP_LEVEL);
  ConfiguredTarget myTarget=getConfiguredTarget("//test/skylark:my");
  SkylarkNestedSet result=(SkylarkNestedSet)myTarget.getProvider(SkylarkProviders.class).getValue("result");
  assertThat(result.getSet(Artifact.class)).containsExactlyElementsIn(hiddenTopLevelArtifacts);
  assertThat(myTarget.getProvider(OutputGroupProvider.class).getOutputGroup("my_group")).containsExactlyElementsIn(hiddenTopLevelArtifacts);
}
