{
  scratch.file("test/skylark/extension.bzl","def custom_rule_impl(ctx):","  return struct(instrumented_files=struct(","      extensions = ['txt'],","      source_attributes = ['attr1'],","      dependency_attributes = ['attr2']))","","custom_rule = rule(implementation = custom_rule_impl,","  attrs = {","      'attr1': attr.label_list(mandatory = True, allow_files=True),","      'attr2': attr.label_list(mandatory = True)})");
  scratch.file("test/skylark/BUILD","load('/test/skylark/extension', 'custom_rule')","","java_library(name='jl', srcs = [':A.java'])","custom_rule(name = 'cr', attr1 = [':a.txt', ':a.random'], attr2 = [':jl'])");
  useConfiguration("--nocollect_code_coverage");
  ConfiguredTarget target=getConfiguredTarget("//test/skylark:cr");
  assertEquals("//test/skylark:cr",target.getLabel().toString());
  InstrumentedFilesProvider provider=target.getProvider(InstrumentedFilesProvider.class);
  assertWithMessage("InstrumentedFilesProvider should be set.").that(provider).isNotNull();
  assertThat(ActionsTestUtil.baseArtifactNames(provider.getInstrumentedFiles())).isEmpty();
}
