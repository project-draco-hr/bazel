{
  reporter.removeHandler(failFastHandler);
  String expectedTrace=Joiner.on("\n").join("Traceback (most recent call last):","\tFile \"/workspace/test/skylark/BUILD\", line 3","\t\tcustom_rule(name = 'cr')","\tFile \"/workspace/test/skylark/extension.bzl\", line 5, in custom_rule_impl","\t\tfoo()","\tFile \"/workspace/test/skylark/extension.bzl\", line 8, in foo","\t\tbar(2, 4)","\tFile \"/workspace/test/skylark/extension.bzl\", line 10, in bar","\t\tfirst(x, y, z)","\tFile \"/workspace/test/skylark/functions.bzl\", line 2, in first","\t\tsecond(a, b)","\tFile \"/workspace/test/skylark/functions.bzl\", line 5, in second","\t\tthird('legal')","\tFile \"/workspace/test/skylark/functions.bzl\", line 7, in third",errorMessage);
  scratch.file("test/skylark/extension.bzl","load('/test/skylark/functions', 'first')","def custom_rule_impl(ctx):","  attr1 = ctx.files.attr1","  ftb = set(attr1)","  foo()","  return struct(provider_key = ftb)","def foo():","  bar(2,4)","def bar(x,y,z=1):","  first(x,y, z)","custom_rule = rule(implementation = custom_rule_impl,","  attrs = {'attr1': attr.label_list(mandatory=True, allow_files=True)})");
  scratch.file("test/skylark/functions.bzl","def first(a, b, c):","  second(a, b)","  third(b)","def second(a, b):","  third('legal')","def third(str):","  " + object + ".index(1)");
  scratch.file("test/skylark/BUILD","load('/test/skylark/extension', 'custom_rule')","","custom_rule(name = 'cr', attr1 = [':a.txt'])");
  getConfiguredTarget("//test/skylark:cr");
  assertContainsEvent(expectedTrace);
}
