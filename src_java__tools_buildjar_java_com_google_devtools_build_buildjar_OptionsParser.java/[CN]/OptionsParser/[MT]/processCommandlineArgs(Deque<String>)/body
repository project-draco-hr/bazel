{
  for (String arg=argQueue.pollFirst(); arg != null; arg=argQueue.pollFirst()) {
switch (arg) {
case "--javacopts":
      collectFlagArguments(javacOpts,argQueue,"--");
    break;
case "--direct_dependency":
{
    String jar=getArgument(argQueue,arg);
    String target=getArgument(argQueue,arg);
    directJarsToTargets.put(jar,target);
    break;
  }
case "--indirect_dependency":
{
  String jar=getArgument(argQueue,arg);
  String target=getArgument(argQueue,arg);
  indirectJarsToTargets.put(jar,target);
  break;
}
case "--strict_java_deps":
strictJavaDeps=getArgument(argQueue,arg);
break;
case "--output_deps":
outputDepsFile=getArgument(argQueue,arg);
break;
case "--output_deps_proto":
outputDepsProtoFile=getArgument(argQueue,arg);
break;
case "--deps_artifacts":
collectFlagArguments(depsArtifacts,argQueue,"--");
break;
case "--reduce_classpath":
strictClasspathMode=true;
break;
case "--sourcegendir":
sourceGenDir=getArgument(argQueue,arg);
break;
case "--generated_sources_output":
generatedSourcesOutputJar=getArgument(argQueue,arg);
break;
case "--sources":
collectFlagArguments(sourceFiles,argQueue,"-");
break;
case "--source_jars":
collectFlagArguments(sourceJars,argQueue,"-");
break;
case "--messages":
collectFlagArguments(messageFiles,argQueue,"-");
break;
case "--resources":
collectFlagArguments(resourceFiles,argQueue,"-");
break;
case "--resource_jars":
collectFlagArguments(resourceJars,argQueue,"-");
break;
case "--classpath_resources":
collectFlagArguments(rootResourceFiles,argQueue,"-");
break;
case "--classpath":
classPath=getArgument(argQueue,arg);
break;
case "--processorpath":
processorPath=getArgument(argQueue,arg);
break;
case "--processors":
collectProcessorArguments(processorNames,argQueue,"-");
break;
case "--output":
outputJar=getArgument(argQueue,arg);
break;
case "--classdir":
classDir=getArgument(argQueue,arg);
break;
case "--tempdir":
tempDir=getArgument(argQueue,arg);
break;
case "--gendir":
getArgument(argQueue,arg);
break;
case "--post_processor":
addExternalPostProcessor(argQueue,arg);
break;
case "--compress_jar":
compressJar=true;
break;
case "--rule_kind":
ruleKind=getArgument(argQueue,arg);
break;
case "--target_label":
targetLabel=getArgument(argQueue,arg);
break;
default :
throw new InvalidCommandLineException("unknown option : '" + arg + "'");
}
}
}
